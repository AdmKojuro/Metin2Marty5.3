; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30151.0 

	TITLE	C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Distribute\parser.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
PUBLIC	??0SArgumet@script@@QAE@ABU01@@Z		; script::SArgumet::SArgumet
PUBLIC	??1SArgumet@script@@QAE@XZ			; script::SArgumet::~SArgumet
PUBLIC	?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
PUBLIC	??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
PUBLIC	??1SCmd@script@@QAE@XZ				; script::SCmd::~SCmd
PUBLIC	??0Group@script@@QAE@XZ				; script::Group::Group
PUBLIC	??1Group@script@@QAE@XZ				; script::Group::~Group
PUBLIC	?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; script::Group::Create
PUBLIC	?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z		; script::Group::GetCmd
PUBLIC	?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z	; script::Group::ReadCmd
PUBLIC	?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; script::Group::GetError
PUBLIC	?SetError@Group@script@@AAEXPBD@Z		; script::Group::SetError
PUBLIC	?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ; script::Group::GetArg
PUBLIC	?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
PUBLIC	?LocaleString_FindChar@@YAPBDPBDHD@Z		; LocaleString_FindChar
PUBLIC	?LocaleString_RightTrim@@YAHPADH@Z		; LocaleString_RightTrim
PUBLIC	?LocaleString_RightTrim@@YAXPAD@Z		; LocaleString_RightTrim
PUBLIC	?OLD_rtrim@@YAXPAD@Z				; OLD_rtrim
PUBLIC	?LocaleString_Skip@@YAPBDKPBD@Z			; LocaleString_Skip
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
PUBLIC	??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@ ; `string'
PUBLIC	??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@ ; `string'
PUBLIC	??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@ ; `string'
PUBLIC	??_C@_0BB@DGGADPCI@no?5argument?5name@		; `string'
PUBLIC	??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@ ; `string'
PUBLIC	??_C@_06MJINCFFA@LETTER@			; `string'
PUBLIC	??_C@_05MFEJDJP@value@				; `string'
PUBLIC	??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@ ; `string'
PUBLIC	??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@ ; `string'
PUBLIC	??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@ ; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isspace:PROC
EXTRN	__imp__CharNextExA@12:PROC
EXTRN	__imp__CharPrevExA@16:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetDefaultCodePage@@YAKXZ:PROC			; GetDefaultCodePage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 01H DUP (?) ; `script::Group::Create'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@
CONST	SEGMENT
??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@ DB ' !! '
	DB	'PARSING ERROR - Unknown Arguments : %d, %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@
CONST	SEGMENT
??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@ DB ' !! '
	DB	'PARSING ERROR - Buffer Overflow : %d, %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@
CONST	SEGMENT
??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@ DB ' !! '
	DB	'PARSING ERROR - Syntax Error : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFEJDJP@value@
CONST	SEGMENT
??_C@_05MFEJDJP@value@ DB 'value', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJINCFFA@LETTER@
CONST	SEGMENT
??_C@_06MJINCFFA@LETTER@ DB 'LETTER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@
CONST	SEGMENT
??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@ DB 'Source file has no'
	DB	' content', 00H				; `string'
CONST	ENDS
;	COMDAT ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
_DATA	SEGMENT
?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A DB 014H DUP (?)
	DD	0fH					; `script::Group::Create'::`2'::stLetter
_DATA	ENDS
;	COMDAT ??_C@_0BB@DGGADPCI@no?5argument?5name@
CONST	SEGMENT
??_C@_0BB@DGGADPCI@no?5argument?5name@ DB 'no argument name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@
CONST	SEGMENT
??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@ DB 'argument nam'
	DB	'e overflow: must be shorter than 32 letters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@
CONST	SEGMENT
??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@ DB 'argument val'
	DB	'ue overflow: must be shorter than 64 letters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@
CONST	SEGMENT
??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@ DB 'Infinite loop '
	DB	'in LocaleString_Skip [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
__ehfuncinfo$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z$1
__ehfuncinfo$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$1
__ehfuncinfo$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z$0
__ehfuncinfo$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$2
__ehfuncinfo$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z$1
__ehfuncinfo$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$3
__ehfuncinfo$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$3
__ehfuncinfo$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$10
	DD	02H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$2
	DD	04H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$3
	DD	06H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$4
	DD	07H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$15
	DD	03H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$16
	DD	02H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	05H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$24
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	07H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Group@script@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Group@script@@QAE@XZ$0
__ehfuncinfo$??0Group@script@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Group@script@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SCmd@script@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@ABU01@@Z$1
__ehfuncinfo$??0SCmd@script@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SCmd@script@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SCmd@script@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@XZ$0
__ehfuncinfo$??0SCmd@script@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SCmd@script@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z$1
__ehfuncinfo$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SArgumet@script@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$1
__ehfuncinfo$??0SArgumet@script@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SArgumet@script@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
__ehfuncinfo$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT
; _this$ = ecx

; 731  :         if (_Added == 0) {

  00000	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00004	74 39		 je	 SHORT $LN3@List_node_

; 732  :             return;
; 733  :         }
; 734  : 
; 735  :         _Construct_in_place(_Head->_Prev, pointer{});

  00006	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00009	57		 push	 edi
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 736  :         _Construct_in_place(_Tail->_Next, pointer{});

  00011	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 737  :         pointer _Subject = _Head;

  0001a	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]

; 738  :         while (_Subject) {

  0001d	85 ff		 test	 edi, edi
  0001f	74 1d		 je	 SHORT $LN41@List_node_
  00021	56		 push	 esi
$LL2@List_node_:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00022	8b f7		 mov	 esi, edi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00024	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 316  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00026	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00029	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	6a 38		 push	 56			; 00000038H
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 738  :         while (_Subject) {

  00039	85 ff		 test	 edi, edi
  0003b	75 e5		 jne	 SHORT $LL2@List_node_
  0003d	5e		 pop	 esi
$LN41@List_node_:
  0003e	5f		 pop	 edi
$LN3@List_node_:

; 739  :             value_type::_Freenode(_Al, _STD exchange(_Subject, _Subject->_Next));
; 740  :         }
; 741  :     }

  0003f	c3		 ret	 0
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
_TEXT	SEGMENT
__Op$2 = -44						; size = 16
__Op$2$ = -28						; size = 4
tv1000 = -28						; size = 4
__Newnode$3 = -24					; size = 8
__Erasures$1$ = -20					; size = 4
__Myend$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__UFirst$ = 8						; size = 4
__ULast$ = 12						; size = 4
??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >, COMDAT
; _this$ = ecx

; 1256 :     void _Assign_cast(_UIter _UFirst, const _UIter _ULast) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1257 :         // assign [_UFirst, _ULast), casting existing nodes to _Target_ref
; 1258 :         const auto _Myend = _Mypair._Myval2._Myhead;

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	8b 7d 0c	 mov	 edi, DWORD PTR __ULast$[ebp]
  00030	8b d7		 mov	 edx, edi

; 1259 :         auto _Old         = _Myend->_Next;
; 1260 :         for (;;) { // attempt to reuse a node
; 1261 :             if (_Old == _Myend) { // no more nodes to reuse, append the rest

  00032	8b 75 08	 mov	 esi, DWORD PTR __UFirst$[ebp]
  00035	89 55 e4	 mov	 DWORD PTR tv1000[ebp], edx
  00038	8b 18		 mov	 ebx, DWORD PTR [eax]
  0003a	89 45 ec	 mov	 DWORD PTR __Myend$1$[ebp], eax
  0003d	3b d8		 cmp	 ebx, eax
  0003f	74 64		 je	 SHORT $LN204@Assign_cas
  00041	8b f8		 mov	 edi, eax
$LL2@Assign_cas:

; 1263 :                 _Op._Append_range_unchecked(_UFirst, _ULast);
; 1264 :                 _Op._Attach_at_end(_Mypair._Myval2);
; 1265 :                 return;
; 1266 :             }
; 1267 : 
; 1268 :             if (_UFirst == _ULast) {

  00043	3b f2		 cmp	 esi, edx
  00045	0f 84 ff 00 00
	00		 je	 $LN205@Assign_cas

; 43   :         return _Ptr->_Myval;

  0004b	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]

; 1269 :                 // input sequence was shorter than existing list, destroy and deallocate what's left
; 1270 :                 _Unchecked_erase(_Old, _Myend);
; 1271 :                 return;
; 1272 :             }
; 1273 : 
; 1274 :             // reuse the node
; 1275 :             reinterpret_cast<_Target_ref>(_Old->_Myval) = *_UFirst;

  0004e	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  00051	3b cf		 cmp	 ecx, edi
  00053	74 19		 je	 SHORT $LN178@Assign_cas

; 2273 :         if (_Large_string_engaged()) {

  00055	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00059	8b c7		 mov	 eax, edi
  0005b	72 02		 jb	 SHORT $LN183@Assign_cas

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0005d	8b 07		 mov	 eax, DWORD PTR [edi]
$LN183@Assign_cas:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0005f	ff 77 10	 push	 DWORD PTR [edi+16]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00068	8b 75 08	 mov	 esi, DWORD PTR __UFirst$[ebp]
  0006b	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
$LN178@Assign_cas:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 24   : 			strValue = c_arg.strValue;

  0006e	83 c7 18	 add	 edi, 24			; 00000018H
  00071	83 c1 18	 add	 ecx, 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  00074	3b cf		 cmp	 ecx, edi
  00076	74 16		 je	 SHORT $LN188@Assign_cas

; 2273 :         if (_Large_string_engaged()) {

  00078	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0007c	8b c7		 mov	 eax, edi
  0007e	72 02		 jb	 SHORT $LN193@Assign_cas

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00080	8b 07		 mov	 eax, DWORD PTR [edi]
$LN193@Assign_cas:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00082	ff 77 10	 push	 DWORD PTR [edi+16]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0008b	8b 75 08	 mov	 esi, DWORD PTR __UFirst$[ebp]
$LN188@Assign_cas:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1276 :             _Old                                        = _Old->_Next;

  0008e	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  00090	8b 7d ec	 mov	 edi, DWORD PTR __Myend$1$[ebp]

; 51   :         _Ptr = _Ptr->_Next;

  00093	8b 36		 mov	 esi, DWORD PTR [esi]

; 1259 :         auto _Old         = _Myend->_Next;
; 1260 :         for (;;) { // attempt to reuse a node
; 1261 :             if (_Old == _Myend) { // no more nodes to reuse, append the rest

  00095	8b 55 e4	 mov	 edx, DWORD PTR tv1000[ebp]

; 51   :         _Ptr = _Ptr->_Next;

  00098	89 75 08	 mov	 DWORD PTR __UFirst$[ebp], esi

; 1259 :         auto _Old         = _Myend->_Next;
; 1260 :         for (;;) { // attempt to reuse a node
; 1261 :             if (_Old == _Myend) { // no more nodes to reuse, append the rest

  0009b	3b df		 cmp	 ebx, edi
  0009d	75 a4		 jne	 SHORT $LL2@Assign_cas
  0009f	8b 7d 0c	 mov	 edi, DWORD PTR __ULast$[ebp]
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN204@Assign_cas:

; 616  :     explicit _List_node_insert_op2(_Alnode& _Al_) : _Al(_Al_), _Added(0) {}

  000a5	33 d2		 xor	 edx, edx
  000a7	89 4d d4	 mov	 DWORD PTR __Op$2[ebp], ecx
  000aa	89 55 d8	 mov	 DWORD PTR __Op$2[ebp+4], edx

; 1262 :                 _List_node_insert_op2<_Alnode> _Op(_Getal());

  000ad	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx

; 653  :         if (_First == _Last) { // throws

  000b0	3b 75 e4	 cmp	 esi, DWORD PTR tv1000[ebp]
  000b3	0f 84 e3 00 00
	00		 je	 $LN221@Assign_cas
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000b9	89 4d e8	 mov	 DWORD PTR __Newnode$3[ebp], ecx

; 79   :         return ::operator new(_Bytes);

  000bc	6a 38		 push	 56			; 00000038H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 657  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);

  000be	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000c2	89 55 ec	 mov	 DWORD PTR __Newnode$3[ebp+4], edx

; 79   :         return ::operator new(_Bytes);

  000c5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000ca	8b d8		 mov	 ebx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 43   :         return _Ptr->_Myval;

  000cc	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  000cf	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000d2	89 5d e4	 mov	 DWORD PTR __Op$2$[ebp], ebx

; 966  :         _Ptr = _Al.allocate(1);

  000d5	89 5d ec	 mov	 DWORD PTR __Newnode$3[ebp+4], ebx

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d8	51		 push	 ecx
  000d9	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  000dc	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 51   :         _Ptr = _Ptr->_Next;

  000e1	8b 36		 mov	 esi, DWORD PTR [esi]

; 663  :             _Tail               = _Newhead;

  000e3	8b cb		 mov	 ecx, ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  000e5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 664  :             ++_Added;

  000ec	ba 01 00 00 00	 mov	 edx, 1
  000f1	89 5d e0	 mov	 DWORD PTR __Op$2[ebp+12], ebx
  000f4	89 4d dc	 mov	 DWORD PTR __Op$2[ebp+8], ecx
  000f7	89 55 d8	 mov	 DWORD PTR __Op$2[ebp+4], edx

; 73   :         return _Ptr == _Right._Ptr;

  000fa	3b f7		 cmp	 esi, edi

; 668  :         while (_First != _Last) { // throws

  000fc	0f 84 a0 00 00
	00		 je	 $LN80@Assign_cas
$LL12@Assign_cas:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00102	6a 38		 push	 56			; 00000038H

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00104	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  0010b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00110	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 43   :         return _Ptr->_Myval;

  00113	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 235  :         return _Traits::_Allocate(_Bytes);

  00116	8b d8		 mov	 ebx, eax

; 966  :         _Ptr = _Al.allocate(1);

  00118	89 5d ec	 mov	 DWORD PTR __Newnode$3[ebp+4], ebx

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0011b	51		 push	 ecx
  0011c	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0011f	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 671  :             _Construct_in_place(_Tail->_Next, _Newnode._Ptr);

  00124	8b 45 dc	 mov	 eax, DWORD PTR __Op$2[ebp+8]

; 673  :             _Tail = _STD exchange(_Newnode._Ptr, pointer{});

  00127	8b cb		 mov	 ecx, ebx

; 674  :             ++_Added;

  00129	8b 55 d8	 mov	 edx, DWORD PTR __Op$2[ebp+4]
  0012c	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  0012d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 673  :             _Tail = _STD exchange(_Newnode._Ptr, pointer{});

  00134	89 4d dc	 mov	 DWORD PTR __Op$2[ebp+8], ecx
  00137	89 18		 mov	 DWORD PTR [eax], ebx
  00139	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 51   :         _Ptr = _Ptr->_Next;

  0013c	8b 36		 mov	 esi, DWORD PTR [esi]

; 674  :             ++_Added;

  0013e	89 55 d8	 mov	 DWORD PTR __Op$2[ebp+4], edx

; 73   :         return _Ptr == _Right._Ptr;

  00141	3b f7		 cmp	 esi, edi

; 668  :         while (_First != _Last) { // throws

  00143	75 bd		 jne	 SHORT $LL12@Assign_cas

; 617  : 
; 618  :     _List_node_insert_op2(const _List_node_insert_op2&) = delete;
; 619  :     _List_node_insert_op2& operator=(const _List_node_insert_op2&) = delete;
; 620  : 
; 621  :     template <class... _CArgT>
; 622  :     void _Append_n(size_type _Count, const _CArgT&... _Carg) {
; 623  :         // Append _Count elements constructed from _Carg
; 624  :         if (_Count <= 0) {
; 625  :             return;
; 626  :         }
; 627  : 
; 628  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);
; 629  :         if (_Added == 0) {
; 630  :             _Newnode._Allocate(); // throws
; 631  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _Carg...); // throws
; 632  :             _Head = _Newnode._Ptr;
; 633  :             _Tail = _Newnode._Ptr;
; 634  :             ++_Added;
; 635  :             --_Count;
; 636  :         }
; 637  : 
; 638  :         for (; 0 < _Count; --_Count) {
; 639  :             _Newnode._Allocate(); // throws
; 640  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _Carg...); // throws
; 641  :             _Construct_in_place(_Tail->_Next, _Newnode._Ptr);
; 642  :             _Construct_in_place(_Newnode._Ptr->_Prev, _Tail);
; 643  :             _Tail = _Newnode._Ptr;
; 644  :             ++_Added;
; 645  :         }
; 646  : 
; 647  :         _Newnode._Ptr = pointer{};
; 648  :     }
; 649  : 
; 650  :     template <class _InIt, class _Sentinel>
; 651  :     void _Append_range_unchecked(_InIt _First, const _Sentinel _Last) {
; 652  :         // Append the values in [_First, _Last)
; 653  :         if (_First == _Last) { // throws

  00145	8b 5d e4	 mov	 ebx, DWORD PTR __Op$2$[ebp]
  00148	eb 58		 jmp	 SHORT $LN80@Assign_cas
$LN205@Assign_cas:

; 1368 :         if (_First == _Last) {

  0014a	3b df		 cmp	 ebx, edi
  0014c	74 72		 je	 SHORT $LL138@Assign_cas

; 1369 :             return _Last;
; 1370 :         }
; 1371 : 
; 1372 :         const auto _Predecessor = _First->_Prev;

  0014e	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 1373 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1374 :         const auto _Head = _Mypair._Myval2._Myhead;
; 1375 :         if (_First == _Head->_Next && _Last == _Head) { // orphan all non-end iterators
; 1376 :             _Mypair._Myval2._Orphan_non_end();
; 1377 :         } else { // orphan erased iterators
; 1378 :             _Lockit _Lock(_LOCK_DEBUG);
; 1379 :             for (auto _Marked = _First; _Marked != _Last; _Marked = _Marked->_Next) { // mark erased nodes
; 1380 :                 _Marked->_Prev = nullptr;
; 1381 :             }
; 1382 : 
; 1383 :             _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;
; 1384 :             while (*_Pnext) {
; 1385 :                 _Iterator_base12** _Pnextnext = &(*_Pnext)->_Mynextiter;
; 1386 :                 if (static_cast<const_iterator&>(**_Pnext)._Ptr->_Prev) { // node still has a _Prev, skip
; 1387 :                     _Pnext = _Pnextnext;
; 1388 :                 } else { // orphan the iterator
; 1389 :                     (*_Pnext)->_Myproxy = nullptr;
; 1390 :                     *_Pnext             = *_Pnextnext;
; 1391 :                 }
; 1392 :             }
; 1393 : 
; 1394 :             // _Prev pointers not restored because we're about to delete the nodes of which they are a member anyway
; 1395 :         }
; 1396 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1397 : 
; 1398 :         // snip out the removed range
; 1399 :         _Predecessor->_Next = _Last;
; 1400 :         _Last->_Prev        = _Predecessor;
; 1401 : 
; 1402 :         // count and deallocate the removed nodes
; 1403 :         auto& _Al           = _Getal();
; 1404 :         size_type _Erasures = 0;

  00151	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Erasures$1$[ebp], 0
  00158	89 38		 mov	 DWORD PTR [eax], edi
  0015a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0015d	0f 1f 00	 npad	 3
$LL141@Assign_cas:

; 1405 :         do {
; 1406 :             const auto _Next = _First->_Next;

  00160	8b 33		 mov	 esi, DWORD PTR [ebx]

; 316  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00162	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00165	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0016a	6a 38		 push	 56			; 00000038H
  0016c	53		 push	 ebx
  0016d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1409 :             ++_Erasures;

  00172	8b 45 ec	 mov	 eax, DWORD PTR __Erasures$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00175	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1409 :             ++_Erasures;

  00178	40		 inc	 eax
  00179	8b de		 mov	 ebx, esi
  0017b	89 45 ec	 mov	 DWORD PTR __Erasures$1$[ebp], eax

; 1410 :         } while (_First != _Last);

  0017e	3b f7		 cmp	 esi, edi
  00180	75 de		 jne	 SHORT $LL141@Assign_cas

; 1411 : 
; 1412 :         _Mypair._Myval2._Mysize -= _Erasures;

  00182	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
  00185	29 47 04	 sub	 DWORD PTR [edi+4], eax

; 1277 :             ++_UFirst;
; 1278 :         }
; 1279 :     }

  00188	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00192	59		 pop	 ecx
  00193	5f		 pop	 edi
  00194	5e		 pop	 esi
  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 08 00	 ret	 8
$LN221@Assign_cas:

; 653  :         if (_First == _Last) { // throws

  0019c	8b 5d e0	 mov	 ebx, DWORD PTR __Op$2[ebp+12]
  0019f	8b 4d dc	 mov	 ecx, DWORD PTR __Op$2[ebp+8]
$LN80@Assign_cas:

; 706  :         _Attach_before(_List_data, _List_data._Myhead);

  001a2	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
  001a5	8b 37		 mov	 esi, DWORD PTR [edi]

; 686  :         if (_Local_added == 0) {

  001a7	85 d2		 test	 edx, edx
  001a9	74 15		 je	 SHORT $LL138@Assign_cas

; 687  :             return _Insert_before;
; 688  :         }
; 689  : 
; 690  :         const auto _Local_head   = _Head;
; 691  :         const auto _Local_tail   = _Tail;
; 692  :         const auto _Insert_after = _Insert_before->_Prev;

  001ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 693  : 
; 694  :         _Construct_in_place(_Local_head->_Prev, _Insert_after);

  001ae	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 695  :         _Insert_after->_Next = _Local_head;

  001b1	89 18		 mov	 DWORD PTR [eax], ebx

; 696  :         _Construct_in_place(_Local_tail->_Next, _Insert_before);

  001b3	89 31		 mov	 DWORD PTR [ecx], esi

; 697  :         _Insert_before->_Prev = _Local_tail;

  001b5	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 698  : 
; 699  :         _List_data._Mysize += _Local_added;

  001b8	01 57 04	 add	 DWORD PTR [edi+4], edx
  001bb	0f 1f 44 00 00	 npad	 5
$LL138@Assign_cas:

; 1277 :             ++_UFirst;
; 1278 :         }
; 1279 :     }

  001c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ca	59		 pop	 ecx
  001cb	5f		 pop	 edi
  001cc	5e		 pop	 esi
  001cd	5b		 pop	 ebx
  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR __Newnode$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 38		 push	 56			; 00000038H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 971  :             _Al.deallocate(_Ptr, 1);
; 972  :         }
; 973  :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 28		 push	 40			; 00000028H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 971  :             _Al.deallocate(_Ptr, 1);
; 972  :         }
; 973  :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Head$ = 12						; size = 4
??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT

; 322  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 323  :         _Head->_Prev->_Next = nullptr;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Head$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  00010	8b 36		 mov	 esi, DWORD PTR [esi]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00012	85 f6		 test	 esi, esi
  00014	74 26		 je	 SHORT $LN3@Free_non_h
  00016	57		 push	 edi
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@Free_non_h:

; 327  :             _Pnext = _Pnode->_Next;

  00020	8b 3e		 mov	 edi, DWORD PTR [esi]

; 316  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002a	6a 38		 push	 56			; 00000038H
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00035	8b f7		 mov	 esi, edi
  00037	85 ff		 test	 edi, edi
  00039	75 e5		 jne	 SHORT $LL4@Free_non_h
  0003b	5f		 pop	 edi
$LN3@Free_non_h:
  0003c	5e		 pop	 esi

; 328  :             _Freenode(_Al, _Pnode);
; 329  :         }
; 330  :     }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Head$ = 12						; size = 4
??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >, COMDAT

; 322  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 323  :         _Head->_Prev->_Next = nullptr;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Head$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  00010	8b 36		 mov	 esi, DWORD PTR [esi]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00012	85 f6		 test	 esi, esi
  00014	74 26		 je	 SHORT $LN3@Free_non_h
  00016	57		 push	 edi
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@Free_non_h:

; 327  :             _Pnext = _Pnode->_Next;

  00020	8b 3e		 mov	 edi, DWORD PTR [esi]

; 316  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1SCmd@script@@QAE@XZ
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002a	6a 28		 push	 40			; 00000028H
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00035	8b f7		 mov	 esi, edi
  00037	85 ff		 test	 edi, edi
  00039	75 e5		 jne	 SHORT $LL4@Free_non_h
  0003b	5f		 pop	 edi
$LN3@Free_non_h:
  0003c	5e		 pop	 esi

; 328  :             _Freenode(_Al, _Pnode);
; 329  :         }
; 330  :     }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??__FstLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ
text$yd	SEGMENT
??__FstLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ PROC ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter'', COMDAT

; 2286 :         return _BUF_SIZE <= _Myres;

  00000	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 2f		 jb	 SHORT $LN15@dynamic
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN25@dynamic

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0001f	83 c2 23	 add	 edx, 35			; 00000023H
  00022	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN25@dynamic:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	52		 push	 edx
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, 15 ; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A, 0
  00055	c3		 ret	 0
??__FstLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ENDP ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_Skip@@YAPBDKPBD@Z
_TEXT	SEGMENT
_codePage$ = 8						; size = 4
_cur$ = 12						; size = 4
?LocaleString_Skip@@YAPBDKPBD@Z PROC			; LocaleString_Skip, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 122  : 	int loopCount = 0;
; 123  : 
; 124  : 	while (*cur)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _cur$[ebp]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000e	74 59		 je	 SHORT $LN7@LocaleStri
  00010	8b 5d 08	 mov	 ebx, DWORD PTR _codePage$[ebp]
$LL2@LocaleStri:

; 125  : 	{
; 126  : 		if (++loopCount > 9216)

  00013	47		 inc	 edi
  00014	81 ff 00 24 00
	00		 cmp	 edi, 9216		; 00002400H
  0001a	7f 3f		 jg	 SHORT $LN12@LocaleStri

; 129  : 			break;
; 130  : 		}
; 131  : 
; 132  : 		const char* next = CharNextExA(codePage, cur, 0);

  0001c	6a 00		 push	 0
  0001e	56		 push	 esi
  0001f	53		 push	 ebx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12
  00026	8b c8		 mov	 ecx, eax

; 133  : 		int cur_len = next - cur;

  00028	2b c6		 sub	 eax, esi

; 134  : 		if (cur_len > 1)

  0002a	83 f8 01	 cmp	 eax, 1
  0002d	7e 04		 jle	 SHORT $LN5@LocaleStri

; 135  : 		{
; 136  : 			cur = next;

  0002f	8b f1		 mov	 esi, ecx

; 137  : 		}

  00031	eb 1c		 jmp	 SHORT $LN9@LocaleStri
$LN5@LocaleStri:

; 138  : 		else if (1 == cur_len)

  00033	75 34		 jne	 SHORT $LN7@LocaleStri

; 139  : 		{
; 140  : 			if (!isspace((unsigned char)*cur) && *cur != '\n' && *cur != '\r')

  00035	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _isspace
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c0		 test	 eax, eax
  00043	75 0a		 jne	 SHORT $LN9@LocaleStri
  00045	8a 06		 mov	 al, BYTE PTR [esi]
  00047	3c 0a		 cmp	 al, 10			; 0000000aH
  00049	74 04		 je	 SHORT $LN9@LocaleStri
  0004b	3c 0d		 cmp	 al, 13			; 0000000dH
  0004d	75 1a		 jne	 SHORT $LN7@LocaleStri
$LN9@LocaleStri:

; 122  : 	int loopCount = 0;
; 123  : 
; 124  : 	while (*cur)

  0004f	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00052	75 bf		 jne	 SHORT $LL2@LocaleStri

; 141  : 				return cur;
; 142  : 		}
; 143  : 		else
; 144  : 		{
; 145  : 			break;
; 146  : 		}
; 147  : 	}
; 148  : 	return cur;
; 149  : }

  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN12@LocaleStri:

; 127  : 		{
; 128  : 			TraceError("Infinite loop in LocaleString_Skip [%s]", cur);

  0005b	56		 push	 esi
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@
  00061	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00066	83 c4 08	 add	 esp, 8
$LN7@LocaleStri:

; 141  : 				return cur;
; 142  : 		}
; 143  : 		else
; 144  : 		{
; 145  : 			break;
; 146  : 		}
; 147  : 	}
; 148  : 	return cur;
; 149  : }

  00069	5f		 pop	 edi
  0006a	8b c6		 mov	 eax, esi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?LocaleString_Skip@@YAPBDKPBD@Z ENDP			; LocaleString_Skip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?OLD_rtrim@@YAXPAD@Z
_TEXT	SEGMENT
_codePage$1$ = 8					; size = 4
_base$ = 8						; size = 4
?OLD_rtrim@@YAXPAD@Z PROC				; OLD_rtrim, COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 79   : 	if (!base)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	0f 84 da 00 00
	00		 je	 $LN30@OLD_rtrim

; 80   : 		return;
; 81   : 
; 82   : 	DWORD codePage = GetDefaultCodePage();

  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00016	8b d0		 mov	 edx, eax
  00018	89 55 08	 mov	 DWORD PTR _codePage$1$[ebp], edx

; 83   : 
; 84   : 	if (949 == codePage || 936 == codePage)

  0001b	81 fa b5 03 00
	00		 cmp	 edx, 949		; 000003b5H
  00021	74 64		 je	 SHORT $LN9@OLD_rtrim
  00023	81 fa a8 03 00
	00		 cmp	 edx, 936		; 000003a8H
  00029	74 5c		 je	 SHORT $LN9@OLD_rtrim

; 96   : 		}
; 97   : 	}
; 98   : 	else
; 99   : 	{
; 100  : 		char* end = base + strlen(base);

  0002b	8b cf		 mov	 ecx, edi
  0002d	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL28@OLD_rtrim:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL28@OLD_rtrim
  00037	2b ce		 sub	 ecx, esi
  00039	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]

; 101  : 
; 102  : 		while (end != base)

  0003c	3b df		 cmp	 ebx, edi
  0003e	0f 84 a3 00 00
	00		 je	 $LN31@OLD_rtrim
$LL4@OLD_rtrim:

; 103  : 		{
; 104  : 			char* prev = CharPrevExA(codePage, base, end, 0);

  00044	6a 00		 push	 0
  00046	53		 push	 ebx
  00047	57		 push	 edi
  00048	52		 push	 edx
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  0004f	8b f0		 mov	 esi, eax

; 105  : 
; 106  : 			int prev_len = end - prev;

  00051	2b de		 sub	 ebx, esi

; 107  : 			if (prev_len != 1)

  00053	83 fb 01	 cmp	 ebx, 1
  00056	0f 85 8b 00 00
	00		 jne	 $LN31@OLD_rtrim

; 108  : 				break;
; 109  : 
; 110  : 			if (!isspace((unsigned char)*prev) && *prev != '\n' && *prev != '\r')

  0005c	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _isspace
  00065	83 c4 04	 add	 esp, 4
  00068	85 c0		 test	 eax, eax
  0006a	75 0a		 jne	 SHORT $LN15@OLD_rtrim
  0006c	8a 06		 mov	 al, BYTE PTR [esi]
  0006e	3c 0a		 cmp	 al, 10			; 0000000aH
  00070	74 04		 je	 SHORT $LN15@OLD_rtrim
  00072	3c 0d		 cmp	 al, 13			; 0000000dH
  00074	75 71		 jne	 SHORT $LN31@OLD_rtrim
$LN15@OLD_rtrim:

; 101  : 
; 102  : 		while (end != base)

  00076	8b 55 08	 mov	 edx, DWORD PTR _codePage$1$[ebp]

; 111  : 				break;
; 112  : 
; 113  : 			*prev = '\0';
; 114  : 
; 115  : 			end = prev;

  00079	8b de		 mov	 ebx, esi
  0007b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0007e	3b f7		 cmp	 esi, edi
  00080	75 c2		 jne	 SHORT $LL4@OLD_rtrim
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	5f		 pop	 edi

; 116  : 		}
; 117  : 	}
; 118  : }

  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
$LN9@OLD_rtrim:

; 85   : 	{
; 86   : 		char* end = base + strlen(base) - 1;

  00087	8b cf		 mov	 ecx, edi
  00089	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0008c	0f 1f 40 00	 npad	 4
$LL29@OLD_rtrim:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL29@OLD_rtrim
  00097	2b ca		 sub	 ecx, edx
  00099	8d 77 ff	 lea	 esi, DWORD PTR [edi-1]
  0009c	03 f1		 add	 esi, ecx

; 87   : 
; 88   : 		while (end != base)

  0009e	3b f7		 cmp	 esi, edi
  000a0	74 45		 je	 SHORT $LN31@OLD_rtrim
  000a2	8b 5d 08	 mov	 ebx, DWORD PTR _codePage$1$[ebp]
$LL2@OLD_rtrim:

; 89   : 		{
; 90   : 			if (!isnhspace((unsigned char)*end) && *end != '\n' && *end != '\r' || (end != base && *((unsigned char*)end - 1) > 0xa0))

  000a5	8a 0e		 mov	 cl, BYTE PTR [esi]
  000a7	8a c1		 mov	 al, cl
  000a9	24 e0		 and	 al, 224			; 000000e0H
  000ab	3c 90		 cmp	 al, 144			; 00000090H
  000ad	77 10		 ja	 SHORT $LN13@OLD_rtrim
  000af	0f b6 c1	 movzx	 eax, cl
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _isspace
  000b8	83 c4 04	 add	 esp, 4
  000bb	85 c0		 test	 eax, eax
  000bd	75 0e		 jne	 SHORT $LN27@OLD_rtrim
$LN13@OLD_rtrim:
  000bf	8a 06		 mov	 al, BYTE PTR [esi]
  000c1	3c 0a		 cmp	 al, 10			; 0000000aH
  000c3	74 04		 je	 SHORT $LN12@OLD_rtrim
  000c5	3c 0d		 cmp	 al, 13			; 0000000dH
  000c7	75 1e		 jne	 SHORT $LN31@OLD_rtrim
$LN12@OLD_rtrim:
  000c9	3b f7		 cmp	 esi, edi
  000cb	74 06		 je	 SHORT $LN10@OLD_rtrim
$LN27@OLD_rtrim:
  000cd	80 7e ff a0	 cmp	 BYTE PTR [esi-1], 160	; 000000a0H
  000d1	77 14		 ja	 SHORT $LN31@OLD_rtrim
$LN10@OLD_rtrim:

; 91   : 				break;
; 92   : 
; 93   : 			*end = '\0';
; 94   : 
; 95   : 			end = CharPrevExA(codePage, base, end, 0);

  000d3	6a 00		 push	 0
  000d5	56		 push	 esi
  000d6	57		 push	 edi
  000d7	53		 push	 ebx
  000d8	c6 06 00	 mov	 BYTE PTR [esi], 0
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  000e1	8b f0		 mov	 esi, eax
  000e3	3b f7		 cmp	 esi, edi
  000e5	75 be		 jne	 SHORT $LL2@OLD_rtrim
$LN31@OLD_rtrim:
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
$LN30@OLD_rtrim:
  000e9	5f		 pop	 edi

; 116  : 		}
; 117  : 	}
; 118  : }

  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
?OLD_rtrim@@YAXPAD@Z ENDP				; OLD_rtrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_RightTrim@@YAXPAD@Z
_TEXT	SEGMENT
_base$ = 8						; size = 4
?LocaleString_RightTrim@@YAXPAD@Z PROC			; LocaleString_RightTrim, COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 74   : 	LocaleString_RightTrim(base, strlen(base));

  00003	8b 55 08	 mov	 edx, DWORD PTR _base$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL3@LocaleStri:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@LocaleStri
  00017	2b c6		 sub	 eax, esi
  00019	50		 push	 eax
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi

; 75   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?LocaleString_RightTrim@@YAXPAD@Z ENDP			; LocaleString_RightTrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_RightTrim@@YAHPADH@Z
_TEXT	SEGMENT
_codePage$1$ = -4					; size = 4
_base$ = 8						; size = 4
_len$ = 12						; size = 4
?LocaleString_RightTrim@@YAHPADH@Z PROC			; LocaleString_RightTrim, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 45   : 	DWORD codePage = GetDefaultCodePage();

  00007	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 46   : 
; 47   : 	int pos = len;

  0000c	8b 75 0c	 mov	 esi, DWORD PTR _len$[ebp]
  0000f	8b c8		 mov	 ecx, eax
  00011	89 4d fc	 mov	 DWORD PTR _codePage$1$[ebp], ecx

; 48   : 
; 49   : 	while (pos > 0)

  00014	85 f6		 test	 esi, esi
  00016	7e 56		 jle	 SHORT $LN6@LocaleStri

; 45   : 	DWORD codePage = GetDefaultCodePage();

  00018	8b 45 08	 mov	 eax, DWORD PTR _base$[ebp]
  0001b	8d 1c 30	 lea	 ebx, DWORD PTR [eax+esi]
  0001e	66 90		 npad	 2
$LL2@LocaleStri:

; 50   : 	{
; 51   : 		char* cur = base + pos;
; 52   : 		char* prev = CharPrevExA(codePage, base, cur, 0);

  00020	6a 00		 push	 0
  00022	53		 push	 ebx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  0002b	8b f8		 mov	 edi, eax

; 53   : 
; 54   : 		int prev_len = cur - prev;

  0002d	8b cb		 mov	 ecx, ebx
  0002f	2b cf		 sub	 ecx, edi

; 55   : 		if (prev_len != 1)

  00031	83 f9 01	 cmp	 ecx, 1
  00034	75 2f		 jne	 SHORT $LN14@LocaleStri

; 56   : 			break;
; 57   : 
; 58   : 		if (!isspace((unsigned char)*prev) && *prev != '\n' && *prev != '\r')

  00036	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _isspace
  0003f	83 c4 04	 add	 esp, 4
  00042	85 c0		 test	 eax, eax
  00044	75 0a		 jne	 SHORT $LN5@LocaleStri
  00046	8a 07		 mov	 al, BYTE PTR [edi]
  00048	3c 0a		 cmp	 al, 10			; 0000000aH
  0004a	74 04		 je	 SHORT $LN5@LocaleStri
  0004c	3c 0d		 cmp	 al, 13			; 0000000dH
  0004e	75 11		 jne	 SHORT $LN9@LocaleStri
$LN5@LocaleStri:

; 59   : 			break;
; 60   : 
; 61   : 		*prev = '\0';
; 62   : 
; 63   : 		pos -= prev_len;

  00050	4e		 dec	 esi
  00051	c6 07 00	 mov	 BYTE PTR [edi], 0
  00054	4b		 dec	 ebx
  00055	85 f6		 test	 esi, esi
  00057	7e 15		 jle	 SHORT $LN6@LocaleStri

; 48   : 
; 49   : 	while (pos > 0)

  00059	8b 45 08	 mov	 eax, DWORD PTR _base$[ebp]
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _codePage$1$[ebp]
  0005f	eb bf		 jmp	 SHORT $LL2@LocaleStri
$LN9@LocaleStri:

; 64   : 	}
; 65   : 
; 66   : 	if (pos > 0)

  00061	85 f6		 test	 esi, esi
  00063	74 09		 je	 SHORT $LN6@LocaleStri
$LN14@LocaleStri:
  00065	5f		 pop	 edi

; 67   : 		return pos;

  00066	8b c6		 mov	 eax, esi

; 68   : 
; 69   : 	return 0;
; 70   : }

  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN6@LocaleStri:
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	33 c0		 xor	 eax, eax
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?LocaleString_RightTrim@@YAHPADH@Z ENDP			; LocaleString_RightTrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_FindChar@@YAPBDPBDHD@Z
_TEXT	SEGMENT
_codePage$1$ = -4					; size = 4
_base$ = 8						; size = 4
_len$ = 12						; size = 4
_test$ = 16						; size = 1
?LocaleString_FindChar@@YAPBDPBDHD@Z PROC		; LocaleString_FindChar, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 13   : 	if (!base)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  0000a	85 ff		 test	 edi, edi
  0000c	74 3f		 je	 SHORT $LN7@LocaleStri

; 14   : 		return NULL;
; 15   : 
; 16   : 	DWORD codePage = GetDefaultCodePage();

  0000e	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 17   : 
; 18   : 	int pos = 0;
; 19   : 	while (pos < len)

  00013	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp]
  00016	33 f6		 xor	 esi, esi
  00018	89 45 fc	 mov	 DWORD PTR _codePage$1$[ebp], eax
  0001b	85 db		 test	 ebx, ebx
  0001d	7e 2e		 jle	 SHORT $LN7@LocaleStri
  0001f	90		 npad	 1
$LL2@LocaleStri:

; 20   : 	{
; 21   : 		const char* cur = base + pos;
; 22   : 		const char* next = CharNextExA(codePage, cur, 0);

  00020	6a 00		 push	 0
  00022	03 fe		 add	 edi, esi
  00024	57		 push	 edi
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 23   : 		int cur_len = next - cur;

  0002c	2b c7		 sub	 eax, edi

; 24   : 		if (cur_len > 1)

  0002e	83 f8 01	 cmp	 eax, 1
  00031	7f 0e		 jg	 SHORT $LN8@LocaleStri

; 25   : 		{
; 26   : 			pos += cur_len;
; 27   : 		}
; 28   : 		else if (1 == cur_len)

  00033	75 18		 jne	 SHORT $LN7@LocaleStri

; 29   : 		{
; 30   : 			if (*cur == test)

  00035	8a 45 10	 mov	 al, BYTE PTR _test$[ebp]
  00038	38 07		 cmp	 BYTE PTR [edi], al
  0003a	74 1a		 je	 SHORT $LN12@LocaleStri

; 32   : 
; 33   : 			++pos;

  0003c	b8 01 00 00 00	 mov	 eax, 1
$LN8@LocaleStri:

; 17   : 
; 18   : 	int pos = 0;
; 19   : 	while (pos < len)

  00041	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  00044	03 f0		 add	 esi, eax
  00046	8b 45 fc	 mov	 eax, DWORD PTR _codePage$1$[ebp]
  00049	3b f3		 cmp	 esi, ebx
  0004b	7c d3		 jl	 SHORT $LL2@LocaleStri
$LN7@LocaleStri:
  0004d	5f		 pop	 edi

; 34   : 		}
; 35   : 		else
; 36   : 		{
; 37   : 			break;
; 38   : 		}
; 39   : 	}
; 40   : 	return NULL;
; 41   : }

  0004e	5e		 pop	 esi
  0004f	33 c0		 xor	 eax, eax
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN12@LocaleStri:

; 31   : 				return cur;

  00056	8b c7		 mov	 eax, edi
  00058	5f		 pop	 edi

; 34   : 		}
; 35   : 		else
; 36   : 		{
; 37   : 			break;
; 38   : 		}
; 39   : 	}
; 40   : 	return NULL;
; 41   : }

  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?LocaleString_FindChar@@YAPBDPBDHD@Z ENDP		; LocaleString_FindChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
_TEXT	SEGMENT
__Op$2 = -32						; size = 8
$T3 = -24						; size = 4
__Where$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z PROC ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back, COMDAT
; _this$ = ecx

; 1242 :     void push_back(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 1005 :         if (_Mysize == max_size()) {

  0002a	81 7e 04 66 66
	66 06		 cmp	 DWORD PTR [esi+4], 107374182 ; 06666666H

; 1243 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	89 45 ec	 mov	 DWORD PTR __Where$1$[ebp], eax

; 1005 :         if (_Mysize == max_size()) {

  00036	0f 84 bb 00 00
	00		 je	 $LN136@push_back
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0003c	89 75 e0	 mov	 DWORD PTR __Op$2[ebp], esi

; 79   :         return ::operator new(_Bytes);

  0003f	6a 28		 push	 40			; 00000028H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 582  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00048	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  0004f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00054	8b f8		 mov	 edi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 584  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00056	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 966  :         _Ptr = _Al.allocate(1);

  00059	89 7d e4	 mov	 DWORD PTR __Op$2[ebp+4], edi

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0005c	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4562 :         _My_data._Mysize = 0;

  00065	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0006c	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 38   : 		SCmd(const SCmd& c_cmd)

  00073	8d 58 18	 lea	 ebx, DWORD PTR [eax+24]
  00076	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0007a	6a 38		 push	 56			; 00000038H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 38   : 		SCmd(const SCmd& c_cmd)

  0007c	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 352  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0007f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00085	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0008c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00091	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1767 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00094	89 00		 mov	 DWORD PTR [eax], eax

; 1768 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00096	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1769 :         _Mypair._Myval2._Myhead = _Newhead;

  00099	89 03		 mov	 DWORD PTR [ebx], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  0009b	8b 5d 08	 mov	 ebx, DWORD PTR __Val$[ebp]
  0009e	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 38   : 		SCmd(const SCmd& c_cmd)

  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  000a5	3b cb		 cmp	 ecx, ebx
  000a7	74 13		 je	 SHORT $LN71@push_back

; 2286 :         return _BUF_SIZE <= _Myres;

  000a9	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  000ad	8b c3		 mov	 eax, ebx

; 2273 :         if (_Large_string_engaged()) {

  000af	72 02		 jb	 SHORT $LN76@push_back

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  000b1	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN76@push_back:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000b3	ff 73 10	 push	 DWORD PTR [ebx+16]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN71@push_back:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1075 :         if (this != _STD addressof(_Right)) {

  000bc	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 41   : 			argList = c_cmd.argList;

  000bf	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1075 :         if (this != _STD addressof(_Right)) {

  000c2	3b c8		 cmp	 ecx, eax
  000c4	74 0a		 je	 SHORT $LN81@push_back

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000c6	8b 00		 mov	 eax, DWORD PTR [eax]

; 1284 :         _Assign_cast<reference>(_Get_unwrapped(_First), _Get_unwrapped(_Last));

  000c8	50		 push	 eax
  000c9	ff 30		 push	 DWORD PTR [eax]
  000cb	e8 00 00 00 00	 call	 ??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN81@push_back:

; 597  :         const pointer _Insert_after = _Insert_before->_Prev;

  000d0	8b 4d ec	 mov	 ecx, DWORD PTR __Where$1$[ebp]

; 1010 :         ++_Mysize;

  000d3	ff 46 04	 inc	 DWORD PTR [esi+4]

; 597  :         const pointer _Insert_after = _Insert_before->_Prev;

  000d6	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 598  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  000d9	89 0f		 mov	 DWORD PTR [edi], ecx

; 599  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  000db	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 600  :         const auto _Result    = this->_Ptr;
; 601  :         this->_Ptr            = pointer{};
; 602  :         _Insert_before->_Prev = _Result;

  000de	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 603  :         _Insert_after->_Next  = _Result;

  000e1	89 38		 mov	 DWORD PTR [eax], edi

; 1244 :     }

  000e3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ed	59		 pop	 ecx
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 04 00	 ret	 4
$LN136@push_back:

; 1006 :             _Xlength_error("list too long");

  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  000fc	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN134@push_back:
  00101	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$1:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$2:
  00008	8b 4d e8	 mov	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$3:
  00010	8b 4d e8	 mov	 ecx, DWORD PTR $T3[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e9 00 00 00 00	 jmp	 ??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ENDP ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -268						; size = 8
_codePage$1$ = -260					; size = 4
__Ptr$1$ = -256						; size = 4
__Result$2$ = -252					; size = 4
_c_arg_base$GSCopy$1$ = -248				; size = 4
_pos$1$ = -244						; size = 4
_argList$GSCopy$1$ = -240				; size = 4
__Old_capacity$1$ = -236				; size = 4
__Ptr$1$ = -232						; size = 4
__Result$2$ = -232					; size = 4
_c$1$ = -225						; size = 1
_iCharLen$1$ = -224					; size = 4
_isValue$1$ = -217					; size = 1
$T3 = -216						; size = 48
$T4 = -216						; size = 48
$T5 = -168						; size = 24
$T6 = -168						; size = 24
$T7 = -144						; size = 24
$T8 = -144						; size = 24
_szValue$ = -120					; size = 65
_szName$ = -52						; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_arg_base$ = 8					; size = 4
_arg_len$ = 12						; size = 4
_argList$ = 16						; size = 4
?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z PROC ; script::Group::GetArg, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 45 08	 mov	 eax, DWORD PTR _c_arg_base$[ebp]

; 153  : 	char szName[32 + 1];
; 154  : 	char szValue[64 + 1];
; 155  : 
; 156  : 	int iNameLen = 0;
; 157  : 	int iValueLen = 0;
; 158  : 	int iCharLen = 0;
; 159  : 
; 160  : 	int pos = 0;

  00031	33 db		 xor	 ebx, ebx
  00033	8b 4d 10	 mov	 ecx, DWORD PTR _argList$[ebp]
  00036	33 f6		 xor	 esi, esi
  00038	89 85 08 ff ff
	ff		 mov	 DWORD PTR _c_arg_base$GSCopy$1$[ebp], eax
  0003e	33 ff		 xor	 edi, edi
  00040	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _argList$GSCopy$1$[ebp], ecx
  00046	89 9d 0c ff ff
	ff		 mov	 DWORD PTR _pos$1$[ebp], ebx

; 161  : 
; 162  : 	bool isValue = false;

  0004c	88 9d 27 ff ff
	ff		 mov	 BYTE PTR _isValue$1$[ebp], bl

; 163  : 
; 164  : 	DWORD codePage = GetDefaultCodePage();

  00052	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00057	8b c8		 mov	 ecx, eax
  00059	89 8d fc fe ff
	ff		 mov	 DWORD PTR _codePage$1$[ebp], ecx

; 165  : 
; 166  : 	while (pos < arg_len)

  0005f	39 5d 0c	 cmp	 DWORD PTR _arg_len$[ebp], ebx
  00062	0f 8e 72 07 00
	00		 jle	 $LN485@GetArg
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@GetArg:

; 167  : 	{
; 168  : 		const char* cur = c_arg_base + pos;

  00070	03 9d 08 ff ff
	ff		 add	 ebx, DWORD PTR _c_arg_base$GSCopy$1$[ebp]

; 169  : 		const char* next = CharNextExA(codePage, cur, 0);

  00076	6a 00		 push	 0
  00078	53		 push	 ebx
  00079	51		 push	 ecx
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 170  : 		iCharLen = next - cur;

  00080	2b c3		 sub	 eax, ebx
  00082	89 85 20 ff ff
	ff		 mov	 DWORD PTR _iCharLen$1$[ebp], eax

; 171  : 
; 172  : 		if (iCharLen > 1)

  00088	83 f8 01	 cmp	 eax, 1
  0008b	7e 71		 jle	 SHORT $LN4@GetArg

; 173  : 		{
; 174  : 			if (isValue)

  0008d	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR _isValue$1$[ebp], 0
  00094	74 34		 je	 SHORT $LN6@GetArg

; 175  : 			{
; 176  : 				if (iValueLen >= 64)

  00096	83 ff 40	 cmp	 edi, 64			; 00000040H
  00099	0f 8d c1 05 00
	00		 jge	 $LN507@GetArg

; 177  : 				{
; 178  : 					TraceError("argument value overflow: must be shorter than 64 letters");
; 179  : 					return false;
; 180  : 				}
; 181  : 
; 182  : 				memcpy(szValue + iValueLen, cur, iCharLen);

  0009f	50		 push	 eax
  000a0	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  000a3	03 c7		 add	 eax, edi
  000a5	53		 push	 ebx
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _memcpy

; 183  : 				iValueLen += iCharLen;

  000ac	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b5	03 f8		 add	 edi, eax

; 184  : 				szValue[iValueLen] = '\0';

  000b7	83 ff 41	 cmp	 edi, 65			; 00000041H
  000ba	0f 83 49 07 00
	00		 jae	 $LN34@GetArg
  000c0	c6 44 3d 88 00	 mov	 BYTE PTR _szValue$[ebp+edi], 0

; 185  : 			}

  000c5	e9 64 05 00 00	 jmp	 $LN21@GetArg
$LN6@GetArg:

; 186  : 			else
; 187  : 			{
; 188  : 				if (iNameLen >= 32)

  000ca	83 fe 20	 cmp	 esi, 32			; 00000020H
  000cd	0f 8d a1 05 00
	00		 jge	 $LN508@GetArg

; 189  : 				{
; 190  : 					TraceError("argument name overflow: must be shorter than 32 letters");
; 191  : 					return false;
; 192  : 				}
; 193  : 				memcpy(szName + iNameLen, cur, iCharLen);

  000d3	50		 push	 eax
  000d4	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  000d7	03 c6		 add	 eax, esi
  000d9	53		 push	 ebx
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _memcpy

; 194  : 				iNameLen += iCharLen;

  000e0	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e9	03 f0		 add	 esi, eax

; 195  : 				szName[iNameLen] = '\0';

  000eb	83 fe 21	 cmp	 esi, 33			; 00000021H
  000ee	0f 83 15 07 00
	00		 jae	 $LN34@GetArg
  000f4	c6 44 35 cc 00	 mov	 BYTE PTR _szName$[ebp+esi], 0

; 196  : 			}
; 197  : 		}

  000f9	e9 30 05 00 00	 jmp	 $LN21@GetArg
$LN4@GetArg:

; 198  : 		else if (iCharLen == 1)

  000fe	0f 85 84 05 00
	00		 jne	 $LN515@GetArg

; 199  : 		{
; 200  : 			const char c = *cur;

  00104	8a 03		 mov	 al, BYTE PTR [ebx]
  00106	88 85 1f ff ff
	ff		 mov	 BYTE PTR _c$1$[ebp], al

; 201  : 			if (c == '|')

  0010c	3c 7c		 cmp	 al, 124			; 0000007cH
  0010e	0f 85 9b 04 00
	00		 jne	 $LN12@GetArg

; 202  : 			{
; 203  : 				if (iNameLen == 0)

  00114	85 f6		 test	 esi, esi
  00116	0f 84 30 05 00
	00		 je	 $LN503@GetArg

; 207  : 				}
; 208  : 
; 209  : 				isValue = false;
; 210  : 
; 211  : 				iNameLen = LocaleString_RightTrim(szName, iNameLen);

  0011c	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  0011f	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR _isValue$1$[ebp], 0
  00126	56		 push	 esi
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim

; 212  : 				iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  0012d	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  00130	57		 push	 edi
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00137	8d 4d 88	 lea	 ecx, DWORD PTR _szValue$[ebp]

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0013a	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 212  : 				iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  00144	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00147	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00151	c7 85 6c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0015b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0015e	c6 85 58 ff ff
	ff 00		 mov	 BYTE PTR $T6[ebp], 0
$LL516@GetArg:

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00165	8a 01		 mov	 al, BYTE PTR [ecx]
  00167	41		 inc	 ecx
  00168	84 c0		 test	 al, al
  0016a	75 f9		 jne	 SHORT $LL516@GetArg
  0016c	2b ca		 sub	 ecx, edx

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0016e	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  00171	51		 push	 ecx
  00172	50		 push	 eax
  00173	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00179	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0017e	8d 4d cc	 lea	 ecx, DWORD PTR _szName$[ebp]

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00181	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 213  : 				argList.push_back(TArg(szName, szValue));

  0018b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00192	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4562 :         _My_data._Mysize = 0;

  00195	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0019c	c7 45 84 0f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001a3	c6 85 70 ff ff
	ff 00		 mov	 BYTE PTR $T8[ebp], 0
  001aa	66 0f 1f 44 00
	00		 npad	 6
$LL517@GetArg:

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  001b0	8a 01		 mov	 al, BYTE PTR [ecx]
  001b2	41		 inc	 ecx
  001b3	84 c0		 test	 al, al
  001b5	75 f9		 jne	 SHORT $LL517@GetArg
  001b7	2b ca		 sub	 ecx, edx

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  001b9	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  001bc	51		 push	 ecx
  001bd	50		 push	 eax
  001be	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  001c4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  001c9	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp], 0

; 4562 :         _My_data._Mysize = 0;

  001d3	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  001dd	c7 85 3c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001e7	c6 85 28 ff ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  001ee	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  001f3	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+24], 0

; 4562 :         _My_data._Mysize = 0;

  001fd	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+40], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00207	89 85 14 ff ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], eax
  0020d	89 85 54 ff ff
	ff		 mov	 DWORD PTR $T4[ebp+44], eax

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00213	c6 85 40 ff ff
	ff 00		 mov	 BYTE PTR $T4[ebp+24], 0

; 2273 :         if (_Large_string_engaged()) {

  0021a	83 7d 84 10	 cmp	 DWORD PTR $T8[ebp+20], 16 ; 00000010H
  0021e	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00224	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp]

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0022a	8b 7d 80	 mov	 edi, DWORD PTR $T8[ebp+16]

; 2273 :         if (_Large_string_engaged()) {

  0022d	0f 43 c1	 cmovae	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 11   : 		SArgumet(const std::string& c_stName, const std::string& c_stValue)

  00230	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00234	89 8d 00 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  0023a	89 85 18 ff ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00240	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  00243	77 2d		 ja	 SHORT $LN115@GetArg

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00245	57		 push	 edi
  00246	50		 push	 eax
  00247	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  0024d	89 bd 38 ff ff
	ff		 mov	 DWORD PTR $T4[ebp+16], edi

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 _memmove

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00259	c6 84 3d 28 ff
	ff ff 00	 mov	 BYTE PTR $T4[ebp+edi], 0

; 3217 :             return *this;

  00261	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp+44]
  00267	89 8d 14 ff ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx
  0026d	e9 8e 00 00 00	 jmp	 $LN525@GetArg
$LN115@GetArg:

; 4474 :         if (_New_size > max_size()) {

  00272	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00278	0f 87 86 05 00
	00		 ja	 $LN505@GetArg

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0027e	8b f7		 mov	 esi, edi
  00280	83 ce 0f	 or	 esi, 15			; 0000000fH
  00283	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00289	76 17		 jbe	 SHORT $LN132@GetArg

; 4456 :             return _Max;

  0028b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00290	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00295	50		 push	 eax
  00296	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0029b	83 c4 04	 add	 esp, 4
  0029e	8b d8		 mov	 ebx, eax
  002a0	eb 35		 jmp	 SHORT $LN139@GetArg
$LN132@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  002a2	83 fe 16	 cmp	 esi, 22			; 00000016H
  002a5	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  002aa	0f 42 f0	 cmovb	 esi, eax

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  002ad	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002b0	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  002b5	72 0d		 jb	 SHORT $LN140@GetArg

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  002bd	83 c4 04	 add	 esp, 4
  002c0	8b d8		 mov	 ebx, eax
  002c2	eb 13		 jmp	 SHORT $LN139@GetArg
$LN140@GetArg:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  002c4	85 c0		 test	 eax, eax
  002c6	74 0d		 je	 SHORT $LN141@GetArg

; 79   :         return ::operator new(_Bytes);

  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002ce	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  002d1	8b d8		 mov	 ebx, eax
  002d3	eb 02		 jmp	 SHORT $LN139@GetArg
$LN141@GetArg:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  002d5	33 db		 xor	 ebx, ebx
$LN139@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002d7	57		 push	 edi
  002d8	ff b5 18 ff ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  002de	89 bd 38 ff ff
	ff		 mov	 DWORD PTR $T4[ebp+16], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002e4	53		 push	 ebx

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  002e5	89 b5 3c ff ff
	ff		 mov	 DWORD PTR $T4[ebp+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002eb	e8 00 00 00 00	 call	 _memcpy
  002f0	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  002f6	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4496 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  002fa	89 9d 28 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], ebx
$LN525@GetArg:

; 2273 :         if (_Large_string_engaged()) {

  00300	8b 9d 58 ff ff
	ff		 mov	 ebx, DWORD PTR $T6[ebp]
  00306	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]

; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  0030c	8b bd 68 ff ff
	ff		 mov	 edi, DWORD PTR $T6[ebp+16]

; 2272 :         const value_type* _Result = _Bx._Buf;

  00312	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2273 :         if (_Large_string_engaged()) {

  00315	83 bd 6c ff ff
	ff 10		 cmp	 DWORD PTR $T6[ebp+20], 16 ; 00000010H
  0031c	89 9d 18 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ebx
  00322	0f 43 c3	 cmovae	 eax, ebx
  00325	89 85 04 ff ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  0032b	3b f9		 cmp	 edi, ecx
  0032d	77 2a		 ja	 SHORT $LN182@GetArg

; 2264 :         if (_Large_string_engaged()) {

  0032f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00332	89 bd 50 ff ff
	ff		 mov	 DWORD PTR $T4[ebp+40], edi

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00338	57		 push	 edi

; 2263 :         value_type* _Result = _Bx._Buf;

  00339	8d b5 40 ff ff
	ff		 lea	 esi, DWORD PTR $T4[ebp+24]

; 2264 :         if (_Large_string_engaged()) {

  0033f	0f 43 b5 40 ff
	ff ff		 cmovae	 esi, DWORD PTR $T4[ebp+24]

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00346	50		 push	 eax
  00347	56		 push	 esi
  00348	e8 00 00 00 00	 call	 _memmove
  0034d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00350	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 3217 :             return *this;

  00354	e9 f0 00 00 00	 jmp	 $LN194@GetArg
$LN182@GetArg:

; 4474 :         if (_New_size > max_size()) {

  00359	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  0035f	0f 87 9f 04 00
	00		 ja	 $LN505@GetArg

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00365	8b f7		 mov	 esi, edi
  00367	83 ce 0f	 or	 esi, 15			; 0000000fH
  0036a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00370	76 17		 jbe	 SHORT $LN199@GetArg

; 4456 :             return _Max;

  00372	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00377	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0037c	50		 push	 eax
  0037d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00382	83 c4 04	 add	 esp, 4
  00385	8b d8		 mov	 ebx, eax
  00387	eb 58		 jmp	 SHORT $LN206@GetArg
$LN199@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00389	8b d1		 mov	 edx, ecx
  0038b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00390	d1 ea		 shr	 edx, 1
  00392	2b c2		 sub	 eax, edx
  00394	3b c8		 cmp	 ecx, eax
  00396	76 17		 jbe	 SHORT $LN200@GetArg

; 4460 :             return _Max;

  00398	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0039d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  003a8	83 c4 04	 add	 esp, 4
  003ab	8b d8		 mov	 ebx, eax
  003ad	eb 32		 jmp	 SHORT $LN206@GetArg
$LN200@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  003af	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  003b2	3b f0		 cmp	 esi, eax
  003b4	0f 42 f0	 cmovb	 esi, eax

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  003b7	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  003bf	72 0d		 jb	 SHORT $LN207@GetArg

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  003c1	50		 push	 eax
  003c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  003c7	83 c4 04	 add	 esp, 4
  003ca	8b d8		 mov	 ebx, eax
  003cc	eb 13		 jmp	 SHORT $LN206@GetArg
$LN207@GetArg:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  003ce	85 c0		 test	 eax, eax
  003d0	74 0d		 je	 SHORT $LN208@GetArg

; 79   :         return ::operator new(_Bytes);

  003d2	50		 push	 eax
  003d3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003d8	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  003db	8b d8		 mov	 ebx, eax
  003dd	eb 02		 jmp	 SHORT $LN206@GetArg
$LN208@GetArg:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  003df	33 db		 xor	 ebx, ebx
$LN206@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003e1	57		 push	 edi
  003e2	ff b5 04 ff ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  003e8	89 bd 50 ff ff
	ff		 mov	 DWORD PTR $T4[ebp+40], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003ee	53		 push	 ebx

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  003ef	89 b5 54 ff ff
	ff		 mov	 DWORD PTR $T4[ebp+44], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003f5	e8 00 00 00 00	 call	 _memcpy

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  003fa	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00400	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00403	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  00407	83 f8 10	 cmp	 eax, 16			; 00000010H
  0040a	72 31		 jb	 SHORT $LN193@GetArg
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0040c	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp+24]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00412	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00415	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00417	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0041d	72 14		 jb	 SHORT $LN230@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0041f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00422	83 c2 23	 add	 edx, 35			; 00000023H
  00425	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00427	83 c0 fc	 add	 eax, -4			; fffffffcH
  0042a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0042d	0f 87 db 03 00
	00		 ja	 $LN492@GetArg
$LN230@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00433	52		 push	 edx
  00434	51		 push	 ecx
  00435	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0043a	83 c4 08	 add	 esp, 8
$LN193@GetArg:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 213  : 				argList.push_back(TArg(szName, szValue));

  0043d	89 9d 40 ff ff
	ff		 mov	 DWORD PTR $T4[ebp+24], ebx
  00443	8b 9d 18 ff ff
	ff		 mov	 ebx, DWORD PTR __Ptr$1$[ebp]
$LN194@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 964  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  00449	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _argList$GSCopy$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 213  : 				argList.push_back(TArg(szName, szValue));

  0044f	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1005 :         if (_Mysize == max_size()) {

  00453	81 78 04 24 49
	92 04		 cmp	 DWORD PTR [eax+4], 76695844 ; 04924924H

; 964  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  0045a	8b 38		 mov	 edi, DWORD PTR [eax]

; 1005 :         if (_Mysize == max_size()) {

  0045c	0f 84 98 03 00
	00		 je	 $LN506@GetArg
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00462	89 85 f4 fe ff
	ff		 mov	 DWORD PTR __Op$2[ebp], eax

; 79   :         return ::operator new(_Bytes);

  00468	6a 38		 push	 56			; 00000038H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 582  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0046a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0046e	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00478	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  0047d	8b f0		 mov	 esi, eax

; 79   :         return ::operator new(_Bytes);

  0047f	83 c4 04	 add	 esp, 4

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00482	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]

; 966  :         _Ptr = _Al.allocate(1);

  00488	89 b5 f8 fe ff
	ff		 mov	 DWORD PTR __Op$2[ebp+4], esi
  0048e	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00491	50		 push	 eax
  00492	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1010 :         ++_Mysize;

  00497	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _argList$GSCopy$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0049d	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR $T4[ebp+44]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 601  :         this->_Ptr            = pointer{};

  004a3	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 213  : 				argList.push_back(TArg(szName, szValue));

  004ad	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1010 :         ++_Mysize;

  004b1	ff 40 04	 inc	 DWORD PTR [eax+4]

; 597  :         const pointer _Insert_after = _Insert_before->_Prev;

  004b4	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 598  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  004b7	89 3e		 mov	 DWORD PTR [esi], edi

; 599  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  004b9	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 602  :         _Insert_before->_Prev = _Result;

  004bc	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 603  :         _Insert_after->_Next  = _Result;

  004bf	89 30		 mov	 DWORD PTR [eax], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004c1	83 fa 10	 cmp	 edx, 16			; 00000010H
  004c4	72 2f		 jb	 SHORT $LN317@GetArg
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004c6	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp+24]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004cc	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004cd	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004cf	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  004d5	72 14		 jb	 SHORT $LN327@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004d7	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  004da	83 c2 23	 add	 edx, 35			; 00000023H
  004dd	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004df	83 c0 fc	 add	 eax, -4			; fffffffcH
  004e2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004e5	0f 87 23 03 00
	00		 ja	 $LN492@GetArg
$LN327@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  004eb	52		 push	 edx
  004ec	51		 push	 ecx
  004ed	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004f2	83 c4 08	 add	 esp, 8
$LN317@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004f5	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR $T4[ebp+20]
  004fb	83 fa 10	 cmp	 edx, 16			; 00000010H
  004fe	72 2f		 jb	 SHORT $LN345@GetArg
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00500	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00506	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00507	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00509	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0050f	72 14		 jb	 SHORT $LN355@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00511	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00514	83 c2 23	 add	 edx, 35			; 00000023H
  00517	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00519	83 c0 fc	 add	 eax, -4			; fffffffcH
  0051c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0051f	0f 87 e9 02 00
	00		 ja	 $LN492@GetArg
$LN355@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00525	52		 push	 edx
  00526	51		 push	 ecx
  00527	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0052c	83 c4 08	 add	 esp, 8
$LN345@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0052f	8b 45 84	 mov	 eax, DWORD PTR $T8[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 213  : 				argList.push_back(TArg(szName, szValue));

  00532	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00536	83 f8 10	 cmp	 eax, 16			; 00000010H
  00539	72 31		 jb	 SHORT $LN372@GetArg
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0053b	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00541	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00544	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00546	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0054c	72 14		 jb	 SHORT $LN382@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0054e	8b 52 fc	 mov	 edx, DWORD PTR [edx-4]
  00551	83 c1 23	 add	 ecx, 35			; 00000023H
  00554	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00556	83 c0 fc	 add	 eax, -4			; fffffffcH
  00559	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0055c	0f 87 ac 02 00
	00		 ja	 $LN492@GetArg
$LN382@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00562	51		 push	 ecx
  00563	52		 push	 edx
  00564	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00569	83 c4 08	 add	 esp, 8
$LN372@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0056c	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 213  : 				argList.push_back(TArg(szName, szValue));

  00572	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00579	83 f8 10	 cmp	 eax, 16			; 00000010H
  0057c	72 2b		 jb	 SHORT $LN399@GetArg

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0057e	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00581	8b c3		 mov	 eax, ebx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00583	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00589	72 14		 jb	 SHORT $LN409@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0058b	8b 5b fc	 mov	 ebx, DWORD PTR [ebx-4]
  0058e	83 c1 23	 add	 ecx, 35			; 00000023H
  00591	2b c3		 sub	 eax, ebx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00593	83 c0 fc	 add	 eax, -4			; fffffffcH
  00596	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00599	0f 87 6f 02 00
	00		 ja	 $LN492@GetArg
$LN409@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0059f	51		 push	 ecx
  005a0	53		 push	 ebx
  005a1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005a6	83 c4 08	 add	 esp, 8
$LN399@GetArg:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 215  : 				iNameLen = 0;

  005a9	33 f6		 xor	 esi, esi

; 216  : 				iValueLen = 0;

  005ab	33 ff		 xor	 edi, edi

; 217  : 			}

  005ad	eb 79		 jmp	 SHORT $LN522@GetArg
$LN12@GetArg:

; 218  : 			else if (c == ';')

  005af	3c 3b		 cmp	 al, 59			; 0000003bH
  005b1	75 09		 jne	 SHORT $LN15@GetArg

; 219  : 			{
; 220  : 				isValue = true;

  005b3	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR _isValue$1$[ebp], 1

; 221  : 			}

  005ba	eb 6c		 jmp	 SHORT $LN522@GetArg
$LN15@GetArg:

; 222  : 			else if (!isValue && iNameLen == 0 && isspace((unsigned char)c))

  005bc	8a 8d 27 ff ff
	ff		 mov	 cl, BYTE PTR _isValue$1$[ebp]
  005c2	84 c9		 test	 cl, cl
  005c4	75 20		 jne	 SHORT $LN17@GetArg
  005c6	85 f6		 test	 esi, esi
  005c8	75 1c		 jne	 SHORT $LN17@GetArg
  005ca	0f b6 c0	 movzx	 eax, al
  005cd	50		 push	 eax
  005ce	e8 00 00 00 00	 call	 _isspace
  005d3	83 c4 04	 add	 esp, 4
  005d6	85 c0		 test	 eax, eax
  005d8	75 4e		 jne	 SHORT $LN522@GetArg
  005da	8a 85 1f ff ff
	ff		 mov	 al, BYTE PTR _c$1$[ebp]
  005e0	8a 8d 27 ff ff
	ff		 mov	 cl, BYTE PTR _isValue$1$[ebp]
$LN17@GetArg:

; 223  : 			{
; 224  : 			}
; 225  : 			else if (c == '\r' || c == '\n')

  005e6	3c 0d		 cmp	 al, 13			; 0000000dH
  005e8	74 3e		 je	 SHORT $LN522@GetArg
  005ea	3c 0a		 cmp	 al, 10			; 0000000aH
  005ec	74 3a		 je	 SHORT $LN522@GetArg

; 226  : 			{
; 227  : 			}
; 228  : 			else
; 229  : 			{
; 230  : 				if (isValue)

  005ee	84 c9		 test	 cl, cl
  005f0	74 1c		 je	 SHORT $LN22@GetArg

; 231  : 				{
; 232  : 					if (iValueLen >= 64)

  005f2	83 ff 40	 cmp	 edi, 64			; 00000040H
  005f5	7d 69		 jge	 SHORT $LN507@GetArg

; 236  : 					}
; 237  : 
; 238  : 					memcpy(szValue + iValueLen, cur, iCharLen);

  005f7	8a 03		 mov	 al, BYTE PTR [ebx]
  005f9	88 44 3d 88	 mov	 BYTE PTR _szValue$[ebp+edi], al

; 239  : 					iValueLen += iCharLen;

  005fd	47		 inc	 edi

; 240  : 					szValue[iValueLen] = '\0';

  005fe	83 ff 41	 cmp	 edi, 65			; 00000041H
  00601	0f 83 02 02 00
	00		 jae	 $LN34@GetArg
  00607	c6 44 3d 88 00	 mov	 BYTE PTR _szValue$[ebp+edi], 0

; 241  : 				}

  0060c	eb 1a		 jmp	 SHORT $LN522@GetArg
$LN22@GetArg:

; 242  : 				else
; 243  : 				{
; 244  : 					if (iNameLen >= 32)

  0060e	83 fe 20	 cmp	 esi, 32			; 00000020H
  00611	7d 61		 jge	 SHORT $LN508@GetArg

; 248  : 					}
; 249  : 					memcpy(szName + iNameLen, cur, iCharLen);

  00613	8a 03		 mov	 al, BYTE PTR [ebx]
  00615	88 44 35 cc	 mov	 BYTE PTR _szName$[ebp+esi], al

; 250  : 					iNameLen += iCharLen;

  00619	46		 inc	 esi

; 251  : 					szName[iNameLen] = '\0';

  0061a	83 fe 21	 cmp	 esi, 33			; 00000021H
  0061d	0f 83 e6 01 00
	00		 jae	 $LN34@GetArg
  00623	c6 44 35 cc 00	 mov	 BYTE PTR _szName$[ebp+esi], 0
$LN522@GetArg:

; 252  : 				}
; 253  : 			}
; 254  : 		}
; 255  : 		else
; 256  : 		{
; 257  : 			break;
; 258  : 		}
; 259  : 
; 260  : 		pos += iCharLen;

  00628	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
$LN21@GetArg:
  0062e	8b 9d 0c ff ff
	ff		 mov	 ebx, DWORD PTR _pos$1$[ebp]
  00634	03 d8		 add	 ebx, eax
  00636	89 9d 0c ff ff
	ff		 mov	 DWORD PTR _pos$1$[ebp], ebx
  0063c	3b 5d 0c	 cmp	 ebx, DWORD PTR _arg_len$[ebp]
  0063f	7d 47		 jge	 SHORT $LN515@GetArg

; 165  : 
; 166  : 	while (pos < arg_len)

  00641	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _codePage$1$[ebp]
  00647	e9 24 fa ff ff	 jmp	 $LL2@GetArg
$LN503@GetArg:

; 204  : 				{
; 205  : 					TraceError("no argument name");

  0064c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DGGADPCI@no?5argument?5name@
  00651	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00656	83 c4 04	 add	 esp, 4

; 206  : 					return false;

  00659	32 c0		 xor	 al, al
  0065b	e9 7c 01 00 00	 jmp	 $LN1@GetArg
$LN507@GetArg:

; 233  : 					{
; 234  : 						TraceError("argument value overflow: must be shorter than 64 letters");

  00660	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@
  00665	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0066a	83 c4 04	 add	 esp, 4

; 235  : 						return false;

  0066d	32 c0		 xor	 al, al
  0066f	e9 68 01 00 00	 jmp	 $LN1@GetArg
$LN508@GetArg:

; 245  : 					{
; 246  : 						TraceError("argument name overflow: must be shorter than 32 letters");

  00674	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@
  00679	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0067e	83 c4 04	 add	 esp, 4

; 247  : 						return false;

  00681	32 c0		 xor	 al, al
  00683	e9 54 01 00 00	 jmp	 $LN1@GetArg
$LN515@GetArg:

; 261  : 	}
; 262  : 
; 263  : 	if (iNameLen != 0 && iValueLen != 0)

  00688	85 f6		 test	 esi, esi
  0068a	0f 84 4a 01 00
	00		 je	 $LN485@GetArg
  00690	85 ff		 test	 edi, edi
  00692	0f 84 42 01 00
	00		 je	 $LN485@GetArg

; 264  : 	{
; 265  : 		iNameLen = LocaleString_RightTrim(szName, iNameLen);

  00698	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  0069b	56		 push	 esi
  0069c	50		 push	 eax
  0069d	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim

; 266  : 		iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  006a2	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  006a5	57		 push	 edi
  006a6	50		 push	 eax
  006a7	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  006ac	8d 4d 88	 lea	 ecx, DWORD PTR _szValue$[ebp]

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  006af	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 266  : 		iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  006b9	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  006bc	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  006c3	c7 45 84 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  006ca	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  006cd	c6 85 70 ff ff
	ff 00		 mov	 BYTE PTR $T7[ebp], 0
$LL518@GetArg:

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  006d4	8a 01		 mov	 al, BYTE PTR [ecx]
  006d6	41		 inc	 ecx
  006d7	84 c0		 test	 al, al
  006d9	75 f9		 jne	 SHORT $LL518@GetArg
  006db	2b ca		 sub	 ecx, edx

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  006dd	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  006e0	51		 push	 ecx
  006e1	50		 push	 eax
  006e2	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  006e8	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  006ed	8d 4d cc	 lea	 ecx, DWORD PTR _szName$[ebp]

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  006f0	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 267  : 		argList.push_back(TArg(szName, szValue));

  006fa	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00701	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 4562 :         _My_data._Mysize = 0;

  00704	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0070e	c7 85 6c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00718	c6 85 58 ff ff
	ff 00		 mov	 BYTE PTR $T5[ebp], 0
  0071f	90		 npad	 1
$LL519@GetArg:

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00720	8a 01		 mov	 al, BYTE PTR [ecx]
  00722	41		 inc	 ecx
  00723	84 c0		 test	 al, al
  00725	75 f9		 jne	 SHORT $LL519@GetArg
  00727	2b ca		 sub	 ecx, edx

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00729	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  0072c	51		 push	 ecx
  0072d	50		 push	 eax
  0072e	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00734	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 267  : 		argList.push_back(TArg(szName, szValue));

  00739	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0073f	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00743	50		 push	 eax
  00744	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0074a	50		 push	 eax
  0074b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00751	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
  00756	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _argList$GSCopy$1$[ebp]
  0075c	50		 push	 eax
  0075d	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00761	e8 00 00 00 00	 call	 ?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
  00766	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0076c	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00771	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR $T5[ebp+20]
  00777	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0077a	72 2b		 jb	 SHORT $LN458@GetArg
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0077c	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00782	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00783	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00785	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0078b	72 10		 jb	 SHORT $LN468@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0078d	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00790	83 c2 23	 add	 edx, 35			; 00000023H
  00793	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00795	83 c0 fc	 add	 eax, -4			; fffffffcH
  00798	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0079b	77 71		 ja	 SHORT $LN492@GetArg
$LN468@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0079d	52		 push	 edx
  0079e	51		 push	 ecx
  0079f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  007a4	83 c4 08	 add	 esp, 8
$LN458@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  007a7	8b 55 84	 mov	 edx, DWORD PTR $T7[ebp+20]
  007aa	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  007ad	72 2b		 jb	 SHORT $LN485@GetArg
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007af	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  007b5	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007b6	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  007b8	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  007be	72 10		 jb	 SHORT $LN495@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  007c0	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  007c3	83 c2 23	 add	 edx, 35			; 00000023H
  007c6	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007c8	83 c0 fc	 add	 eax, -4			; fffffffcH
  007cb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  007ce	77 3e		 ja	 SHORT $LN492@GetArg
$LN495@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  007d0	52		 push	 edx
  007d1	51		 push	 ecx
  007d2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  007d7	83 c4 08	 add	 esp, 8
$LN485@GetArg:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 270  : 	return true;

  007da	b0 01		 mov	 al, 1
$LN1@GetArg:

; 271  : }

  007dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  007df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  007e6	59		 pop	 ecx
  007e7	5f		 pop	 edi
  007e8	5e		 pop	 esi
  007e9	5b		 pop	 ebx
  007ea	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007ed	33 cd		 xor	 ecx, ebp
  007ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007f4	8b e5		 mov	 esp, ebp
  007f6	5d		 pop	 ebp
  007f7	c2 0c 00	 ret	 12			; 0000000cH
$LN506@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1006 :             _Xlength_error("list too long");

  007fa	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  007ff	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN505@GetArg:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4475 :             _Xlen_string(); // result too long

  00804	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN34@GetArg:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 251  : 					szName[iNameLen] = '\0';

  00809	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN492@GetArg:

; 271  : }

  0080e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN524@GetArg:
  00813	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$0:
  00000	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$1:
  0000b	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$10:
  00016	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$11:
  00021	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp+24]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$2:
  0002c	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$19:
  00037	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR __Op$2[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$3:
  00042	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$4:
  0004d	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$5:
  00058	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
  00067	cc		 int	 3
__ehhandler$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z:
  00068	90		 npad	 1
  00069	90		 npad	 1
  0006a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0006e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00071	8b 8a f0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-272]
  00077	33 c8		 xor	 ecx, eax
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00081	33 c8		 xor	 ecx, eax
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
  0008d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ENDP ; script::Group::GetArg
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?SetError@Group@script@@AAEXPBD@Z
_TEXT	SEGMENT
_c_pszError$ = 8					; size = 4
?SetError@Group@script@@AAEXPBD@Z PROC			; script::Group::SetError, COMDAT
; _this$ = ecx

; 545  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_pszError$[ebp]
  00006	8b c2		 mov	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 545  : {

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL7@SetError:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@SetError
  00017	2b c7		 sub	 eax, edi

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 547  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?SetError@Group@script@@AAEXPBD@Z ENDP			; script::Group::SetError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; script::Group::GetError, COMDAT
; _this$ = ecx

; 541  : 	return m_stError;

  00000	8b c1		 mov	 eax, ecx

; 542  : }

  00002	c3		 ret	 0
?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; script::Group::GetError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z
_TEXT	SEGMENT
_cmd$ = 8						; size = 4
?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z PROC		; script::Group::ReadCmd, COMDAT
; _this$ = ecx

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1191 :         return _Mypair._Myval2._Mysize == 0;

  00003	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 532  : 	if (m_cmdList.empty())

  00007	75 06		 jne	 SHORT $LN2@ReadCmd

; 533  : 		return false;

  00009	32 c0		 xor	 al, al

; 537  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
$LN2@ReadCmd:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1203 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  0000f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00012	56		 push	 esi
  00013	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  00014	8b 7d 08	 mov	 edi, DWORD PTR _cmd$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1203 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  00017	8b 30		 mov	 esi, DWORD PTR [eax]
  00019	83 c6 08	 add	 esi, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  0001c	3b fe		 cmp	 edi, esi
  0001e	74 15		 je	 SHORT $LN11@ReadCmd

; 2286 :         return _BUF_SIZE <= _Myres;

  00020	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00024	8b c6		 mov	 eax, esi

; 2273 :         if (_Large_string_engaged()) {

  00026	72 02		 jb	 SHORT $LN16@ReadCmd

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
$LN16@ReadCmd:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002a	ff 76 10	 push	 DWORD PTR [esi+16]
  0002d	8b cf		 mov	 ecx, edi
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN11@ReadCmd:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 46   : 			argList = c_cmd.argList;

  00035	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00038	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1075 :         if (this != _STD addressof(_Right)) {

  0003d	3b c8		 cmp	 ecx, eax
  0003f	74 0a		 je	 SHORT $LN21@ReadCmd

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00041	8b 00		 mov	 eax, DWORD PTR [eax]

; 1284 :         _Assign_cast<reference>(_Get_unwrapped(_First), _Get_unwrapped(_Last));

  00043	50		 push	 eax
  00044	ff 30		 push	 DWORD PTR [eax]
  00046	e8 00 00 00 00	 call	 ??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN21@ReadCmd:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 536  : 	return true;

  0004b	b0 01		 mov	 al, 1

; 537  : }

  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z ENDP		; script::Group::ReadCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z
_TEXT	SEGMENT
_cmd$ = 8						; size = 4
?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z PROC		; script::Group::GetCmd, COMDAT
; _this$ = ecx

; 521  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1191 :         return _Mypair._Myval2._Mysize == 0;

  00006	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 522  : 	if (m_cmdList.empty())

  0000a	75 07		 jne	 SHORT $LN2@GetCmd

; 523  : 		return false;

  0000c	32 c0		 xor	 al, al
  0000e	5f		 pop	 edi

; 528  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@GetCmd:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1203 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  00013	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00016	53		 push	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  00017	8b 5d 08	 mov	 ebx, DWORD PTR _cmd$[ebp]
  0001a	56		 push	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1203 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  0001b	8b 30		 mov	 esi, DWORD PTR [eax]
  0001d	83 c6 08	 add	 esi, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  00020	3b de		 cmp	 ebx, esi
  00022	74 15		 je	 SHORT $LN11@GetCmd

; 2286 :         return _BUF_SIZE <= _Myres;

  00024	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00028	8b c6		 mov	 eax, esi

; 2273 :         if (_Large_string_engaged()) {

  0002a	72 02		 jb	 SHORT $LN16@GetCmd

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
$LN16@GetCmd:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002e	ff 76 10	 push	 DWORD PTR [esi+16]
  00031	8b cb		 mov	 ecx, ebx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN11@GetCmd:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 46   : 			argList = c_cmd.argList;

  00039	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0003c	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1075 :         if (this != _STD addressof(_Right)) {

  0003f	3b c8		 cmp	 ecx, eax
  00041	74 0a		 je	 SHORT $LN21@GetCmd

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00043	8b 00		 mov	 eax, DWORD PTR [eax]

; 1284 :         _Assign_cast<reference>(_Get_unwrapped(_First), _Get_unwrapped(_Last));

  00045	50		 push	 eax
  00046	ff 30		 push	 DWORD PTR [eax]
  00048	e8 00 00 00 00	 call	 ??$_Assign_cast@AAUSArgumet@script@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_cast<script::SArgumet &,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN21@GetCmd:

; 1239 :         _Unchecked_erase(_Mypair._Myval2._Myhead->_Next);

  0004d	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00050	8b 30		 mov	 esi, DWORD PTR [eax]

; 1351 :         const auto _Result = _Pnode->_Next;

  00052	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1352 :         _Mypair._Myval2._Orphan_ptr2(_Pnode);
; 1353 :         --_Mypair._Myval2._Mysize;

  00054	ff 4f 1c	 dec	 DWORD PTR [edi+28]

; 1354 :         _Pnode->_Prev->_Next = _Result;

  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	89 08		 mov	 DWORD PTR [eax], ecx

; 1355 :         _Result->_Prev       = _Pnode->_Prev;

  0005c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 316  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00062	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00065	e8 00 00 00 00	 call	 ??1SCmd@script@@QAE@XZ
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006a	6a 28		 push	 40			; 00000028H
  0006c	56		 push	 esi
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00072	83 c4 08	 add	 esp, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 527  : 	return true;

  00075	b0 01		 mov	 al, 1
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	5f		 pop	 edi

; 528  : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z ENDP		; script::Group::GetCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -1200						; size = 8
_str_len$1$ = -1188					; size = 4
tv4381 = -1184						; size = 4
__Old_capacity$1$ = -1180				; size = 4
__Result$2$ = -1176					; size = 4
_len_line$1$ = -1172					; size = 4
_str_pos$1$ = -1168					; size = 4
_this$GSCopy$1$ = -1164					; size = 4
_codePage$1$ = -1160					; size = 4
__Result$1$ = -1156					; size = 4
_cur$1$ = -1149						; size = 1
$T3 = -1148						; size = 24
$T4 = -1148						; size = 24
$T5 = -1124						; size = 48
$T6 = -1124						; size = 48
_cmd$7 = -1076						; size = 32
_box_data$ = -1044					; size = 1025
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_stSource$ = 8						; size = 4
?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; script::Group::Create, COMDAT
; _this$ = ecx

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a4 04 00
	00		 sub	 esp, 1188		; 000004a4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b c1		 mov	 eax, ecx
  00030	89 85 74 fb ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1420 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00036	ff 70 18	 push	 DWORD PTR [eax+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 274  : {

  00039	8b 7d 08	 mov	 edi, DWORD PTR _stSource$[ebp]

; 275  : 	m_cmdList.clear();

  0003c	8d 58 18	 lea	 ebx, DWORD PTR [eax+24]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1420 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  0003f	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 274  : {

  00040	89 bd 7c fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1420 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00046	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >

; 1421 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004d	83 c4 08	 add	 esp, 8
  00050	89 00		 mov	 DWORD PTR [eax], eax

; 1422 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00052	8b 03		 mov	 eax, DWORD PTR [ebx]
  00054	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1423 :         _My_data._Mysize        = 0;

  00057	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3985 :         return size() == 0;

  0005e	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00061	89 b5 5c fb ff
	ff		 mov	 DWORD PTR _str_len$1$[ebp], esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 277  : 	if (stSource.empty())

  00067	85 f6		 test	 esi, esi
  00069	0f 84 07 0b 00
	00		 je	 $LN697@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  0006f	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00073	72 08		 jb	 SHORT $LN38@Create

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00075	8b 3f		 mov	 edi, DWORD PTR [edi]
  00077	89 bd 7c fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], edi
$LN38@Create:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 281  : 	if (!str_base || !*str_base)

  0007d	85 ff		 test	 edi, edi
  0007f	0f 84 e4 0a 00
	00		 je	 $LN7@Create
  00085	80 3f 00	 cmp	 BYTE PTR [edi], 0
  00088	0f 84 db 0a 00
	00		 je	 $LN7@Create

; 284  : 		return -1;
; 285  : 	}
; 286  : 
; 287  : 	int str_len = stSource.length();
; 288  : 	int str_pos = 0;

  0008e	33 db		 xor	 ebx, ebx

; 289  : 	int len_line = 0;

  00090	89 9d 6c fb ff
	ff		 mov	 DWORD PTR _len_line$1$[ebp], ebx

; 290  : 
; 291  : 	DWORD codePage = GetDefaultCodePage();

  00096	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 292  : 
; 293  : 	char box_data[1024 + 1];
; 294  : 
; 295  : 	static std::string stLetter;

  0009b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  000a1	8b d0		 mov	 edx, eax
  000a3	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  000a9	89 95 78 fb ff
	ff		 mov	 DWORD PTR _codePage$1$[ebp], edx
  000af	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  000b7	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  000bd	0f 8f d4 0a 00
	00		 jg	 $LN1017@Create
  000c3	eb 06		 jmp	 SHORT $LN2@Create
$LN1013@Create:

; 297  : 	while (str_pos < str_len)

  000c5	8b 95 78 fb ff
	ff		 mov	 edx, DWORD PTR _codePage$1$[ebp]
$LN2@Create:
  000cb	85 f6		 test	 esi, esi
  000cd	0f 8e 8e 0a 00
	00		 jle	 $LN4@Create
  000d3	0f b7 c2	 movzx	 eax, dx
  000d6	89 85 60 fb ff
	ff		 mov	 DWORD PTR tv4381[ebp], eax
  000dc	0f 1f 40 00	 npad	 4
$LL3@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  000e0	c7 85 cc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$7[ebp], 0

; 4562 :         _My_data._Mysize = 0;

  000ea	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$7[ebp+16], 0

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  000f4	c7 85 e0 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR _cmd$7[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000fe	c6 85 cc fb ff
	ff 00		 mov	 BYTE PTR _cmd$7[ebp], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00105	6a 38		 push	 56			; 00000038H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 37   : 		SCmd() {}

  00107	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 352  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0010e	c7 85 e4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$7[ebp+24], 0
  00118	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$7[ebp+28], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00122	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00127	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1767 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0012a	89 00		 mov	 DWORD PTR [eax], eax

; 1768 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0012c	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1769 :         _Mypair._Myval2._Myhead = _Newhead;

  0012f	89 85 e4 fb ff
	ff		 mov	 DWORD PTR _cmd$7[ebp+24], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 302  : 		const char* word_next = CharNextExA(codePage, word, 0);

  00135	6a 00		 push	 0
  00137	8d 34 1f	 lea	 esi, DWORD PTR [edi+ebx]
  0013a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00141	56		 push	 esi
  00142	ff b5 60 fb ff
	ff		 push	 DWORD PTR tv4381[ebp]
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 303  : 
; 304  : 		int word_len = word_next - word;

  0014e	2b c6		 sub	 eax, esi

; 305  : 		if (word_len > 1)

  00150	83 f8 01	 cmp	 eax, 1
  00153	0f 8e e5 03 00
	00		 jle	 $LN8@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3258 :             return assign(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  00159	50		 push	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 307  : 			str_pos += word_len;

  0015a	03 d8		 add	 ebx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3258 :             return assign(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  0015c	b9 00 00 00 00	 mov	 ecx, OFFSET ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  00161	56		 push	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 307  : 			str_pos += word_len;

  00162	89 9d 70 fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3258 :             return assign(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  00168	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  0016d	8b 9d e0 fb ff
	ff		 mov	 ebx, DWORD PTR _cmd$7[ebp+20]
  00173	83 fb 06	 cmp	 ebx, 6
  00176	72 33		 jb	 SHORT $LN1003@Create

; 2264 :         if (_Large_string_engaged()) {

  00178	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  0017b	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$7[ebp+16], 6

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00185	6a 06		 push	 6

; 2263 :         value_type* _Result = _Bx._Buf;

  00187	8d b5 cc fb ff
	ff		 lea	 esi, DWORD PTR _cmd$7[ebp]

; 2264 :         if (_Large_string_engaged()) {

  0018d	0f 43 b5 cc fb
	ff ff		 cmovae	 esi, DWORD PTR _cmd$7[ebp]

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00194	68 00 00 00 00	 push	 OFFSET ??_C@_06MJINCFFA@LETTER@
  00199	56		 push	 esi
  0019a	e8 00 00 00 00	 call	 _memmove
  0019f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  001a2	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0

; 3217 :             return *this;

  001a6	e9 bc 00 00 00	 jmp	 $LN115@Create
$LN1003@Create:

; 4478 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  001ab	8b cb		 mov	 ecx, ebx

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  001ad	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 4478 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  001b2	d1 e9		 shr	 ecx, 1

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  001b4	2b c1		 sub	 eax, ecx
  001b6	3b d8		 cmp	 ebx, eax
  001b8	76 17		 jbe	 SHORT $LN121@Create

; 4460 :             return _Max;

  001ba	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  001bf	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001c4	50		 push	 eax
  001c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001ca	83 c4 04	 add	 esp, 4
  001cd	8b f8		 mov	 edi, eax
  001cf	eb 37		 jmp	 SHORT $LN127@Create
$LN121@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  001d1	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  001d4	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  001d9	3b c6		 cmp	 eax, esi
  001db	0f 47 f0	 cmova	 esi, eax

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  001de	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001e1	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  001e6	72 0d		 jb	 SHORT $LN128@Create

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001ee	83 c4 04	 add	 esp, 4
  001f1	8b f8		 mov	 edi, eax
  001f3	eb 13		 jmp	 SHORT $LN127@Create
$LN128@Create:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  001f5	85 c0		 test	 eax, eax
  001f7	74 0d		 je	 SHORT $LN129@Create

; 79   :         return ::operator new(_Bytes);

  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001ff	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00202	8b f8		 mov	 edi, eax
  00204	eb 02		 jmp	 SHORT $LN127@Create
$LN129@Create:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00206	33 ff		 xor	 edi, edi
$LN127@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06MJINCFFA@LETTER@

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  0020d	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$7[ebp+16], 6

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  00217	89 b5 e0 fb ff
	ff		 mov	 DWORD PTR _cmd$7[ebp+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0021d	89 07		 mov	 DWORD PTR [edi], eax
  0021f	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06MJINCFFA@LETTER@+4
  00225	66 89 47 04	 mov	 WORD PTR [edi+4], ax

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00229	c6 47 06 00	 mov	 BYTE PTR [edi+6], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  0022d	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00230	72 2f		 jb	 SHORT $LN114@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00232	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$7[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00238	43		 inc	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00239	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0023b	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00241	72 14		 jb	 SHORT $LN151@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00243	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00246	83 c3 23	 add	 ebx, 35			; 00000023H
  00249	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0024b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0024e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00251	0f 87 8a 09 00
	00		 ja	 $LN922@Create
$LN151@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00257	53		 push	 ebx
  00258	51		 push	 ecx
  00259	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0025e	83 c4 08	 add	 esp, 8
$LN114@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00261	89 bd cc fb ff
	ff		 mov	 DWORD PTR _cmd$7[ebp], edi
$LN115@Create:

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00267	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05MFEJDJP@value@+4

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0026c	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00271	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_05MFEJDJP@value@

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00277	be 05 00 00 00	 mov	 esi, 5

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0027c	89 95 98 fb ff
	ff		 mov	 DWORD PTR $T4[ebp+20], edx

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00282	89 b5 94 fb ff
	ff		 mov	 DWORD PTR $T4[ebp+16], esi

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00288	89 8d 84 fb ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0028e	88 85 88 fb ff
	ff		 mov	 BYTE PTR $T4[ebp+4], al

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00294	c6 85 89 fb ff
	ff 00		 mov	 BYTE PTR $T4[ebp+5], 0

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0029b	c7 85 9c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp], 0

; 4562 :         _My_data._Mysize = 0;

  002a5	c7 85 ac fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+16], 0

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  002af	89 95 b0 fb ff
	ff		 mov	 DWORD PTR $T6[ebp+20], edx

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002b5	c6 85 9c fb ff
	ff 00		 mov	 BYTE PTR $T6[ebp], 0

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  002bc	8b da		 mov	 ebx, edx

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  002be	c7 85 b4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+24], 0

; 4562 :         _My_data._Mysize = 0;

  002c8	c7 85 c4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+40], 0

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  002d2	89 9d c8 fb ff
	ff		 mov	 DWORD PTR $T6[ebp+44], ebx

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002d8	c6 85 b4 fb ff
	ff 00		 mov	 BYTE PTR $T6[ebp+24], 0

; 2272 :         const value_type* _Result = _Bx._Buf;

  002df	8d 85 84 fb ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 11   : 		SArgumet(const std::string& c_stName, const std::string& c_stValue)

  002e5	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002e9	56		 push	 esi
  002ea	50		 push	 eax
  002eb	8d 85 9c fb ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  002f1	89 b5 ac fb ff
	ff		 mov	 DWORD PTR $T6[ebp+16], esi

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 _memmove

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  002fd	c6 84 35 9c fb
	ff ff 00	 mov	 BYTE PTR $T6[ebp+esi], 0

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00305	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2273 :         if (_Large_string_engaged()) {

  00308	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, 16 ; 00000010H
  0030f	b8 00 00 00 00	 mov	 eax, OFFSET ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 3217 :             return *this;

  00314	8b 9d c8 fb ff
	ff		 mov	 ebx, DWORD PTR $T6[ebp+44]

; 2273 :         if (_Large_string_engaged()) {

  0031a	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00321	8b 3d 10 00 00
	00		 mov	 edi, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16

; 3217 :             return *this;

  00327	89 9d 64 fb ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], ebx

; 2273 :         if (_Large_string_engaged()) {

  0032d	89 85 68 fb ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00333	3b fb		 cmp	 edi, ebx

; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  00335	77 2a		 ja	 SHORT $LN337@Create

; 2264 :         if (_Large_string_engaged()) {

  00337	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  0033a	89 bd c4 fb ff
	ff		 mov	 DWORD PTR $T6[ebp+40], edi
  00340	57		 push	 edi

; 2263 :         value_type* _Result = _Bx._Buf;

  00341	8d b5 b4 fb ff
	ff		 lea	 esi, DWORD PTR $T6[ebp+24]

; 2264 :         if (_Large_string_engaged()) {

  00347	0f 43 b5 b4 fb
	ff ff		 cmovae	 esi, DWORD PTR $T6[ebp+24]

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0034e	50		 push	 eax
  0034f	56		 push	 esi
  00350	e8 00 00 00 00	 call	 _memmove
  00355	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00358	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 3217 :             return *this;

  0035c	e9 ea 00 00 00	 jmp	 $LN349@Create
$LN337@Create:

; 4474 :         if (_New_size > max_size()) {

  00361	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00367	0f 87 6a 08 00
	00		 ja	 $LN991@Create

; 4476 :         }
; 4477 : 
; 4478 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0036d	8b f7		 mov	 esi, edi
  0036f	83 ce 0f	 or	 esi, 15			; 0000000fH

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00372	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00378	76 17		 jbe	 SHORT $LN354@Create

; 4456 :             return _Max;

  0037a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0037f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00384	50		 push	 eax
  00385	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0038a	83 c4 04	 add	 esp, 4
  0038d	8b d8		 mov	 ebx, eax
  0038f	eb 58		 jmp	 SHORT $LN361@Create
$LN354@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00391	8b cb		 mov	 ecx, ebx
  00393	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00398	d1 e9		 shr	 ecx, 1
  0039a	2b c1		 sub	 eax, ecx
  0039c	3b d8		 cmp	 ebx, eax
  0039e	76 17		 jbe	 SHORT $LN355@Create

; 4460 :             return _Max;

  003a0	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  003a5	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  003aa	50		 push	 eax
  003ab	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  003b0	83 c4 04	 add	 esp, 4
  003b3	8b d8		 mov	 ebx, eax
  003b5	eb 32		 jmp	 SHORT $LN361@Create
$LN355@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  003b7	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  003ba	3b f0		 cmp	 esi, eax
  003bc	0f 42 f0	 cmovb	 esi, eax

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  003bf	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003c2	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  003c7	72 0d		 jb	 SHORT $LN362@Create

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  003cf	83 c4 04	 add	 esp, 4
  003d2	8b d8		 mov	 ebx, eax
  003d4	eb 13		 jmp	 SHORT $LN361@Create
$LN362@Create:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  003d6	85 c0		 test	 eax, eax
  003d8	74 0d		 je	 SHORT $LN363@Create

; 79   :         return ::operator new(_Bytes);

  003da	50		 push	 eax
  003db	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003e0	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  003e3	8b d8		 mov	 ebx, eax
  003e5	eb 02		 jmp	 SHORT $LN361@Create
$LN363@Create:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  003e7	33 db		 xor	 ebx, ebx
$LN361@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003e9	57		 push	 edi
  003ea	ff b5 68 fb ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  003f0	89 bd c4 fb ff
	ff		 mov	 DWORD PTR $T6[ebp+40], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003f6	53		 push	 ebx

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  003f7	89 b5 c8 fb ff
	ff		 mov	 DWORD PTR $T6[ebp+44], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003fd	e8 00 00 00 00	 call	 _memcpy

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  00402	8b 85 64 fb ff
	ff		 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00408	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0040b	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  0040f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00412	72 31		 jb	 SHORT $LN348@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00414	8b 8d b4 fb ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp+24]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  0041a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0041d	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0041f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00425	72 14		 jb	 SHORT $LN385@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00427	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0042a	83 c2 23	 add	 edx, 35			; 00000023H
  0042d	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0042f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00432	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00435	0f 87 a6 07 00
	00		 ja	 $LN922@Create
$LN385@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0043b	52		 push	 edx
  0043c	51		 push	 ecx
  0043d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00442	83 c4 08	 add	 esp, 8
$LN348@Create:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 311  : 			cmd.argList.push_back(TArg("value", stLetter));

  00445	89 9d b4 fb ff
	ff		 mov	 DWORD PTR $T6[ebp+24], ebx
$LN349@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1005 :         if (_Mysize == max_size()) {

  0044b	81 bd e8 fb ff
	ff 24 49 92 04	 cmp	 DWORD PTR _cmd$7[ebp+28], 76695844 ; 04924924H

; 964  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  00455	8b bd e4 fb ff
	ff		 mov	 edi, DWORD PTR _cmd$7[ebp+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 311  : 			cmd.argList.push_back(TArg("value", stLetter));

  0045b	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1005 :         if (_Mysize == max_size()) {

  0045f	0f 84 68 07 00
	00		 je	 $LN992@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00465	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$7[ebp+24]
  0046b	89 85 50 fb ff
	ff		 mov	 DWORD PTR __Op$2[ebp], eax

; 79   :         return ::operator new(_Bytes);

  00471	6a 38		 push	 56			; 00000038H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 582  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00473	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00477	c7 85 54 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00481	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00486	8b f0		 mov	 esi, eax

; 79   :         return ::operator new(_Bytes);

  00488	83 c4 04	 add	 esp, 4

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0048b	8d 85 9c fb ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]

; 966  :         _Ptr = _Al.allocate(1);

  00491	89 b5 54 fb ff
	ff		 mov	 DWORD PTR __Op$2[ebp+4], esi
  00497	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0049a	50		 push	 eax
  0049b	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1010 :         ++_Mysize;

  004a0	ff 85 e8 fb ff
	ff		 inc	 DWORD PTR _cmd$7[ebp+28]

; 597  :         const pointer _Insert_after = _Insert_before->_Prev;

  004a6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004a9	8b 95 c8 fb ff
	ff		 mov	 edx, DWORD PTR $T6[ebp+44]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 598  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  004af	89 3e		 mov	 DWORD PTR [esi], edi

; 599  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  004b1	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 600  :         const auto _Result    = this->_Ptr;
; 601  :         this->_Ptr            = pointer{};
; 602  :         _Insert_before->_Prev = _Result;

  004b4	89 77 04	 mov	 DWORD PTR [edi+4], esi
  004b7	c7 85 54 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 603  :         _Insert_after->_Next  = _Result;

  004c1	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 311  : 			cmd.argList.push_back(TArg("value", stLetter));

  004c3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004c7	83 fa 10	 cmp	 edx, 16			; 00000010H
  004ca	72 2f		 jb	 SHORT $LN471@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004cc	8b 8d b4 fb ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp+24]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004d2	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004d3	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004d5	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  004db	72 14		 jb	 SHORT $LN481@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004dd	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  004e0	83 c2 23	 add	 edx, 35			; 00000023H
  004e3	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004e5	83 c0 fc	 add	 eax, -4			; fffffffcH
  004e8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004eb	0f 87 f0 06 00
	00		 ja	 $LN922@Create
$LN481@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  004f1	52		 push	 edx
  004f2	51		 push	 ecx
  004f3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004f8	83 c4 08	 add	 esp, 8
$LN471@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004fb	8b 95 b0 fb ff
	ff		 mov	 edx, DWORD PTR $T6[ebp+20]
  00501	83 fa 10	 cmp	 edx, 16			; 00000010H
  00504	72 2f		 jb	 SHORT $LN499@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00506	8b 8d 9c fb ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0050c	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0050d	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0050f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00515	72 14		 jb	 SHORT $LN509@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00517	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0051a	83 c2 23	 add	 edx, 35			; 00000023H
  0051d	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0051f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00522	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00525	0f 87 b6 06 00
	00		 ja	 $LN922@Create
$LN509@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0052b	52		 push	 edx
  0052c	51		 push	 ecx
  0052d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00532	83 c4 08	 add	 esp, 8
$LN499@Create:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 311  : 			cmd.argList.push_back(TArg("value", stLetter));

  00535	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 312  : 			m_cmdList.push_back(cmd);
; 313  : 		}

  00539	e9 96 04 00 00	 jmp	 $LN915@Create
$LN8@Create:

; 314  : 		else if (word_len == 1)

  0053e	0f 85 12 06 00
	00		 jne	 $LN10@Create

; 315  : 		{
; 316  : 			const char cur = *word;

  00544	8a 06		 mov	 al, BYTE PTR [esi]
  00546	88 85 83 fb ff
	ff		 mov	 BYTE PTR _cur$1$[ebp], al

; 317  : 
; 318  : 			if ('[' == cur)

  0054c	3c 5b		 cmp	 al, 91			; 0000005bH
  0054e	0f 85 d0 01 00
	00		 jne	 $LN12@Create

; 319  : 			{
; 320  : 				++str_pos;
; 321  : 
; 322  : 				const char* box_begin = str_base + str_pos;
; 323  : 				const char* box_end = LocaleString_FindChar(box_begin, str_len - str_pos, ']');

  00554	8b 85 5c fb ff
	ff		 mov	 eax, DWORD PTR _str_len$1$[ebp]
  0055a	43		 inc	 ebx
  0055b	6a 5d		 push	 93			; 0000005dH
  0055d	2b c3		 sub	 eax, ebx
  0055f	03 fb		 add	 edi, ebx
  00561	50		 push	 eax
  00562	57		 push	 edi
  00563	e8 00 00 00 00	 call	 ?LocaleString_FindChar@@YAPBDPBDHD@Z ; LocaleString_FindChar
  00568	83 c4 0c	 add	 esp, 12			; 0000000cH
  0056b	8b f0		 mov	 esi, eax

; 324  : 				if (!box_end)

  0056d	57		 push	 edi
  0056e	85 f6		 test	 esi, esi
  00570	0f 84 78 05 00
	00		 je	 $LN993@Create

; 327  : 					return -1;
; 328  : 				}
; 329  : 
; 330  : 				str_pos += box_end - box_begin + 1;
; 331  : 				int data_len = 0;
; 332  : 				const char* data_begin = LocaleString_Skip(codePage, box_begin);

  00576	ff b5 78 fb ff
	ff		 push	 DWORD PTR _codePage$1$[ebp]
  0057c	2b c7		 sub	 eax, edi
  0057e	40		 inc	 eax
  0057f	03 d8		 add	 ebx, eax
  00581	e8 00 00 00 00	 call	 ?LocaleString_Skip@@YAPBDKPBD@Z ; LocaleString_Skip

; 333  : 				const char* data_end = box_end;
; 334  : 				data_len = data_end - data_begin;

  00586	2b f0		 sub	 esi, eax
  00588	83 c4 08	 add	 esp, 8

; 335  : 				if (data_len >= 1024)

  0058b	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  00591	0f 8d e1 04 00
	00		 jge	 $LN994@Create

; 338  : 					return -1;
; 339  : 				}
; 340  : 
; 341  : 				memcpy(box_data, data_begin, data_len);

  00597	56		 push	 esi
  00598	50		 push	 eax
  00599	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  0059f	50		 push	 eax
  005a0	e8 00 00 00 00	 call	 _memcpy
  005a5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 342  : 				box_data[data_len] = '\0';

  005a8	81 fe 01 04 00
	00		 cmp	 esi, 1025		; 00000401H
  005ae	0f 83 28 06 00
	00		 jae	 $LN24@Create

; 343  : 				data_len = LocaleString_RightTrim(box_data, data_len);

  005b4	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  005ba	c6 84 35 ec fb
	ff ff 00	 mov	 BYTE PTR _box_data$[ebp+esi], 0
  005c2	56		 push	 esi
  005c3	50		 push	 eax
  005c4	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  005c9	8b f0		 mov	 esi, eax

; 344  : 				const char* space = LocaleString_FindChar(box_data, data_len, ' ');

  005cb	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  005d1	6a 20		 push	 32			; 00000020H
  005d3	56		 push	 esi
  005d4	50		 push	 eax
  005d5	e8 00 00 00 00	 call	 ?LocaleString_FindChar@@YAPBDPBDHD@Z ; LocaleString_FindChar
  005da	8b f8		 mov	 edi, eax

; 345  : 				if (space)

  005dc	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR _box_data$[ebp]
  005e2	83 c4 14	 add	 esp, 20			; 00000014H
  005e5	85 ff		 test	 edi, edi
  005e7	0f 84 c8 00 00
	00		 je	 $LN16@Create

; 346  : 				{
; 347  : 					int name_len = space - box_data;

  005ed	2b c1		 sub	 eax, ecx

; 348  : 					cmd.name.assign(box_data, name_len);

  005ef	50		 push	 eax
  005f0	8b c1		 mov	 eax, ecx
  005f2	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$7[ebp]
  005f8	50		 push	 eax
  005f9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 349  : 
; 350  : 					const char* space_next = CharNextExA(codePage, space, 0);

  005fe	6a 00		 push	 0
  00600	57		 push	 edi
  00601	ff b5 60 fb ff
	ff		 push	 DWORD PTR tv4381[ebp]
  00607	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 351  : 					const char* arg = LocaleString_Skip(codePage, space_next);

  0060d	50		 push	 eax
  0060e	ff b5 78 fb ff
	ff		 push	 DWORD PTR _codePage$1$[ebp]
  00614	e8 00 00 00 00	 call	 ?LocaleString_Skip@@YAPBDKPBD@Z ; LocaleString_Skip

; 352  : 
; 353  : 					int arg_len = data_len - (arg - box_data);
; 354  : 					if (!GetArg(arg, arg_len, cmd.argList))

  00619	8b 8d 74 fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0061f	8b f8		 mov	 edi, eax
  00621	83 c4 08	 add	 esp, 8
  00624	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  0062a	2b f7		 sub	 esi, edi
  0062c	03 f0		 add	 esi, eax
  0062e	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$7[ebp+24]
  00634	50		 push	 eax
  00635	56		 push	 esi
  00636	57		 push	 edi
  00637	e8 00 00 00 00	 call	 ?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ; script::Group::GetArg
  0063c	84 c0		 test	 al, al
  0063e	0f 85 c0 00 00
	00		 jne	 $LN717@Create

; 355  : 					{
; 356  : 						TraceError(" !! PARSING ERROR - Unknown Arguments : %d, %s\n", arg_len, arg);

  00644	57		 push	 edi
  00645	56		 push	 esi
  00646	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@
  0064b	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00650	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$7[ebp+24]
  00656	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$7[ebp+24]
  0065c	50		 push	 eax
  0065d	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00662	6a 38		 push	 56			; 00000038H
  00664	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$7[ebp+24]
  0066a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0066f	8b 95 e0 fb ff
	ff		 mov	 edx, DWORD PTR _cmd$7[ebp+20]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00675	83 c4 1c	 add	 esp, 28			; 0000001cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00678	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0067b	0f 82 f5 04 00
	00		 jb	 $LN697@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00681	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$7[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00687	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00688	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0068a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00690	72 14		 jb	 SHORT $LN707@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00692	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00695	83 c2 23	 add	 edx, 35			; 00000023H
  00698	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0069a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0069d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  006a0	0f 87 3b 05 00
	00		 ja	 $LN922@Create
$LN707@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  006a6	52		 push	 edx
  006a7	51		 push	 ecx
  006a8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006ad	83 c4 08	 add	 esp, 8
  006b0	e9 c1 04 00 00	 jmp	 $LN697@Create
$LN16@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  006b5	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1012@Create:
  006b8	8a 01		 mov	 al, BYTE PTR [ecx]
  006ba	41		 inc	 ecx
  006bb	84 c0		 test	 al, al
  006bd	75 f9		 jne	 SHORT $LL1012@Create
  006bf	2b ca		 sub	 ecx, edx

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  006c1	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  006c7	51		 push	 ecx
  006c8	50		 push	 eax
  006c9	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$7[ebp]
  006cf	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1420 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  006d4	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$7[ebp+24]
  006da	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$7[ebp+24]
  006e0	50		 push	 eax
  006e1	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >

; 1421 :         _My_data._Myhead->_Next = _My_data._Myhead;

  006e6	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$7[ebp+24]
  006ec	83 c4 08	 add	 esp, 8
  006ef	89 00		 mov	 DWORD PTR [eax], eax

; 1422 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  006f1	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$7[ebp+24]
  006f7	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1423 :         _My_data._Mysize        = 0;

  006fa	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$7[ebp+28], 0
$LN717@Create:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 366  : 				m_cmdList.push_back(cmd);

  00704	8b 8d 74 fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0070a	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$7[ebp]
  00710	50		 push	 eax
  00711	83 c1 18	 add	 ecx, 24			; 00000018H
  00714	e8 00 00 00 00	 call	 ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back

; 367  : 			}

  00719	8b bd 7c fb ff
	ff		 mov	 edi, DWORD PTR __Result$1$[ebp]
  0071f	e9 da 02 00 00	 jmp	 $LN20@Create
$LN12@Create:

; 368  : 			else if (cur == '\r' || cur == '\n')

  00724	3c 0d		 cmp	 al, 13			; 0000000dH
  00726	0f 84 d1 02 00
	00		 je	 $LN22@Create
  0072c	3c 0a		 cmp	 al, 10			; 0000000aH
  0072e	0f 84 c3 02 00
	00		 je	 $LN1001@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3235 :         if (_Count <= _Mypair._Myval2._Myres) {

  00734	8b 3d 14 00 00
	00		 mov	 edi, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 375  : 				++str_pos;

  0073a	43		 inc	 ebx
  0073b	89 9d 70 fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3235 :         if (_Count <= _Mypair._Myval2._Myres) {

  00741	83 ff 01	 cmp	 edi, 1
  00744	72 31		 jb	 SHORT $LN719@Create

; 2264 :         if (_Large_string_engaged()) {

  00746	83 ff 10	 cmp	 edi, 16			; 00000010H

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00749	0f be c8	 movsx	 ecx, al

; 2263 :         value_type* _Result = _Bx._Buf;

  0074c	ba 00 00 00 00	 mov	 edx, OFFSET ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00751	0f b6 c1	 movzx	 eax, cl

; 2264 :         if (_Large_string_engaged()) {

  00754	0f 43 15 00 00
	00 00		 cmovae	 edx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0075b	66 c1 e1 08	 shl	 cx, 8

; 3237 :             _Mypair._Myval2._Mysize = _Count;

  0075f	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 1

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00769	66 0b c8	 or	 cx, ax
  0076c	88 0a		 mov	 BYTE PTR [edx], cl

; 3239 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0076e	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0

; 3240 :             return *this;

  00772	e9 be 00 00 00	 jmp	 $LN731@Create
$LN719@Create:

; 4478 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00777	8b cf		 mov	 ecx, edi

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00779	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 4478 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0077e	d1 e9		 shr	 ecx, 1

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00780	2b c1		 sub	 eax, ecx
  00782	3b f8		 cmp	 edi, eax
  00784	76 17		 jbe	 SHORT $LN737@Create

; 4460 :             return _Max;

  00786	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0078b	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00790	50		 push	 eax
  00791	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00796	83 c4 04	 add	 esp, 4
  00799	8b d8		 mov	 ebx, eax
  0079b	eb 37		 jmp	 SHORT $LN743@Create
$LN737@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0079d	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  007a0	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  007a5	3b c6		 cmp	 eax, esi
  007a7	0f 47 f0	 cmova	 esi, eax

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  007aa	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  007ad	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  007b2	72 0d		 jb	 SHORT $LN744@Create

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  007b4	50		 push	 eax
  007b5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  007ba	83 c4 04	 add	 esp, 4
  007bd	8b d8		 mov	 ebx, eax
  007bf	eb 13		 jmp	 SHORT $LN743@Create
$LN744@Create:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  007c1	85 c0		 test	 eax, eax
  007c3	74 0d		 je	 SHORT $LN745@Create

; 79   :         return ::operator new(_Bytes);

  007c5	50		 push	 eax
  007c6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  007cb	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  007ce	8b d8		 mov	 ebx, eax
  007d0	eb 02		 jmp	 SHORT $LN743@Create
$LN745@Create:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  007d2	33 db		 xor	 ebx, ebx
$LN743@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  007d4	0f be 8d 83 fb
	ff ff		 movsx	 ecx, BYTE PTR _cur$1$[ebp]
  007db	0f b6 c1	 movzx	 eax, cl
  007de	66 c1 e1 08	 shl	 cx, 8
  007e2	66 0b c8	 or	 cx, ax

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  007e5	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 1

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  007ef	89 35 14 00 00
	00		 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, esi

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  007f5	88 0b		 mov	 BYTE PTR [ebx], cl

; 3247 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  007f7	c6 43 01 00	 mov	 BYTE PTR [ebx+1], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  007fb	83 ff 10	 cmp	 edi, 16			; 00000010H
  007fe	72 2f		 jb	 SHORT $LN730@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00800	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00806	47		 inc	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00807	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00809	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0080f	72 14		 jb	 SHORT $LN767@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00811	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00814	83 c7 23	 add	 edi, 35			; 00000023H
  00817	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00819	83 c0 fc	 add	 eax, -4			; fffffffcH
  0081c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0081f	0f 87 bc 03 00
	00		 ja	 $LN922@Create
$LN767@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00825	57		 push	 edi
  00826	51		 push	 ecx
  00827	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0082c	83 c4 08	 add	 esp, 8
$LN730@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  0082f	89 1d 00 00 00
	00		 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A, ebx
$LN731@Create:
  00835	8b 9d e0 fb ff
	ff		 mov	 ebx, DWORD PTR _cmd$7[ebp+20]
  0083b	83 fb 06	 cmp	 ebx, 6
  0083e	72 33		 jb	 SHORT $LN1005@Create

; 2264 :         if (_Large_string_engaged()) {

  00840	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00843	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$7[ebp+16], 6

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0084d	6a 06		 push	 6

; 2263 :         value_type* _Result = _Bx._Buf;

  0084f	8d b5 cc fb ff
	ff		 lea	 esi, DWORD PTR _cmd$7[ebp]

; 2264 :         if (_Large_string_engaged()) {

  00855	0f 43 b5 cc fb
	ff ff		 cmovae	 esi, DWORD PTR _cmd$7[ebp]

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0085c	68 00 00 00 00	 push	 OFFSET ??_C@_06MJINCFFA@LETTER@
  00861	56		 push	 esi
  00862	e8 00 00 00 00	 call	 _memmove
  00867	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0086a	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0

; 3217 :             return *this;

  0086e	e9 bc 00 00 00	 jmp	 $LN789@Create
$LN1005@Create:

; 4478 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00873	8b cb		 mov	 ecx, ebx

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00875	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 4478 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0087a	d1 e9		 shr	 ecx, 1

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0087c	2b c1		 sub	 eax, ecx
  0087e	3b d8		 cmp	 ebx, eax
  00880	76 17		 jbe	 SHORT $LN795@Create

; 4460 :             return _Max;

  00882	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00887	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0088c	50		 push	 eax
  0088d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00892	83 c4 04	 add	 esp, 4
  00895	8b f8		 mov	 edi, eax
  00897	eb 37		 jmp	 SHORT $LN801@Create
$LN795@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00899	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  0089c	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  008a1	3b c6		 cmp	 eax, esi
  008a3	0f 47 f0	 cmova	 esi, eax

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  008a6	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  008a9	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  008ae	72 0d		 jb	 SHORT $LN802@Create

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  008b0	50		 push	 eax
  008b1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  008b6	83 c4 04	 add	 esp, 4
  008b9	8b f8		 mov	 edi, eax
  008bb	eb 13		 jmp	 SHORT $LN801@Create
$LN802@Create:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  008bd	85 c0		 test	 eax, eax
  008bf	74 0d		 je	 SHORT $LN803@Create

; 79   :         return ::operator new(_Bytes);

  008c1	50		 push	 eax
  008c2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  008c7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  008ca	8b f8		 mov	 edi, eax
  008cc	eb 02		 jmp	 SHORT $LN801@Create
$LN803@Create:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  008ce	33 ff		 xor	 edi, edi
$LN801@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  008d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06MJINCFFA@LETTER@

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  008d5	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$7[ebp+16], 6

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  008df	89 b5 e0 fb ff
	ff		 mov	 DWORD PTR _cmd$7[ebp+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  008e5	89 07		 mov	 DWORD PTR [edi], eax
  008e7	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06MJINCFFA@LETTER@+4
  008ed	66 89 47 04	 mov	 WORD PTR [edi+4], ax

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  008f1	c6 47 06 00	 mov	 BYTE PTR [edi+6], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  008f5	83 fb 10	 cmp	 ebx, 16			; 00000010H
  008f8	72 2f		 jb	 SHORT $LN788@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008fa	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$7[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00900	43		 inc	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00901	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00903	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00909	72 14		 jb	 SHORT $LN825@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0090b	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0090e	83 c3 23	 add	 ebx, 35			; 00000023H
  00911	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00913	83 c0 fc	 add	 eax, -4			; fffffffcH
  00916	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00919	0f 87 c2 02 00
	00		 ja	 $LN922@Create
$LN825@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0091f	53		 push	 ebx
  00920	51		 push	 ecx
  00921	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00926	83 c4 08	 add	 esp, 8
$LN788@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00929	89 bd cc fb ff
	ff		 mov	 DWORD PTR _cmd$7[ebp], edi
$LN789@Create:

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0092f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05MFEJDJP@value@
  00934	89 85 84 fb ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0093a	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_05MFEJDJP@value@+4

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0093f	c7 85 98 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00949	c7 85 94 fb ff
	ff 05 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 5

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00953	88 85 88 fb ff
	ff		 mov	 BYTE PTR $T3[ebp+4], al

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00959	c6 85 89 fb ff
	ff 00		 mov	 BYTE PTR $T3[ebp+5], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 379  : 				cmd.argList.push_back(TArg("value", stLetter));

  00960	68 00 00 00 00	 push	 OFFSET ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  00965	8d 85 84 fb ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0096b	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0096f	50		 push	 eax
  00970	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00976	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
  0097b	50		 push	 eax
  0097c	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$7[ebp+24]
  00982	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00986	e8 00 00 00 00	 call	 ?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
  0098b	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00991	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00996	8b 95 98 fb ff
	ff		 mov	 edx, DWORD PTR $T3[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 379  : 				cmd.argList.push_back(TArg("value", stLetter));

  0099c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  009a0	83 fa 10	 cmp	 edx, 16			; 00000010H
  009a3	72 2f		 jb	 SHORT $LN915@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  009a5	8b 8d 84 fb ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  009ab	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  009ac	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  009ae	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  009b4	72 14		 jb	 SHORT $LN925@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  009b6	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  009b9	83 c2 23	 add	 edx, 35			; 00000023H
  009bc	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  009be	83 c0 fc	 add	 eax, -4			; fffffffcH
  009c1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  009c4	0f 87 17 02 00
	00		 ja	 $LN922@Create
$LN925@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  009ca	52		 push	 edx
  009cb	51		 push	 ecx
  009cc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  009d1	83 c4 08	 add	 esp, 8
$LN915@Create:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 385  : 	}

  009d4	8b 8d 74 fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  009da	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$7[ebp]
  009e0	50		 push	 eax
  009e1	83 c1 18	 add	 ecx, 24			; 00000018H
  009e4	e8 00 00 00 00	 call	 ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
  009e9	8b 9d 70 fb ff
	ff		 mov	 ebx, DWORD PTR _str_pos$1$[ebp]
  009ef	8b bd 7c fb ff
	ff		 mov	 edi, DWORD PTR __Result$1$[ebp]
  009f5	eb 07		 jmp	 SHORT $LN20@Create
$LN1001@Create:

; 369  : 			{
; 370  : 				if (cur=='\n') len_line += 1;

  009f7	ff 85 6c fb ff
	ff		 inc	 DWORD PTR _len_line$1$[ebp]
$LN22@Create:

; 371  : 				++str_pos;

  009fd	43		 inc	 ebx
$LN20@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  009fe	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$7[ebp+24]
  00a04	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$7[ebp+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 385  : 	}

  00a0a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00a11	50		 push	 eax
  00a12	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a17	6a 38		 push	 56			; 00000038H
  00a19	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$7[ebp+24]
  00a1f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00a24	8b 95 e0 fb ff
	ff		 mov	 edx, DWORD PTR _cmd$7[ebp+20]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a2a	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00a2d	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00a30	72 2f		 jb	 SHORT $LN972@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a32	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$7[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00a38	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a39	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00a3b	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00a41	72 14		 jb	 SHORT $LN982@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00a43	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00a46	83 c2 23	 add	 edx, 35			; 00000023H
  00a49	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00a4b	83 c0 fc	 add	 eax, -4			; fffffffcH
  00a4e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00a51	0f 87 8a 01 00
	00		 ja	 $LN922@Create
$LN982@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a57	52		 push	 edx
  00a58	51		 push	 ecx
  00a59	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a5e	83 c4 08	 add	 esp, 8
$LN972@Create:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 297  : 	while (str_pos < str_len)

  00a61	3b 9d 5c fb ff
	ff		 cmp	 ebx, DWORD PTR _str_len$1$[ebp]
  00a67	0f 8c 73 f6 ff
	ff		 jl	 $LL3@Create

; 386  : 
; 387  : 	return len_line;

  00a6d	8b 85 6c fb ff
	ff		 mov	 eax, DWORD PTR _len_line$1$[ebp]
  00a73	e9 01 01 00 00	 jmp	 $LN1@Create
$LN994@Create:

; 336  : 				{
; 337  : 					TraceError(" !! PARSING ERROR - Buffer Overflow : %d, %s\n", data_len, str_base);

  00a78	ff b5 7c fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  00a7e	56		 push	 esi
  00a7f	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@
  00a84	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00a89	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$7[ebp+24]
  00a8f	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$7[ebp+24]
  00a95	50		 push	 eax
  00a96	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a9b	6a 38		 push	 56			; 00000038H
  00a9d	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$7[ebp+24]
  00aa3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00aa8	8b 95 e0 fb ff
	ff		 mov	 edx, DWORD PTR _cmd$7[ebp+20]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00aae	83 c4 1c	 add	 esp, 28			; 0000001cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00ab1	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00ab4	0f 82 bc 00 00
	00		 jb	 $LN697@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00aba	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$7[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00ac0	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00ac1	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00ac3	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00ac9	72 14		 jb	 SHORT $LN650@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00acb	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00ace	83 c2 23	 add	 edx, 35			; 00000023H
  00ad1	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00ad3	83 c0 fc	 add	 eax, -4			; fffffffcH
  00ad6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00ad9	0f 87 02 01 00
	00		 ja	 $LN922@Create
$LN650@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00adf	52		 push	 edx
  00ae0	51		 push	 ecx
  00ae1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00ae6	83 c4 08	 add	 esp, 8
  00ae9	e9 88 00 00 00	 jmp	 $LN697@Create
$LN993@Create:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 326  : 					TraceError(" !! PARSING ERROR - Syntax Error : %s\n", box_begin);

  00aee	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@
  00af3	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00af8	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$7[ebp+24]
  00afe	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$7[ebp+24]
  00b04	50		 push	 eax
  00b05	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00b0a	6a 38		 push	 56			; 00000038H
  00b0c	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$7[ebp+24]
  00b12	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00b17	8b 95 e0 fb ff
	ff		 mov	 edx, DWORD PTR _cmd$7[ebp+20]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00b1d	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00b20	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00b23	72 51		 jb	 SHORT $LN697@Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00b25	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$7[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00b2b	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00b2c	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00b2e	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00b34	72 14		 jb	 SHORT $LN593@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00b36	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00b39	83 c2 23	 add	 edx, 35			; 00000023H
  00b3c	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00b3e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00b41	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00b44	0f 87 97 00 00
	00		 ja	 $LN922@Create
$LN593@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00b4a	52		 push	 edx
  00b4b	51		 push	 ecx
  00b4c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00b51	83 c4 08	 add	 esp, 8
  00b54	eb 20		 jmp	 SHORT $LN697@Create
$LN10@Create:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 384  : 			break;

  00b56	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$7[ebp]
  00b5c	e8 00 00 00 00	 call	 ??1SCmd@script@@QAE@XZ
$LN4@Create:

; 386  : 
; 387  : 	return len_line;

  00b61	8b 85 6c fb ff
	ff		 mov	 eax, DWORD PTR _len_line$1$[ebp]
  00b67	eb 10		 jmp	 SHORT $LN1@Create
$LN7@Create:

; 282  : 	{
; 283  : 		TraceError("Source file has no content");

  00b69	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@
  00b6e	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00b73	83 c4 04	 add	 esp, 4
$LN697@Create:

; 388  : }

  00b76	83 c8 ff	 or	 eax, -1
$LN1@Create:
  00b79	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b7c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b83	59		 pop	 ecx
  00b84	5f		 pop	 edi
  00b85	5e		 pop	 esi
  00b86	5b		 pop	 ebx
  00b87	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b8a	33 cd		 xor	 ecx, ebp
  00b8c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b91	8b e5		 mov	 esp, ebp
  00b93	5d		 pop	 ebp
  00b94	c2 04 00	 ret	 4
$LN1017@Create:

; 292  : 
; 293  : 	char box_data[1024 + 1];
; 294  : 
; 295  : 	static std::string stLetter;

  00b97	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  00b9c	e8 00 00 00 00	 call	 __Init_thread_header
  00ba1	83 c4 04	 add	 esp, 4
  00ba4	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA, -1
  00bab	0f 85 14 f5 ff
	ff		 jne	 $LN1013@Create
  00bb1	68 00 00 00 00	 push	 OFFSET ??__FstLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter''
  00bb6	e8 00 00 00 00	 call	 _atexit
  00bbb	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  00bc0	e8 00 00 00 00	 call	 __Init_thread_footer
  00bc5	83 c4 08	 add	 esp, 8
  00bc8	e9 f8 f4 ff ff	 jmp	 $LN1013@Create
$LN992@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1006 :             _Xlength_error("list too long");

  00bcd	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00bd2	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN991@Create:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4475 :             _Xlen_string(); // result too long

  00bd7	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN24@Create:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 342  : 				box_data[data_len] = '\0';

  00bdc	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN922@Create:

; 388  : }

  00be1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1015@Create:
  00be6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$8:
  00000	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$7[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  0000b	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$7[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SCmd@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00016	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$15:
  00021	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$16:
  0002c	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp+24]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00037	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$24:
  00042	8d 8d 50 fb ff
	ff		 lea	 ecx, DWORD PTR __Op$2[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  0004d	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
  00058	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
  00067	cc		 int	 3
__ehhandler$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00068	90		 npad	 1
  00069	90		 npad	 1
  0006a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0006e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00071	8b 8a 4c fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1204]
  00077	33 c8		 xor	 ecx, eax
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00081	33 c8		 xor	 ecx, eax
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0008d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; script::Group::Create
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ??1Group@script@@QAE@XZ
_TEXT	SEGMENT
??1Group@script@@QAE@XZ PROC				; script::Group::~Group, COMDAT
; _this$ = ecx

; 554  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00004	ff 77 18	 push	 DWORD PTR [edi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 555  : }

  00007	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00010	6a 28		 push	 40			; 00000028H
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00019	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001c	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0001f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00022	72 27		 jb	 SHORT $LN42@Group
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00024	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00026	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00027	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002d	72 12		 jb	 SHORT $LN52@Group

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00032	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00035	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003d	77 20		 ja	 SHORT $LN49@Group

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003f	8b c2		 mov	 eax, edx
$LN52@Group:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00041	51		 push	 ecx
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8
$LN42@Group:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0004b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00052	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00059	c6 07 00	 mov	 BYTE PTR [edi], 0
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 555  : }

  0005e	c3		 ret	 0
$LN49@Group:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN57@Group:
  00064	cc		 int	 3
??1Group@script@@QAE@XZ ENDP				; script::Group::~Group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp
;	COMDAT ??0Group@script@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Group@script@@QAE@XZ PROC				; script::Group::Group, COMDAT
; _this$ = ecx

; 550  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Group@script@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 4562 :         _My_data._Mysize = 0;

  0002f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00036	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0003d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00040	6a 28		 push	 40			; 00000028H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 550  : {

  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 352  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00049	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00050	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00057	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005c	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1767 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0005f	89 00		 mov	 DWORD PTR [eax], eax

; 1768 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00061	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1769 :         _Mypair._Myval2._Myhead = _Newhead;

  00064	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.cpp

; 551  : }

  00067	8b c6		 mov	 eax, esi
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5e		 pop	 esi
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Group@script@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Group@script@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Group@script@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Group@script@@QAE@XZ ENDP				; script::Group::Group
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1SCmd@script@@QAE@XZ
_TEXT	SEGMENT
??1SCmd@script@@QAE@XZ PROC				; script::SCmd::~SCmd, COMDAT
; _this$ = ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	ff 77 18	 push	 DWORD PTR [edi+24]
  00007	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00010	6a 38		 push	 56			; 00000038H
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00019	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001c	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0001f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00022	72 27		 jb	 SHORT $LN42@SCmd
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00024	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00026	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00027	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002d	72 12		 jb	 SHORT $LN52@SCmd

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00032	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00035	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003d	77 20		 ja	 SHORT $LN49@SCmd

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003f	8b c2		 mov	 eax, edx
$LN52@SCmd:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00041	51		 push	 ecx
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8
$LN42@SCmd:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0004b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00052	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00059	c6 07 00	 mov	 BYTE PTR [edi], 0
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	c3		 ret	 0
$LN49@SCmd:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN57@SCmd:
  00064	cc		 int	 3
??1SCmd@script@@QAE@XZ ENDP				; script::SCmd::~SCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >, COMDAT
; _this$ = ecx

; 1036 :     ~list() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	56		 push	 esi
  00006	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000b	6a 38		 push	 56			; 00000038H
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 10	 add	 esp, 16			; 00000010H
  00017	5e		 pop	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1042 :     }

  00018	c3		 ret	 0
??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back, COMDAT
; _this$ = ecx

; 963  :     void push_back(_Ty&& _Val) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1005 :         if (_Mysize == max_size()) {

  0002a	81 7f 04 24 49
	92 04		 cmp	 DWORD PTR [edi+4], 76695844 ; 04924924H

; 964  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  00031	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1005 :         if (_Mysize == max_size()) {

  00033	74 4f		 je	 SHORT $LN69@push_back
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00035	89 7d ec	 mov	 DWORD PTR __Op$2[ebp], edi

; 79   :         return ::operator new(_Bytes);

  00038	6a 38		 push	 56			; 00000038H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 582  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00048	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004d	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00050	8b f0		 mov	 esi, eax

; 966  :         _Ptr = _Al.allocate(1);

  00052	89 75 f0	 mov	 DWORD PTR __Op$2[ebp+4], esi

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00055	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00058	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0005b	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1010 :         ++_Mysize;

  00060	ff 47 04	 inc	 DWORD PTR [edi+4]

; 597  :         const pointer _Insert_after = _Insert_before->_Prev;

  00063	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 598  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00066	89 1e		 mov	 DWORD PTR [esi], ebx

; 599  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00068	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 600  :         const auto _Result    = this->_Ptr;
; 601  :         this->_Ptr            = pointer{};
; 602  :         _Insert_before->_Prev = _Result;

  0006b	89 73 04	 mov	 DWORD PTR [ebx+4], esi

; 603  :         _Insert_after->_Next  = _Result;

  0006e	89 31		 mov	 DWORD PTR [ecx], esi

; 965  :     }

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
$LN69@push_back:

; 1006 :             _Xlength_error("list too long");

  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00089	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN67@push_back:
  0008e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1SArgumet@script@@QAE@XZ
_TEXT	SEGMENT
??1SArgumet@script@@QAE@XZ PROC				; script::SArgumet::~SArgumet, COMDAT
; _this$ = ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@SArgumet
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000e	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN25@SArgumet

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 60		 ja	 SHORT $LN50@SArgumet

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN25@SArgumet:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@SArgumet:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00033	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0003a	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00041	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2286 :         return _BUF_SIZE <= _Myres;

  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0004b	72 27		 jb	 SHORT $LN43@SArgumet
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0004f	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00050	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00056	72 12		 jb	 SHORT $LN53@SArgumet

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00058	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	83 c0 fc	 add	 eax, -4			; fffffffcH
  00063	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00066	77 1f		 ja	 SHORT $LN50@SArgumet

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00068	8b c2		 mov	 eax, edx
$LN53@SArgumet:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006a	51		 push	 ecx
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
$LN43@SArgumet:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00074	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0007b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00082	c6 06 00	 mov	 BYTE PTR [esi], 0
  00085	5e		 pop	 esi
  00086	c3		 ret	 0
$LN50@SArgumet:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00087	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@SArgumet:
  0008c	cc		 int	 3
??1SArgumet@script@@QAE@XZ ENDP				; script::SArgumet::~SArgumet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
;	COMDAT ??0SArgumet@script@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_arg$ = 8						; size = 4
??0SArgumet@script@@QAE@ABU01@@Z PROC			; script::SArgumet::SArgumet, COMDAT
; _this$ = ecx

; 16   : 		SArgumet(const SArgumet& c_arg)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SArgumet@script@@QAE@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 4562 :         _My_data._Mysize = 0;

  00031	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00038	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0003f	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 16   : 		SArgumet(const SArgumet& c_arg)

  00042	8d 5e 18	 lea	 ebx, DWORD PTR [esi+24]
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0004c	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 4562 :         _My_data._Mysize = 0;

  00052	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00059	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00060	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 3043 :         if (this != _STD addressof(_Right)) {

  00063	8b 7d 08	 mov	 edi, DWORD PTR _c_arg$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 16   : 		SArgumet(const SArgumet& c_arg)

  00066	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  0006a	3b f7		 cmp	 esi, edi
  0006c	74 15		 je	 SHORT $LN32@SArgumet

; 2286 :         return _BUF_SIZE <= _Myres;

  0006e	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00072	8b c7		 mov	 eax, edi

; 2273 :         if (_Large_string_engaged()) {

  00074	72 02		 jb	 SHORT $LN37@SArgumet

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00076	8b 07		 mov	 eax, DWORD PTR [edi]
$LN37@SArgumet:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00078	ff 77 10	 push	 DWORD PTR [edi+16]
  0007b	8b ce		 mov	 ecx, esi
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN32@SArgumet:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 19   : 			strValue = c_arg.strValue;

  00083	83 c7 18	 add	 edi, 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  00086	3b df		 cmp	 ebx, edi
  00088	74 15		 je	 SHORT $LN51@SArgumet

; 2286 :         return _BUF_SIZE <= _Myres;

  0008a	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  0008e	8b c7		 mov	 eax, edi

; 2273 :         if (_Large_string_engaged()) {

  00090	72 02		 jb	 SHORT $LN47@SArgumet

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00092	8b 07		 mov	 eax, DWORD PTR [edi]
$LN47@SArgumet:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00094	ff 77 10	 push	 DWORD PTR [edi+16]
  00097	8b cb		 mov	 ecx, ebx
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN51@SArgumet:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 20   : 		}

  0009f	8b c6		 mov	 eax, esi
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ab	59		 pop	 ecx
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0SArgumet@script@@QAE@ABU01@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SArgumet@script@@QAE@ABU01@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SArgumet@script@@QAE@ABU01@@Z ENDP			; script::SArgumet::SArgumet
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h
;	COMDAT ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_stName$ = 8						; size = 4
_c_stValue$ = 12					; size = 4
??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; script::SArgumet::SArgumet, COMDAT
; _this$ = ecx

; 11   : 		SArgumet(const std::string& c_stName, const std::string& c_stValue)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0002a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 4562 :         _My_data._Mysize = 0;

  00030	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00037	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0003e	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 11   : 		SArgumet(const std::string& c_stName, const std::string& c_stValue)

  00041	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0004b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 4562 :         _My_data._Mysize = 0;

  00051	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00058	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0005f	c6 07 00	 mov	 BYTE PTR [edi], 0

; 3043 :         if (this != _STD addressof(_Right)) {

  00062	8b 45 08	 mov	 eax, DWORD PTR _c_stName$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 11   : 		SArgumet(const std::string& c_stName, const std::string& c_stValue)

  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  00069	3b f0		 cmp	 esi, eax
  0006b	74 15		 je	 SHORT $LN32@SArgumet

; 2286 :         return _BUF_SIZE <= _Myres;

  0006d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00071	8b c8		 mov	 ecx, eax

; 2273 :         if (_Large_string_engaged()) {

  00073	72 02		 jb	 SHORT $LN37@SArgumet

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00075	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN37@SArgumet:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00077	ff 70 10	 push	 DWORD PTR [eax+16]
  0007a	51		 push	 ecx
  0007b	8b ce		 mov	 ecx, esi
  0007d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN32@SArgumet:

; 3043 :         if (this != _STD addressof(_Right)) {

  00082	8b 45 0c	 mov	 eax, DWORD PTR _c_stValue$[ebp]
  00085	3b f8		 cmp	 edi, eax
  00087	74 15		 je	 SHORT $LN51@SArgumet

; 2286 :         return _BUF_SIZE <= _Myres;

  00089	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  0008d	8b c8		 mov	 ecx, eax

; 2273 :         if (_Large_string_engaged()) {

  0008f	72 02		 jb	 SHORT $LN47@SArgumet

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN47@SArgumet:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00093	ff 70 10	 push	 DWORD PTR [eax+16]
  00096	51		 push	 ecx
  00097	8b cf		 mov	 ecx, edi
  00099	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN51@SArgumet:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\parser.h

; 15   : 		}

  0009e	8b c6		 mov	 eax, esi
  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; script::SArgumet::SArgumet
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3210 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3211 :         // assign [_Ptr, _Ptr + _Count)
; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2263 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3213 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3215 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3225 :             },
; 3226 :             _Ptr);
; 3227 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4474 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4456 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4460 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 79   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3220 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3225 :             },
; 3226 :             _Ptr);
; 3227 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4475 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2968 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2286 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 2976 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2340 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
