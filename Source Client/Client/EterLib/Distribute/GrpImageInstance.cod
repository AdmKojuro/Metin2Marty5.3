; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30151.0 

	TITLE	C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Distribute\GrpImageInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCGraphicImageInstance@@@@6B@ ; CDynamicPool<CGraphicImageInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCGraphicImageInstance@@@@UAEPAXI@Z ; CDynamicPool<CGraphicImageInstance>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCGraphicImageInstance@@@@6B@ ; CDynamicPool<CGraphicImageInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCGraphicImageInstance@@@@@8 ; CDynamicPool<CGraphicImageInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCGraphicImageInstance@@@@8	; CDynamicPool<CGraphicImageInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCGraphicImageInstance@@@@8	; CDynamicPool<CGraphicImageInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCGraphicImageInstance@@@@8 ; CDynamicPool<CGraphicImageInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPool@VCGraphicImageInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CGraphicImageInstance>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCGraphicImageInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCGraphicImageInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCGraphicImageInstance@@@@@8 ; CDynamicPool<CGraphicImageInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCGraphicImageInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCGraphicImageInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCGraphicImageInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCGraphicImageInstance@@@@8 ; CDynamicPool<CGraphicImageInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCGraphicImageInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCGraphicImageInstance@@@@8 DD 00H	; CDynamicPool<CGraphicImageInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCGraphicImageInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCGraphicImageInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCGraphicImageInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CGraphicImageInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCGraphicImageInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCGraphicImageInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCGraphicImageInstance@@@@6B@ DD 00H ; CDynamicPool<CGraphicImageInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCGraphicImageInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCGraphicImageInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPool@VCGraphicImageInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCGraphicImageInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCGraphicImageInstance@@@@6B@ ; CDynamicPool<CGraphicImageInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCGraphicImageInstance@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	?Type@CGraphicImageInstance@@SAKXZ		; CGraphicImageInstance::Type
PUBLIC	?IsType@CGraphicImageInstance@@QAEHK@Z		; CGraphicImageInstance::IsType
PUBLIC	??0CGraphicImageInstance@@QAE@XZ		; CGraphicImageInstance::CGraphicImageInstance
PUBLIC	??1CGraphicImageInstance@@UAE@XZ		; CGraphicImageInstance::~CGraphicImageInstance
PUBLIC	?Destroy@CGraphicImageInstance@@QAEXXZ		; CGraphicImageInstance::Destroy
PUBLIC	?Render@CGraphicImageInstance@@QAEXXZ		; CGraphicImageInstance::Render
PUBLIC	?SetDiffuseColor@CGraphicImageInstance@@QAEXMMMM@Z ; CGraphicImageInstance::SetDiffuseColor
PUBLIC	?SetPosition@CGraphicImageInstance@@QAEXMM@Z	; CGraphicImageInstance::SetPosition
PUBLIC	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
PUBLIC	?ReloadImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::ReloadImagePointer
PUBLIC	?IsEmpty@CGraphicImageInstance@@QBE_NXZ		; CGraphicImageInstance::IsEmpty
PUBLIC	?GetWidth@CGraphicImageInstance@@QAEHXZ		; CGraphicImageInstance::GetWidth
PUBLIC	?GetHeight@CGraphicImageInstance@@QAEHXZ	; CGraphicImageInstance::GetHeight
PUBLIC	?SetScale@CGraphicImageInstance@@QAEXMM@Z	; CGraphicImageInstance::SetScale
PUBLIC	?GetScale@CGraphicImageInstance@@QBEABUD3DXVECTOR2@@XZ ; CGraphicImageInstance::GetScale
PUBLIC	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
PUBLIC	?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
PUBLIC	?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicImageInstance::GetGraphicImagePointer
PUBLIC	??8CGraphicImageInstance@@QBE_NABV0@@Z		; CGraphicImageInstance::operator==
PUBLIC	?Initialize@CGraphicImageInstance@@IAEXXZ	; CGraphicImageInstance::Initialize
PUBLIC	?OnRender@CGraphicImageInstance@@MAEXXZ		; CGraphicImageInstance::OnRender
PUBLIC	?OnSetImagePointer@CGraphicImageInstance@@MAEXXZ ; CGraphicImageInstance::OnSetImagePointer
PUBLIC	?OnIsType@CGraphicImageInstance@@MAEHK@Z	; CGraphicImageInstance::OnIsType
PUBLIC	?CreateSystem@CGraphicImageInstance@@SAXI@Z	; CGraphicImageInstance::CreateSystem
PUBLIC	?DestroySystem@CGraphicImageInstance@@SAXXZ	; CGraphicImageInstance::DestroySystem
PUBLIC	?New@CGraphicImageInstance@@SAPAV1@XZ		; CGraphicImageInstance::New
PUBLIC	?Delete@CGraphicImageInstance@@SAXPAV1@@Z	; CGraphicImageInstance::Delete
PUBLIC	??_GCGraphicImageInstance@@UAEPAXI@Z		; CGraphicImageInstance::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCGraphicImageInstance@@@@UAE@XZ ; CDynamicPool<CGraphicImageInstance>::~CDynamicPool<CGraphicImageInstance>
PUBLIC	?Delete@?$CDynamicPool@VCGraphicImageInstance@@@@KAXPAVCGraphicImageInstance@@@Z ; CDynamicPool<CGraphicImageInstance>::Delete
PUBLIC	?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Emplace_reallocate<CGraphicImageInstance * const &>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A ; CGraphicImageInstance::ms_kPool
PUBLIC	??_7CGraphicImageInstance@@6B@			; CGraphicImageInstance::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BG@OHFFHEGB@CGraphicImageInstance@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGraphicImageInstance@@6B@			; CGraphicImageInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicImageInstance@@@8		; CGraphicImageInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicImageInstance@@8			; CGraphicImageInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicImageInstance@@8			; CGraphicImageInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicImageInstance@@8		; CGraphicImageInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@437f0000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?Reload@CResource@@QAEXXZ:PROC			; CResource::Reload
EXTRN	?IsEmpty@CResource@@QBE_NXZ:PROC		; CResource::IsEmpty
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	?GetWidth@CGraphicTexture@@QBEHXZ:PROC		; CGraphicTexture::GetWidth
EXTRN	?GetHeight@CGraphicTexture@@QBEHXZ:PROC		; CGraphicTexture::GetHeight
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?GetWidth@CGraphicImage@@QBEHXZ:PROC		; CGraphicImage::GetWidth
EXTRN	?GetHeight@CGraphicImage@@QBEHXZ:PROC		; CGraphicImage::GetHeight
EXTRN	?GetRectReference@CGraphicImage@@QBEABUtagRECT@@XZ:PROC ; CGraphicImage::GetRectReference
EXTRN	?GetTextureReference@CGraphicImage@@QBEABVCGraphicTexture@@XZ:PROC ; CGraphicImage::GetTextureReference
EXTRN	?GetTexturePointer@CGraphicImage@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImage::GetTexturePointer
EXTRN	??_ECGraphicImageInstance@@UAEPAXI@Z:PROC	; CGraphicImageInstance::`vector deleting destructor'
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftoui3:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_dwType@?1??Type@CGraphicImageInstance@@SAKXZ@4KA
_BSS	SEGMENT
?s_dwType@?1??Type@CGraphicImageInstance@@SAKXZ@4KA DD 01H DUP (?) ; `CGraphicImageInstance::Type'::`2'::s_dwType
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CGraphicImageInstance@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CGraphicImageInstance@@SAKXZ@4HA DD 01H DUP (?) ; `CGraphicImageInstance::Type'::`2'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CGraphicImageInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CGraphicImageInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicImageInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicImageInstance@@8 DD FLAT:??_R0?AVCGraphicImageInstance@@@8 ; CGraphicImageInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicImageInstance@@8
rdata$r	SEGMENT
??_R2CGraphicImageInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicImageInstance@@8 ; CGraphicImageInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicImageInstance@@8
rdata$r	SEGMENT
??_R3CGraphicImageInstance@@8 DD 00H			; CGraphicImageInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicImageInstance@@@8
data$rs	SEGMENT
??_R0?AVCGraphicImageInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicImageInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicImageInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicImageInstance@@6B@
rdata$r	SEGMENT
??_R4CGraphicImageInstance@@6B@ DD 00H			; CGraphicImageInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicImageInstance@@@8
	DD	FLAT:??_R3CGraphicImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OHFFHEGB@CGraphicImageInstance@
CONST	SEGMENT
??_C@_0BG@OHFFHEGB@CGraphicImageInstance@ DB 'CGraphicImageInstance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicImageInstance@@6B@
CONST	SEGMENT
??_7CGraphicImageInstance@@6B@ DD FLAT:??_R4CGraphicImageInstance@@6B@ ; CGraphicImageInstance::`vftable'
	DD	FLAT:??_ECGraphicImageInstance@@UAEPAXI@Z
	DD	FLAT:?OnRender@CGraphicImageInstance@@MAEXXZ
	DD	FLAT:?OnSetImagePointer@CGraphicImageInstance@@MAEXXZ
	DD	FLAT:?OnIsType@CGraphicImageInstance@@MAEHK@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCGraphicImageInstance@@@@6B@ ; CGraphicImageInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CRef@VCGraphicImage@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CGraphicImageInstance@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CGraphicImageInstance@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CGraphicImageInstance@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CGraphicImageInstance@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CGraphicImageInstance@@SAKXZ$0
__ehfuncinfo$?Type@CGraphicImageInstance@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CGraphicImageInstance@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
__Whereoff$1$ = -4					; size = 4
tv505 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Emplace_reallocate<CGraphicImageInstance * const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN74@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN75@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv505[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv505[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d4	83 c0 04	 add	 eax, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN60@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array

; 793  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv505[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 794  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN74@Emplace_re:

; 765  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
$LN75@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN72@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Emplace_reallocate<CGraphicImageInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CGraphicImageInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A ; CGraphicImageInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCGraphicImageInstance@@@@UAE@XZ ; CDynamicPool<CGraphicImageInstance>::~CDynamicPool<CGraphicImageInstance>
??__F?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CGraphicImageInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ??__E?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CGraphicImageInstance::ms_kPool'', COMDAT

; 11   : CDynamicPool<CGraphicImageInstance>		CGraphicImageInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CGraphicImageInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CGraphicImageInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCGraphicImageInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCGraphicImageInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CGraphicImageInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCGraphicImageInstance@@@@UAE@XZ ; CDynamicPool<CGraphicImageInstance>::~CDynamicPool<CGraphicImageInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCGraphicImageInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CGraphicImageInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 1740 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1286 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1286 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 1287 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1288 :         auto& _My_data    = _Mypair._Myval2;
; 1289 :         pointer& _Myfirst = _My_data._Myfirst;
; 1290 :         pointer& _Mylast  = _My_data._Mylast;
; 1291 : 
; 1292 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	2b 06		 sub	 eax, DWORD PTR [esi]
  00011	c1 f8 02	 sar	 eax, 2
  00014	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00017	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0001d	0f 87 8a 00 00
	00		 ja	 $LN59@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00023	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0002c	72 0d		 jb	 SHORT $LN15@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00034	83 c4 04	 add	 esp, 4
  00037	8b f8		 mov	 edi, eax
  00039	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0003b	85 db		 test	 ebx, ebx
  0003d	74 0d		 je	 SHORT $LN16@Reallocate

; 79   :         return ::operator new(_Bytes);

  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00045	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00048	8b f8		 mov	 edi, eax
  0004a	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0004c	33 ff		 xor	 edi, edi
$LN14@Reallocate:

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0004e	57		 push	 edi
  0004f	ff 76 04	 push	 DWORD PTR [esi+4]
  00052	ff 36		 push	 DWORD PTR [esi]
  00054	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00059	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 2c		 je	 SHORT $LN43@Reallocate

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00065	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN53@Reallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 26		 ja	 SHORT $LN50@Reallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN53@Reallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008b	83 c4 08	 add	 esp, 8
$LN43@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00091	89 3e		 mov	 DWORD PTR [esi], edi
  00093	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00096	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00099	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0009c	5f		 pop	 edi
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1304 :     }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN50@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN59@Reallocate:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ad	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN57@Reallocate:
  000b2	cc		 int	 3
?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCGraphicImageInstance@@@@KAXPAVCGraphicImageInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCGraphicImageInstance@@@@KAXPAVCGraphicImageInstance@@@Z PROC ; CDynamicPool<CGraphicImageInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCGraphicImageInstance@@@@KAXPAVCGraphicImageInstance@@@Z ENDP ; CDynamicPool<CGraphicImageInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCGraphicImageInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCGraphicImageInstance@@@@UAE@XZ PROC	; CDynamicPool<CGraphicImageInstance>::~CDynamicPool<CGraphicImageInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCGraphicImageInstance@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1756 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1756 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCGraphicImageInstance@@@@UAE@XZ ENDP	; CDynamicPool<CGraphicImageInstance>::~CDynamicPool<CGraphicImageInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicImageInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicImageInstance@@UAEPAXI@Z PROC		; CGraphicImageInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicImageInstance@@UAEPAXI@Z ENDP		; CGraphicImageInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?Delete@CGraphicImageInstance@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkImgInst$ = 8						; size = 4
?Delete@CGraphicImageInstance@@SAXPAV1@@Z PROC		; CGraphicImageInstance::Delete, COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 30   : 	pkImgInst->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkImgInst$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CGraphicImageInstance@@QAEXXZ ; CGraphicImageInstance::Destroy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+20
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 31   : 	ms_kPool.Free(pkImgInst);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 32   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Emplace_reallocate<CGraphicImageInstance * const &>
  00039	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 32   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CGraphicImageInstance@@SAXPAV1@@Z ENDP		; CGraphicImageInstance::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?New@CGraphicImageInstance@@SAPAV1@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
_pkNewData$2 = -4					; size = 4
?New@CGraphicImageInstance@@SAPAV1@XZ PROC		; CGraphicImageInstance::New, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1531 :         return _My_data._Myfirst == _My_data._Mylast;

  00004	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+20
  0000a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+16, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00010	75 61		 jne	 SHORT $LN4@New

; 65   : 				T* pkNewData=new T;

  00012	56		 push	 esi
  00013	6a 28		 push	 40			; 00000028H
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00020	85 c0		 test	 eax, eax
  00022	74 0b		 je	 SHORT $LN6@New
  00024	8b c8		 mov	 ecx, eax
  00026	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  0002b	8b f0		 mov	 esi, eax
  0002d	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  0002f	33 f6		 xor	 esi, esi
$LN7@New:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00031	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00036	89 75 fc	 mov	 DWORD PTR _pkNewData$2[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00039	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+12
  0003f	74 16		 je	 SHORT $LN14@New

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00041	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 25   : 	return ms_kPool.Alloc();

  00043	8b c6		 mov	 eax, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 716  :         ++_Mylast;

  00045	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+8, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  0004c	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+32
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 25   : 	return ms_kPool.Alloc();

  00052	5e		 pop	 esi

; 26   : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN14@New:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00057	8d 4d fc	 lea	 ecx, DWORD PTR _pkNewData$2[ebp]
  0005a	51		 push	 ecx
  0005b	50		 push	 eax
  0005c	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+4
  00061	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Emplace_reallocate<CGraphicImageInstance * const &>
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00066	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+32
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 25   : 	return ms_kPool.Alloc();

  0006c	8b c6		 mov	 eax, esi
  0006e	5e		 pop	 esi

; 26   : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN4@New:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  00073	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1611 :         return _My_data._Mylast[-1];

  00076	83 c1 fc	 add	 ecx, -4			; fffffffcH

; 1390 :         --_Mylast;

  00079	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+20, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 26   : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?New@CGraphicImageInstance@@SAPAV1@XZ ENDP		; CGraphicImageInstance::New
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?DestroySystem@CGraphicImageInstance@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CGraphicImageInstance@@SAXXZ PROC	; CGraphicImageInstance::DestroySystem, COMDAT

; 19   : {

  00000	56		 push	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 19   : {

  00007	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 231  :     const auto _ULast = _Get_unwrapped(_Last);

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+8

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 2a		 je	 SHORT $LN30@DestroySys
$LL20@DestroySys:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN18@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN18@DestroySys:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00025	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+4
  0002a	a3 08 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+8, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 21   : }

  0002f	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+16
  00034	5f		 pop	 edi
  00035	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+20, eax
  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
$LN30@DestroySys:
  0003c	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+16
  00041	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00042	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+8, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 21   : }

  00048	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+20, eax
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
?DestroySystem@CGraphicImageInstance@@SAXXZ ENDP	; CGraphicImageInstance::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?CreateSystem@CGraphicImageInstance@@SAXI@Z
_TEXT	SEGMENT
_uCapacity$ = 8						; size = 4
?CreateSystem@CGraphicImageInstance@@SAXI@Z PROC	; CGraphicImageInstance::CreateSystem, COMDAT

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00003	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+12
  00008	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 14   : {

  0000e	56		 push	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 57   : 			m_uInitCapacity=uCapacity;

  0000f	8b 75 08	 mov	 esi, DWORD PTR _uCapacity$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00012	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 57   : 			m_uInitCapacity=uCapacity;

  00015	89 35 1c 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+28, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1358 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0001b	3b f0		 cmp	 esi, eax
  0001d	76 13		 jbe	 SHORT $LN6@CreateSyst

; 1359 :             if (_Newcapacity > max_size()) {

  0001f	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00025	77 33		 ja	 SHORT $LN19@CreateSyst

; 1361 :             }
; 1362 : 
; 1363 :             _Reallocate_exactly(_Newcapacity);

  00027	56		 push	 esi
  00028	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+4
  0002d	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Reallocate_exactly
$LN6@CreateSyst:

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00032	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+24
  00037	2b 05 10 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+16
  0003d	c1 f8 02	 sar	 eax, 2

; 1358 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00040	3b f0		 cmp	 esi, eax
  00042	76 13		 jbe	 SHORT $LN13@CreateSyst

; 1359 :             if (_Newcapacity > max_size()) {

  00044	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0004a	77 0e		 ja	 SHORT $LN19@CreateSyst

; 1361 :             }
; 1362 : 
; 1363 :             _Reallocate_exactly(_Newcapacity);

  0004c	56		 push	 esi
  0004d	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+16
  00052	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Reallocate_exactly
$LN13@CreateSyst:
  00057	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 16   : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN19@CreateSyst:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1360 :                 _Xlength();

  0005a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
$LN20@CreateSyst:
  0005f	cc		 int	 3
?CreateSystem@CGraphicImageInstance@@SAXI@Z ENDP	; CGraphicImageInstance::CreateSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?OnIsType@CGraphicImageInstance@@MAEHK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?OnIsType@CGraphicImageInstance@@MAEHK@Z PROC		; CGraphicImageInstance::OnIsType, COMDAT
; _this$ = ecx

; 210  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 211  : 	if (CGraphicImageInstance::Type() == dwType)

  00003	e8 00 00 00 00	 call	 ?Type@CGraphicImageInstance@@SAKXZ ; CGraphicImageInstance::Type
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 45 08	 cmp	 eax, DWORD PTR _dwType$[ebp]
  0000d	0f 94 c1	 sete	 cl
  00010	8b c1		 mov	 eax, ecx

; 212  : 		return TRUE;
; 213  : 
; 214  : 	return FALSE;
; 215  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?OnIsType@CGraphicImageInstance@@MAEHK@Z ENDP		; CGraphicImageInstance::OnIsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?OnSetImagePointer@CGraphicImageInstance@@MAEXXZ
_TEXT	SEGMENT
?OnSetImagePointer@CGraphicImageInstance@@MAEXXZ PROC	; CGraphicImageInstance::OnSetImagePointer, COMDAT
; _this$ = ecx

; 219  : }

  00000	c2 00 00	 ret	 0
?OnSetImagePointer@CGraphicImageInstance@@MAEXXZ ENDP	; CGraphicImageInstance::OnSetImagePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?OnRender@CGraphicImageInstance@@MAEXXZ
_TEXT	SEGMENT
_pTexture$1$ = -140					; size = 4
_su$1$ = -136						; size = 4
tv1074 = -132						; size = 4
_sv$1$ = -128						; size = 4
tv1058 = -124						; size = 4
_eu$1$ = -120						; size = 4
_fimgHeight$1$ = -116					; size = 4
tv1097 = -116						; size = 4
_fimgWidth$1$ = -112					; size = 4
tv1096 = -112						; size = 4
_ev$1$ = -108						; size = 4
_texReverseWidth$1$ = -108				; size = 4
_dwR$1$ = -104						; size = 4
_dwR$1$ = -104						; size = 4
_dwR$1$ = -104						; size = 4
_dwR$1$ = -104						; size = 4
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
?OnRender@CGraphicImageInstance@@MAEXXZ PROC		; CGraphicImageInstance::OnRender, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx

; 47   : 	CGraphicImage * pImage = m_roImage.GetPointer();

  00018	8b 77 24	 mov	 esi, DWORD PTR [edi+36]

; 48   : 	CGraphicTexture * pTexture = pImage->GetTexturePointer();

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImage@@QAEPAVCGraphicTexture@@XZ ; CGraphicImage::GetTexturePointer

; 49   : 
; 50   : #if defined(IMAGE_SCALE) || defined(RENDER_TARGET)
; 51   : 	float fimgWidth = m_roImage->GetWidth() * m_v2Scale.x;

  00022	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00025	8b d8		 mov	 ebx, eax
  00027	89 9d 74 ff ff
	ff		 mov	 DWORD PTR _pTexture$1$[ebp], ebx
  0002d	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth

; 52   : 	float fimgHeight = m_roImage->GetHeight() * m_v2Scale.y;

  00032	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00035	66 0f 6e c0	 movd	 xmm0, eax
  00039	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0003c	f3 0f 59 47 1c	 mulss	 xmm0, DWORD PTR [edi+28]
  00041	f3 0f 11 45 90	 movss	 DWORD PTR _fimgWidth$1$[ebp], xmm0
  00046	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImage@@QBEHXZ ; CGraphicImage::GetHeight

; 53   : #else
; 54   : 	float fimgWidth = pImage->GetWidth();
; 55   : 	float fimgHeight = pImage->GetHeight();
; 56   : #endif
; 57   : 
; 58   : 	const RECT& c_rRect = pImage->GetRectReference();

  0004b	8b ce		 mov	 ecx, esi
  0004d	66 0f 6e c0	 movd	 xmm0, eax
  00051	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00054	f3 0f 59 47 20	 mulss	 xmm0, DWORD PTR [edi+32]
  00059	f3 0f 11 45 8c	 movss	 DWORD PTR _fimgHeight$1$[ebp], xmm0
  0005e	e8 00 00 00 00	 call	 ?GetRectReference@CGraphicImage@@QBEABUtagRECT@@XZ ; CGraphicImage::GetRectReference

; 59   : 	float texReverseWidth = 1.0f / float(pTexture->GetWidth());

  00063	8b cb		 mov	 ecx, ebx
  00065	8b f0		 mov	 esi, eax
  00067	e8 00 00 00 00	 call	 ?GetWidth@CGraphicTexture@@QBEHXZ ; CGraphicTexture::GetWidth
  0006c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000

; 60   : 	float texReverseHeight = 1.0f / float(pTexture->GetHeight());

  00074	8b cb		 mov	 ecx, ebx
  00076	66 0f 6e c0	 movd	 xmm0, eax
  0007a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007d	f3 0f 5e c8	 divss	 xmm1, xmm0
  00081	f3 0f 11 4d 94	 movss	 DWORD PTR _texReverseWidth$1$[ebp], xmm1
  00086	e8 00 00 00 00	 call	 ?GetHeight@CGraphicTexture@@QBEHXZ ; CGraphicTexture::GetHeight
  0008b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00093	66 0f 6e 26	 movd	 xmm4, DWORD PTR [esi]
  00097	66 0f 6e 6e 08	 movd	 xmm5, DWORD PTR [esi+8]
  0009c	66 0f 6e c0	 movd	 xmm0, eax
  000a0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000a3	66 0f 6e 5e 04	 movd	 xmm3, DWORD PTR [esi+4]
  000a8	f3 0f 5e c8	 divss	 xmm1, xmm0
  000ac	66 0f 6e 46 0c	 movd	 xmm0, DWORD PTR [esi+12]

; 64   : 	float ev = (c_rRect.top + (c_rRect.bottom-c_rRect.top)) * texReverseHeight;

  000b1	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 70   : 	vertices[0].position.z	= 0.0f;

  000b4	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  000bb	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 64   : 	float ev = (c_rRect.top + (c_rRect.bottom-c_rRect.top)) * texReverseHeight;

  000c3	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000c7	0f 5b e4	 cvtdq2ps xmm4, xmm4
  000ca	0f 5b db	 cvtdq2ps xmm3, xmm3
  000cd	f3 0f 59 65 94	 mulss	 xmm4, DWORD PTR _texReverseWidth$1$[ebp]
  000d2	0f 5b ed	 cvtdq2ps xmm5, xmm5
  000d5	f3 0f 59 d9	 mulss	 xmm3, xmm1
  000d9	f3 0f 59 6d 94	 mulss	 xmm5, DWORD PTR _texReverseWidth$1$[ebp]

; 68   : 	vertices[0].position.x	= m_v2Position.x-0.5f;

  000de	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  000e6	f3 0f 11 45 94	 movss	 DWORD PTR _ev$1$[ebp], xmm0
  000eb	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  000f0	f3 0f 5c c1	 subss	 xmm0, xmm1
  000f4	f3 0f 11 5d 80	 movss	 DWORD PTR _sv$1$[ebp], xmm3

; 71   : 	vertices[0].texCoord	= TTextureCoordinate(su, sv);

  000f9	f3 0f 11 5d b0	 movss	 DWORD PTR _vertices$[ebp+20], xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  000fe	f3 0f 10 5f 04	 movss	 xmm3, DWORD PTR [edi+4]
  00103	0f 2f 1d 00 00
	00 00		 comiss	 xmm3, DWORD PTR __real@3f800000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 68   : 	vertices[0].position.x	= m_v2Position.x-0.5f;

  0010a	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR tv1074[ebp], xmm0
  00112	f3 0f 11 45 9c	 movss	 DWORD PTR _vertices$[ebp], xmm0

; 69   : 	vertices[0].position.y	= m_v2Position.y-0.5f;

  00117	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
  0011c	f3 0f 5c c1	 subss	 xmm0, xmm1
  00120	f3 0f 11 a5 78
	ff ff ff	 movss	 DWORD PTR _su$1$[ebp], xmm4
  00128	f3 0f 11 6d 88	 movss	 DWORD PTR _eu$1$[ebp], xmm5

; 71   : 	vertices[0].texCoord	= TTextureCoordinate(su, sv);

  0012d	f3 0f 11 65 ac	 movss	 DWORD PTR _vertices$[ebp+16], xmm4
  00132	f3 0f 11 45 84	 movss	 DWORD PTR tv1058[ebp], xmm0
  00137	f3 0f 11 45 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0013c	0f 57 c0	 xorps	 xmm0, xmm0
  0013f	72 09		 jb	 SHORT $LN14@OnRender
  00141	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00148	eb 34		 jmp	 SHORT $LN13@OnRender
$LN14@OnRender:
  0014a	0f 2f c3	 comiss	 xmm0, xmm3
  0014d	72 09		 jb	 SHORT $LN12@OnRender
  0014f	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  00156	eb 26		 jmp	 SHORT $LN13@OnRender
$LN12@OnRender:
  00158	0f 28 c3	 movaps	 xmm0, xmm3
  0015b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0015f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00163	e8 00 00 00 00	 call	 __ftoui3
  00168	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00170	0f 57 c0	 xorps	 xmm0, xmm0
  00173	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
  0017b	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN13@OnRender:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0017e	f3 0f 10 67 08	 movss	 xmm4, DWORD PTR [edi+8]
  00183	0f 2f 25 00 00
	00 00		 comiss	 xmm4, DWORD PTR __real@3f800000
  0018a	72 07		 jb	 SHORT $LN18@OnRender
  0018c	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00191	eb 1b		 jmp	 SHORT $LN17@OnRender
$LN18@OnRender:
  00193	0f 2f c4	 comiss	 xmm0, xmm4
  00196	72 04		 jb	 SHORT $LN16@OnRender
  00198	33 db		 xor	 ebx, ebx
  0019a	eb 12		 jmp	 SHORT $LN17@OnRender
$LN16@OnRender:
  0019c	0f 28 c4	 movaps	 xmm0, xmm4
  0019f	f3 0f 59 c2	 mulss	 xmm0, xmm2
  001a3	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a7	e8 00 00 00 00	 call	 __ftoui3
  001ac	8b d8		 mov	 ebx, eax
$LN17@OnRender:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  001ae	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  001b3	0f 57 c0	 xorps	 xmm0, xmm0
  001b6	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  001bd	72 07		 jb	 SHORT $LN22@OnRender
  001bf	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  001c4	eb 26		 jmp	 SHORT $LN21@OnRender
$LN22@OnRender:
  001c6	0f 2f c1	 comiss	 xmm0, xmm1
  001c9	72 04		 jb	 SHORT $LN20@OnRender
  001cb	33 f6		 xor	 esi, esi
  001cd	eb 1d		 jmp	 SHORT $LN21@OnRender
$LN20@OnRender:
  001cf	0f 28 c1	 movaps	 xmm0, xmm1
  001d2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001da	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001e2	e8 00 00 00 00	 call	 __ftoui3
  001e7	8b f0		 mov	 esi, eax
  001e9	0f 57 c0	 xorps	 xmm0, xmm0
$LN21@OnRender:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  001ec	f3 0f 10 57 10	 movss	 xmm2, DWORD PTR [edi+16]
  001f1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  001f9	0f 2f d1	 comiss	 xmm2, xmm1
  001fc	72 07		 jb	 SHORT $LN26@OnRender
  001fe	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00203	eb 29		 jmp	 SHORT $LN25@OnRender
$LN26@OnRender:
  00205	0f 2f c2	 comiss	 xmm0, xmm2
  00208	72 04		 jb	 SHORT $LN24@OnRender
  0020a	33 c0		 xor	 eax, eax
  0020c	eb 20		 jmp	 SHORT $LN25@OnRender
$LN24@OnRender:
  0020e	0f 28 c2	 movaps	 xmm0, xmm2
  00211	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00219	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00221	e8 00 00 00 00	 call	 __ftoui3
  00226	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
$LN25@OnRender:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 74   : 	vertices[1].position.x	= m_v2Position.x + fimgWidth-0.5f;

  0022e	f3 0f 10 57 14	 movss	 xmm2, DWORD PTR [edi+20]
  00233	f3 0f 58 55 90	 addss	 xmm2, DWORD PTR _fimgWidth$1$[ebp]
  00238	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00240	c1 e0 08	 shl	 eax, 8
  00243	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  00246	c1 e0 08	 shl	 eax, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 74   : 	vertices[1].position.x	= m_v2Position.x + fimgWidth-0.5f;

  00249	f3 0f 5c d0	 subss	 xmm2, xmm0

; 76   : 	vertices[1].position.z	= 0.0f;

  0024d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+32], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00254	0b c3		 or	 eax, ebx
  00256	c1 e0 08	 shl	 eax, 8
  00259	0b c6		 or	 eax, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 72   : 	vertices[0].diffuse		= m_DiffuseColor;

  0025b	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax

; 74   : 	vertices[1].position.x	= m_v2Position.x + fimgWidth-0.5f;

  0025e	f3 0f 11 55 90	 movss	 DWORD PTR tv1096[ebp], xmm2
  00263	f3 0f 11 55 b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm2

; 75   : 	vertices[1].position.y	= m_v2Position.y-0.5f;

  00268	f3 0f 10 55 84	 movss	 xmm2, DWORD PTR tv1058[ebp]
  0026d	f3 0f 11 55 b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm2

; 77   : 	vertices[1].texCoord	= TTextureCoordinate(eu, sv);

  00272	f3 0f 10 55 88	 movss	 xmm2, DWORD PTR _eu$1$[ebp]
  00277	f3 0f 11 55 c4	 movss	 DWORD PTR _vertices$[ebp+40], xmm2
  0027c	f3 0f 10 55 80	 movss	 xmm2, DWORD PTR _sv$1$[ebp]
  00281	f3 0f 11 55 c8	 movss	 DWORD PTR _vertices$[ebp+44], xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00286	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  0028b	0f 2f d1	 comiss	 xmm2, xmm1
  0028e	0f 57 c9	 xorps	 xmm1, xmm1
  00291	72 09		 jb	 SHORT $LN34@OnRender
  00293	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  0029a	eb 2d		 jmp	 SHORT $LN33@OnRender
$LN34@OnRender:
  0029c	0f 2f ca	 comiss	 xmm1, xmm2
  0029f	72 09		 jb	 SHORT $LN32@OnRender
  002a1	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  002a8	eb 1f		 jmp	 SHORT $LN33@OnRender
$LN32@OnRender:
  002aa	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@437f0000
  002b2	f3 0f 58 c2	 addss	 xmm0, xmm2
  002b6	e8 00 00 00 00	 call	 __ftoui3
  002bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  002c3	0f 57 c9	 xorps	 xmm1, xmm1
  002c6	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN33@OnRender:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  002c9	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]
  002ce	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@3f800000
  002d5	72 07		 jb	 SHORT $LN38@OnRender
  002d7	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  002dc	eb 1c		 jmp	 SHORT $LN37@OnRender
$LN38@OnRender:
  002de	0f 2f ca	 comiss	 xmm1, xmm2
  002e1	72 04		 jb	 SHORT $LN36@OnRender
  002e3	33 db		 xor	 ebx, ebx
  002e5	eb 13		 jmp	 SHORT $LN37@OnRender
$LN36@OnRender:
  002e7	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@437f0000
  002ef	f3 0f 58 c2	 addss	 xmm0, xmm2
  002f3	e8 00 00 00 00	 call	 __ftoui3
  002f8	8b d8		 mov	 ebx, eax
$LN37@OnRender:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  002fa	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  002ff	0f 57 c0	 xorps	 xmm0, xmm0
  00302	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00309	72 07		 jb	 SHORT $LN42@OnRender
  0030b	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00310	eb 26		 jmp	 SHORT $LN41@OnRender
$LN42@OnRender:
  00312	0f 2f c1	 comiss	 xmm0, xmm1
  00315	72 04		 jb	 SHORT $LN40@OnRender
  00317	33 f6		 xor	 esi, esi
  00319	eb 1d		 jmp	 SHORT $LN41@OnRender
$LN40@OnRender:
  0031b	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00323	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  0032b	0f 28 c1	 movaps	 xmm0, xmm1
  0032e	e8 00 00 00 00	 call	 __ftoui3
  00333	8b f0		 mov	 esi, eax
  00335	0f 57 c0	 xorps	 xmm0, xmm0
$LN41@OnRender:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00338	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  0033d	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00344	72 07		 jb	 SHORT $LN46@OnRender
  00346	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0034b	eb 21		 jmp	 SHORT $LN45@OnRender
$LN46@OnRender:
  0034d	0f 2f c1	 comiss	 xmm0, xmm1
  00350	72 04		 jb	 SHORT $LN44@OnRender
  00352	33 c0		 xor	 eax, eax
  00354	eb 18		 jmp	 SHORT $LN45@OnRender
$LN44@OnRender:
  00356	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  0035e	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00366	0f 28 c1	 movaps	 xmm0, xmm1
  00369	e8 00 00 00 00	 call	 __ftoui3
$LN45@OnRender:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 80   : 	vertices[2].position.x	= m_v2Position.x-0.5f;

  0036e	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv1074[ebp]

; 81   : 	vertices[2].position.y	= m_v2Position.y + fimgHeight-0.5f;

  00376	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0037e	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 80   : 	vertices[2].position.x	= m_v2Position.x-0.5f;

  00383	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm0

; 81   : 	vertices[2].position.y	= m_v2Position.y + fimgHeight-0.5f;

  00388	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
  0038d	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _fimgHeight$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00392	c1 e0 08	 shl	 eax, 8
  00395	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  00398	c1 e0 08	 shl	 eax, 8
  0039b	0b c3		 or	 eax, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 82   : 	vertices[2].position.z	= 0.0f;

  0039d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+56], 0
  003a4	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  003a8	c1 e0 08	 shl	 eax, 8
  003ab	0b c6		 or	 eax, esi

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003ad	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@3f800000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 78   : 	vertices[1].diffuse		= m_DiffuseColor;

  003b4	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax

; 81   : 	vertices[2].position.y	= m_v2Position.y + fimgHeight-0.5f;

  003b7	f3 0f 11 45 8c	 movss	 DWORD PTR tv1097[ebp], xmm0
  003bc	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm0

; 83   : 	vertices[2].texCoord	= TTextureCoordinate(su, ev);

  003c1	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _su$1$[ebp]
  003c9	f3 0f 11 45 dc	 movss	 DWORD PTR _vertices$[ebp+64], xmm0
  003ce	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _ev$1$[ebp]
  003d3	f3 0f 11 45 e0	 movss	 DWORD PTR _vertices$[ebp+68], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003d8	0f 57 c0	 xorps	 xmm0, xmm0
  003db	72 09		 jb	 SHORT $LN54@OnRender
  003dd	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  003e4	eb 30		 jmp	 SHORT $LN53@OnRender
$LN54@OnRender:
  003e6	0f 2f c2	 comiss	 xmm0, xmm2
  003e9	72 09		 jb	 SHORT $LN52@OnRender
  003eb	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  003f2	eb 22		 jmp	 SHORT $LN53@OnRender
$LN52@OnRender:
  003f4	0f 28 c2	 movaps	 xmm0, xmm2
  003f7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  003ff	f3 0f 58 c1	 addss	 xmm0, xmm1
  00403	e8 00 00 00 00	 call	 __ftoui3
  00408	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00410	0f 57 c0	 xorps	 xmm0, xmm0
  00413	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN53@OnRender:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00416	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]
  0041b	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@3f800000
  00422	72 07		 jb	 SHORT $LN58@OnRender
  00424	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00429	eb 1f		 jmp	 SHORT $LN57@OnRender
$LN58@OnRender:
  0042b	0f 2f c2	 comiss	 xmm0, xmm2
  0042e	72 04		 jb	 SHORT $LN56@OnRender
  00430	33 db		 xor	 ebx, ebx
  00432	eb 16		 jmp	 SHORT $LN57@OnRender
$LN56@OnRender:
  00434	0f 28 c2	 movaps	 xmm0, xmm2
  00437	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0043f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00443	e8 00 00 00 00	 call	 __ftoui3
  00448	8b d8		 mov	 ebx, eax
$LN57@OnRender:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0044a	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  0044f	0f 57 c0	 xorps	 xmm0, xmm0
  00452	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00459	72 07		 jb	 SHORT $LN62@OnRender
  0045b	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00460	eb 26		 jmp	 SHORT $LN61@OnRender
$LN62@OnRender:
  00462	0f 2f c1	 comiss	 xmm0, xmm1
  00465	72 04		 jb	 SHORT $LN60@OnRender
  00467	33 f6		 xor	 esi, esi
  00469	eb 1d		 jmp	 SHORT $LN61@OnRender
$LN60@OnRender:
  0046b	0f 28 c1	 movaps	 xmm0, xmm1
  0046e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00476	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0047e	e8 00 00 00 00	 call	 __ftoui3
  00483	8b f0		 mov	 esi, eax
  00485	0f 57 c0	 xorps	 xmm0, xmm0
$LN61@OnRender:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00488	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  0048d	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00494	72 07		 jb	 SHORT $LN66@OnRender
  00496	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0049b	eb 21		 jmp	 SHORT $LN65@OnRender
$LN66@OnRender:
  0049d	0f 2f c1	 comiss	 xmm0, xmm1
  004a0	72 04		 jb	 SHORT $LN64@OnRender
  004a2	33 c0		 xor	 eax, eax
  004a4	eb 18		 jmp	 SHORT $LN65@OnRender
$LN64@OnRender:
  004a6	0f 28 c1	 movaps	 xmm0, xmm1
  004a9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  004b1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  004b9	e8 00 00 00 00	 call	 __ftoui3
$LN65@OnRender:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 86   : 	vertices[3].position.x	= m_v2Position.x + fimgWidth-0.5f;

  004be	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv1096[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  004c3	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004c8	c1 e0 08	 shl	 eax, 8
  004cb	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 86   : 	vertices[3].position.x	= m_v2Position.x + fimgWidth-0.5f;

  004ce	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm0

; 87   : 	vertices[3].position.y	= m_v2Position.y + fimgHeight-0.5f;

  004d3	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv1097[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004d8	c1 e0 08	 shl	 eax, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 87   : 	vertices[3].position.y	= m_v2Position.y + fimgHeight-0.5f;

  004db	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004e0	0b c3		 or	 eax, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 89   : 	vertices[3].texCoord	= TTextureCoordinate(eu, ev);

  004e2	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _eu$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004e7	c1 e0 08	 shl	 eax, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 89   : 	vertices[3].texCoord	= TTextureCoordinate(eu, ev);

  004ea	f3 0f 11 45 f4	 movss	 DWORD PTR _vertices$[ebp+88], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004ef	0b c6		 or	 eax, esi

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  004f1	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 84   : 	vertices[2].diffuse		= m_DiffuseColor;

  004f8	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax

; 88   : 	vertices[3].position.z	= 0.0f;

  004fb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+80], 0

; 89   : 	vertices[3].texCoord	= TTextureCoordinate(eu, ev);

  00502	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _ev$1$[ebp]
  00507	f3 0f 11 45 f8	 movss	 DWORD PTR _vertices$[ebp+92], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0050c	0f 57 c0	 xorps	 xmm0, xmm0
  0050f	72 09		 jb	 SHORT $LN74@OnRender
  00511	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00518	eb 2c		 jmp	 SHORT $LN73@OnRender
$LN74@OnRender:
  0051a	0f 2f c1	 comiss	 xmm0, xmm1
  0051d	72 09		 jb	 SHORT $LN72@OnRender
  0051f	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  00526	eb 1e		 jmp	 SHORT $LN73@OnRender
$LN72@OnRender:
  00528	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00530	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00538	0f 28 c1	 movaps	 xmm0, xmm1
  0053b	e8 00 00 00 00	 call	 __ftoui3
  00540	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
  00543	0f 57 c0	 xorps	 xmm0, xmm0
$LN73@OnRender:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00546	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  0054b	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00552	72 07		 jb	 SHORT $LN78@OnRender
  00554	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00559	eb 23		 jmp	 SHORT $LN77@OnRender
$LN78@OnRender:
  0055b	0f 2f c1	 comiss	 xmm0, xmm1
  0055e	72 04		 jb	 SHORT $LN76@OnRender
  00560	33 db		 xor	 ebx, ebx
  00562	eb 1a		 jmp	 SHORT $LN77@OnRender
$LN76@OnRender:
  00564	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  0056c	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00574	0f 28 c1	 movaps	 xmm0, xmm1
  00577	e8 00 00 00 00	 call	 __ftoui3
  0057c	8b d8		 mov	 ebx, eax
$LN77@OnRender:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0057e	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  00583	0f 57 c0	 xorps	 xmm0, xmm0
  00586	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  0058d	72 07		 jb	 SHORT $LN82@OnRender
  0058f	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00594	eb 26		 jmp	 SHORT $LN81@OnRender
$LN82@OnRender:
  00596	0f 2f c1	 comiss	 xmm0, xmm1
  00599	72 04		 jb	 SHORT $LN80@OnRender
  0059b	33 f6		 xor	 esi, esi
  0059d	eb 1d		 jmp	 SHORT $LN81@OnRender
$LN80@OnRender:
  0059f	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  005a7	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  005af	0f 28 c1	 movaps	 xmm0, xmm1
  005b2	e8 00 00 00 00	 call	 __ftoui3
  005b7	8b f0		 mov	 esi, eax
  005b9	0f 57 c0	 xorps	 xmm0, xmm0
$LN81@OnRender:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  005bc	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  005c1	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  005c8	72 07		 jb	 SHORT $LN86@OnRender
  005ca	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  005cf	eb 21		 jmp	 SHORT $LN85@OnRender
$LN86@OnRender:
  005d1	0f 2f c1	 comiss	 xmm0, xmm1
  005d4	72 04		 jb	 SHORT $LN84@OnRender
  005d6	33 c0		 xor	 eax, eax
  005d8	eb 18		 jmp	 SHORT $LN85@OnRender
$LN84@OnRender:
  005da	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  005e2	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  005ea	0f 28 c1	 movaps	 xmm0, xmm1
  005ed	e8 00 00 00 00	 call	 __ftoui3
$LN85@OnRender:

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  005f2	c1 e0 08	 shl	 eax, 8
  005f5	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  005f8	c1 e0 08	 shl	 eax, 8
  005fb	0b c3		 or	 eax, ebx
  005fd	c1 e0 08	 shl	 eax, 8
  00600	0b c6		 or	 eax, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 90   : 	vertices[3].diffuse		= m_DiffuseColor;

  00602	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax

; 91   : 
; 92   : 	// 2004.11.18.myevan.ctrl+alt+del 반복 사용시 튕기는 문제
; 93   : 	if (CGraphicBase::SetPDTStream(vertices, 4))

  00605	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00608	6a 04		 push	 4
  0060a	50		 push	 eax
  0060b	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00610	83 c4 08	 add	 esp, 8
  00613	5f		 pop	 edi
  00614	5e		 pop	 esi
  00615	5b		 pop	 ebx
  00616	84 c0		 test	 al, al
  00618	74 57		 je	 SHORT $LN2@OnRender

; 94   : 	{
; 95   : 		CGraphicBase::SetDefaultIndexBuffer(CGraphicBase::DEFAULT_IB_FILL_RECT);

  0061a	6a 05		 push	 5
  0061c	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 96   : 
; 97   : 		STATEMANAGER.SetTexture(0, pTexture->GetD3DTexture());

  00621	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _pTexture$1$[ebp]
  00627	83 c4 04	 add	 esp, 4
  0062a	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  0062f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00635	50		 push	 eax
  00636	6a 00		 push	 0
  00638	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 98   : 		STATEMANAGER.SetTexture(1, NULL);

  0063d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00643	6a 00		 push	 0
  00645	6a 01		 push	 1
  00647	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 99   : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  0064c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00652	68 42 01 00 00	 push	 322			; 00000142H
  00657	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 100  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  0065c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00662	6a 02		 push	 2
  00664	6a 00		 push	 0
  00666	6a 04		 push	 4
  00668	6a 00		 push	 0
  0066a	6a 04		 push	 4
  0066c	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN2@OnRender:

; 101  : 	}
; 102  : 	//OLD: STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, c_FillRectIndices, D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));
; 103  : 	////////////////////////////////////////////////////////////
; 104  : }

  00671	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00674	33 cd		 xor	 ecx, ebp
  00676	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0067b	8b e5		 mov	 esp, ebp
  0067d	5d		 pop	 ebp
  0067e	c3		 ret	 0
?OnRender@CGraphicImageInstance@@MAEXXZ ENDP		; CGraphicImageInstance::OnRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?Initialize@CGraphicImageInstance@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicImageInstance@@IAEXXZ PROC		; CGraphicImageInstance::Initialize, COMDAT
; _this$ = ecx

; 223  : 	m_DiffuseColor.r = m_DiffuseColor.g = m_DiffuseColor.b = m_DiffuseColor.a = 1.0f;

  00000	c7 41 10 00 00
	80 3f		 mov	 DWORD PTR [ecx+16], 1065353216 ; 3f800000H
  00007	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [ecx+12], 1065353216 ; 3f800000H
  0000e	c7 41 08 00 00
	80 3f		 mov	 DWORD PTR [ecx+8], 1065353216 ; 3f800000H
  00015	c7 41 04 00 00
	80 3f		 mov	 DWORD PTR [ecx+4], 1065353216 ; 3f800000H

; 224  : 	m_v2Position.x = m_v2Position.y = 0.0f;

  0001c	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00023	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 225  : #if defined(RENDER_TARGET)
; 226  : 	m_v2Scale.x = m_v2Scale.y = 1.0f;

  0002a	c7 41 20 00 00
	80 3f		 mov	 DWORD PTR [ecx+32], 1065353216 ; 3f800000H
  00031	c7 41 1c 00 00
	80 3f		 mov	 DWORD PTR [ecx+28], 1065353216 ; 3f800000H

; 227  : #endif
; 228  : }

  00038	c3		 ret	 0
?Initialize@CGraphicImageInstance@@IAEXXZ ENDP		; CGraphicImageInstance::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ??8CGraphicImageInstance@@QBE_NABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??8CGraphicImageInstance@@QBE_NABV0@@Z PROC		; CGraphicImageInstance::operator==, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 195  : 	return (m_roImage.GetPointer() == rhs.m_roImage.GetPointer());

  00003	8b 45 08	 mov	 eax, DWORD PTR _rhs$[ebp]
  00006	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00009	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  0000c	0f 94 c0	 sete	 al

; 196  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8CGraphicImageInstance@@QBE_NABV0@@Z ENDP		; CGraphicImageInstance::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ
_TEXT	SEGMENT
?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ PROC ; CGraphicImageInstance::GetGraphicImagePointer, COMDAT
; _this$ = ecx

; 119  : 	return m_roImage.GetPointer();

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]

; 120  : }

  00003	c3		 ret	 0
?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ENDP ; CGraphicImageInstance::GetGraphicImagePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ
_TEXT	SEGMENT
?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ PROC ; CGraphicImageInstance::GetTextureReference, COMDAT
; _this$ = ecx

; 108  : 	return m_roImage->GetTextureReference();

  00000	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00003	e9 00 00 00 00	 jmp	 ?GetTextureReference@CGraphicImage@@QBEABVCGraphicTexture@@XZ ; CGraphicImage::GetTextureReference
?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ENDP ; CGraphicImageInstance::GetTextureReference
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ
_TEXT	SEGMENT
?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ PROC ; CGraphicImageInstance::GetTexturePointer, COMDAT
; _this$ = ecx

; 113  : 	CGraphicImage* pkImage = m_roImage.GetPointer();

  00000	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]

; 114  : 	return pkImage ? pkImage->GetTexturePointer() : NULL;

  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?GetTexturePointer@CGraphicImage@@QAEPAVCGraphicTexture@@XZ ; CGraphicImage::GetTexturePointer
  0000b	33 c0		 xor	 eax, eax

; 115  : }

  0000d	c3		 ret	 0
?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ENDP ; CGraphicImageInstance::GetTexturePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?GetScale@CGraphicImageInstance@@QBEABUD3DXVECTOR2@@XZ
_TEXT	SEGMENT
?GetScale@CGraphicImageInstance@@QBEABUD3DXVECTOR2@@XZ PROC ; CGraphicImageInstance::GetScale, COMDAT
; _this$ = ecx

; 161  : 	return m_v2Scale;

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]

; 162  : }

  00003	c3		 ret	 0
?GetScale@CGraphicImageInstance@@QBEABUD3DXVECTOR2@@XZ ENDP ; CGraphicImageInstance::GetScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?SetScale@CGraphicImageInstance@@QAEXMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
?SetScale@CGraphicImageInstance@@QAEXMM@Z PROC		; CGraphicImageInstance::SetScale, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 154  : 	m_v2Scale.x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 155  : 	m_v2Scale.y = fy;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00012	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 156  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?SetScale@CGraphicImageInstance@@QAEXMM@Z ENDP		; CGraphicImageInstance::SetScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?GetHeight@CGraphicImageInstance@@QAEHXZ
_TEXT	SEGMENT
?GetHeight@CGraphicImageInstance@@QAEHXZ PROC		; CGraphicImageInstance::GetHeight, COMDAT
; _this$ = ecx

; 131  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 132  : 	if (IsEmpty())

  00003	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  00008	84 c0		 test	 al, al
  0000a	74 04		 je	 SHORT $LN2@GetHeight

; 133  : 		return 0;

  0000c	33 c0		 xor	 eax, eax
  0000e	5e		 pop	 esi

; 136  : }

  0000f	c3		 ret	 0
$LN2@GetHeight:

; 134  : 
; 135  : 	return m_roImage->GetHeight();

  00010	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00013	5e		 pop	 esi
  00014	e9 00 00 00 00	 jmp	 ?GetHeight@CGraphicImage@@QBEHXZ ; CGraphicImage::GetHeight
?GetHeight@CGraphicImageInstance@@QAEHXZ ENDP		; CGraphicImageInstance::GetHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?GetWidth@CGraphicImageInstance@@QAEHXZ
_TEXT	SEGMENT
?GetWidth@CGraphicImageInstance@@QAEHXZ PROC		; CGraphicImageInstance::GetWidth, COMDAT
; _this$ = ecx

; 123  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 124  : 	if (IsEmpty())

  00003	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  00008	84 c0		 test	 al, al
  0000a	74 04		 je	 SHORT $LN2@GetWidth

; 125  : 		return 0;

  0000c	33 c0		 xor	 eax, eax
  0000e	5e		 pop	 esi

; 128  : }

  0000f	c3		 ret	 0
$LN2@GetWidth:

; 126  : 
; 127  : 	return m_roImage->GetWidth();

  00010	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00013	5e		 pop	 esi
  00014	e9 00 00 00 00	 jmp	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth
?GetWidth@CGraphicImageInstance@@QAEHXZ ENDP		; CGraphicImageInstance::GetWidth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?IsEmpty@CGraphicImageInstance@@QBE_NXZ
_TEXT	SEGMENT
?IsEmpty@CGraphicImageInstance@@QBE_NXZ PROC		; CGraphicImageInstance::IsEmpty, COMDAT
; _this$ = ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 62   : 			return m_pObject == NULL ? true : false;

  00000	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00003	85 c9		 test	 ecx, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 187  : 	if (!m_roImage.IsNull() && !m_roImage->IsEmpty())

  00005	74 0a		 je	 SHORT $LN2@IsEmpty
  00007	e8 00 00 00 00	 call	 ?IsEmpty@CResource@@QBE_NXZ ; CResource::IsEmpty
  0000c	84 c0		 test	 al, al
  0000e	75 01		 jne	 SHORT $LN2@IsEmpty

; 191  : }

  00010	c3		 ret	 0
$LN2@IsEmpty:

; 188  : 		return false;
; 189  : 
; 190  : 	return true;

  00011	b0 01		 mov	 al, 1

; 191  : }

  00013	c3		 ret	 0
?IsEmpty@CGraphicImageInstance@@QBE_NXZ ENDP		; CGraphicImageInstance::IsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?ReloadImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z
_TEXT	SEGMENT
_pImage$ = 8						; size = 4
?ReloadImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z PROC ; CGraphicImageInstance::ReloadImagePointer, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 62   : 			return m_pObject == NULL ? true : false;

  00003	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00006	85 c0		 test	 eax, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 173  : 	if (m_roImage.IsNull())

  00008	75 06		 jne	 SHORT $LN2@ReloadImag

; 183  : }

  0000a	5d		 pop	 ebp

; 174  : 	{
; 175  : 		SetImagePointer(pImage);

  0000b	e9 00 00 00 00	 jmp	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
$LN2@ReloadImag:

; 176  : 		return;
; 177  : 	}
; 178  : 
; 179  : 	CGraphicImage * pkImage = m_roImage.GetPointer();
; 180  : 
; 181  : 	if (pkImage)
; 182  : 		pkImage->Reload();

  00010	8b c8		 mov	 ecx, eax
  00012	e8 00 00 00 00	 call	 ?Reload@CResource@@QAEXXZ ; CResource::Reload

; 183  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?ReloadImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ENDP ; CGraphicImageInstance::ReloadImagePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z
_TEXT	SEGMENT
_pImage$ = 8						; size = 4
?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z PROC ; CGraphicImageInstance::SetImagePointer, COMDAT
; _this$ = ecx

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 69   : 			m_pObject = pObject;

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pImage$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 165  : {

  00009	57		 push	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 67   : 			CReferenceObject* pOldObject = m_pObject;

  0000a	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]

; 69   : 			m_pObject = pObject;

  0000d	89 4e 24	 mov	 DWORD PTR [esi+36], ecx

; 70   : 
; 71   : 			if (m_pObject)

  00010	85 c9		 test	 ecx, ecx
  00012	74 05		 je	 SHORT $LN4@SetImagePo

; 72   : 				m_pObject->AddReference();

  00014	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference
$LN4@SetImagePo:

; 73   : 
; 74   : 			if (pOldObject)

  00019	85 ff		 test	 edi, edi
  0001b	74 07		 je	 SHORT $LN5@SetImagePo

; 75   : 				pOldObject->Release();

  0001d	8b cf		 mov	 ecx, edi
  0001f	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN5@SetImagePo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 168  : 	OnSetImagePointer();

  00024	8b 06		 mov	 eax, DWORD PTR [esi]
  00026	8b ce		 mov	 ecx, esi
  00028	ff 50 08	 call	 DWORD PTR [eax+8]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi

; 169  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ENDP ; CGraphicImageInstance::SetImagePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?SetPosition@CGraphicImageInstance@@QAEXMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
?SetPosition@CGraphicImageInstance@@QAEXMM@Z PROC	; CGraphicImageInstance::SetPosition, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 147  : 	m_v2Position.x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 148  : 	m_v2Position.y = fy;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00012	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 149  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?SetPosition@CGraphicImageInstance@@QAEXMM@Z ENDP	; CGraphicImageInstance::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?SetDiffuseColor@CGraphicImageInstance@@QAEXMMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
?SetDiffuseColor@CGraphicImageInstance@@QAEXMMMM@Z PROC	; CGraphicImageInstance::SetDiffuseColor, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : 	m_DiffuseColor.r = fr;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fr$[ebp]
  00008	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 141  : 	m_DiffuseColor.g = fg;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fg$[ebp]
  00012	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 142  : 	m_DiffuseColor.b = fb;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fb$[ebp]
  0001c	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 143  : 	m_DiffuseColor.a = fa;

  00021	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fa$[ebp]
  00026	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 144  : }

  0002b	5d		 pop	 ebp
  0002c	c2 10 00	 ret	 16			; 00000010H
?SetDiffuseColor@CGraphicImageInstance@@QAEXMMMM@Z ENDP	; CGraphicImageInstance::SetDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?Render@CGraphicImageInstance@@QAEXXZ
_TEXT	SEGMENT
?Render@CGraphicImageInstance@@QAEXXZ PROC		; CGraphicImageInstance::Render, COMDAT
; _this$ = ecx

; 35   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 36   : 	if (IsEmpty())

  00003	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  00008	84 c0		 test	 al, al
  0000a	75 08		 jne	 SHORT $LN1@Render

; 37   : 		return;
; 38   : 
; 39   : 	assert(!IsEmpty());
; 40   : 
; 41   : 	OnRender();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 04	 jmp	 DWORD PTR [eax+4]
$LN1@Render:
  00014	5e		 pop	 esi

; 42   : }

  00015	c3		 ret	 0
?Render@CGraphicImageInstance@@QAEXXZ ENDP		; CGraphicImageInstance::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?Destroy@CGraphicImageInstance@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGraphicImageInstance@@QAEXXZ PROC		; CGraphicImageInstance::Destroy, COMDAT
; _this$ = ecx

; 231  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 67   : 			CReferenceObject* pOldObject = m_pObject;

  00003	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]

; 68   : 
; 69   : 			m_pObject = pObject;

  00006	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 70   : 
; 71   : 			if (m_pObject)
; 72   : 				m_pObject->AddReference();
; 73   : 
; 74   : 			if (pOldObject)

  0000d	85 c9		 test	 ecx, ecx
  0000f	74 05		 je	 SHORT $LN5@Destroy

; 75   : 				pOldObject->Release();

  00011	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN5@Destroy:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 233  : 	Initialize();

  00016	8b ce		 mov	 ecx, esi
  00018	5e		 pop	 esi
  00019	e9 00 00 00 00	 jmp	 ?Initialize@CGraphicImageInstance@@IAEXXZ ; CGraphicImageInstance::Initialize
?Destroy@CGraphicImageInstance@@QAEXXZ ENDP		; CGraphicImageInstance::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ??1CGraphicImageInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicImageInstance@@UAE@XZ PROC			; CGraphicImageInstance::~CGraphicImageInstance, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicImageInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicImageInstance@@6B@

; 243  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CGraphicImageInstance@@QAEXXZ ; CGraphicImageInstance::Destroy
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 53   : 			if (m_pObject)

  00030	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]

; 37   : 		{

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 53   : 			if (m_pObject)

  0003a	85 c9		 test	 ecx, ecx
  0003c	74 0c		 je	 SHORT $LN7@CGraphicIm

; 54   : 			{
; 55   : 				m_pObject->Release();

  0003e	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 56   : 				m_pObject = NULL;

  00043	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
$LN7@CGraphicIm:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 244  : }

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
  0005a	cc		 int	 3
  0005b	cc		 int	 3
  0005c	cc		 int	 3
  0005d	cc		 int	 3
  0005e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicImageInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicImageInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicImageInstance@@UAE@XZ ENDP			; CGraphicImageInstance::~CGraphicImageInstance
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ??0CGraphicImageInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGraphicImageInstance@@QAE@XZ PROC			; CGraphicImageInstance::CGraphicImageInstance, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicImageInstance@@6B@
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 20   : 		CRef() : m_pObject(NULL)

  00010	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp

; 238  : 	Initialize();

  00017	e8 00 00 00 00	 call	 ?Initialize@CGraphicImageInstance@@IAEXXZ ; CGraphicImageInstance::Initialize

; 239  : }

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??0CGraphicImageInstance@@QAE@XZ ENDP			; CGraphicImageInstance::CGraphicImageInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?IsType@CGraphicImageInstance@@QAEHK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?IsType@CGraphicImageInstance@@QAEHK@Z PROC		; CGraphicImageInstance::IsType, COMDAT
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 	return OnIsType(dwType);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 207  : }

  00005	5d		 pop	 ebp

; 206  : 	return OnIsType(dwType);

  00006	ff 60 0c	 jmp	 DWORD PTR [eax+12]
?IsType@CGraphicImageInstance@@QAEHK@Z ENDP		; CGraphicImageInstance::IsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpImageInstance.cpp
;	COMDAT ?Type@CGraphicImageInstance@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CGraphicImageInstance@@SAKXZ PROC			; CGraphicImageInstance::Type, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CGraphicImageInstance@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 200  : 	static DWORD s_dwType = GetCRC32("CGraphicImageInstance", strlen("CGraphicImageInstance"));

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Type@CGraphicImageInstance@@SAKXZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Type
$LN5@Type:

; 201  : 	return (s_dwType);
; 202  : }

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_dwType@?1??Type@CGraphicImageInstance@@SAKXZ@4KA
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Type:

; 200  : 	static DWORD s_dwType = GetCRC32("CGraphicImageInstance", strlen("CGraphicImageInstance"));

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicImageInstance@@SAKXZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CGraphicImageInstance@@SAKXZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Type
  00068	6a 15		 push	 21			; 00000015H
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@OHFFHEGB@CGraphicImageInstance@
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0007b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicImageInstance@@SAKXZ@4HA
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?s_dwType@?1??Type@CGraphicImageInstance@@SAKXZ@4KA, eax
  00085	e8 00 00 00 00	 call	 __Init_thread_footer
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	eb af		 jmp	 SHORT $LN5@Type
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CGraphicImageInstance@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicImageInstance@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CGraphicImageInstance@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CGraphicImageInstance@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CGraphicImageInstance@@SAKXZ ENDP			; CGraphicImageInstance::Type
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
