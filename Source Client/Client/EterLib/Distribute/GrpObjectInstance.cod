; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30151.0 

	TITLE	C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Distribute\GrpObjectInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR4@@QAE@XZ				; D3DXVECTOR4::D3DXVECTOR4
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?Unlink@SpherePack@@QAEXXZ			; SpherePack::Unlink
PUBLIC	??0CGraphicObjectInstance@@QAE@XZ		; CGraphicObjectInstance::CGraphicObjectInstance
PUBLIC	??1CGraphicObjectInstance@@UAE@XZ		; CGraphicObjectInstance::~CGraphicObjectInstance
PUBLIC	?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
PUBLIC	?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetScale
PUBLIC	?GetRotation@CGraphicObjectInstance@@QAEMXZ	; CGraphicObjectInstance::GetRotation
PUBLIC	?GetYaw@CGraphicObjectInstance@@QAEMXZ		; CGraphicObjectInstance::GetYaw
PUBLIC	?GetPitch@CGraphicObjectInstance@@QAEMXZ	; CGraphicObjectInstance::GetPitch
PUBLIC	?GetRoll@CGraphicObjectInstance@@QAEMXZ		; CGraphicObjectInstance::GetRoll
PUBLIC	?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z	; CGraphicObjectInstance::SetPosition
PUBLIC	?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z ; CGraphicObjectInstance::SetPosition
PUBLIC	?SetScalePosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetScalePosition
PUBLIC	?SetScale@CGraphicObjectInstance@@QAEXMMM_N@Z	; CGraphicObjectInstance::SetScale
PUBLIC	?SetRotation@CGraphicObjectInstance@@QAEXM@Z	; CGraphicObjectInstance::SetRotation
PUBLIC	?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z	; CGraphicObjectInstance::SetRotation
PUBLIC	?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z ; CGraphicObjectInstance::SetRotationQuaternion
PUBLIC	?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z ; CGraphicObjectInstance::SetRotationMatrix
PUBLIC	?Clear@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Clear
PUBLIC	?Update@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Update
PUBLIC	?Render@CGraphicObjectInstance@@QAE_NXZ		; CGraphicObjectInstance::Render
PUBLIC	?BlendRender@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::BlendRender
PUBLIC	?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::RenderToShadowMap
PUBLIC	?RenderShadow@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::RenderShadow
PUBLIC	?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::RenderPCBlocker
PUBLIC	?Deform@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Deform
PUBLIC	?Transform@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::Transform
PUBLIC	?Show@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Show
PUBLIC	?Hide@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Hide
PUBLIC	?isShow@CGraphicObjectInstance@@QAE_NXZ		; CGraphicObjectInstance::isShow
PUBLIC	?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z ; CGraphicObjectInstance::isIntersect
PUBLIC	?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z ; CGraphicObjectInstance::GetWTBBoxVertex
PUBLIC	?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ; CGraphicObjectInstance::GetTransform
PUBLIC	?SetPortal@CGraphicObjectInstance@@QAEXKH@Z	; CGraphicObjectInstance::SetPortal
PUBLIC	?GetPortal@CGraphicObjectInstance@@QAEHK@Z	; CGraphicObjectInstance::GetPortal
PUBLIC	?Initialize@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::Initialize
PUBLIC	?OnInitialize@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnInitialize
PUBLIC	?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::UpdateBoundingSphere
PUBLIC	?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::RegisterBoundingSphere
PUBLIC	?OnClear@CGraphicObjectInstance@@UAEXXZ		; CGraphicObjectInstance::OnClear
PUBLIC	?OnUpdate@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnUpdate
PUBLIC	?OnDeform@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnDeform
PUBLIC	?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CGraphicObjectInstance::AddCollision
PUBLIC	?ClearCollision@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::ClearCollision
PUBLIC	?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::CollisionDynamicSphere
PUBLIC	?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::MovementCollisionDynamicSphere
PUBLIC	?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::GetCollisionMovementAdjust
PUBLIC	?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ; CGraphicObjectInstance::UpdateCollisionData
PUBLIC	??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
PUBLIC	?_Xlength@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlength
PUBLIC	?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ; CGraphicObjectInstance::GetCollisionInstanceCount
PUBLIC	?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z ; CGraphicObjectInstance::GetCollisionInstanceData
PUBLIC	?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ; CGraphicObjectInstance::SetHeightInstance
PUBLIC	?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearHeightInstance
PUBLIC	?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ; CGraphicObjectInstance::UpdateHeightInstance
PUBLIC	?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ	; CGraphicObjectInstance::IsObjectHeight
PUBLIC	?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z ; CGraphicObjectInstance::GetObjectHeight
PUBLIC	?SetScaleWorld@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetScaleWorld
PUBLIC	?SetAcceScale@CGraphicObjectInstance@@QAEXMMM@Z	; CGraphicObjectInstance::SetAcceScale
PUBLIC	?SetAcceScale@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@E@Z ; CGraphicObjectInstance::SetAcceScale
PUBLIC	??_GCGraphicObjectInstance@@UAEPAXI@Z		; CGraphicObjectInstance::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@PAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEPAPAVCBaseCollisionInstance@@QAPAV2@$$QAPAV2@@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Emplace_reallocate<CBaseCollisionInstance *>
PUBLIC	??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CBaseCollisionInstance * *,CBaseCollisionInstance * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
PUBLIC	??_7CGraphicObjectInstance@@6B@			; CGraphicObjectInstance::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGraphicObjectInstance@@6B@		; CGraphicObjectInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicObjectInstance@@@8		; CGraphicObjectInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicObjectInstance@@8		; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3c8efa35
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixScaling@16:PROC
EXTRN	_D3DXMatrixRotationZ@8:PROC
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	_D3DXMatrixRotationYawPitchRoll@16:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??0CGraphicCollisionObject@@QAE@XZ:PROC		; CGraphicCollisionObject::CGraphicCollisionObject
EXTRN	??1CGraphicCollisionObject@@UAE@XZ:PROC		; CGraphicCollisionObject::~CGraphicCollisionObject
EXTRN	?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z:PROC ; CGraphicCollisionObject::IntersectTriangle
EXTRN	?LostChild@SpherePack@@QAEXPAV1@@Z:PROC		; SpherePack::LostChild
EXTRN	?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z:PROC ; SpherePackFactory::AddIntegrate
EXTRN	?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z:PROC ; SpherePackFactory::AddRecompute
EXTRN	?Register@CCullingManager@@QAEPAVSpherePack@@PAVCGraphicObjectInstance@@@Z:PROC ; CCullingManager::Register
EXTRN	?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z:PROC ; CCullingManager::Unregister
EXTRN	?Destroy@CBaseCollisionInstance@@QAEXXZ:PROC	; CBaseCollisionInstance::Destroy
EXTRN	?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z:PROC ; CBaseCollisionInstance::BuildCollisionInstance
EXTRN	??_ECGraphicObjectInstance@@UAEPAXI@Z:PROC	; CGraphicObjectInstance::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A DD 01H DUP (?) ; CSingleton<CCullingManager>::ms_singleton
_BSS	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicObjectInstance@@8 DD FLAT:??_R0?AVCGraphicObjectInstance@@@8 ; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R2CGraphicObjectInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8 ; CGraphicObjectInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R3CGraphicObjectInstance@@8 DD 00H			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicObjectInstance@@@8
data$rs	SEGMENT
??_R0?AVCGraphicObjectInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicObjectInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicObjectInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicObjectInstance@@6B@
rdata$r	SEGMENT
??_R4CGraphicObjectInstance@@6B@ DD 00H			; CGraphicObjectInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicObjectInstance@@@8
	DD	FLAT:??_R3CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicObjectInstance@@6B@
CONST	SEGMENT
??_7CGraphicObjectInstance@@6B@ DD FLAT:??_R4CGraphicObjectInstance@@6B@ ; CGraphicObjectInstance::`vftable'
	DD	FLAT:??_ECGraphicObjectInstance@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?OnInitialize@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?OnClear@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdate@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnDeform@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicObjectInstance@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphicObjectInstance@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$1
__ehfuncinfo$??0CGraphicObjectInstance@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CGraphicObjectInstance@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CBaseCollisionInstance * *,CBaseCollisionInstance * *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CBaseCollisionInstance * *,CBaseCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@PAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEPAPAVCBaseCollisionInstance@@QAPAV2@$$QAPAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@PAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEPAPAVCBaseCollisionInstance@@QAPAV2@$$QAPAV2@@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Emplace_reallocate<CBaseCollisionInstance *>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CBaseCollisionInstance * *,CBaseCollisionInstance * *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CBaseCollisionInstance * *,CBaseCollisionInstance * *>

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 794  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 765  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlength
$LN97@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@PAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEPAPAVCBaseCollisionInstance@@QAPAV2@$$QAPAV2@@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Emplace_reallocate<CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicObjectInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicObjectInstance@@UAEPAXI@Z PROC		; CGraphicObjectInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 18 03 00 00	 push	 792			; 00000318H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCGraphicObjectInstance@@UAEPAXI@Z ENDP		; CGraphicObjectInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetAcceScale@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@E@Z
_TEXT	SEGMENT
_rv3Scale$ = 8						; size = 4
_bRace$ = 12						; size = 1
?SetAcceScale@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@E@Z PROC ; CGraphicObjectInstance::SetAcceScale, COMDAT
; _this$ = ecx

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 258  : 	m_v3ScaleAcce = rv3Scale;

  00003	8b 45 08	 mov	 eax, DWORD PTR _rv3Scale$[ebp]
  00006	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000a	66 0f d6 81 4c
	02 00 00	 movq	 QWORD PTR [ecx+588], xmm0
  00012	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00015	89 81 54 02 00
	00		 mov	 DWORD PTR [ecx+596], eax

; 259  : 	m_bAttachedAcceRace = bRace;

  0001b	8a 45 0c	 mov	 al, BYTE PTR _bRace$[ebp]
  0001e	88 81 48 02 00
	00		 mov	 BYTE PTR [ecx+584], al

; 260  : }

  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?SetAcceScale@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@E@Z ENDP ; CGraphicObjectInstance::SetAcceScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetAcceScale@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetAcceScale@CGraphicObjectInstance@@QAEXMMM@Z PROC	; CGraphicObjectInstance::SetAcceScale, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 251  : 	m_v3ScaleAcce.x = x;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00008	f3 0f 11 81 4c
	02 00 00	 movss	 DWORD PTR [ecx+588], xmm0

; 252  : 	m_v3ScaleAcce.y = y;

  00010	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00015	f3 0f 11 81 50
	02 00 00	 movss	 DWORD PTR [ecx+592], xmm0

; 253  : 	m_v3ScaleAcce.z = z;

  0001d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00022	f3 0f 11 81 54
	02 00 00	 movss	 DWORD PTR [ecx+596], xmm0

; 254  : }

  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?SetAcceScale@CGraphicObjectInstance@@QAEXMMM@Z ENDP	; CGraphicObjectInstance::SetAcceScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetScaleWorld@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetScaleWorld@CGraphicObjectInstance@@QAEXMMM@Z PROC	; CGraphicObjectInstance::SetScaleWorld, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 	m_v3Scale.x = x;
; 244  : 	m_v3Scale.y = y;
; 245  : 	m_v3Scale.z = z;

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]

; 246  : 	D3DXMatrixScaling(&m_matScaleWorld, x, y, z);

  00008	8d 81 d8 02 00
	00		 lea	 eax, DWORD PTR [ecx+728]
  0000e	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y$[ebp]
  00013	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00016	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _x$[ebp]
  0001b	f3 0f 11 51 10	 movss	 DWORD PTR [ecx+16], xmm2
  00020	f3 0f 11 49 14	 movss	 DWORD PTR [ecx+20], xmm1
  00025	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0002b	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00031	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  00036	50		 push	 eax
  00037	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0
  0003c	e8 00 00 00 00	 call	 _D3DXMatrixScaling@16

; 247  : }

  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?SetScaleWorld@CGraphicObjectInstance@@QAEXMMM@Z ENDP	; CGraphicObjectInstance::SetScaleWorld
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z
_TEXT	SEGMENT
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_pfHeight$ = 16						; size = 4
?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z PROC ; CGraphicObjectInstance::GetObjectHeight, COMDAT
; _this$ = ecx

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 505  : 	if (!m_pHeightAttributeInstance)

  00003	83 b9 44 02 00
	00 00		 cmp	 DWORD PTR [ecx+580], 0
  0000a	75 06		 jne	 SHORT $LN2@GetObjectH

; 506  : 		return false;

  0000c	32 c0		 xor	 al, al

; 509  : }

  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetObjectH:

; 507  : 
; 508  : 	return OnGetObjectHeight(fX, fY, pfHeight);

  00012	ff 75 10	 push	 DWORD PTR _pfHeight$[ebp]
  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  0001c	83 ec 08	 sub	 esp, 8
  0001f	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00022	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fX$[ebp]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	ff d0		 call	 eax

; 509  : }

  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z ENDP ; CGraphicObjectInstance::GetObjectHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ
_TEXT	SEGMENT
?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ PROC	; CGraphicObjectInstance::IsObjectHeight, COMDAT
; _this$ = ecx

; 497  : 	if (m_pHeightAttributeInstance)

  00000	83 b9 44 02 00
	00 00		 cmp	 DWORD PTR [ecx+580], 0
  00007	0f 95 c0	 setne	 al

; 498  : 		return true;
; 499  : 
; 500  : 	return false;
; 501  : }

  0000a	c3		 ret	 0
?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ ENDP	; CGraphicObjectInstance::IsObjectHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pAttributeInstance$ = 8				; size = 4
?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z PROC ; CGraphicObjectInstance::UpdateHeightInstance, COMDAT
; _this$ = ecx

; 490  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 491  : 	ClearHeightInstance();

  00006	e8 00 00 00 00	 call	 ?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearHeightInstance

; 492  : 	OnUpdateHeighInstance(pAttributeInstance);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 75 08	 push	 DWORD PTR _pAttributeInstance$[ebp]
  00012	ff 50 34	 call	 DWORD PTR [eax+52]
  00015	5e		 pop	 esi

; 493  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ENDP ; CGraphicObjectInstance::UpdateHeightInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ PROC ; CGraphicObjectInstance::ClearHeightInstance, COMDAT
; _this$ = ecx

; 486  : 	m_pHeightAttributeInstance = NULL;

  00000	c7 81 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+580], 0

; 487  : }

  0000a	c3		 ret	 0
?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ENDP ; CGraphicObjectInstance::ClearHeightInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pAttributeInstance$ = 8				; size = 4
?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z PROC ; CGraphicObjectInstance::SetHeightInstance, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	m_pHeightAttributeInstance = pAttributeInstance;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pAttributeInstance$[ebp]
  00006	89 81 44 02 00
	00		 mov	 DWORD PTR [ecx+580], eax

; 482  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ENDP ; CGraphicObjectInstance::SetHeightInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z PROC ; CGraphicObjectInstance::GetCollisionInstanceData, COMDAT
; _this$ = ecx

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 81 3c 02 00
	00		 mov	 eax, DWORD PTR [ecx+572]
  00009	8b 91 38 02 00
	00		 mov	 edx, DWORD PTR [ecx+568]
  0000f	2b c2		 sub	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 469  : 	if (dwIndex>m_StaticCollisionInstanceVector.size())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 469  : 	if (dwIndex>m_StaticCollisionInstanceVector.size())

  00017	3b c8		 cmp	 ecx, eax
  00019	76 06		 jbe	 SHORT $LN2@GetCollisi

; 470  : 	{
; 471  : 		return 0;

  0001b	33 c0		 xor	 eax, eax

; 474  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@GetCollisi:

; 472  : 	}
; 473  : 	return m_StaticCollisionInstanceVector[dwIndex];

  00021	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]

; 474  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z ENDP ; CGraphicObjectInstance::GetCollisionInstanceData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ
_TEXT	SEGMENT
?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ PROC ; CGraphicObjectInstance::GetCollisionInstanceCount, COMDAT
; _this$ = ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 81 3c 02 00
	00		 mov	 eax, DWORD PTR [ecx+572]
  00006	2b 81 38 02 00
	00		 sub	 eax, DWORD PTR [ecx+568]
  0000c	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 465  : }

  0000f	c3		 ret	 0
?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ENDP ; CGraphicObjectInstance::GetCollisionInstanceCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >, COMDAT
; _this$ = ecx

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 704  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00050	cc		 int	 3
??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
_TEXT	SEGMENT
_pscdVector$ = 8					; size = 4
?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z PROC ; CGraphicObjectInstance::UpdateCollisionData, COMDAT
; _this$ = ecx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 457  : 
; 458  : 	ClearCollision();

  00006	e8 00 00 00 00	 call	 ?ClearCollision@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearCollision

; 459  : 	OnUpdateCollisionData(pscdVector);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 75 08	 push	 DWORD PTR _pscdVector$[ebp]
  00012	ff 50 30	 call	 DWORD PTR [eax+48]
  00015	5e		 pop	 esi

; 460  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ENDP ; CGraphicObjectInstance::UpdateCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\CollisionData.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\CollisionData.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CGraphicObjectInstance::GetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 444  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b b7 38 02 00
	00		 mov	 esi, DWORD PTR [edi+568]
  0000e	3b b7 3c 02 00
	00		 cmp	 esi, DWORD PTR [edi+572]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 446  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00014	74 23		 je	 SHORT $LN3@GetCollisi
  00016	8b 5d 0c	 mov	 ebx, DWORD PTR _s$[ebp]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL14@GetCollisi:

; 448  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\CollisionData.h

; 83   : 			return OnMovementCollisionDynamicSphere(s);

  00022	53		 push	 ebx
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	ff d0		 call	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 448  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  0002a	84 c0		 test	 al, al
  0002c	75 29		 jne	 SHORT $LN30@GetCollisi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  0002e	83 c6 04	 add	 esi, 4

; 150  :         return _Ptr == _Right._Ptr;

  00031	3b b7 3c 02 00
	00		 cmp	 esi, DWORD PTR [edi+572]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 446  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00037	75 e7		 jne	 SHORT $LL14@GetCollisi
$LN3@GetCollisi:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 453  : }

  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 181  :     y = fy;

  00045	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 182  :     z = fz;

  0004c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 453  : }

  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN30@GetCollisi:

; 449  : 			return (*it)->GetCollisionMovementAdjust(s);

  00057	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\CollisionData.h

; 93   : 			return OnGetCollisionMovementAdjust(s);

  00059	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00060	ff 52 04	 call	 DWORD PTR [edx+4]
  00063	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 449  : 			return (*it)->GetCollisionMovementAdjust(s);

  00064	8b c6		 mov	 eax, esi

; 453  : }

  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CGraphicObjectInstance::GetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\CollisionData.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z PROC ; CGraphicObjectInstance::MovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b b7 38 02 00
	00		 mov	 esi, DWORD PTR [edi+568]
  0000e	3b b7 3c 02 00
	00		 cmp	 esi, DWORD PTR [edi+572]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 435  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00014	74 23		 je	 SHORT $LN3@MovementCo
  00016	8b 5d 08	 mov	 ebx, DWORD PTR _s$[ebp]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL14@MovementCo:

; 437  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\CollisionData.h

; 83   : 			return OnMovementCollisionDynamicSphere(s);

  00022	53		 push	 ebx
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	ff d0		 call	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 437  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  0002a	84 c0		 test	 al, al
  0002c	75 14		 jne	 SHORT $LN26@MovementCo
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  0002e	83 c6 04	 add	 esi, 4

; 150  :         return _Ptr == _Right._Ptr;

  00031	3b b7 3c 02 00
	00		 cmp	 esi, DWORD PTR [edi+572]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 435  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00037	75 e7		 jne	 SHORT $LL14@MovementCo
$LN3@MovementCo:
  00039	5f		 pop	 edi

; 438  : 			return true;
; 439  : 	}
; 440  : 	return false;
; 441  : }

  0003a	5e		 pop	 esi
  0003b	32 c0		 xor	 al, al
  0003d	5b		 pop	 ebx
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN26@MovementCo:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	b0 01		 mov	 al, 1
  00046	5b		 pop	 ebx
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ENDP ; CGraphicObjectInstance::MovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\CollisionData.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z PROC ; CGraphicObjectInstance::CollisionDynamicSphere, COMDAT
; _this$ = ecx

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b b7 38 02 00
	00		 mov	 esi, DWORD PTR [edi+568]
  0000e	3b b7 3c 02 00
	00		 cmp	 esi, DWORD PTR [edi+572]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 424  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00014	74 23		 je	 SHORT $LN3@CollisionD
  00016	8b 5d 08	 mov	 ebx, DWORD PTR _s$[ebp]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL14@CollisionD:

; 426  : 		if ((*it)->CollisionDynamicSphere(s))

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\CollisionData.h

; 87   : 			return OnCollisionDynamicSphere(s);

  00022	53		 push	 ebx
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00028	ff d0		 call	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 426  : 		if ((*it)->CollisionDynamicSphere(s))

  0002a	84 c0		 test	 al, al
  0002c	75 14		 jne	 SHORT $LN26@CollisionD
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  0002e	83 c6 04	 add	 esi, 4

; 150  :         return _Ptr == _Right._Ptr;

  00031	3b b7 3c 02 00
	00		 cmp	 esi, DWORD PTR [edi+572]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 424  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00037	75 e7		 jne	 SHORT $LL14@CollisionD
$LN3@CollisionD:
  00039	5f		 pop	 edi

; 427  : 			return true;
; 428  : 	}
; 429  : 	return false;
; 430  : }

  0003a	5e		 pop	 esi
  0003b	32 c0		 xor	 al, al
  0003d	5b		 pop	 ebx
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN26@CollisionD:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	b0 01		 mov	 al, 1
  00046	5b		 pop	 ebx
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ENDP ; CGraphicObjectInstance::CollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?ClearCollision@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?ClearCollision@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::ClearCollision, COMDAT
; _this$ = ecx

; 408  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00004	8b b7 38 02 00
	00		 mov	 esi, DWORD PTR [edi+568]
  0000a	3b b7 3c 02 00
	00		 cmp	 esi, DWORD PTR [edi+572]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 411  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00010	74 21		 je	 SHORT $LN34@ClearColli
$LL19@ClearColli:

; 412  : 	{
; 413  : 		(*it)->Destroy();

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ?Destroy@CBaseCollisionInstance@@QAEXXZ ; CBaseCollisionInstance::Destroy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  00019	83 c6 04	 add	 esi, 4

; 150  :         return _Ptr == _Right._Ptr;

  0001c	3b b7 3c 02 00
	00		 cmp	 esi, DWORD PTR [edi+572]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 411  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00022	75 ee		 jne	 SHORT $LL19@ClearColli

; 414  : 
; 415  : 	}
; 416  : 
; 417  : 	m_StaticCollisionInstanceVector.clear();

  00024	8b 87 38 02 00
	00		 mov	 eax, DWORD PTR [edi+568]
  0002a	89 87 3c 02 00
	00		 mov	 DWORD PTR [edi+572], eax
  00030	5f		 pop	 edi

; 418  : 
; 419  : }

  00031	5e		 pop	 esi
  00032	c3		 ret	 0
$LN34@ClearColli:

; 414  : 
; 415  : 	}
; 416  : 
; 417  : 	m_StaticCollisionInstanceVector.clear();

  00033	89 b7 3c 02 00
	00		 mov	 DWORD PTR [edi+572], esi
  00039	5f		 pop	 edi

; 418  : 
; 419  : }

  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
?ClearCollision@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::ClearCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_pscd$ = 8						; size = 4
$T1 = 12						; size = 4
_pMat$ = 12						; size = 4
?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z PROC ; CGraphicObjectInstance::AddCollision, COMDAT
; _this$ = ecx

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 404  : 	m_StaticCollisionInstanceVector.push_back(CBaseCollisionInstance::BuildCollisionInstance(pscd, pMat));

  00004	ff 75 0c	 push	 DWORD PTR _pMat$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _pscd$[ebp]
  0000c	e8 00 00 00 00	 call	 ?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CBaseCollisionInstance::BuildCollisionInstance
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00011	8b 96 3c 02 00
	00		 mov	 edx, DWORD PTR [esi+572]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 404  : 	m_StaticCollisionInstanceVector.push_back(CBaseCollisionInstance::BuildCollisionInstance(pscd, pMat));

  00017	8d 8e 38 02 00
	00		 lea	 ecx, DWORD PTR [esi+568]
  0001d	83 c4 08	 add	 esp, 8
  00020	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00023	5e		 pop	 esi
  00024	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00027	74 0a		 je	 SHORT $LN6@AddCollisi

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00029	89 02		 mov	 DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  0002b	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 405  : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
$LN6@AddCollisi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00033	8d 45 0c	 lea	 eax, DWORD PTR $T1[ebp]
  00036	50		 push	 eax
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@PAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAEPAPAVCBaseCollisionInstance@@QAPAV2@$$QAPAV2@@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Emplace_reallocate<CBaseCollisionInstance *>
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 405  : }

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ENDP ; CGraphicObjectInstance::AddCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.h
;	COMDAT ?OnDeform@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnDeform@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnDeform, COMDAT
; _this$ = ecx

; 104  : 		virtual void			OnDeform(){}

  00000	c2 00 00	 ret	 0
?OnDeform@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnDeform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.h
;	COMDAT ?OnUpdate@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnUpdate@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnUpdate, COMDAT
; _this$ = ecx

; 103  : 		virtual void			OnUpdate(){}

  00000	c2 00 00	 ret	 0
?OnUpdate@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.h
;	COMDAT ?OnClear@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnClear@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnClear, COMDAT
; _this$ = ecx

; 102  : 		virtual void			OnClear(){}

  00000	c2 00 00	 ret	 0
?OnClear@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ PROC ; CGraphicObjectInstance::RegisterBoundingSphere, COMDAT
; _this$ = ecx

; 395  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 396  : 	if (m_CullingHandle)

  00003	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  00009	85 c0		 test	 eax, eax
  0000b	74 0c		 je	 SHORT $LN2@RegisterBo

; 397  : 		CCullingManager::Instance().Unregister(m_CullingHandle);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z ; CCullingManager::Unregister
$LN2@RegisterBo:

; 398  : 
; 399  : 	m_CullingHandle = CCullingManager::Instance().Register(this);

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?Register@CCullingManager@@QAEPAVSpherePack@@PAVCGraphicObjectInstance@@@Z ; CCullingManager::Register
  00025	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  0002b	5e		 pop	 esi

; 400  : }

  0002c	c3		 ret	 0
?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ ENDP ; CGraphicObjectInstance::RegisterBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\sphere.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\vector.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\vector.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
_radius$1 = -20						; size = 4
_center$2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ PROC ; CGraphicObjectInstance::UpdateBoundingSphere, COMDAT
; _this$ = ecx

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 382  : 	if (m_CullingHandle)

  00013	83 be 68 01 00
	00 00		 cmp	 DWORD PTR [esi+360], 0
  0001a	0f 84 3d 01 00
	00		 je	 $LN28@UpdateBoun

; 383  : 	{
; 384  : 		Vector3d center;
; 385  : 		float radius;
; 386  : 		GetBoundingSphere(center,radius);

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	8d 4d ec	 lea	 ecx, DWORD PTR _radius$1[ebp]
  00025	51		 push	 ecx
  00026	8d 4d f0	 lea	 ecx, DWORD PTR _center$2[ebp]
  00029	51		 push	 ecx
  0002a	8b ce		 mov	 ecx, esi
  0002c	ff 50 0c	 call	 DWORD PTR [eax+12]

; 387  : 		if (radius != m_CullingHandle->GetRadius())

  0002f	8b b6 68 01 00
	00		 mov	 esi, DWORD PTR [esi+360]
  00035	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _radius$1[ebp]
  0003a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _center$2[ebp]
  0003f	0f 2e 56 10	 ucomiss xmm2, DWORD PTR [esi+16]
  00043	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  00048	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _center$2[ebp+4]
  0004d	9f		 lahf
  0004e	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  00053	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _center$2[ebp+8]
  00058	f3 0f 11 46 0c	 movss	 DWORD PTR [esi+12], xmm0
  0005d	f6 c4 44	 test	 ah, 68			; 00000044H
  00060	0f 8b 99 00 00
	00		 jnp	 $LN3@UpdateBoun
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h

; 474  : 	if (mParent && !HasSpherePackFlag(SPF_INTEGRATE))

  00066	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00069	85 c9		 test	 ecx, ecx
  0006b	0f 84 ec 00 00
	00		 je	 $LN28@UpdateBoun

; 133  : 		if ( mFlags & flag ) return true;

  00071	f6 46 38 20	 test	 BYTE PTR [esi+56], 32	; 00000020H
  00075	0f 85 e2 00 00
	00		 jne	 $LN28@UpdateBoun

; 476  : 		if (radius != GetRadius())

  0007b	0f 2e 56 10	 ucomiss xmm2, DWORD PTR [esi+16]
  0007f	9f		 lahf
  00080	f6 c4 44	 test	 ah, 68			; 00000044H
  00083	7b 34		 jnp	 SHORT $LN20@UpdateBoun
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\sphere.h

; 68   : 		mRadius2 = radius*radius;

  00085	0f 28 c2	 movaps	 xmm0, xmm2
  00088	f3 0f 11 56 10	 movss	 DWORD PTR [esi+16], xmm2
  0008d	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00091	f3 0f 11 46 14	 movss	 DWORD PTR [esi+20], xmm0
  00096	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00099	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0009e	f3 0f 5c ca	 subss	 xmm1, xmm2

; 242  : 		if ( mBindingDistance <= 0 )

  000a2	0f 2f c1	 comiss	 xmm0, xmm1
  000a5	72 09		 jb	 SHORT $LN19@UpdateBoun

; 243  : 			mBindingDistance = 0;

  000a7	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  000ae	eb 09		 jmp	 SHORT $LN20@UpdateBoun
$LN19@UpdateBoun:

; 244  : 		else
; 245  : 			mBindingDistance*=mBindingDistance;

  000b0	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000b4	f3 0f 11 4e 40	 movss	 DWORD PTR [esi+64], xmm1
$LN20@UpdateBoun:

; 482  : 		mFactory->AddRecompute(mParent);

  000b9	51		 push	 ecx
  000ba	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000bd	e8 00 00 00 00	 call	 ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute

; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };

  000c2	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\vector.h

; 170  : 		float dx = a.x - x;

  000c5	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 171  : 		float dy = a.y - y;

  000ca	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  000cf	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  000d4	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 172  : 		float dz = a.z - z;

  000d9	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000de	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  000e3	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000e7	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000eb	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ef	f3 0f 58 d1	 addss	 xmm2, xmm1
  000f3	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h

; 486  : 		if (dist >= mBindingDistance)

  000f7	0f 2f 56 40	 comiss	 xmm2, DWORD PTR [esi+64]
  000fb	72 60		 jb	 SHORT $LN28@UpdateBoun
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 388  : 			m_CullingHandle->NewPosRadius(center,radius);

  000fd	eb 4e		 jmp	 SHORT $LN41@UpdateBoun
$LN3@UpdateBoun:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h

; 452  : 	if (mParent && !HasSpherePackFlag(SPF_INTEGRATE))

  000ff	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00102	85 c0		 test	 eax, eax
  00104	74 57		 je	 SHORT $LN28@UpdateBoun

; 133  : 		if ( mFlags & flag ) return true;

  00106	f6 46 38 20	 test	 BYTE PTR [esi+56], 32	; 00000020H
  0010a	75 51		 jne	 SHORT $LN28@UpdateBoun
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\vector.h

; 170  : 		float dx = a.x - x;

  0010c	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 171  : 		float dy = a.y - y;

  00111	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00116	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  0011b	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 172  : 		float dz = a.z - z;

  00120	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00125	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  0012a	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0012e	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00132	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00136	f3 0f 58 d1	 addss	 xmm2, xmm1
  0013a	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h

; 456  : 		if (dist >= mBindingDistance) // if that exceeds our binding distance...

  0013e	0f 2f 56 40	 comiss	 xmm2, DWORD PTR [esi+64]
  00142	72 19		 jb	 SHORT $LN28@UpdateBoun

; 457  : 		{
; 458  : 			// If our parent, is not already marked to be recomputed (rebalance the sphere), then add him to the recomputation fifo.
; 459  : 			mFactory->AddRecompute(mParent);

  00144	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute
$LN41@UpdateBoun:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 392  : }

  0014d	8b ce		 mov	 ecx, esi
  0014f	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink
  00154	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00157	56		 push	 esi
  00158	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
$LN28@UpdateBoun:
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	5e		 pop	 esi
  00163	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c3		 ret	 0
?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ENDP ; CGraphicObjectInstance::UpdateBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?OnInitialize@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnInitialize@CGraphicObjectInstance@@UAEXXZ PROC	; CGraphicObjectInstance::OnInitialize, COMDAT
; _this$ = ecx

; 6    : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 7    : 	ZeroMemory(m_abyPortalID, sizeof(m_abyPortalID));

  00003	66 0f d6 81 60
	01 00 00	 movq	 QWORD PTR [ecx+352], xmm0

; 8    : }

  0000b	c3		 ret	 0
?OnInitialize@CGraphicObjectInstance@@UAEXXZ ENDP	; CGraphicObjectInstance::OnInitialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Initialize@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Initialize, COMDAT
; _this$ = ecx

; 337  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 338  : 	if (m_CullingHandle)

  00003	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  00009	85 c0		 test	 eax, eax
  0000b	74 0c		 je	 SHORT $LN2@Initialize

; 339  : 		CCullingManager::Instance().Unregister(m_CullingHandle);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z ; CCullingManager::Unregister
$LN2@Initialize:

; 340  : 	m_CullingHandle = 0;

  00019	c7 86 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+360], 0

; 341  : 
; 342  : 	m_pHeightAttributeInstance = NULL;

  00023	c7 86 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+580], 0

; 343  : 
; 344  : 	m_isVisible = TRUE;

  0002d	c6 46 68 01	 mov	 BYTE PTR [esi+104], 1

; 345  : 
; 346  : 	m_BlockCamera = false;

  00031	c6 86 ac 00 00
	00 00		 mov	 BYTE PTR [esi+172], 0

; 347  : 
; 348  : 	m_v3Position.x = m_v3Position.y = m_v3Position.z = 0.0f;

  00038	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0003f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00046	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 349  : #ifdef ENABLE_OBJ_SCALLING
; 350  : 	m_v3Scale.x = m_v3Scale.y = m_v3Scale.z = 1.0f;

  0004d	c7 46 18 00 00
	80 3f		 mov	 DWORD PTR [esi+24], 1065353216 ; 3f800000H
  00054	c7 46 14 00 00
	80 3f		 mov	 DWORD PTR [esi+20], 1065353216 ; 3f800000H
  0005b	c7 46 10 00 00
	80 3f		 mov	 DWORD PTR [esi+16], 1065353216 ; 3f800000H

; 351  : #else
; 352  : 	m_v3Scale.x = m_v3Scale.y = m_v3Scale.z = 0.0f;
; 353  : #endif
; 354  : 	m_fYaw = m_fPitch = m_fRoll = 0.0f;

  00062	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  00069	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00070	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00077	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  00081	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  0008b	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  00095	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  0009f	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  000a9	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  000b3	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  000bd	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000c7	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  000ce	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  000d5	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  000dc	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000e3	c7 86 a8 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+168], 1065353216 ; 3f800000H
  000ed	c7 86 94 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+148], 1065353216 ; 3f800000H
  000f7	c7 86 80 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+128], 1065353216 ; 3f800000H
  00101	c7 46 6c 00 00
	80 3f		 mov	 DWORD PTR [esi+108], 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00108	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0010f	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  00116	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0011d	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  00124	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  0012b	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  00132	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  00139	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00140	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00147	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  0014e	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  00155	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0015c	c7 46 64 00 00
	80 3f		 mov	 DWORD PTR [esi+100], 1065353216 ; 3f800000H
  00163	c7 46 50 00 00
	80 3f		 mov	 DWORD PTR [esi+80], 1065353216 ; 3f800000H
  0016a	c7 46 3c 00 00
	80 3f		 mov	 DWORD PTR [esi+60], 1065353216 ; 3f800000H
  00171	c7 46 28 00 00
	80 3f		 mov	 DWORD PTR [esi+40], 1065353216 ; 3f800000H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 359  : 	m_v3ScaleAcce.x = m_v3ScaleAcce.y = m_v3ScaleAcce.z = 0.0f;

  00178	c7 86 54 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+596], 0
  00182	c7 86 50 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+592], 0
  0018c	c7 86 4c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+588], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00196	c7 86 90 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+656], 0
  001a0	c7 86 8c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+652], 0
  001aa	c7 86 88 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+648], 0
  001b4	c7 86 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+644], 0
  001be	c7 86 7c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+636], 0
  001c8	c7 86 78 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+632], 0
  001d2	c7 86 74 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+628], 0
  001dc	c7 86 70 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+624], 0
  001e6	c7 86 68 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+616], 0
  001f0	c7 86 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+612], 0
  001fa	c7 86 60 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+608], 0
  00204	c7 86 5c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+604], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0020e	c7 86 94 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+660], 1065353216 ; 3f800000H
  00218	c7 86 80 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+640], 1065353216 ; 3f800000H
  00222	c7 86 6c 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+620], 1065353216 ; 3f800000H
  0022c	c7 86 58 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+600], 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00236	c7 86 d0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+720], 0
  00240	c7 86 cc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+716], 0
  0024a	c7 86 c8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+712], 0
  00254	c7 86 c4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+708], 0
  0025e	c7 86 bc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+700], 0
  00268	c7 86 b8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+696], 0
  00272	c7 86 b4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+692], 0
  0027c	c7 86 b0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+688], 0
  00286	c7 86 a8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+680], 0
  00290	c7 86 a4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+676], 0
  0029a	c7 86 a0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+672], 0
  002a4	c7 86 9c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+668], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  002ae	c7 86 d4 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+724], 1065353216 ; 3f800000H
  002b8	c7 86 c0 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+704], 1065353216 ; 3f800000H
  002c2	c7 86 ac 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+684], 1065353216 ; 3f800000H
  002cc	c7 86 98 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+664], 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  002d6	c7 86 10 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+784], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 372  : 	OnInitialize();

  002e0	8b 06		 mov	 eax, DWORD PTR [esi]
  002e2	8b ce		 mov	 ecx, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  002e4	c7 86 0c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+780], 0
  002ee	c7 86 08 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+776], 0
  002f8	c7 86 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+772], 0
  00302	c7 86 fc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+764], 0
  0030c	c7 86 f8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+760], 0
  00316	c7 86 f4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+756], 0
  00320	c7 86 f0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+752], 0
  0032a	c7 86 e8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+744], 0
  00334	c7 86 e4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+740], 0
  0033e	c7 86 e0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+736], 0
  00348	c7 86 dc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+732], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00352	c7 86 14 03 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+788], 1065353216 ; 3f800000H
  0035c	c7 86 00 03 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+768], 1065353216 ; 3f800000H
  00366	c7 86 ec 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+748], 1065353216 ; 3f800000H
  00370	c7 86 d8 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+728], 1065353216 ; 3f800000H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 365  : 	m_v3ScalePosition.x = m_v3ScalePosition.y = m_v3ScalePosition.z = 0.0f;

  0037a	c7 86 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+372], 0
  00384	c7 86 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+368], 0
  0038e	c7 86 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+364], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00398	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0
  003a2	c7 86 ac 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+428], 0
  003ac	c7 86 a8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+424], 0
  003b6	c7 86 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+420], 0
  003c0	c7 86 9c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+412], 0
  003ca	c7 86 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+408], 0
  003d4	c7 86 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+404], 0
  003de	c7 86 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+400], 0
  003e8	c7 86 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+392], 0
  003f2	c7 86 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+388], 0
  003fc	c7 86 80 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+384], 0
  00406	c7 86 7c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+380], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00410	c7 86 b4 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+436], 1065353216 ; 3f800000H
  0041a	c7 86 a0 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+416], 1065353216 ; 3f800000H
  00424	c7 86 8c 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+396], 1065353216 ; 3f800000H
  0042e	c7 86 78 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+376], 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00438	c7 86 f0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+496], 0
  00442	c7 86 ec 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+492], 0
  0044c	c7 86 e8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+488], 0
  00456	c7 86 e4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+484], 0
  00460	c7 86 dc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+476], 0
  0046a	c7 86 d8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+472], 0
  00474	c7 86 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+468], 0
  0047e	c7 86 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+464], 0
  00488	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], 0
  00492	c7 86 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+452], 0
  0049c	c7 86 c0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+448], 0
  004a6	c7 86 bc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+444], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  004b0	c7 86 f4 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+500], 1065353216 ; 3f800000H
  004ba	c7 86 e0 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+480], 1065353216 ; 3f800000H
  004c4	c7 86 cc 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+460], 1065353216 ; 3f800000H
  004ce	c7 86 b8 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+440], 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  004d8	c7 86 30 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+560], 0
  004e2	c7 86 2c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+556], 0
  004ec	c7 86 28 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+552], 0
  004f6	c7 86 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+548], 0
  00500	c7 86 1c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+540], 0
  0050a	c7 86 18 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+536], 0
  00514	c7 86 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+532], 0
  0051e	c7 86 10 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+528], 0
  00528	c7 86 08 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+520], 0
  00532	c7 86 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+516], 0
  0053c	c7 86 00 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+512], 0
  00546	c7 86 fc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+508], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00550	c7 86 34 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+564], 1065353216 ; 3f800000H
  0055a	c7 86 20 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+544], 1065353216 ; 3f800000H
  00564	c7 86 0c 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+524], 1065353216 ; 3f800000H
  0056e	c7 86 f8 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+504], 1065353216 ; 3f800000H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 372  : 	OnInitialize();

  00578	5e		 pop	 esi
  00579	ff 60 08	 jmp	 DWORD PTR [eax+8]
?Initialize@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetPortal@CGraphicObjectInstance@@QAEHK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetPortal@CGraphicObjectInstance@@QAEHK@Z PROC		; CGraphicObjectInstance::GetPortal, COMDAT
; _this$ = ecx

; 523  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 524  : 	if (dwIndex >= PORTAL_ID_MAX_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00006	83 f8 08	 cmp	 eax, 8
  00009	72 06		 jb	 SHORT $LN2@GetPortal

; 525  : 	{
; 526  : 		assert(dwIndex < PORTAL_ID_MAX_NUM);
; 527  : 		return 0;

  0000b	33 c0		 xor	 eax, eax

; 531  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
$LN2@GetPortal:

; 528  : 	}
; 529  : 
; 530  : 	return m_abyPortalID[dwIndex];

  00011	0f b6 84 08 60
	01 00 00	 movzx	 eax, BYTE PTR [eax+ecx+352]

; 531  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetPortal@CGraphicObjectInstance@@QAEHK@Z ENDP		; CGraphicObjectInstance::GetPortal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetPortal@CGraphicObjectInstance@@QAEXKH@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_iID$ = 12						; size = 4
?SetPortal@CGraphicObjectInstance@@QAEXKH@Z PROC	; CGraphicObjectInstance::SetPortal, COMDAT
; _this$ = ecx

; 512  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 513  : 	if (dwIndex >= PORTAL_ID_MAX_NUM)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  00006	83 fa 08	 cmp	 edx, 8
  00009	73 0a		 jae	 SHORT $LN1@SetPortal

; 514  : 	{
; 515  : 		assert(dwIndex < PORTAL_ID_MAX_NUM);
; 516  : 		return;
; 517  : 	}
; 518  : 
; 519  : 	m_abyPortalID[dwIndex] = iID;

  0000b	8a 45 0c	 mov	 al, BYTE PTR _iID$[ebp]
  0000e	88 84 0a 60 01
	00 00		 mov	 BYTE PTR [edx+ecx+352], al
$LN1@SetPortal:

; 520  : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?SetPortal@CGraphicObjectInstance@@QAEXKH@Z ENDP	; CGraphicObjectInstance::SetPortal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ
_TEXT	SEGMENT
?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ PROC ; CGraphicObjectInstance::GetTransform, COMDAT
; _this$ = ecx

; 174  : 	return m_worldMatrix;

  00000	8d 41 6c	 lea	 eax, DWORD PTR [ecx+108]

; 175  : }

  00003	c3		 ret	 0
?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ENDP ; CGraphicObjectInstance::GetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z
_TEXT	SEGMENT
_c_rucNumTBBoxVertex$ = 8				; size = 4
?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z PROC ; CGraphicObjectInstance::GetWTBBoxVertex, COMDAT
; _this$ = ecx

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  : 	return m_v4TBBox[c_rucNumTBBoxVertex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rucNumTBBoxVertex$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00009	83 c0 0b	 add	 eax, 11			; 0000000bH
  0000c	c1 e0 04	 shl	 eax, 4
  0000f	03 c1		 add	 eax, ecx

; 283  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z ENDP ; CGraphicObjectInstance::GetWTBBoxVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z
_TEXT	SEGMENT
_pu$GSCopy$1$ = -220					; size = 4
_pv$GSCopy$1$ = -216					; size = 4
_pt$GSCopy$1$ = -212					; size = 4
$T1 = -208						; size = 12
$T2 = -208						; size = 12
$T3 = -208						; size = 12
$T4 = -208						; size = 12
$T5 = -208						; size = 12
$T6 = -208						; size = 12
$T7 = -208						; size = 12
$T8 = -208						; size = 12
_v3Start$ = -196					; size = 12
_v3Dir$ = -184						; size = 12
_posVertices$ = -172					; size = 96
_Indices$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_c_rRay$ = 8						; size = 4
_pu$ = 12						; size = 4
_pv$ = 16						; size = 4
_pt$ = 20						; size = 4
?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z PROC ; CGraphicObjectInstance::isIntersect, COMDAT
; _this$ = ecx

; 286  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 55 08	 mov	 edx, DWORD PTR _c_rRay$[ebp]
  00016	8b 45 10	 mov	 eax, DWORD PTR _pv$[ebp]
  00019	53		 push	 ebx
  0001a	8b d9		 mov	 ebx, ecx
  0001c	89 85 28 ff ff
	ff		 mov	 DWORD PTR _pv$GSCopy$1$[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h

; 36   : 			*pv3Start = m_v3Start;

  00022	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 286  : {

  00026	8b 45 14	 mov	 eax, DWORD PTR _pt$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h

; 36   : 			*pv3Start = m_v3Start;

  00029	66 0f d6 85 3c
	ff ff ff	 movq	 QWORD PTR _v3Start$[ebp], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00031	f3 0f 10 ab 30
	01 00 00	 movss	 xmm5, DWORD PTR [ebx+304]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h

; 41   : 			*pv3Dir = m_v3Direction;

  00039	f3 0f 7e 42 18	 movq	 xmm0, QWORD PTR [edx+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0003e	f3 0f 10 9b 34
	01 00 00	 movss	 xmm3, DWORD PTR [ebx+308]

; 180  :     x = fx;

  00046	f3 0f 10 a3 3c
	01 00 00	 movss	 xmm4, DWORD PTR [ebx+316]

; 182  :     z = fz;

  0004e	f3 0f 10 8b 38
	01 00 00	 movss	 xmm1, DWORD PTR [ebx+312]

; 181  :     y = fy;

  00056	f3 0f 10 93 40
	01 00 00	 movss	 xmm2, DWORD PTR [ebx+320]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h

; 41   : 			*pv3Dir = m_v3Direction;

  0005e	66 0f d6 85 48
	ff ff ff	 movq	 QWORD PTR _v3Dir$[ebp], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 294  : 	posVertices[0] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  00066	0f 28 c5	 movaps	 xmm0, xmm5
  00069	0f 14 c3	 unpcklps xmm0, xmm3
  0006c	66 0f d6 85 54
	ff ff ff	 movq	 QWORD PTR _posVertices$[ebp], xmm0

; 295  : 	posVertices[1] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  00074	0f 28 c4	 movaps	 xmm0, xmm4
  00077	8b 4d 0c	 mov	 ecx, DWORD PTR _pu$[ebp]
  0007a	89 85 2c ff ff
	ff		 mov	 DWORD PTR _pt$GSCopy$1$[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h

; 36   : 			*pv3Start = m_v3Start;

  00080	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 295  : 	posVertices[1] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  00083	0f 14 c3	 unpcklps xmm0, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h

; 36   : 			*pv3Start = m_v3Start;

  00086	89 85 44 ff ff
	ff		 mov	 DWORD PTR _v3Start$[ebp+8], eax

; 41   : 			*pv3Dir = m_v3Direction;

  0008c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 295  : 	posVertices[1] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  0008f	66 0f d6 85 60
	ff ff ff	 movq	 QWORD PTR _posVertices$[ebp+12], xmm0

; 296  : 	posVertices[2] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  00097	0f 28 c5	 movaps	 xmm0, xmm5
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ray.h

; 41   : 			*pv3Dir = m_v3Direction;

  0009a	89 85 50 ff ff
	ff		 mov	 DWORD PTR _v3Dir$[ebp+8], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 296  : 	posVertices[2] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000a0	0f 14 c2	 unpcklps xmm0, xmm2
  000a3	66 0f d6 85 6c
	ff ff ff	 movq	 QWORD PTR _posVertices$[ebp+24], xmm0

; 297  : 	posVertices[3] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000ab	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000ae	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T8[ebp+8], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 294  : 	posVertices[0] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  000b6	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+8]
  000bc	89 85 5c ff ff
	ff		 mov	 DWORD PTR _posVertices$[ebp+8], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000c2	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T7[ebp+8], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 295  : 	posVertices[1] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  000ca	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp+8]
  000d0	89 85 68 ff ff
	ff		 mov	 DWORD PTR _posVertices$[ebp+20], eax

; 297  : 	posVertices[3] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000d6	0f 14 c2	 unpcklps xmm0, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000d9	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T6[ebp+8], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 296  : 	posVertices[2] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000e1	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+8]
  000e7	89 85 74 ff ff
	ff		 mov	 DWORD PTR _posVertices$[ebp+32], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000ed	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T5[ebp+8], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 297  : 	posVertices[3] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000f5	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000fb	f3 0f 10 8b 44
	01 00 00	 movss	 xmm1, DWORD PTR [ebx+324]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 297  : 	posVertices[3] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  00103	66 0f d6 85 78
	ff ff ff	 movq	 QWORD PTR _posVertices$[ebp+36], xmm0

; 298  : 	posVertices[4] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMax.z);

  0010b	0f 28 c5	 movaps	 xmm0, xmm5
  0010e	89 45 80	 mov	 DWORD PTR _posVertices$[ebp+44], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00111	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T4[ebp+8], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 298  : 	posVertices[4] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMax.z);

  00119	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp+8]
  0011f	0f 14 c3	 unpcklps xmm0, xmm3
  00122	89 45 8c	 mov	 DWORD PTR _posVertices$[ebp+56], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00125	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T3[ebp+8], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 299  : 	posVertices[5] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMax.z);

  0012d	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+8]
  00133	66 0f d6 45 84	 movq	 QWORD PTR _posVertices$[ebp+48], xmm0
  00138	0f 28 c4	 movaps	 xmm0, xmm4
  0013b	89 45 98	 mov	 DWORD PTR _posVertices$[ebp+68], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0013e	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T2[ebp+8], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 300  : 	posVertices[6] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMax.z);

  00146	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+8]
  0014c	56		 push	 esi
  0014d	0f 14 c3	 unpcklps xmm0, xmm3
  00150	0f 14 ea	 unpcklps xmm5, xmm2
  00153	89 45 a4	 mov	 DWORD PTR _posVertices$[ebp+80], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00156	f3 0f 11 8d 38
	ff ff ff	 movss	 DWORD PTR $T1[ebp+8], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 301  : 	posVertices[7] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMax.z);

  0015e	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp+8]
  00164	0f 14 e2	 unpcklps xmm4, xmm2
  00167	57		 push	 edi
  00168	89 8d 24 ff ff
	ff		 mov	 DWORD PTR _pu$GSCopy$1$[ebp], ecx
  0016e	66 0f d6 45 90	 movq	 QWORD PTR _posVertices$[ebp+60], xmm0
  00173	66 0f d6 6d 9c	 movq	 QWORD PTR _posVertices$[ebp+72], xmm5
  00178	66 0f d6 65 a8	 movq	 QWORD PTR _posVertices$[ebp+84], xmm4
  0017d	89 45 b0	 mov	 DWORD PTR _posVertices$[ebp+92], eax

; 302  : 
; 303  : 	TIndex Indices[36] = {0, 1, 2, 1, 3, 2,

  00180	c7 45 b4 00 00
	01 00		 mov	 DWORD PTR _Indices$[ebp], 65536 ; 00010000H
  00187	c7 45 b8 02 00
	01 00		 mov	 DWORD PTR _Indices$[ebp+4], 65538 ; 00010002H
  0018e	c7 45 bc 03 00
	02 00		 mov	 DWORD PTR _Indices$[ebp+8], 131075 ; 00020003H

; 304  : 						  2, 0, 6, 0, 4, 6,

  00195	c7 45 c0 02 00
	00 00		 mov	 DWORD PTR _Indices$[ebp+12], 2
  0019c	c7 45 c4 06 00
	00 00		 mov	 DWORD PTR _Indices$[ebp+16], 6
  001a3	c7 45 c8 04 00
	06 00		 mov	 DWORD PTR _Indices$[ebp+20], 393220 ; 00060004H

; 305  : 						  0, 1, 4, 1, 5, 4,

  001aa	c7 45 cc 00 00
	01 00		 mov	 DWORD PTR _Indices$[ebp+24], 65536 ; 00010000H
  001b1	c7 45 d0 04 00
	01 00		 mov	 DWORD PTR _Indices$[ebp+28], 65540 ; 00010004H
  001b8	c7 45 d4 05 00
	04 00		 mov	 DWORD PTR _Indices$[ebp+32], 262149 ; 00040005H

; 306  : 						  1, 3, 5, 3, 7, 5,

  001bf	c7 45 d8 01 00
	03 00		 mov	 DWORD PTR _Indices$[ebp+36], 196609 ; 00030001H
  001c6	c7 45 dc 05 00
	03 00		 mov	 DWORD PTR _Indices$[ebp+40], 196613 ; 00030005H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  001cd	8d 75 b6	 lea	 esi, DWORD PTR _Indices$[ebp+2]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 306  : 						  1, 3, 5, 3, 7, 5,

  001d0	c7 45 e0 07 00
	05 00		 mov	 DWORD PTR _Indices$[ebp+44], 327687 ; 00050007H

; 307  : 						  3, 2, 7, 2, 6, 7,
; 308  : 						  4, 5, 6, 5, 7, 6};
; 309  : 
; 310  : 	int triCount = 12;

  001d7	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH
  001dc	c7 45 e4 03 00
	02 00		 mov	 DWORD PTR _Indices$[ebp+48], 131075 ; 00020003H
  001e3	c7 45 e8 07 00
	02 00		 mov	 DWORD PTR _Indices$[ebp+52], 131079 ; 00020007H
  001ea	c7 45 ec 06 00
	07 00		 mov	 DWORD PTR _Indices$[ebp+56], 458758 ; 00070006H
  001f1	c7 45 f0 04 00
	05 00		 mov	 DWORD PTR _Indices$[ebp+60], 327684 ; 00050004H
  001f8	c7 45 f4 06 00
	05 00		 mov	 DWORD PTR _Indices$[ebp+64], 327686 ; 00050006H
  001ff	c7 45 f8 07 00
	06 00		 mov	 DWORD PTR _Indices$[ebp+68], 393223 ; 00060007H
  00206	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL2@isIntersec:

; 311  : 	WORD* pcurIdx = (WORD*)Indices;
; 312  : 
; 313  : 	while (triCount--)
; 314  : 	{
; 315  : 		if (IntersectTriangle(v3Start, v3Dir,

  00210	ff b5 2c ff ff
	ff		 push	 DWORD PTR _pt$GSCopy$1$[ebp]
  00216	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0021a	4f		 dec	 edi
  0021b	ff b5 28 ff ff
	ff		 push	 DWORD PTR _pv$GSCopy$1$[ebp]
  00221	51		 push	 ecx
  00222	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00225	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _posVertices$[ebp]
  0022b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0022e	50		 push	 eax
  0022f	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00232	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00235	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00238	50		 push	 eax
  00239	0f b7 46 fe	 movzx	 eax, WORD PTR [esi-2]
  0023d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00240	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00243	8b cb		 mov	 ecx, ebx
  00245	50		 push	 eax
  00246	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _v3Dir$[ebp]
  0024c	50		 push	 eax
  0024d	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _v3Start$[ebp]
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 ?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z ; CGraphicCollisionObject::IntersectTriangle
  00259	84 c0		 test	 al, al
  0025b	75 20		 jne	 SHORT $LN32@isIntersec

; 316  : 			posVertices[pcurIdx[0]],
; 317  : 			posVertices[pcurIdx[1]],
; 318  : 			posVertices[pcurIdx[2]],
; 319  : 			pu, pv, pt))
; 320  : 		{
; 321  : 			return true;
; 322  : 		}
; 323  : 
; 324  : 		pcurIdx += 3;

  0025d	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _pu$GSCopy$1$[ebp]
  00263	83 c6 06	 add	 esi, 6
  00266	85 ff		 test	 edi, edi
  00268	75 a6		 jne	 SHORT $LL2@isIntersec

; 325  : 	}
; 326  : 
; 327  : 	return false;
; 328  : }

  0026a	5f		 pop	 edi
  0026b	5e		 pop	 esi
  0026c	5b		 pop	 ebx
  0026d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00270	33 cd		 xor	 ecx, ebp
  00272	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00277	8b e5		 mov	 esp, ebp
  00279	5d		 pop	 ebp
  0027a	c2 10 00	 ret	 16			; 00000010H
$LN32@isIntersec:
  0027d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00280	b0 01		 mov	 al, 1
  00282	5f		 pop	 edi
  00283	5e		 pop	 esi
  00284	33 cd		 xor	 ecx, ebp
  00286	5b		 pop	 ebx
  00287	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0028c	8b e5		 mov	 esp, ebp
  0028e	5d		 pop	 ebp
  0028f	c2 10 00	 ret	 16			; 00000010H
?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z ENDP ; CGraphicObjectInstance::isIntersect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?isShow@CGraphicObjectInstance@@QAE_NXZ
_TEXT	SEGMENT
?isShow@CGraphicObjectInstance@@QAE_NXZ PROC		; CGraphicObjectInstance::isShow, COMDAT
; _this$ = ecx

; 273  : 	return m_isVisible;

  00000	8a 41 68	 mov	 al, BYTE PTR [ecx+104]

; 274  : }

  00003	c3		 ret	 0
?isShow@CGraphicObjectInstance@@QAE_NXZ ENDP		; CGraphicObjectInstance::isShow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Hide@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Hide@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Hide, COMDAT
; _this$ = ecx

; 269  : 	m_isVisible = false;

  00000	c6 41 68 00	 mov	 BYTE PTR [ecx+104], 0

; 270  : }

  00004	c3		 ret	 0
?Hide@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Hide
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Show@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Show@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Show, COMDAT
; _this$ = ecx

; 264  : 	m_isVisible = true;

  00000	c6 41 68 01	 mov	 BYTE PTR [ecx+104], 1

; 265  : }

  00004	c3		 ret	 0
?Show@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Transform@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
_tmp2$ = -132						; size = 64
_tmp1$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?Transform@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Transform, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b d9		 mov	 ebx, ecx

; 116  : #ifdef ENABLE_OBJ_SCALLING
; 117  : 	D3DXMATRIX tmp1;
; 118  : 	D3DXMatrixMultiply(&tmp1, &m_PositionMatrix, &m_mRotation);

  00017	8d 45 bc	 lea	 eax, DWORD PTR _tmp1$[ebp]
  0001a	57		 push	 edi
  0001b	8d 7b 28	 lea	 edi, DWORD PTR [ebx+40]
  0001e	57		 push	 edi
  0001f	8d b3 b8 01 00
	00		 lea	 esi, DWORD PTR [ebx+440]
  00025	56		 push	 esi
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 119  : 
; 120  : 	m_worldMatrix = tmp1;

  0002c	0f 10 45 bc	 movups	 xmm0, XMMWORD PTR _tmp1$[ebp]

; 121  : 	m_worldMatrix._41 += m_v3Position.x;
; 122  : 	m_worldMatrix._42 += m_v3Position.y;
; 123  : 	m_worldMatrix._43 += m_v3Position.z;
; 124  : 	D3DXMatrixMultiply(&tmp1, &m_PositionMatrix, &m_ScaleMatrix);

  00030	8d 83 78 01 00
	00		 lea	 eax, DWORD PTR [ebx+376]
  00036	50		 push	 eax
  00037	0f 11 43 6c	 movups	 XMMWORD PTR [ebx+108], xmm0
  0003b	56		 push	 esi
  0003c	0f 10 45 cc	 movups	 xmm0, XMMWORD PTR _tmp1$[ebp+16]
  00040	8d 45 bc	 lea	 eax, DWORD PTR _tmp1$[ebp]
  00043	50		 push	 eax
  00044	0f 11 43 7c	 movups	 XMMWORD PTR [ebx+124], xmm0
  00048	0f 10 45 dc	 movups	 xmm0, XMMWORD PTR _tmp1$[ebp+32]
  0004c	0f 11 83 8c 00
	00 00		 movups	 XMMWORD PTR [ebx+140], xmm0
  00053	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR _tmp1$[ebp+48]
  00057	0f 11 83 9c 00
	00 00		 movups	 XMMWORD PTR [ebx+156], xmm0
  0005e	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]
  00063	f3 0f 58 83 9c
	00 00 00	 addss	 xmm0, DWORD PTR [ebx+156]
  0006b	f3 0f 11 83 9c
	00 00 00	 movss	 DWORD PTR [ebx+156], xmm0
  00073	f3 0f 10 83 a0
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+160]
  0007b	f3 0f 58 43 08	 addss	 xmm0, DWORD PTR [ebx+8]
  00080	f3 0f 11 83 a0
	00 00 00	 movss	 DWORD PTR [ebx+160], xmm0
  00088	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  0008d	f3 0f 58 83 a4
	00 00 00	 addss	 xmm0, DWORD PTR [ebx+164]
  00095	f3 0f 11 83 a4
	00 00 00	 movss	 DWORD PTR [ebx+164], xmm0
  0009d	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 125  : 
; 126  : 	D3DXMATRIX tmp2;
; 127  : 	D3DXMatrixMultiply(&tmp2, &tmp1, &m_mRotation);

  000a2	57		 push	 edi
  000a3	8d 45 bc	 lea	 eax, DWORD PTR _tmp1$[ebp]
  000a6	50		 push	 eax
  000a7	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _tmp2$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 128  : 
; 129  : 	m_TransformMatrix = tmp2;

  000b3	0f 10 85 7c ff
	ff ff		 movups	 xmm0, XMMWORD PTR _tmp2$[ebp]

; 130  : 	m_TransformMatrix._41 = m_v3ScalePosition.x + m_v3Position.x + m_TransformMatrix._41;
; 131  : 	m_TransformMatrix._42 = m_v3ScalePosition.y + m_v3Position.y + m_TransformMatrix._42;
; 132  : 	m_TransformMatrix._43 = m_v3ScalePosition.z + m_v3Position.z + m_TransformMatrix._43;
; 133  : #else
; 134  : 	m_worldMatrix = m_mRotation;
; 135  : 
; 136  : 	m_worldMatrix._41	+= m_v3Position.x;
; 137  : 	m_worldMatrix._42	+= m_v3Position.y;
; 138  : 	m_worldMatrix._43	+= m_v3Position.z;
; 139  : #endif
; 140  : }

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bd	5f		 pop	 edi
  000be	0f 11 83 f8 01
	00 00		 movups	 XMMWORD PTR [ebx+504], xmm0
  000c5	5e		 pop	 esi
  000c6	0f 10 45 8c	 movups	 xmm0, XMMWORD PTR _tmp2$[ebp+16]
  000ca	33 cd		 xor	 ecx, ebp
  000cc	0f 11 83 08 02
	00 00		 movups	 XMMWORD PTR [ebx+520], xmm0
  000d3	0f 10 45 9c	 movups	 xmm0, XMMWORD PTR _tmp2$[ebp+32]
  000d7	0f 11 83 18 02
	00 00		 movups	 XMMWORD PTR [ebx+536], xmm0
  000de	0f 10 45 ac	 movups	 xmm0, XMMWORD PTR _tmp2$[ebp+48]
  000e2	0f 11 83 28 02
	00 00		 movups	 XMMWORD PTR [ebx+552], xmm0
  000e9	f3 0f 10 83 6c
	01 00 00	 movss	 xmm0, DWORD PTR [ebx+364]
  000f1	f3 0f 58 43 04	 addss	 xmm0, DWORD PTR [ebx+4]
  000f6	f3 0f 58 83 28
	02 00 00	 addss	 xmm0, DWORD PTR [ebx+552]
  000fe	f3 0f 11 83 28
	02 00 00	 movss	 DWORD PTR [ebx+552], xmm0
  00106	f3 0f 10 83 70
	01 00 00	 movss	 xmm0, DWORD PTR [ebx+368]
  0010e	f3 0f 58 43 08	 addss	 xmm0, DWORD PTR [ebx+8]
  00113	f3 0f 58 83 2c
	02 00 00	 addss	 xmm0, DWORD PTR [ebx+556]
  0011b	f3 0f 11 83 2c
	02 00 00	 movss	 DWORD PTR [ebx+556], xmm0
  00123	f3 0f 10 83 74
	01 00 00	 movss	 xmm0, DWORD PTR [ebx+372]
  0012b	f3 0f 58 43 0c	 addss	 xmm0, DWORD PTR [ebx+12]
  00130	f3 0f 58 83 30
	02 00 00	 addss	 xmm0, DWORD PTR [ebx+560]
  00138	f3 0f 11 83 30
	02 00 00	 movss	 DWORD PTR [ebx+560], xmm0
  00140	5b		 pop	 ebx
  00141	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c3		 ret	 0
?Transform@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Transform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Deform@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Deform@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Deform, COMDAT
; _this$ = ecx

; 106  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 107  : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN1@Deform

; 108  : 		return;
; 109  : 
; 110  : 	OnDeform();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 2c	 jmp	 DWORD PTR [eax+44]
$LN1@Deform:
  00014	5e		 pop	 esi

; 111  : }

  00015	c3		 ret	 0
?Deform@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Deform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::RenderPCBlocker, COMDAT
; _this$ = ecx

; 91   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 92   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN1@RenderPCBl

; 93   : 		return;
; 94   : 
; 95   : 	OnRenderPCBlocker();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 20	 jmp	 DWORD PTR [eax+32]
$LN1@RenderPCBl:
  00014	5e		 pop	 esi

; 96   : }

  00015	c3		 ret	 0
?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::RenderPCBlocker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?RenderShadow@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderShadow@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::RenderShadow, COMDAT
; _this$ = ecx

; 83   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 84   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN1@RenderShad

; 85   : 		return;
; 86   : 
; 87   : 	OnRenderShadow();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 1c	 jmp	 DWORD PTR [eax+28]
$LN1@RenderShad:
  00014	5e		 pop	 esi

; 88   : }

  00015	c3		 ret	 0
?RenderShadow@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::RenderShadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::RenderToShadowMap, COMDAT
; _this$ = ecx

; 75   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 76   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN1@RenderToSh

; 77   : 		return;
; 78   : 
; 79   : 	OnRenderToShadowMap();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 18	 jmp	 DWORD PTR [eax+24]
$LN1@RenderToSh:
  00014	5e		 pop	 esi

; 80   : }

  00015	c3		 ret	 0
?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::RenderToShadowMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?BlendRender@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?BlendRender@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::BlendRender, COMDAT
; _this$ = ecx

; 67   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 68   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN1@BlendRende

; 69   : 		return;
; 70   : 
; 71   : 	OnBlendRender();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 14	 jmp	 DWORD PTR [eax+20]
$LN1@BlendRende:
  00014	5e		 pop	 esi

; 72   : }

  00015	c3		 ret	 0
?BlendRender@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::BlendRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Render@CGraphicObjectInstance@@QAE_NXZ
_TEXT	SEGMENT
?Render@CGraphicObjectInstance@@QAE_NXZ PROC		; CGraphicObjectInstance::Render, COMDAT
; _this$ = ecx

; 46   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 47   : 	/*
; 48   : 	if (m_CullingHandle)
; 49   : 	{
; 50   : 		SpherePack * ps = m_CullingHandle->GetParent();
; 51   : 		CScreen s;
; 52   : 		s.SetColorOperation();
; 53   : 		//s.SetDiffuseColor(1,isShow()?1:0,0);
; 54   : 		//s.RenderCircle2d(m_CullingHandle->GetCenter().x,m_CullingHandle->GetCenter().y,m_CullingHandle->GetCenter().z,m_CullingHandle->GetRadius());
; 55   : 		s.SetDiffuseColor(1,isShow()?1:0,ps->HasSpherePackFlag(SPF_PARTIAL)?1:0);
; 56   : 		s.RenderCircle2d(ps->GetCenter().x,ps->GetCenter().y,ps->GetCenter().z,ps->GetRadius());
; 57   : 	}
; 58   : 	//*/
; 59   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	75 02		 jne	 SHORT $LN2@Render
  0000c	5e		 pop	 esi

; 64   : }

  0000d	c3		 ret	 0
$LN2@Render:

; 60   : 		return false;
; 61   : 
; 62   : 	OnRender();

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	8b ce		 mov	 ecx, esi
  00012	ff 50 10	 call	 DWORD PTR [eax+16]

; 63   : 	return true;

  00015	b0 01		 mov	 al, 1
  00017	5e		 pop	 esi

; 64   : }

  00018	c3		 ret	 0
?Render@CGraphicObjectInstance@@QAE_NXZ ENDP		; CGraphicObjectInstance::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Update@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Update@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Update, COMDAT
; _this$ = ecx

; 99   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 100  : 	OnUpdate();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 28	 call	 DWORD PTR [eax+40]

; 101  : 
; 102  : 	UpdateBoundingSphere();

  00008	8b ce		 mov	 ecx, esi
  0000a	5e		 pop	 esi
  0000b	e9 00 00 00 00	 jmp	 ?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::UpdateBoundingSphere
?Update@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Clear@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Clear@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Clear, COMDAT
; _this$ = ecx

; 11   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 12   : 	if (m_CullingHandle)

  00003	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  00009	85 c0		 test	 eax, eax
  0000b	74 16		 je	 SHORT $LN2@Clear

; 13   : 	{
; 14   : 		CCullingManager::Instance().Unregister(m_CullingHandle);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z ; CCullingManager::Unregister

; 15   : 		m_CullingHandle = NULL;

  00019	c7 86 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+360], 0
$LN2@Clear:

; 16   : 	}
; 17   : 
; 18   : 	ClearHeightInstance();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearHeightInstance

; 19   : 
; 20   : 	m_isVisible = TRUE;

  0002a	c6 46 68 01	 mov	 BYTE PTR [esi+104], 1

; 21   : 
; 22   : 	m_v3Position.x = m_v3Position.y = m_v3Position.z = 0.0f;

  0002e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 23   : 	m_v3Scale.x = m_v3Scale.y = m_v3Scale.z = 1.0f;

  00043	c7 46 18 00 00
	80 3f		 mov	 DWORD PTR [esi+24], 1065353216 ; 3f800000H
  0004a	c7 46 14 00 00
	80 3f		 mov	 DWORD PTR [esi+20], 1065353216 ; 3f800000H
  00051	c7 46 10 00 00
	80 3f		 mov	 DWORD PTR [esi+16], 1065353216 ; 3f800000H

; 24   : 	//m_fRotation = 0.0f;
; 25   : 	m_fYaw = m_fPitch = m_fRoll = 0.0f;

  00058	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  0005f	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00066	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0006d	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  00077	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  00081	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  0008b	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  00095	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  0009f	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  000a9	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  000b3	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000bd	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  000c4	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  000cb	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  000d2	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000d9	c7 86 a8 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+168], 1065353216 ; 3f800000H
  000e3	c7 86 94 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+148], 1065353216 ; 3f800000H
  000ed	c7 86 80 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+128], 1065353216 ; 3f800000H
  000f7	c7 46 6c 00 00
	80 3f		 mov	 DWORD PTR [esi+108], 1065353216 ; 3f800000H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 28   : 	m_v3ScaleAcce.x = m_v3ScaleAcce.y = m_v3ScaleAcce.z = 0.0f;

  000fe	c7 86 54 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+596], 0
  00108	c7 86 50 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+592], 0
  00112	c7 86 4c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+588], 0

; 29   : 	m_bAttachedAcceRace = 0;

  0011c	c6 86 48 02 00
	00 00		 mov	 BYTE PTR [esi+584], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00123	c7 86 90 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+656], 0
  0012d	c7 86 8c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+652], 0
  00137	c7 86 88 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+648], 0
  00141	c7 86 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+644], 0
  0014b	c7 86 7c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+636], 0
  00155	c7 86 78 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+632], 0
  0015f	c7 86 74 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+628], 0
  00169	c7 86 70 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+624], 0
  00173	c7 86 68 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+616], 0
  0017d	c7 86 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+612], 0
  00187	c7 86 60 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+608], 0
  00191	c7 86 5c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+604], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0019b	c7 86 94 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+660], 1065353216 ; 3f800000H
  001a5	c7 86 80 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+640], 1065353216 ; 3f800000H
  001af	c7 86 6c 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+620], 1065353216 ; 3f800000H
  001b9	c7 86 58 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+600], 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  001c3	c7 86 d0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+720], 0
  001cd	c7 86 cc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+716], 0
  001d7	c7 86 c8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+712], 0
  001e1	c7 86 c4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+708], 0
  001eb	c7 86 bc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+700], 0
  001f5	c7 86 b8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+696], 0
  001ff	c7 86 b4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+692], 0
  00209	c7 86 b0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+688], 0
  00213	c7 86 a8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+680], 0
  0021d	c7 86 a4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+676], 0
  00227	c7 86 a0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+672], 0
  00231	c7 86 9c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+668], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0023b	c7 86 d4 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+724], 1065353216 ; 3f800000H
  00245	c7 86 c0 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+704], 1065353216 ; 3f800000H
  0024f	c7 86 ac 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+684], 1065353216 ; 3f800000H
  00259	c7 86 98 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+664], 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00263	c7 86 10 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+784], 0
  0026d	c7 86 0c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+780], 0
  00277	c7 86 08 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+776], 0
  00281	c7 86 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+772], 0
  0028b	c7 86 fc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+764], 0
  00295	c7 86 f8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+760], 0
  0029f	c7 86 f4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+756], 0
  002a9	c7 86 f0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+752], 0
  002b3	c7 86 e8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+744], 0
  002bd	c7 86 e4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+740], 0
  002c7	c7 86 e0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+736], 0
  002d1	c7 86 dc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+732], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  002db	c7 86 14 03 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+788], 1065353216 ; 3f800000H
  002e5	c7 86 00 03 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+768], 1065353216 ; 3f800000H
  002ef	c7 86 ec 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+748], 1065353216 ; 3f800000H
  002f9	c7 86 d8 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+728], 1065353216 ; 3f800000H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 34   : 	m_v3ScalePosition.x = m_v3ScalePosition.y = m_v3ScalePosition.z = 0.0f;

  00303	c7 86 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+372], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0030d	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0
  00317	0f 57 c0	 xorps	 xmm0, xmm0
  0031a	c7 86 ac 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+428], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 42   : 	OnClear();

  00324	8b ce		 mov	 ecx, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00326	c7 86 a8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+424], 0
  00330	c7 86 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+420], 0
  0033a	c7 86 9c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+412], 0
  00344	c7 86 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+408], 0
  0034e	c7 86 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+404], 0
  00358	c7 86 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+400], 0
  00362	c7 86 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+392], 0
  0036c	c7 86 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+388], 0
  00376	c7 86 80 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+384], 0
  00380	c7 86 7c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+380], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0038a	c7 86 b4 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+436], 1065353216 ; 3f800000H
  00394	c7 86 a0 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+416], 1065353216 ; 3f800000H
  0039e	c7 86 8c 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+396], 1065353216 ; 3f800000H
  003a8	c7 86 78 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+376], 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  003b2	c7 86 f0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+496], 0
  003bc	c7 86 ec 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+492], 0
  003c6	c7 86 e8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+488], 0
  003d0	c7 86 e4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+484], 0
  003da	c7 86 dc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+476], 0
  003e4	c7 86 d8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+472], 0
  003ee	c7 86 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+468], 0
  003f8	c7 86 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+464], 0
  00402	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], 0
  0040c	c7 86 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+452], 0
  00416	c7 86 c0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+448], 0
  00420	c7 86 bc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+444], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0042a	c7 86 f4 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+500], 1065353216 ; 3f800000H
  00434	c7 86 e0 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+480], 1065353216 ; 3f800000H
  0043e	c7 86 cc 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+460], 1065353216 ; 3f800000H
  00448	c7 86 b8 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+440], 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00452	c7 86 30 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+560], 0
  0045c	c7 86 2c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+556], 0
  00466	c7 86 28 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+552], 0
  00470	c7 86 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+548], 0
  0047a	c7 86 1c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+540], 0
  00484	c7 86 18 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+536], 0
  0048e	c7 86 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+532], 0
  00498	c7 86 10 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+528], 0
  004a2	c7 86 08 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+520], 0
  004ac	c7 86 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+516], 0
  004b6	c7 86 00 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+512], 0
  004c0	c7 86 fc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+508], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  004ca	c7 86 34 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+564], 1065353216 ; 3f800000H
  004d4	c7 86 20 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+544], 1065353216 ; 3f800000H
  004de	c7 86 0c 02 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+524], 1065353216 ; 3f800000H
  004e8	c7 86 f8 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+504], 1065353216 ; 3f800000H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 34   : 	m_v3ScalePosition.x = m_v3ScalePosition.y = m_v3ScalePosition.z = 0.0f;

  004f2	c7 86 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+368], 0
  004fc	c7 86 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+364], 0

; 35   : 	D3DXMatrixIdentity(&m_ScaleMatrix);
; 36   : 	D3DXMatrixIdentity(&m_PositionMatrix);
; 37   : 	D3DXMatrixIdentity(&m_TransformMatrix);
; 38   : #endif
; 39   : 
; 40   : 	ZeroMemory(m_abyPortalID, sizeof(m_abyPortalID));

  00506	66 0f d6 86 60
	01 00 00	 movq	 QWORD PTR [esi+352], xmm0

; 42   : 	OnClear();

  0050e	8b 06		 mov	 eax, DWORD PTR [esi]
  00510	5e		 pop	 esi
  00511	ff 60 24	 jmp	 DWORD PTR [eax+36]
?Clear@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z PROC ; CGraphicObjectInstance::SetRotationMatrix, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 184  : 	m_mRotation = m;

  00003	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00006	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00009	0f 11 41 28	 movups	 XMMWORD PTR [ecx+40], xmm0
  0000d	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00011	0f 11 41 38	 movups	 XMMWORD PTR [ecx+56], xmm0
  00015	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00019	0f 11 41 48	 movups	 XMMWORD PTR [ecx+72], xmm0
  0001d	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  00021	0f 11 41 58	 movups	 XMMWORD PTR [ecx+88], xmm0

; 185  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z ENDP ; CGraphicObjectInstance::SetRotationMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_q$ = 8							; size = 4
?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z PROC ; CGraphicObjectInstance::SetRotationQuaternion, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 179  : 	D3DXMatrixRotationQuaternion(&m_mRotation, &q);

  00003	ff 75 08	 push	 DWORD PTR _q$[ebp]
  00006	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 180  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z ENDP ; CGraphicObjectInstance::SetRotationQuaternion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_fYaw$ = 8						; size = 4
_fPitch$ = 12						; size = 4
_fRoll$ = 16						; size = 4
?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z PROC	; CGraphicObjectInstance::SetRotation, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  : 	//m_fRotation = fRotation;
; 199  : 	m_fYaw = fYaw;
; 200  : 	m_fPitch = fPitch;
; 201  : 	m_fRoll = fRoll;

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fRoll$[ebp]

; 202  : 
; 203  : 	D3DXMatrixRotationYawPitchRoll(&m_mRotation, D3DXToRadian(fYaw), D3DXToRadian(fPitch), D3DXToRadian(fRoll));

  00008	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  0000b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3c8efa35
  00013	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00016	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fPitch$[ebp]
  0001b	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fYaw$[ebp]
  00020	f3 0f 11 41 24	 movss	 DWORD PTR [ecx+36], xmm0
  00025	f3 0f 11 51 20	 movss	 DWORD PTR [ecx+32], xmm2
  0002a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002e	f3 0f 11 59 1c	 movss	 DWORD PTR [ecx+28], xmm3
  00033	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00037	f3 0f 59 d9	 mulss	 xmm3, xmm1
  0003b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00041	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  00047	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _D3DXMatrixRotationYawPitchRoll@16

; 204  : }

  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z ENDP	; CGraphicObjectInstance::SetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetRotation@CGraphicObjectInstance@@QAEXM@Z
_TEXT	SEGMENT
_fRotation$ = 8						; size = 4
?SetRotation@CGraphicObjectInstance@@QAEXM@Z PROC	; CGraphicObjectInstance::SetRotation, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  : 	m_fYaw = 0;
; 190  : 	m_fPitch = 0;
; 191  : 	m_fRoll = fRotation;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRotation$[ebp]

; 192  : 
; 193  : 	D3DXMatrixRotationZ(&m_mRotation, D3DXToRadian(fRotation));

  00008	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  0000b	f3 0f 11 41 24	 movss	 DWORD PTR [ecx+36], xmm0
  00010	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00018	51		 push	 ecx
  00019	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00020	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00027	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8

; 194  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?SetRotation@CGraphicObjectInstance@@QAEXM@Z ENDP	; CGraphicObjectInstance::SetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetScale@CGraphicObjectInstance@@QAEXMMM_N@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_bScaleNow$ = 20					; size = 1
?SetScale@CGraphicObjectInstance@@QAEXMMM_N@Z PROC	; CGraphicObjectInstance::SetScale, COMDAT
; _this$ = ecx

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  : 	m_v3Scale.x = x;
; 232  : 	m_v3Scale.y = y;
; 233  : 	m_v3Scale.z = z;
; 234  : 
; 235  : #ifdef ENABLE_OBJ_SCALLING
; 236  : 	if (bScaleNow)

  00003	80 7d 14 00	 cmp	 BYTE PTR _bScaleNow$[ebp], 0
  00007	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0000c	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y$[ebp]
  00011	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _z$[ebp]
  00016	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0
  0001b	f3 0f 11 49 14	 movss	 DWORD PTR [ecx+20], xmm1
  00020	f3 0f 11 51 18	 movss	 DWORD PTR [ecx+24], xmm2
  00025	74 20		 je	 SHORT $LN2@SetScale

; 237  : 		D3DXMatrixScaling(&m_ScaleMatrix, m_v3Scale.x, m_v3Scale.y, m_v3Scale.z);

  00027	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0002a	8d 81 78 01 00
	00		 lea	 eax, DWORD PTR [ecx+376]
  00030	f3 0f 11 54 24
	08		 movss	 DWORD PTR [esp+8], xmm2
  00036	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _D3DXMatrixScaling@16
$LN2@SetScale:

; 238  : #endif
; 239  : }

  00047	5d		 pop	 ebp
  00048	c2 10 00	 ret	 16			; 00000010H
?SetScale@CGraphicObjectInstance@@QAEXMMM_N@Z ENDP	; CGraphicObjectInstance::SetScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetScalePosition@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetScalePosition@CGraphicObjectInstance@@QAEXMMM@Z PROC ; CGraphicObjectInstance::SetScalePosition, COMDAT
; _this$ = ecx

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 221  : 	m_v3ScalePosition.x = x;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00008	f3 0f 11 81 6c
	01 00 00	 movss	 DWORD PTR [ecx+364], xmm0

; 222  : 	m_v3ScalePosition.y = y;

  00010	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00015	f3 0f 11 81 70
	01 00 00	 movss	 DWORD PTR [ecx+368], xmm0

; 223  : 	m_v3ScalePosition.z = z;

  0001d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00022	f3 0f 11 81 74
	01 00 00	 movss	 DWORD PTR [ecx+372], xmm0

; 224  : }

  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?SetScalePosition@CGraphicObjectInstance@@QAEXMMM@Z ENDP ; CGraphicObjectInstance::SetScalePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_newposition$ = 8					; size = 4
?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z PROC ; CGraphicObjectInstance::SetPosition, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 215  : 	m_v3Position = newposition;

  00003	8b 45 08	 mov	 eax, DWORD PTR _newposition$[ebp]
  00006	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000a	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 216  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CGraphicObjectInstance::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z PROC	; CGraphicObjectInstance::SetPosition, COMDAT
; _this$ = ecx

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 	m_v3Position.x = x;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00008	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 209  : 	m_v3Position.y = y;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00012	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 210  : 	m_v3Position.z = z;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  0001c	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 211  : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ENDP	; CGraphicObjectInstance::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetRoll@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetRoll@CGraphicObjectInstance@@QAEMXZ PROC		; CGraphicObjectInstance::GetRoll, COMDAT
; _this$ = ecx

; 169  : 	return m_fRoll;

  00000	d9 41 24	 fld	 DWORD PTR [ecx+36]

; 170  : }

  00003	c3		 ret	 0
?GetRoll@CGraphicObjectInstance@@QAEMXZ ENDP		; CGraphicObjectInstance::GetRoll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetPitch@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetPitch@CGraphicObjectInstance@@QAEMXZ PROC		; CGraphicObjectInstance::GetPitch, COMDAT
; _this$ = ecx

; 164  : 	return m_fPitch;

  00000	d9 41 20	 fld	 DWORD PTR [ecx+32]

; 165  : }

  00003	c3		 ret	 0
?GetPitch@CGraphicObjectInstance@@QAEMXZ ENDP		; CGraphicObjectInstance::GetPitch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetYaw@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetYaw@CGraphicObjectInstance@@QAEMXZ PROC		; CGraphicObjectInstance::GetYaw, COMDAT
; _this$ = ecx

; 159  : 	return m_fYaw;

  00000	d9 41 1c	 fld	 DWORD PTR [ecx+28]

; 160  : }

  00003	c3		 ret	 0
?GetYaw@CGraphicObjectInstance@@QAEMXZ ENDP		; CGraphicObjectInstance::GetYaw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetRotation@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetRotation@CGraphicObjectInstance@@QAEMXZ PROC	; CGraphicObjectInstance::GetRotation, COMDAT
; _this$ = ecx

; 154  : 	return GetRoll();

  00000	e9 00 00 00 00	 jmp	 ?GetRoll@CGraphicObjectInstance@@QAEMXZ ; CGraphicObjectInstance::GetRoll
?GetRotation@CGraphicObjectInstance@@QAEMXZ ENDP	; CGraphicObjectInstance::GetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ PROC ; CGraphicObjectInstance::GetScale, COMDAT
; _this$ = ecx

; 149  : 	return m_v3Scale;

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 150  : }

  00003	c3		 ret	 0
?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ENDP ; CGraphicObjectInstance::GetScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ PROC ; CGraphicObjectInstance::GetPosition, COMDAT
; _this$ = ecx

; 144  : 	return m_v3Position;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 145  : }

  00003	c3		 ret	 0
?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ENDP ; CGraphicObjectInstance::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ??1CGraphicObjectInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicObjectInstance@@UAE@XZ PROC			; CGraphicObjectInstance::~CGraphicObjectInstance, COMDAT
; _this$ = ecx

; 376  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicObjectInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicObjectInstance@@6B@

; 377  : 	Initialize();

  0002b	e8 00 00 00 00	 call	 ?Initialize@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Initialize
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00030	8b 86 38 02 00
	00		 mov	 eax, DWORD PTR [esi+568]
  00036	85 c0		 test	 eax, eax
  00038	74 4d		 je	 SHORT $LN6@CGraphicOb

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003a	8b 8e 40 02 00
	00		 mov	 ecx, DWORD PTR [esi+576]
  00040	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00042	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00045	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004b	72 12		 jb	 SHORT $LN22@CGraphicOb

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00050	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00053	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00055	83 c0 fc	 add	 eax, -4			; fffffffcH
  00058	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005b	77 41		 ja	 SHORT $LN19@CGraphicOb

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0005d	8b c2		 mov	 eax, edx
$LN22@CGraphicOb:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0005f	51		 push	 ecx
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00066	c7 86 38 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+568], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00073	c7 86 3c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+572], 0

; 1756 :             _Myend   = nullptr;

  0007d	c7 86 40 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+576], 0
$LN6@CGraphicOb:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 378  : }

  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ??1CGraphicCollisionObject@@UAE@XZ ; CGraphicCollisionObject::~CGraphicCollisionObject
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN19@CGraphicOb:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN29@CGraphicOb:
  000a3	cc		 int	 3
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicObjectInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicObjectInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicObjectInstance@@UAE@XZ ENDP			; CGraphicObjectInstance::~CGraphicObjectInstance
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ??0CGraphicObjectInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicObjectInstance@@QAE@XZ PROC			; CGraphicObjectInstance::CGraphicObjectInstance, COMDAT
; _this$ = ecx

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicObjectInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CGraphicCollisionObject@@QAE@XZ ; CGraphicCollisionObject::CGraphicCollisionObject
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicObjectInstance@@6B@
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0003b	c7 86 38 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+568], 0
  00045	c7 86 3c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+572], 0
  0004f	c7 86 40 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+576], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpObjectInstance.cpp

; 333  : 	Initialize();

  00059	8b ce		 mov	 ecx, esi
  0005b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005f	c7 86 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+360], 0
  00069	e8 00 00 00 00	 call	 ?Initialize@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Initialize

; 334  : }

  0006e	8b c6		 mov	 eax, esi
  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5e		 pop	 esi
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicCollisionObject@@UAE@XZ ; CGraphicCollisionObject::~CGraphicCollisionObject
__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 38 02 00
	00		 add	 ecx, 568		; 00000238H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$??0CGraphicObjectInstance@@QAE@XZ:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicObjectInstance@@QAE@XZ
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicObjectInstance@@QAE@XZ ENDP			; CGraphicObjectInstance::CGraphicObjectInstance
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
;	COMDAT ?Unlink@SpherePack@@QAEXXZ
_TEXT	SEGMENT
?Unlink@SpherePack@@QAEXXZ PROC				; SpherePack::Unlink, COMDAT
; _this$ = ecx

; 147  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out

  00003	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN2@Unlink

; 149  : 		{
; 150  : 			*mFifo1 = 0;

  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 151  : 			mFifo1 = 0;

  00010	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN2@Unlink:

; 152  : 		}
; 153  : 
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out

  00017	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0001a	85 c0		 test	 eax, eax
  0001c	74 0d		 je	 SHORT $LN3@Unlink

; 155  : 		{
; 156  : 			*mFifo2 = 0;

  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 157  : 			mFifo2 = 0;

  00024	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
$LN3@Unlink:

; 158  : 		}
; 159  : 
; 160  : 		if ( mParent ) mParent->LostChild(this);

  0002b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0002e	85 c9		 test	 ecx, ecx
  00030	74 06		 je	 SHORT $LN6@Unlink
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?LostChild@SpherePack@@QAEXPAV1@@Z ; SpherePack::LostChild
$LN6@Unlink:

; 161  : 
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 
; 164  : 		mParent = 0; // got no father anymore
; 165  : 	}

  00038	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0003f	5e		 pop	 esi
  00040	c3		 ret	 0
?Unlink@SpherePack@@QAEXXZ ENDP				; SpherePack::Unlink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR4@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR4@@QAE@XZ PROC				; D3DXVECTOR4::D3DXVECTOR4, COMDAT
; _this$ = ecx

; 133  :     D3DXVECTOR4() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR4@@QAE@XZ ENDP				; D3DXVECTOR4::D3DXVECTOR4
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
