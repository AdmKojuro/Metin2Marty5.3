; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30151.0 

	TITLE	C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Distribute\GrpTextInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_R4?$CDynamicPool@VCGraphicTextInstance@@@@6B@ ; CDynamicPool<CGraphicTextInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCGraphicTextInstance@@@@@8 ; CDynamicPool<CGraphicTextInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCGraphicTextInstance@@@@8	; CDynamicPool<CGraphicTextInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCGraphicTextInstance@@@@8	; CDynamicPool<CGraphicTextInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCGraphicTextInstance@@@@8 ; CDynamicPool<CGraphicTextInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPool@VCGraphicTextInstance@@@@6B@	; CDynamicPool<CGraphicTextInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z ; CDynamicPool<CGraphicTextInstance>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CGraphicTextInstance>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
CONST	SEGMENT
?c_FillRectIndices@@3QBGB DW 00H			; c_FillRectIndices
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCGraphicTextInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCGraphicTextInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCGraphicTextInstance@@@@6B@ ; CDynamicPool<CGraphicTextInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCGraphicTextInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCGraphicTextInstance@@@@@8 ; CDynamicPool<CGraphicTextInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCGraphicTextInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCGraphicTextInstance@@@@8 ; CDynamicPool<CGraphicTextInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCGraphicTextInstance@@@@8 DD 00H	; CDynamicPool<CGraphicTextInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCGraphicTextInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCGraphicTextInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CGraphicTextInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCGraphicTextInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCGraphicTextInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCGraphicTextInstance@@@@6B@ DD 00H	; CDynamicPool<CGraphicTextInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCGraphicTextInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCGraphicTextInstance@@@@8
rdata$r	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	?Hyperlink_UpdateMousePos@CGraphicTextInstance@@SAXHH@Z ; CGraphicTextInstance::Hyperlink_UpdateMousePos
PUBLIC	?Hyperlink_GetText@CGraphicTextInstance@@SAHPADH@Z ; CGraphicTextInstance::Hyperlink_GetText
PUBLIC	?UpdateMousePos@CGraphicTextInstance@@SAXHH@Z	; CGraphicTextInstance::UpdateMousePos
PUBLIC	?GetTextFromMousePos@CGraphicTextInstance@@SAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CGraphicTextInstance::GetTextFromMousePos
PUBLIC	??0CGraphicTextInstance@@QAE@XZ			; CGraphicTextInstance::CGraphicTextInstance
PUBLIC	??1CGraphicTextInstance@@UAE@XZ			; CGraphicTextInstance::~CGraphicTextInstance
PUBLIC	?Destroy@CGraphicTextInstance@@QAEXXZ		; CGraphicTextInstance::Destroy
PUBLIC	?Update@CGraphicTextInstance@@QAEXXZ		; CGraphicTextInstance::Update
PUBLIC	?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z ; CGraphicTextInstance::Render
PUBLIC	?ShowCursor@CGraphicTextInstance@@QAEXXZ	; CGraphicTextInstance::ShowCursor
PUBLIC	?HideCursor@CGraphicTextInstance@@QAEXXZ	; CGraphicTextInstance::HideCursor
PUBLIC	?ShowOutLine@CGraphicTextInstance@@QAEXXZ	; CGraphicTextInstance::ShowOutLine
PUBLIC	?HideOutLine@CGraphicTextInstance@@QAEXXZ	; CGraphicTextInstance::HideOutLine
PUBLIC	?SetColor@CGraphicTextInstance@@QAEXK@Z		; CGraphicTextInstance::SetColor
PUBLIC	?SetColor@CGraphicTextInstance@@QAEXMMMM@Z	; CGraphicTextInstance::SetColor
PUBLIC	?SetOutLineColor@CGraphicTextInstance@@QAEXK@Z	; CGraphicTextInstance::SetOutLineColor
PUBLIC	?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z ; CGraphicTextInstance::SetOutLineColor
PUBLIC	?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z ; CGraphicTextInstance::SetHorizonalAlign
PUBLIC	?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z	; CGraphicTextInstance::SetVerticalAlign
PUBLIC	?SetMax@CGraphicTextInstance@@QAEXH@Z		; CGraphicTextInstance::SetMax
PUBLIC	?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z ; CGraphicTextInstance::SetTextPointer
PUBLIC	?SetValueString@CGraphicTextInstance@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CGraphicTextInstance::SetValueString
PUBLIC	?SetValue@CGraphicTextInstance@@QAEXPBDI@Z	; CGraphicTextInstance::SetValue
PUBLIC	?SetPosition@CGraphicTextInstance@@QAEXMMM@Z	; CGraphicTextInstance::SetPosition
PUBLIC	?SetSecret@CGraphicTextInstance@@QAEX_N@Z	; CGraphicTextInstance::SetSecret
PUBLIC	?SetOutline@CGraphicTextInstance@@QAEX_N@Z	; CGraphicTextInstance::SetOutline
PUBLIC	?SetFeather@CGraphicTextInstance@@QAEX_N@Z	; CGraphicTextInstance::SetFeather
PUBLIC	?SetMultiLine@CGraphicTextInstance@@QAEX_N@Z	; CGraphicTextInstance::SetMultiLine
PUBLIC	?SetLimitWidth@CGraphicTextInstance@@QAEXM@Z	; CGraphicTextInstance::SetLimitWidth
PUBLIC	?GetMultiTextSize@CGraphicTextInstance@@QAEXPAH0@Z ; CGraphicTextInstance::GetMultiTextSize
PUBLIC	?DisableEnterToken@CGraphicTextInstance@@QAEXXZ	; CGraphicTextInstance::DisableEnterToken
PUBLIC	?SetLineHeight@CGraphicTextInstance@@QAEXH@Z	; CGraphicTextInstance::SetLineHeight
PUBLIC	?GetTextWidth@CGraphicTextInstance@@QAEMH@Z	; CGraphicTextInstance::GetTextWidth
PUBLIC	?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z	; CGraphicTextInstance::GetTextSize
PUBLIC	?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CGraphicTextInstance::GetValueStringReference
PUBLIC	?GetTextLineCount@CGraphicTextInstance@@QAEGXZ	; CGraphicTextInstance::GetTextLineCount
PUBLIC	?GetLineHeight@CGraphicTextInstance@@QAEGXZ	; CGraphicTextInstance::GetLineHeight
PUBLIC	?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z ; CGraphicTextInstance::PixelPositionToCharacterPosition
PUBLIC	?GetHorizontalAlign@CGraphicTextInstance@@QAEHXZ ; CGraphicTextInstance::GetHorizontalAlign
PUBLIC	?__Initialize@CGraphicTextInstance@@IAEXXZ	; CGraphicTextInstance::__Initialize
PUBLIC	?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter
PUBLIC	?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z	; CGraphicTextInstance::__GetTextPos
PUBLIC	??1SHyperlink@CGraphicTextInstance@@QAE@XZ	; CGraphicTextInstance::SHyperlink::~SHyperlink
PUBLIC	??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AAEXQAIII@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array
PUBLIC	?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
PUBLIC	??1?$CRef@VCGraphicText@@@@QAE@XZ		; CRef<CGraphicText>::~CRef<CGraphicText>
PUBLIC	??1?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAE@XZ ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::~vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
PUBLIC	?_Xlength@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@CAXXZ ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Xlength
PUBLIC	??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
PUBLIC	?deallocate@?$allocator@USHyperlink@CGraphicTextInstance@@@std@@QAEXQAUSHyperlink@CGraphicTextInstance@@I@Z ; std::allocator<CGraphicTextInstance::SHyperlink>::deallocate
PUBLIC	??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::~vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >
PUBLIC	?clear@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEXXZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::clear
PUBLIC	?_Destroy@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@AAEXPAUSHyperlink@CGraphicTextInstance@@0@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Destroy
PUBLIC	?_Xlength@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Xlength
PUBLIC	??1?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::~vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >
PUBLIC	?_Xlength@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Xlength
PUBLIC	?CreateSystem@CGraphicTextInstance@@SAXI@Z	; CGraphicTextInstance::CreateSystem
PUBLIC	?DestroySystem@CGraphicTextInstance@@SAXXZ	; CGraphicTextInstance::DestroySystem
PUBLIC	?New@CGraphicTextInstance@@SAPAV1@XZ		; CGraphicTextInstance::New
PUBLIC	?Delete@CGraphicTextInstance@@SAXPAV1@@Z	; CGraphicTextInstance::Delete
PUBLIC	??_GCGraphicTextInstance@@UAEPAXI@Z		; CGraphicTextInstance::`scalar deleting destructor'
PUBLIC	?FindToken@@YAPBDPBD0@Z				; FindToken
PUBLIC	?ReadToken@@YAHPBD@Z				; ReadToken
PUBLIC	??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ ; CDynamicPool<CGraphicTextInstance>::~CDynamicPool<CGraphicTextInstance>
PUBLIC	?Delete@?$CDynamicPool@VCGraphicTextInstance@@@@KAXPAVCGraphicTextInstance@@@Z ; CDynamicPool<CGraphicTextInstance>::Delete
PUBLIC	?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXQAPAVCGraphicTextInstance@@II@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Xlength
PUBLIC	?isNumberic@@YA_ND@Z				; isNumberic
PUBLIC	?IsValidToken@@YA_NPBD@Z			; IsValidToken
PUBLIC	??$_Emplace_reallocate@ABUSEmoji@CGraphicTextInstance@@@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAEPAUSEmoji@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Emplace_reallocate<CGraphicTextInstance::SEmoji const &>
PUBLIC	??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>
PUBLIC	??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>
PUBLIC	??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
PUBLIC	??$_Emplace_reallocate@ABQAUSCharacterInfomation@CGraphicFontTexture@@@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAEPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU23@ABQAU23@@Z ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Emplace_reallocate<CGraphicFontTexture::SCharacterInfomation * const &>
PUBLIC	??$_Emplace_reallocate@I@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAI$$QAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Emplace_reallocate<unsigned int>
PUBLIC	??$_Emplace_reallocate@ABI@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAIABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Emplace_reallocate<unsigned int const &>
PUBLIC	??$_Reallocate_grow_by@V<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_c3135ae829aeedc0a8af1bd1e887c66a>,unsigned int,wchar_t>
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Emplace_reallocate<CGraphicTextInstance * const &>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicTextInstance * *,CGraphicTextInstance * *>
PUBLIC	??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance::SHyperlink *,std::allocator<CGraphicTextInstance::SHyperlink> >
PUBLIC	??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z	; std::_Copy_memmove<unsigned long *,unsigned long *>
PUBLIC	??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z ; std::_Copy_memmove<CGraphicFontTexture::SCharacterInfomation * *,CGraphicFontTexture::SCharacterInfomation * *>
PUBLIC	??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z	; std::_Copy_memmove<unsigned int *,unsigned int *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A ; CGraphicTextInstance::ms_kPool
PUBLIC	??_7CGraphicTextInstance@@6B@			; CGraphicTextInstance::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0DG@FOMBDJDA@CGraphicTextInstance?3?3Update?5?9?5@ ; `string'
PUBLIC	??_C@_0M@NHBNKCLI@icon?1?$CFs?4tga@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGraphicTextInstance@@6B@			; CGraphicTextInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicTextInstance@@@8		; CGraphicTextInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicTextInstance@@8			; CGraphicTextInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicTextInstance@@8			; CGraphicTextInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicTextInstance@@8		; CGraphicTextInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@437f0000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?IsEmpty@CResource@@QBE_NXZ:PROC		; CResource::IsEmpty
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?SelectTexture@CGraphicFontTexture@@QAEXK@Z:PROC ; CGraphicFontTexture::SelectTexture
EXTRN	?UpdateTexture@CGraphicFontTexture@@QAE_NXZ:PROC ; CGraphicFontTexture::UpdateTexture
EXTRN	?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z:PROC ; CGraphicFontTexture::GetCharacterInfomation
EXTRN	?GetFontTexturePointer@CGraphicText@@QAEPAVCGraphicFontTexture@@XZ:PROC ; CGraphicText::GetFontTexturePointer
EXTRN	?GetWidth@CGraphicImage@@QBEHXZ:PROC		; CGraphicImage::GetWidth
EXTRN	?Render@CGraphicImageInstance@@QAEXXZ:PROC	; CGraphicImageInstance::Render
EXTRN	?SetPosition@CGraphicImageInstance@@QAEXMM@Z:PROC ; CGraphicImageInstance::SetPosition
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?GetHeight@CGraphicImageInstance@@QAEHXZ:PROC	; CGraphicImageInstance::GetHeight
EXTRN	?New@CGraphicImageInstance@@SAPAV1@XZ:PROC	; CGraphicImageInstance::New
EXTRN	?Delete@CGraphicImageInstance@@SAXPAV1@@Z:PROC	; CGraphicImageInstance::Delete
EXTRN	??_ECGraphicTextInstance@@UAEPAXI@Z:PROC	; CGraphicTextInstance::`vector deleting destructor'
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z:PROC ; CStateManager::DrawIndexedPrimitiveUP
EXTRN	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::GetRenderState
EXTRN	?GetCurPos@CIME@@SAHXZ:PROC			; CIME::GetCurPos
EXTRN	?GetCompLen@CIME@@SAHXZ:PROC			; CIME::GetCompLen
EXTRN	?GetULBegin@CIME@@SAHXZ:PROC			; CIME::GetULBegin
EXTRN	?GetULEnd@CIME@@SAHXZ:PROC			; CIME::GetULEnd
EXTRN	?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:PROC ; GetTextTag
EXTRN	?Ymir_WideCharToMultiByte@@YAHIKPB_WHPADHPBDPAH@Z:PROC ; Ymir_WideCharToMultiByte
EXTRN	?Ymir_MultiByteToWideChar@@YAHIKPBDHPA_WH@Z:PROC ; Ymir_MultiByteToWideChar
EXTRN	?Arabic_ConvSymbol@@YA_W_W@Z:PROC		; Arabic_ConvSymbol
EXTRN	?Arabic_IsInSymbol@@YA_N_W@Z:PROC		; Arabic_IsInSymbol
EXTRN	?Arabic_IsInPresentation@@YA_N_W@Z:PROC		; Arabic_IsInPresentation
EXTRN	?Arabic_HasPresentation@@YA_NPA_WH@Z:PROC	; Arabic_HasPresentation
EXTRN	?Arabic_MakeShape@@YAIPA_WI0I@Z:PROC		; Arabic_MakeShape
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?IsFileExist@CResourceManager@@QAE_NPBD@Z:PROC	; CResourceManager::IsFileExist
EXTRN	?GetDefaultCodePage@@YAKXZ:PROC			; GetDefaultCodePage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alloca_probe_16:PROC
EXTRN	__ftoui3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?gs_mx@@3HA DD	01H DUP (?)				; gs_mx
?gs_my@@3HA DD	01H DUP (?)				; gs_my
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CGraphicTextInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CGraphicTextInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicTextInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicTextInstance@@8 DD FLAT:??_R0?AVCGraphicTextInstance@@@8 ; CGraphicTextInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicTextInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicTextInstance@@8
rdata$r	SEGMENT
??_R2CGraphicTextInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicTextInstance@@8 ; CGraphicTextInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicTextInstance@@8
rdata$r	SEGMENT
??_R3CGraphicTextInstance@@8 DD 00H			; CGraphicTextInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicTextInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicTextInstance@@@8
data$rs	SEGMENT
??_R0?AVCGraphicTextInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicTextInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicTextInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicTextInstance@@6B@
rdata$r	SEGMENT
??_R4CGraphicTextInstance@@6B@ DD 00H			; CGraphicTextInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicTextInstance@@@8
	DD	FLAT:??_R3CGraphicTextInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NHBNKCLI@icon?1?$CFs?4tga@
CONST	SEGMENT
??_C@_0M@NHBNKCLI@icon?1?$CFs?4tga@ DB 'icon/%s.tga', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FOMBDJDA@CGraphicTextInstance?3?3Update?5?9?5@
CONST	SEGMENT
??_C@_0DG@FOMBDJDA@CGraphicTextInstance?3?3Update?5?9?5@ DB 'CGraphicText'
	DB	'Instance::Update - Font has not been set', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicTextInstance@@6B@
CONST	SEGMENT
??_7CGraphicTextInstance@@6B@ DD FLAT:??_R4CGraphicTextInstance@@6B@ ; CGraphicTextInstance::`vftable'
	DD	FLAT:??_ECGraphicTextInstance@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCGraphicTextInstance@@@@6B@ ; CGraphicTextInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A DB 014H DUP (?)
	DD	07H					; gs_hyperlinkText
?gs_text@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 014H DUP (?)
	DD	0fH					; gs_text
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCGraphicTextInstance@@@@QAEPAVCGraphicTextInstance@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCGraphicTextInstance@@@@QAEPAVCGraphicTextInstance@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCGraphicTextInstance@@@@QAEPAVCGraphicTextInstance@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCGraphicTextInstance@@@@QAEPAVCGraphicTextInstance@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CGraphicTextInstance@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CGraphicTextInstance@@SAPAV1@XZ$0
__ehfuncinfo$?New@CGraphicTextInstance@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CGraphicTextInstance@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CRef@VCGraphicText@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Update@CGraphicTextInstance@@QAEXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Update@CGraphicTextInstance@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Update@CGraphicTextInstance@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CGraphicTextInstance@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CGraphicTextInstance@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CGraphicTextInstance@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CGraphicTextInstance@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0CGraphicTextInstance@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CGraphicTextInstance@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$6
xdata$x	ENDS
CRT$XCU	SEGMENT
?gs_hyperlinkText$initializer$@@3P6AXXZA DD FLAT:??__Egs_hyperlinkText@@YAXXZ ; gs_hyperlinkText$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?gs_text$initializer$@@3P6AXXZA DD FLAT:??__Egs_text@@YAXXZ ; gs_text$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z PROC		; std::_Copy_memmove<unsigned int *,unsigned int *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z ENDP		; std::_Copy_memmove<unsigned int *,unsigned int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CGraphicFontTexture::SCharacterInfomation * *,CGraphicFontTexture::SCharacterInfomation * *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CGraphicFontTexture::SCharacterInfomation * *,CGraphicFontTexture::SCharacterInfomation * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z PROC		; std::_Copy_memmove<unsigned long *,unsigned long *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ENDP		; std::_Copy_memmove<unsigned long *,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
tv640 = 16						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z PROC ; std::_Uninitialized_move<CGraphicTextInstance::SHyperlink *,std::allocator<CGraphicTextInstance::SHyperlink> >, COMDAT

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	57		 push	 edi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b c3		 cmp	 eax, ebx
  00010	74 6d		 je	 SHORT $LN63@Uninitiali

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00012	8b d7		 mov	 edx, edi
  00014	8d 48 18	 lea	 ecx, DWORD PTR [eax+24]
  00017	2b d0		 sub	 edx, eax
  00019	56		 push	 esi
  0001a	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0001d	89 55 10	 mov	 DWORD PTR tv640[ebp], edx
$LL4@Uninitiali:
  00020	0f b7 41 e8	 movzx	 eax, WORD PTR [ecx-24]

; 1621 :         ++_Last;

  00024	8d 49 1c	 lea	 ecx, DWORD PTR [ecx+28]
  00027	66 89 07	 mov	 WORD PTR [edi], ax
  0002a	8d 76 1c	 lea	 esi, DWORD PTR [esi+28]
  0002d	0f b7 41 ce	 movzx	 eax, WORD PTR [ecx-50]
  00031	83 c7 1c	 add	 edi, 28			; 0000001cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2323 :     size_type _Myres  = 0; // current storage reserved for string

  00034	c7 44 0a e4 00
	00 00 00	 mov	 DWORD PTR [edx+ecx-28], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0003c	8d 51 e8	 lea	 edx, DWORD PTR [ecx-24]
  0003f	66 89 46 e2	 mov	 WORD PTR [esi-30], ax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00043	33 c0		 xor	 eax, eax

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00045	c7 46 e4 00 00
	00 00		 mov	 DWORD PTR [esi-28], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0004c	3b d3		 cmp	 edx, ebx
  0004e	8b 55 10	 mov	 edx, DWORD PTR tv640[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2322 :     size_type _Mysize = 0; // current length of string

  00051	c7 46 f4 00 00
	00 00		 mov	 DWORD PTR [esi-12], 0

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00058	0f 10 41 d0	 movups	 xmm0, XMMWORD PTR [ecx-48]
  0005c	0f 11 46 e4	 movups	 XMMWORD PTR [esi-28], xmm0
  00060	f3 0f 7e 41 e0	 movq	 xmm0, QWORD PTR [ecx-32]
  00065	66 0f d6 46 f4	 movq	 QWORD PTR [esi-12], xmm0

; 4562 :         _My_data._Mysize = 0;

  0006a	c7 41 e0 00 00
	00 00		 mov	 DWORD PTR [ecx-32], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00071	c7 41 e4 07 00
	00 00		 mov	 DWORD PTR [ecx-28], 7

; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00078	66 89 41 d0	 mov	 WORD PTR [ecx-48], ax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0007c	75 a2		 jne	 SHORT $LL4@Uninitiali

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();

  0007e	5e		 pop	 esi
$LN63@Uninitiali:

; 1722 : }

  0007f	8b c7		 mov	 eax, edi
  00081	5f		 pop	 edi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ENDP ; std::_Uninitialized_move<CGraphicTextInstance::SHyperlink *,std::allocator<CGraphicTextInstance::SHyperlink> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicTextInstance * *,CGraphicTextInstance * *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicTextInstance * *,CGraphicTextInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
__Whereoff$1$ = -4					; size = 4
tv505 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Emplace_reallocate<CGraphicTextInstance * const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN74@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN75@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv505[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicTextInstance * *,CGraphicTextInstance * *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv505[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d4	83 c0 04	 add	 eax, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN60@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicTextInstance * *,CGraphicTextInstance * *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXQAPAVCGraphicTextInstance@@II@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Change_array

; 793  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv505[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 794  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN74@Emplace_re:

; 765  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Xlength
$LN75@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN72@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Emplace_reallocate<CGraphicTextInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@Z
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
__Su$1$ = -8						; size = 4
__New_size$1$ = -8					; size = 4
__Old_size$1$ = -4					; size = 4
__Old$1$ = 8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 2
??$_Reallocate_grow_by@V<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_c3135ae829aeedc0a8af1bd1e887c66a>,unsigned int,wchar_t>, COMDAT
; _this$ = ecx

; 4504 :         const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 4505 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4506 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4507 :         auto& _My_data            = _Mypair._Myval2;
; 4508 :         const size_type _Old_size = _My_data._Mysize;
; 4509 :         if (max_size() - _Old_size < _Size_increase) {

  00006	8b 55 08	 mov	 edx, DWORD PTR __Size_increase$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	b9 fe ff ff 7f	 mov	 ecx, 2147483646		; 7ffffffeH
  00013	8b c1		 mov	 eax, ecx
  00015	89 7d f4	 mov	 DWORD PTR _this$1$[ebp], edi
  00018	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0001b	2b c3		 sub	 eax, ebx
  0001d	89 5d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ebx
  00020	3b c2		 cmp	 eax, edx
  00022	0f 82 63 01 00
	00		 jb	 $LN77@Reallocate

; 4514 :         const size_type _Old_capacity = _My_data._Myres;

  00028	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  0002b	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0002e	8b d8		 mov	 ebx, eax

; 4511 :         }
; 4512 : 
; 4513 :         const size_type _New_size     = _Old_size + _Size_increase;

  00030	89 45 f8	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00033	83 cb 07	 or	 ebx, 7

; 4514 :         const size_type _Old_capacity = _My_data._Myres;

  00036	89 75 08	 mov	 DWORD PTR __Old$1$[ebp], esi

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00039	3b d9		 cmp	 ebx, ecx

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0003b	76 14		 jbe	 SHORT $LN9@Reallocate

; 4456 :             return _Max;

  0003d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00042	8b d9		 mov	 ebx, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b f0		 mov	 esi, eax
  0004f	eb 5f		 jmp	 SHORT $LN20@Reallocate
$LN9@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00051	8b c6		 mov	 eax, esi
  00053	d1 e8		 shr	 eax, 1
  00055	2b c8		 sub	 ecx, eax
  00057	3b f1		 cmp	 esi, ecx
  00059	76 17		 jbe	 SHORT $LN10@Reallocate

; 4460 :             return _Max;

  0005b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00060	bb fe ff ff 7f	 mov	 ebx, 2147483646		; 7ffffffeH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b f0		 mov	 esi, eax
  00070	eb 3e		 jmp	 SHORT $LN20@Reallocate
$LN10@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00072	03 c6		 add	 eax, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00074	3b d8		 cmp	 ebx, eax
  00076	0f 42 d8	 cmovb	 ebx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4517 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00079	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0007c	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00081	0f 87 09 01 00
	00		 ja	 $LN78@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00087	03 c0		 add	 eax, eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00089	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0008e	72 0d		 jb	 SHORT $LN21@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00096	83 c4 04	 add	 esp, 4
  00099	8b f0		 mov	 esi, eax
  0009b	eb 13		 jmp	 SHORT $LN20@Reallocate
$LN21@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0009d	85 c0		 test	 eax, eax
  0009f	74 0d		 je	 SHORT $LN22@Reallocate

; 79   :         return ::operator new(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000aa	8b f0		 mov	 esi, eax
  000ac	eb 02		 jmp	 SHORT $LN20@Reallocate
$LN22@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000ae	33 f6		 xor	 esi, esi
$LN20@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4528 :         if (_BUF_SIZE <= _Old_capacity) {

  000b0	83 7d 08 08	 cmp	 DWORD PTR __Old$1$[ebp], 8
  000b4	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  000b7	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  000ba	8b 5d fc	 mov	 ebx, DWORD PTR __Old_size$1$[ebp]
  000bd	89 47 10	 mov	 DWORD PTR [edi+16], eax
  000c0	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  000c3	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000c6	89 4d f8	 mov	 DWORD PTR __Su$1$[ebp], ecx
  000c9	50		 push	 eax
  000ca	72 78		 jb	 SHORT $LN3@Reallocate

; 4529 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000cc	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ce	53		 push	 ebx
  000cf	56		 push	 esi
  000d0	e8 00 00 00 00	 call	 _memcpy
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h

; 259  :         for (; 0 < _N; ++_Su, --_N)

  000d5	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h

; 259  :         for (; 0 < _N; ++_Su, --_N)

  000db	85 c0		 test	 eax, eax
  000dd	74 1e		 je	 SHORT $LN36@Reallocate
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4529 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000df	8b 7d f8	 mov	 edi, DWORD PTR __Su$1$[ebp]
  000e2	8b c8		 mov	 ecx, eax
  000e4	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  000e7	0f b7 d0	 movzx	 edx, ax
  000ea	8b c2		 mov	 eax, edx
  000ec	c1 e2 10	 shl	 edx, 16			; 00000010H
  000ef	0b c2		 or	 eax, edx
  000f1	d1 e9		 shr	 ecx, 1
  000f3	f3 ab		 rep stosd
  000f5	13 c9		 adc	 ecx, ecx
  000f7	66 f3 ab	 rep stosw
  000fa	8b 7d f4	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN36@Reallocate:

; 3161 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000fd	8b 45 fc	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
  00100	33 c9		 xor	 ecx, ecx
  00102	03 45 10	 add	 eax, DWORD PTR _<_Args_0>$[ebp]
  00105	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00109	8b 45 08	 mov	 eax, DWORD PTR __Old$1$[ebp]
  0010c	8d 0c 45 02 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+2]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00113	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00119	72 12		 jb	 SHORT $LN52@Reallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011b	8b 53 fc	 mov	 edx, DWORD PTR [ebx-4]
  0011e	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00121	2b da		 sub	 ebx, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00123	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  00126	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00129	77 6a		 ja	 SHORT $LN49@Reallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0012b	8b da		 mov	 ebx, edx
$LN52@Reallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0012d	51		 push	 ecx
  0012e	53		 push	 ebx
  0012f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00134	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4538 :         return *this;

  00137	89 37		 mov	 DWORD PTR [edi], esi
  00139	8b c7		 mov	 eax, edi
  0013b	5f		 pop	 edi
  0013c	5e		 pop	 esi
  0013d	5b		 pop	 ebx

; 4539 :     }

  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 10 00	 ret	 16			; 00000010H
$LN3@Reallocate:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00144	57		 push	 edi
  00145	56		 push	 esi
  00146	e8 00 00 00 00	 call	 _memcpy
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h

; 259  :         for (; 0 < _N; ++_Su, --_N)

  0014b	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h

; 259  :         for (; 0 < _N; ++_Su, --_N)

  00151	85 c0		 test	 eax, eax
  00153	74 21		 je	 SHORT $LN64@Reallocate
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00155	8b 7d f8	 mov	 edi, DWORD PTR __Su$1$[ebp]
  00158	8b c8		 mov	 ecx, eax
  0015a	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  0015d	0f b7 d0	 movzx	 edx, ax
  00160	8b c2		 mov	 eax, edx
  00162	c1 e2 10	 shl	 edx, 16			; 00000010H
  00165	0b c2		 or	 eax, edx
  00167	d1 e9		 shr	 ecx, 1
  00169	f3 ab		 rep stosd
  0016b	13 c9		 adc	 ecx, ecx
  0016d	66 f3 ab	 rep stosw
  00170	8b 7d f4	 mov	 edi, DWORD PTR _this$1$[ebp]
  00173	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
$LN64@Reallocate:

; 3161 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00176	03 c3		 add	 eax, ebx
  00178	33 c9		 xor	 ecx, ecx
  0017a	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx

; 4538 :         return *this;

  0017e	8b c7		 mov	 eax, edi
  00180	89 37		 mov	 DWORD PTR [edi], esi
  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	5b		 pop	 ebx

; 4539 :     }

  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c2 10 00	 ret	 16			; 00000010H
$LN77@Reallocate:

; 4510 :             _Xlen_string(); // result too long

  0018b	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN78@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00190	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN49@Reallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00195	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN75@Reallocate:
  0019a	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_c3135ae829aeedc0a8af1bd1e887c66a>,unsigned int,wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABI@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAIABI@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
__Whereoff$1$ = -4					; size = 4
tv505 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABI@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAIABI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Emplace_reallocate<unsigned int const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN74@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN75@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv505[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z ; std::_Copy_memmove<unsigned int *,unsigned int *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv505[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d4	83 c0 04	 add	 eax, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN60@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z ; std::_Copy_memmove<unsigned int *,unsigned int *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AAEXQAIII@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array

; 793  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv505[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 794  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN74@Emplace_re:

; 765  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
$LN75@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN72@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABI@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAIABI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Emplace_reallocate<unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@I@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAI$$QAI@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
__Whereoff$1$ = -4					; size = 4
tv505 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@I@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAI$$QAI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Emplace_reallocate<unsigned int>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN74@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN75@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv505[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z ; std::_Copy_memmove<unsigned int *,unsigned int *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv505[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d4	83 c0 04	 add	 eax, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN60@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z ; std::_Copy_memmove<unsigned int *,unsigned int *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AAEXQAIII@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array

; 793  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv505[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 794  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN74@Emplace_re:

; 765  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
$LN75@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN72@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@I@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAI$$QAI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Emplace_reallocate<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSCharacterInfomation@CGraphicFontTexture@@@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAEPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSCharacterInfomation@CGraphicFontTexture@@@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAEPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Emplace_reallocate<CGraphicFontTexture::SCharacterInfomation * const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z ; std::_Copy_memmove<CGraphicFontTexture::SCharacterInfomation * *,CGraphicFontTexture::SCharacterInfomation * *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@@std@@YAPAPAUSCharacterInfomation@CGraphicFontTexture@@PAPAU12@00@Z ; std::_Copy_memmove<CGraphicFontTexture::SCharacterInfomation * *,CGraphicFontTexture::SCharacterInfomation * *>

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 794  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 765  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@CAXXZ ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Xlength
$LN97@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAUSCharacterInfomation@CGraphicFontTexture@@@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAEPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Emplace_reallocate<CGraphicFontTexture::SCharacterInfomation * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKABK@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv641 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c1		 sub	 eax, ecx
  0001d	c1 f8 02	 sar	 eax, 2

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 06 01 00
	00		 je	 $LN96@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 02	 sar	 edx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00048	bb fc ff ff ff	 mov	 ebx, -4			; fffffffcH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	53		 push	 ebx
  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 41		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b df		 mov	 ebx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 d8	 cmovae	 ebx, eax
  00064	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0006a	0f 87 c6 00 00
	00		 ja	 $LN97@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00073	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b f8		 mov	 edi, eax
  00086	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00088	85 db		 test	 ebx, ebx
  0008a	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00095	8b f8		 mov	 edi, eax
  00097	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00099	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009e	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv641[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ab	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b1	8b 16		 mov	 edx, DWORD PTR [esi]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	75 04		 jne	 SHORT $LN4@Emplace_re
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b c7		 mov	 eax, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

  000b9	eb 17		 jmp	 SHORT $LN60@Emplace_re
$LN4@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ; std::_Copy_memmove<unsigned long *,unsigned long *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000cc	83 c0 04	 add	 eax, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN60@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ; std::_Copy_memmove<unsigned long *,unsigned long *>

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN78@Emplace_re

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN88@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 29		 ja	 SHORT $LN85@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00117	8b 45 fc	 mov	 eax, DWORD PTR tv641[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00120	5f		 pop	 edi

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 794  :     }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 765  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN97@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
__Constructed_last$ = -40				; size = 4
__Newsize$1$ = -36					; size = 4
tv505 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
tv509 = -28						; size = 4
$T2 = -24						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Last$1$ = 8						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z PROC ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d d4	 mov	 DWORD PTR _this$[ebp], edi

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  00033	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00038	2b 37		 sub	 esi, DWORD PTR [edi]

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003d	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0003f	f7 ee		 imul	 esi
  00041	03 d6		 add	 edx, esi
  00043	c1 fa 04	 sar	 edx, 4
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00055	f7 e9		 imul	 ecx
  00057	03 d1		 add	 edx, ecx
  00059	c1 fa 04	 sar	 edx, 4
  0005c	8b c2		 mov	 eax, edx
  0005e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00061	03 c2		 add	 eax, edx

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00063	3d 49 92 24 09	 cmp	 eax, 153391689		; 09249249H
  00068	0f 84 b8 01 00
	00		 je	 $LN82@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006e	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00071	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00074	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00076	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0007b	f7 e9		 imul	 ecx

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0007d	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00082	89 5d dc	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00085	03 d1		 add	 edx, ecx
  00087	c1 fa 04	 sar	 edx, 4
  0008a	8b ca		 mov	 ecx, edx
  0008c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008f	03 ca		 add	 ecx, edx

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00091	8b d1		 mov	 edx, ecx
  00093	d1 ea		 shr	 edx, 1
  00095	2b c2		 sub	 eax, edx
  00097	3b c8		 cmp	 ecx, eax
  00099	76 1c		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  0009b	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  000a0	c7 45 ec 49 92
	24 09		 mov	 DWORD PTR __Newcapacity$[ebp], 153391689 ; 09249249H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a7	50		 push	 eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1676 :             return _Max; // geometric growth would overflow

  000a8	89 45 e4	 mov	 DWORD PTR tv509[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ab	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b0	83 c4 04	 add	 esp, 4
  000b3	8b d8		 mov	 ebx, eax
  000b5	eb 52		 jmp	 SHORT $LN79@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b7	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000ba	8b f3		 mov	 esi, ebx
  000bc	3b c3		 cmp	 eax, ebx
  000be	0f 43 f0	 cmovae	 esi, eax
  000c1	81 fe 49 92 24
	09		 cmp	 esi, 153391689		; 09249249H
  000c7	0f 87 5e 01 00
	00		 ja	 $LN83@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000cd	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  000d4	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000d7	2b c6		 sub	 eax, esi
  000d9	c1 e0 02	 shl	 eax, 2
  000dc	89 45 e4	 mov	 DWORD PTR tv509[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000df	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000e4	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ec	83 c4 04	 add	 esp, 4
  000ef	8b d8		 mov	 ebx, eax
  000f1	eb 16		 jmp	 SHORT $LN79@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000f3	85 c0		 test	 eax, eax
  000f5	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000fd	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00100	8b d8		 mov	 ebx, eax
  00102	eb 02		 jmp	 SHORT $LN80@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00104	33 db		 xor	 ebx, ebx
$LN80@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 772  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00106	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN79@Emplace_re:
  00109	8b 4d e0	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]

; 773  :         pointer _Constructed_first      = _Constructed_last;
; 774  : 
; 775  :         _TRY_BEGIN
; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0010c	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  0010f	89 5d e8	 mov	 DWORD PTR $T2[ebp], ebx
  00112	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00119	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00120	2b c1		 sub	 eax, ecx
  00122	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  00125	50		 push	 eax
  00126	8d 70 1c	 lea	 esi, DWORD PTR [eax+28]
  00129	89 45 e0	 mov	 DWORD PTR tv505[ebp], eax
  0012c	57		 push	 edi
  0012d	89 75 d8	 mov	 DWORD PTR __Constructed_last$[ebp], esi
  00130	e8 00 00 00 00	 call	 ??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00135	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013b	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0013e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00140	3b d0		 cmp	 edx, eax
  00142	75 04		 jne	 SHORT $LN4@Emplace_re

; 1651 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00144	8b f3		 mov	 esi, ebx

; 780  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 781  :         } else { // provide basic guarantee

  00146	eb 12		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1646 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00148	57		 push	 edi
  00149	53		 push	 ebx
  0014a	52		 push	 edx
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance::SHyperlink *,std::allocator<CGraphicTextInstance::SHyperlink> >
  00151	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00154	83 c4 10	 add	 esp, 16			; 00000010H
  00157	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
$LN5@Emplace_re:

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0015a	57		 push	 edi
  0015b	56		 push	 esi
  0015c	50		 push	 eax
  0015d	51		 push	 ecx
  0015e	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@YAPAUSHyperlink@CGraphicTextInstance@@QAU12@0PAU12@AAV?$allocator@USHyperlink@CGraphicTextInstance@@@0@@Z ; std::_Uninitialized_move<CGraphicTextInstance::SHyperlink *,std::allocator<CGraphicTextInstance::SHyperlink> >

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00163	8b 37		 mov	 esi, DWORD PTR [edi]

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00165	83 c4 10	 add	 esp, 16			; 00000010H

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00168	85 f6		 test	 esi, esi
  0016a	74 63		 je	 SHORT $LN57@Emplace_re

; 1733 :             _Destroy(_Myfirst, _Mylast);

  0016c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0016f	89 45 08	 mov	 DWORD PTR __Last$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 904  :         for (; _First != _Last; ++_First) {

  00172	3b f0		 cmp	 esi, eax
  00174	74 11		 je	 SHORT $LN45@Emplace_re
$LL46@Emplace_re:
  00176	8b ce		 mov	 ecx, esi
  00178	e8 00 00 00 00	 call	 ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
  0017d	83 c6 1c	 add	 esi, 28			; 0000001cH
  00180	3b 75 08	 cmp	 esi, DWORD PTR __Last$1$[ebp]
  00183	75 f1		 jne	 SHORT $LL46@Emplace_re
  00185	8b 37		 mov	 esi, DWORD PTR [edi]
$LN45@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00187	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0018a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0018f	2b ce		 sub	 ecx, esi
  00191	f7 e9		 imul	 ecx
  00193	03 d1		 add	 edx, ecx
  00195	c1 fa 04	 sar	 edx, 4
  00198	8b c2		 mov	 eax, edx
  0019a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0019d	03 c2		 add	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0019f	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  001a6	2b c8		 sub	 ecx, eax
  001a8	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001ab	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001b1	72 12		 jb	 SHORT $LN67@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001b3	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  001b6	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001b9	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001bb	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001be	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001c1	77 6d		 ja	 SHORT $LN64@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001c3	8b f2		 mov	 esi, edx
$LN67@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001c5	51		 push	 ecx
  001c6	56		 push	 esi
  001c7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001cc	83 c4 08	 add	 esp, 8
$LN57@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  001cf	8b 45 dc	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  001d2	89 1f		 mov	 DWORD PTR [edi], ebx
  001d4	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  001db	2b c8		 sub	 ecx, eax

; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  001dd	8b 45 e0	 mov	 eax, DWORD PTR tv505[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  001e0	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  001e3	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  001e6	8b 4d e4	 mov	 ecx, DWORD PTR tv509[ebp]
  001e9	03 cb		 add	 ecx, ebx
  001eb	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 794  :     }

  001ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f8	59		 pop	 ecx
  001f9	5f		 pop	 edi
  001fa	5e		 pop	 esi
  001fb	5b		 pop	 ebx
  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z$0:

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);

  00202	8b 45 d8	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00205	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00208	50		 push	 eax
  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@AAEXPAUSHyperlink@CGraphicTextInstance@@0@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Destroy

; 788  :         _Al.deallocate(_Newvec, _Newcapacity);

  0020f	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  00212	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00215	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  00218	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USHyperlink@CGraphicTextInstance@@@std@@QAEXQAUSHyperlink@CGraphicTextInstance@@I@Z ; std::allocator<CGraphicTextInstance::SHyperlink>::deallocate

; 789  :         _RERAISE;

  0021d	6a 00		 push	 0
  0021f	6a 00		 push	 0
  00221	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN82@Emplace_re:

; 765  :             _Xlength();

  00226	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Xlength
$LN83@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0022b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN64@Emplace_re:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00230	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN78@Emplace_re:
  00235	cc		 int	 3
  00236	cc		 int	 3
  00237	cc		 int	 3
  00238	cc		 int	 3
  00239	cc		 int	 3
  0023a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z ENDP ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__New_capacity$1$ = 16					; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>, COMDAT

; 674  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  0000b	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  0000e	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2886 :         auto& _Right_data             = _Right._Mypair._Myval2;

  0000f	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  00012	66 89 06	 mov	 WORD PTR [esi], ax
  00015	0f b7 41 02	 movzx	 eax, WORD PTR [ecx+2]
  00019	66 89 46 02	 mov	 WORD PTR [esi+2], ax

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0001d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2322 :     size_type _Mysize = 0; // current length of string

  00024	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2323 :     size_type _Myres  = 0; // current storage reserved for string

  0002b	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 2286 :         return _BUF_SIZE <= _Myres;

  00032	83 7f 14 08	 cmp	 DWORD PTR [edi+20], 8

; 2887 :         const size_type _Right_size   = _Right_data._Mysize;

  00036	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]

; 2273 :         if (_Large_string_engaged()) {

  00039	72 02		 jb	 SHORT $LN20@construct

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN20@construct:

; 2894 :         const bool _Stay_small = _Right_size < _BUF_SIZE;

  0003d	83 fb 08	 cmp	 ebx, 8

; 2895 : #endif // __cpp_lib_constexpr_string
; 2896 : 
; 2897 :         // NOTE: even if _Right is in large mode, we only go into large mode ourselves if the actual size of _Right
; 2898 :         // requires it
; 2899 :         if (_Stay_small) { // stay small, don't allocate

  00040	73 16		 jae	 SHORT $LN17@construct

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00042	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00045	5f		 pop	 edi
  00046	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 683  :     }

  0004a	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2902 :             _My_data._Myres  = _BUF_SIZE - 1;

  0004d	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 683  :     }

  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN17@construct:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2907 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00058	8b c3		 mov	 eax, ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  0005a	b9 fe ff ff 7f	 mov	 ecx, 2147483646		; 7ffffffeH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2907 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0005f	83 c8 07	 or	 eax, 7
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00062	3b c1		 cmp	 eax, ecx
  00064	0f 47 c1	 cmova	 eax, ecx
  00067	89 45 10	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2908 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0006a	40		 inc	 eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0006b	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00070	77 4c		 ja	 SHORT $LN49@construct

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00072	03 c0		 add	 eax, eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00074	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00079	72 0d		 jb	 SHORT $LN35@construct

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	83 c4 04	 add	 esp, 4
  00084	8b c8		 mov	 ecx, eax
  00086	eb 13		 jmp	 SHORT $LN34@construct
$LN35@construct:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00088	85 c0		 test	 eax, eax
  0008a	74 0d		 je	 SHORT $LN36@construct

; 79   :         return ::operator new(_Bytes);

  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00095	8b c8		 mov	 ecx, eax
  00097	eb 02		 jmp	 SHORT $LN34@construct
$LN36@construct:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00099	33 c9		 xor	 ecx, ecx
$LN34@construct:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009b	8d 04 5d 02 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+2]

; 2909 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000a2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a5	50		 push	 eax
  000a6	57		 push	 edi
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 _memcpy

; 2918 :         _My_data._Myres  = _New_capacity;

  000ad	8b 45 10	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 683  :     }

  000b3	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2918 :         _My_data._Myres  = _New_capacity;

  000b6	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000b9	5f		 pop	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 683  :     }

  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
$LN49@construct:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000be	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN46@construct:
  000c3	cc		 int	 3
??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSEmoji@CGraphicTextInstance@@@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAEPAUSEmoji@CGraphicTextInstance@@QAU23@ABU23@@Z
_TEXT	SEGMENT
tv696 = -16						; size = 4
tv701 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
$T4 = 8							; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSEmoji@CGraphicTextInstance@@@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAEPAUSEmoji@CGraphicTextInstance@@QAU23@ABU23@@Z PROC ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Emplace_reallocate<CGraphicTextInstance::SEmoji const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00008	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  0000b	8b de		 mov	 ebx, esi
  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
  00010	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  00013	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00015	2b d9		 sub	 ebx, ecx

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001a	2b c1		 sub	 eax, ecx
  0001c	c1 fb 03	 sar	 ebx, 3
  0001f	c1 f8 03	 sar	 eax, 3

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00022	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00027	0f 84 50 01 00
	00		 je	 $LN110@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002d	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00030	40		 inc	 eax

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b d1		 sub	 edx, ecx

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 45 f8	 mov	 DWORD PTR __Newsize$1$[ebp], eax

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 fa 03	 sar	 edx, 3

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  0003e	8b ca		 mov	 ecx, edx
  00040	d1 e9		 shr	 ecx, 1
  00042	2b c1		 sub	 eax, ecx
  00044	3b d0		 cmp	 edx, eax
  00046	76 13		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00048	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004d	50		 push	 eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1676 :             return _Max; // geometric growth would overflow

  0004e	89 45 f4	 mov	 DWORD PTR tv701[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00056	83 c4 04	 add	 esp, 4
  00059	eb 44		 jmp	 SHORT $LN108@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005b	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005e	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]
  00061	3b c1		 cmp	 eax, ecx
  00063	0f 43 c8	 cmovae	 ecx, eax
  00066	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  0006c	0f 87 10 01 00
	00		 ja	 $LN111@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00072	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00079	89 45 f4	 mov	 DWORD PTR tv701[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0b		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	eb 11		 jmp	 SHORT $LN108@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0b		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	eb 02		 jmp	 SHORT $LN108@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009d	33 c0		 xor	 eax, eax
$LN108@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009f	8d 14 d8	 lea	 edx, DWORD PTR [eax+ebx*8]
  000a2	89 45 08	 mov	 DWORD PTR $T4[ebp], eax
  000a5	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a8	89 55 f0	 mov	 DWORD PTR tv696[ebp], edx
  000ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ad	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b0	89 0a		 mov	 DWORD PTR [edx], ecx
  000b2	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b5	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  000b8	8b 17		 mov	 edx, DWORD PTR [edi]
  000ba	3b f3		 cmp	 esi, ebx
  000bc	75 1e		 jne	 SHORT $LN4@Emplace_re
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000be	8b 75 08	 mov	 esi, DWORD PTR $T4[ebp]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  000c1	3b d3		 cmp	 edx, ebx
  000c3	74 5f		 je	 SHORT $LN62@Emplace_re
$LL37@Emplace_re:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  000c5	8b 02		 mov	 eax, DWORD PTR [edx]

; 1621 :         ++_Last;

  000c7	8d 76 08	 lea	 esi, DWORD PTR [esi+8]
  000ca	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  000cd	83 c2 08	 add	 edx, 8

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  000d0	89 46 f8	 mov	 DWORD PTR [esi-8], eax
  000d3	89 4e fc	 mov	 DWORD PTR [esi-4], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  000d6	3b d3		 cmp	 edx, ebx
  000d8	75 eb		 jne	 SHORT $LL37@Emplace_re
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

  000da	eb 48		 jmp	 SHORT $LN62@Emplace_re
$LN4@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000dc	8b 7d 08	 mov	 edi, DWORD PTR $T4[ebp]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  000df	3b d6		 cmp	 edx, esi
  000e1	74 1d		 je	 SHORT $LN106@Emplace_re
$LL50@Emplace_re:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  000e3	8b 02		 mov	 eax, DWORD PTR [edx]

; 1621 :         ++_Last;

  000e5	8d 7f 08	 lea	 edi, DWORD PTR [edi+8]
  000e8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  000eb	83 c2 08	 add	 edx, 8

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  000ee	89 47 f8	 mov	 DWORD PTR [edi-8], eax
  000f1	89 4f fc	 mov	 DWORD PTR [edi-4], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  000f4	3b d6		 cmp	 edx, esi
  000f6	75 eb		 jne	 SHORT $LL50@Emplace_re
  000f8	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  000fb	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  000fe	eb 03		 jmp	 SHORT $LN49@Emplace_re
$LN106@Emplace_re:
  00100	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN49@Emplace_re:
  00103	3b f3		 cmp	 esi, ebx
  00105	74 1d		 je	 SHORT $LN62@Emplace_re
  00107	8b 55 f0	 mov	 edx, DWORD PTR tv696[ebp]
  0010a	2b d6		 sub	 edx, esi
  0010c	0f 1f 40 00	 npad	 4
$LL63@Emplace_re:

; 1620 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00110	8b 06		 mov	 eax, DWORD PTR [esi]
  00112	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00115	89 44 32 08	 mov	 DWORD PTR [edx+esi+8], eax
  00119	89 4c 32 0c	 mov	 DWORD PTR [edx+esi+12], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0011d	83 c6 08	 add	 esi, 8
  00120	3b f3		 cmp	 esi, ebx
  00122	75 ec		 jne	 SHORT $LL63@Emplace_re
$LN62@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00124	8b 07		 mov	 eax, DWORD PTR [edi]
  00126	85 c0		 test	 eax, eax
  00128	74 2c		 je	 SHORT $LN78@Emplace_re

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0012a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0012d	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012f	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00132	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00138	72 12		 jb	 SHORT $LN88@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0013a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0013d	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00140	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00142	83 c0 fc	 add	 eax, -4			; fffffffcH
  00145	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00148	77 2e		 ja	 SHORT $LN85@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0014a	8b c2		 mov	 eax, edx
$LN88@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0014c	51		 push	 ecx
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00153	83 c4 08	 add	 esp, 8
$LN78@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

  00156	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  00159	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]
  0015c	89 07		 mov	 DWORD PTR [edi], eax
  0015e	8d 0c c8	 lea	 ecx, DWORD PTR [eax+ecx*8]
  00161	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00164	8b 4d f4	 mov	 ecx, DWORD PTR tv701[ebp]
  00167	03 c8		 add	 ecx, eax

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00169	8b 45 f0	 mov	 eax, DWORD PTR tv696[ebp]

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  0016c	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx

; 794  :     }

  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c2 08 00	 ret	 8
$LN85@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00178	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN110@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 765  :             _Xlength();

  0017d	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Xlength
$LN111@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00182	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN107@Emplace_re:
  00187	cc		 int	 3
??$_Emplace_reallocate@ABUSEmoji@CGraphicTextInstance@@@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAEPAUSEmoji@CGraphicTextInstance@@QAU23@ABU23@@Z ENDP ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Emplace_reallocate<CGraphicTextInstance::SEmoji const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?IsValidToken@@YA_NPBD@Z
_TEXT	SEGMENT
_iter$ = 8						; size = 4
?IsValidToken@@YA_NPBD@Z PROC				; IsValidToken, COMDAT

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 119  : 	return	iter[0]=='@' &&

  00004	8b 75 08	 mov	 esi, DWORD PTR _iter$[ebp]
  00007	80 3e 40	 cmp	 BYTE PTR [esi], 64	; 00000040H
  0000a	75 49		 jne	 SHORT $LN3@IsValidTok
  0000c	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?isNumberic@@YA_ND@Z	; isNumberic
  00016	83 c4 04	 add	 esp, 4
  00019	84 c0		 test	 al, al
  0001b	74 38		 je	 SHORT $LN3@IsValidTok
  0001d	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?isNumberic@@YA_ND@Z	; isNumberic
  00027	83 c4 04	 add	 esp, 4
  0002a	84 c0		 test	 al, al
  0002c	74 27		 je	 SHORT $LN3@IsValidTok
  0002e	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?isNumberic@@YA_ND@Z	; isNumberic
  00038	83 c4 04	 add	 esp, 4
  0003b	84 c0		 test	 al, al
  0003d	74 16		 je	 SHORT $LN3@IsValidTok
  0003f	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?isNumberic@@YA_ND@Z	; isNumberic
  00049	83 c4 04	 add	 esp, 4
  0004c	84 c0		 test	 al, al
  0004e	74 05		 je	 SHORT $LN3@IsValidTok
  00050	b0 01		 mov	 al, 1
  00052	5e		 pop	 esi

; 120  : 		isNumberic(iter[1]) &&
; 121  : 		isNumberic(iter[2]) &&
; 122  : 		isNumberic(iter[3]) &&
; 123  : 		isNumberic(iter[4]);
; 124  : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN3@IsValidTok:

; 119  : 	return	iter[0]=='@' &&

  00055	32 c0		 xor	 al, al
  00057	5e		 pop	 esi

; 120  : 		isNumberic(iter[1]) &&
; 121  : 		isNumberic(iter[2]) &&
; 122  : 		isNumberic(iter[3]) &&
; 123  : 		isNumberic(iter[4]);
; 124  : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?IsValidToken@@YA_NPBD@Z ENDP				; IsValidToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?isNumberic@@YA_ND@Z
_TEXT	SEGMENT
_chr$ = 8						; size = 1
?isNumberic@@YA_ND@Z PROC				; isNumberic, COMDAT

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 112  : 	if (chr >= '0' && chr <= '9')

  00003	8a 45 08	 mov	 al, BYTE PTR _chr$[ebp]
  00006	2c 30		 sub	 al, 48			; 00000030H
  00008	3c 09		 cmp	 al, 9
  0000a	0f 96 c0	 setbe	 al

; 113  : 		return true;
; 114  : 	return false;
; 115  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?isNumberic@@YA_ND@Z ENDP				; isNumberic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??__Fgs_text@@YAXXZ
text$yd	SEGMENT
??__Fgs_text@@YAXXZ PROC				; `dynamic atexit destructor for 'gs_text'', COMDAT

; 2286 :         return _BUF_SIZE <= _Myres;

  00000	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?gs_text@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 2f		 jb	 SHORT $LN15@dynamic
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_text@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN25@dynamic

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0001f	83 c2 23	 add	 edx, 35			; 00000023H
  00022	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN25@dynamic:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	52		 push	 edx
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?gs_text@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?gs_text@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?gs_text@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00055	c3		 ret	 0
??__Fgs_text@@YAXXZ ENDP				; `dynamic atexit destructor for 'gs_text''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ??__Egs_text@@YAXXZ
text$di	SEGMENT
??__Egs_text@@YAXXZ PROC				; `dynamic initializer for 'gs_text'', COMDAT

; 27   : static std::string gs_text;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_text@@YAXXZ ; `dynamic atexit destructor for 'gs_text''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_text@@YAXXZ ENDP				; `dynamic initializer for 'gs_text''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??__Fgs_hyperlinkText@@YAXXZ
text$yd	SEGMENT
??__Fgs_hyperlinkText@@YAXXZ PROC			; `dynamic atexit destructor for 'gs_hyperlinkText'', COMDAT

; 2286 :         return _BUF_SIZE <= _Myres;

  00000	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+20
  00006	83 fa 08	 cmp	 edx, 8

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 35		 jb	 SHORT $LN15@dynamic
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
  00011	8d 14 55 02 00
	00 00		 lea	 edx, DWORD PTR [edx*2+2]
  00018	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00020	72 14		 jb	 SHORT $LN25@dynamic

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00022	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00025	83 c2 23	 add	 edx, 35			; 00000023H
  00028	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00030	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN25@dynamic:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00036	52		 push	 edx
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003d	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	33 c0		 xor	 eax, eax
  00042	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+16, 0
  0004c	c7 05 14 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+20, 7
  00056	66 a3 00 00 00
	00		 mov	 WORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A, ax
  0005c	c3		 ret	 0
??__Fgs_hyperlinkText@@YAXXZ ENDP			; `dynamic atexit destructor for 'gs_hyperlinkText''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ??__Egs_hyperlinkText@@YAXXZ
text$di	SEGMENT
??__Egs_hyperlinkText@@YAXXZ PROC			; `dynamic initializer for 'gs_hyperlinkText'', COMDAT

; 25   : static std::wstring gs_hyperlinkText;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_hyperlinkText@@YAXXZ ; `dynamic atexit destructor for 'gs_hyperlinkText''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_hyperlinkText@@YAXXZ ENDP			; `dynamic initializer for 'gs_hyperlinkText''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CGraphicTextInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A ; CGraphicTextInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ ; CDynamicPool<CGraphicTextInstance>::~CDynamicPool<CGraphicTextInstance>
??__F?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CGraphicTextInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ??__E?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CGraphicTextInstance::ms_kPool'', COMDAT

; 20   : CDynamicPool<CGraphicTextInstance>		CGraphicTextInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CGraphicTextInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CGraphicTextInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CGraphicTextInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ ; CDynamicPool<CGraphicTextInstance>::~CDynamicPool<CGraphicTextInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCGraphicTextInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CGraphicTextInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXQAPAVCGraphicTextInstance@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXQAPAVCGraphicTextInstance@@II@Z PROC ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 1740 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXQAPAVCGraphicTextInstance@@II@Z ENDP ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z PROC ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1286 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1286 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 1287 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1288 :         auto& _My_data    = _Mypair._Myval2;
; 1289 :         pointer& _Myfirst = _My_data._Myfirst;
; 1290 :         pointer& _Mylast  = _My_data._Mylast;
; 1291 : 
; 1292 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	2b 06		 sub	 eax, DWORD PTR [esi]
  00011	c1 f8 02	 sar	 eax, 2
  00014	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00017	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0001d	0f 87 8a 00 00
	00		 ja	 $LN59@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00023	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0002c	72 0d		 jb	 SHORT $LN15@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00034	83 c4 04	 add	 esp, 4
  00037	8b f8		 mov	 edi, eax
  00039	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0003b	85 db		 test	 ebx, ebx
  0003d	74 0d		 je	 SHORT $LN16@Reallocate

; 79   :         return ::operator new(_Bytes);

  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00045	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00048	8b f8		 mov	 edi, eax
  0004a	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0004c	33 ff		 xor	 edi, edi
$LN14@Reallocate:

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0004e	57		 push	 edi
  0004f	ff 76 04	 push	 DWORD PTR [esi+4]
  00052	ff 36		 push	 DWORD PTR [esi]
  00054	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicTextInstance@@PAPAV1@@std@@YAPAPAVCGraphicTextInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicTextInstance * *,CGraphicTextInstance * *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00059	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 2c		 je	 SHORT $LN43@Reallocate

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00065	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN53@Reallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 26		 ja	 SHORT $LN50@Reallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN53@Reallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008b	83 c4 08	 add	 esp, 8
$LN43@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00091	89 3e		 mov	 DWORD PTR [esi], edi
  00093	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00096	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00099	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0009c	5f		 pop	 edi
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1304 :     }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN50@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN59@Reallocate:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ad	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN57@Reallocate:
  000b2	cc		 int	 3
?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCGraphicTextInstance@@@@KAXPAVCGraphicTextInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCGraphicTextInstance@@@@KAXPAVCGraphicTextInstance@@@Z PROC ; CDynamicPool<CGraphicTextInstance>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 			delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 111  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCGraphicTextInstance@@@@KAXPAVCGraphicTextInstance@@@Z ENDP ; CDynamicPool<CGraphicTextInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ PROC	; CDynamicPool<CGraphicTextInstance>::~CDynamicPool<CGraphicTextInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCGraphicTextInstance@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1756 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1756 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCGraphicTextInstance@@@@UAE@XZ ENDP	; CDynamicPool<CGraphicTextInstance>::~CDynamicPool<CGraphicTextInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?ReadToken@@YAHPBD@Z
_TEXT	SEGMENT
_token$ = 8						; size = 4
?ReadToken@@YAHPBD@Z PROC				; ReadToken, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 147  : 	int nRet = (token[1]-'0')*1000 + (token[2]-'0')*100 + (token[3]-'0')*10 + (token[4]-'0');

  00003	8b 55 08	 mov	 edx, DWORD PTR _token$[ebp]
  00006	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  0000a	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0000d	0f be 42 02	 movsx	 eax, BYTE PTR [edx+2]
  00011	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00014	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00017	0f be 42 03	 movsx	 eax, BYTE PTR [edx+3]
  0001b	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0001e	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00021	0f be 42 04	 movsx	 eax, BYTE PTR [edx+4]
  00025	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]

; 148  : 	if (nRet == 9999)

  00028	b9 e9 fd 00 00	 mov	 ecx, 65001		; 0000fde9H
  0002d	05 b0 2f ff ff	 add	 eax, -53328		; ffff2fb0H
  00032	3d 0f 27 00 00	 cmp	 eax, 9999		; 0000270fH
  00037	0f 44 c1	 cmove	 eax, ecx

; 149  : 		return CP_UTF8;
; 150  : 	return nRet;
; 151  : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?ReadToken@@YAHPBD@Z ENDP				; ReadToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?FindToken@@YAPBDPBD0@Z
_TEXT	SEGMENT
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
?FindToken@@YAPBDPBD0@Z PROC				; FindToken, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 128  : 	while(begin < end)

  00004	8b 75 08	 mov	 esi, DWORD PTR _begin$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _end$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	73 33		 jae	 SHORT $LN18@FindToken
  0000f	90		 npad	 1
$LL2@FindToken:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 5208 :     const auto _Result    = static_cast<remove_reference_t<_Iter_ref_t<_InIt>>*>(

  00010	8b c7		 mov	 eax, edi
  00012	2b c6		 sub	 eax, esi
  00014	50		 push	 eax
  00015	6a 40		 push	 64			; 00000040H
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 _memchr
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5209 :         _CSTD memchr(_First_ptr, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First)));
; 5210 :     if constexpr (is_pointer_v<_InIt>) {
; 5211 :         return _Result ? _Result : _Last;

  00020	8b f7		 mov	 esi, edi
  00022	85 c0		 test	 eax, eax
  00024	0f 45 f0	 cmovne	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 132  : 		if(end-begin>5 && IsValidToken(begin))

  00027	8b c7		 mov	 eax, edi
  00029	2b c6		 sub	 eax, esi
  0002b	83 f8 05	 cmp	 eax, 5
  0002e	7e 0d		 jle	 SHORT $LN4@FindToken
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ?IsValidToken@@YA_NPBD@Z ; IsValidToken
  00036	83 c4 04	 add	 esp, 4
  00039	84 c0		 test	 al, al
  0003b	75 0b		 jne	 SHORT $LN15@FindToken
$LN4@FindToken:

; 135  : 		}
; 136  : 		else
; 137  : 		{
; 138  : 			++begin;

  0003d	46		 inc	 esi
  0003e	3b f7		 cmp	 esi, edi
  00040	72 ce		 jb	 SHORT $LL2@FindToken
$LN18@FindToken:

; 139  : 		}
; 140  : 	}
; 141  : 
; 142  : 	return end;

  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi

; 143  : }

  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN15@FindToken:
  00048	5f		 pop	 edi

; 133  : 		{
; 134  : 			return begin;

  00049	8b c6		 mov	 eax, esi

; 143  : }

  0004b	5e		 pop	 esi
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?FindToken@@YAPBDPBD0@Z ENDP				; FindToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicTextInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicTextInstance@@UAEPAXI@Z PROC		; CGraphicTextInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicTextInstance@@UAE@XZ ; CGraphicTextInstance::~CGraphicTextInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 90 00 00 00	 push	 144			; 00000090H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCGraphicTextInstance@@UAEPAXI@Z ENDP		; CGraphicTextInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Delete@CGraphicTextInstance@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkInst$ = 8						; size = 4
?Delete@CGraphicTextInstance@@SAXPAV1@@Z PROC		; CGraphicTextInstance::Delete, COMDAT

; 1050 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1051 : 	pkInst->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkInst$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CGraphicTextInstance@@QAEXXZ ; CGraphicTextInstance::Destroy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1052 : 	ms_kPool.Free(pkInst);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1053 : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Emplace_reallocate<CGraphicTextInstance * const &>
  00039	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1053 : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CGraphicTextInstance@@SAXPAV1@@Z ENDP		; CGraphicTextInstance::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?New@CGraphicTextInstance@@SAPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@CGraphicTextInstance@@SAPAV1@XZ PROC		; CGraphicTextInstance::New, COMDAT

; 1045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CGraphicTextInstance@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20
  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16, ecx
  00030	0f 85 87 00 00
	00		 jne	 $LN4@New

; 65   : 				T* pkNewData=new T;

  00036	68 90 00 00 00	 push	 144			; 00000090H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0b		 je	 SHORT $LN6@New
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ??0CGraphicTextInstance@@QAE@XZ ; CGraphicTextInstance::CGraphicTextInstance
  00058	8b f0		 mov	 esi, eax
  0005a	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  0005c	33 f6		 xor	 esi, esi
$LN7@New:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  0005e	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 65   : 				T* pkNewData=new T;

  00063	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006a	89 75 f0	 mov	 DWORD PTR _pkNewData$3[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  0006d	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+12
  00073	74 21		 je	 SHORT $LN14@New

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00075	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1046 : 	return ms_kPool.Alloc();

  00077	8b c6		 mov	 eax, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 716  :         ++_Mylast;

  00079	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+8, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  00080	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+32
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1047 : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN14@New:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00096	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$3[ebp]
  00099	51		 push	 ecx
  0009a	50		 push	 eax
  0009b	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+4
  000a0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicTextInstance@@@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@QAEPAPAVCGraphicTextInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Emplace_reallocate<CGraphicTextInstance * const &>
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  000a5	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+32
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1046 : 	return ms_kPool.Alloc();

  000ab	8b c6		 mov	 eax, esi

; 1047 : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5e		 pop	 esi
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN4@New:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000bd	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1611 :         return _My_data._Mylast[-1];

  000c0	83 c1 fc	 add	 ecx, -4			; fffffffcH

; 1390 :         --_Mylast;

  000c3	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1047 : }

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CGraphicTextInstance@@SAPAV1@XZ$0:
  00000	68 90 00 00 00	 push	 144			; 00000090H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?New@CGraphicTextInstance@@SAPAV1@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CGraphicTextInstance@@SAPAV1@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CGraphicTextInstance@@SAPAV1@XZ ENDP		; CGraphicTextInstance::New
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?DestroySystem@CGraphicTextInstance@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CGraphicTextInstance@@SAXXZ PROC		; CGraphicTextInstance::DestroySystem, COMDAT

; 1040 : {

  00000	56		 push	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1040 : {

  00007	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 231  :     const auto _ULast = _Get_unwrapped(_Last);

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+8

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 2a		 je	 SHORT $LN30@DestroySys
$LL20@DestroySys:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 110  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN18@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN18@DestroySys:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00025	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+4
  0002a	a3 08 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+8, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1042 : }

  0002f	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16
  00034	5f		 pop	 edi
  00035	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20, eax
  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
$LN30@DestroySys:
  0003c	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16
  00041	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 51   : 			m_kVct_pkData.clear();

  00042	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+8, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1042 : }

  00048	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+20, eax
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
?DestroySystem@CGraphicTextInstance@@SAXXZ ENDP		; CGraphicTextInstance::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?CreateSystem@CGraphicTextInstance@@SAXI@Z
_TEXT	SEGMENT
_uCapacity$ = 8						; size = 4
?CreateSystem@CGraphicTextInstance@@SAXI@Z PROC		; CGraphicTextInstance::CreateSystem, COMDAT

; 1035 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00003	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+12
  00008	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1035 : {

  0000e	56		 push	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 57   : 			m_uInitCapacity=uCapacity;

  0000f	8b 75 08	 mov	 esi, DWORD PTR _uCapacity$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00012	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Pool.h

; 57   : 			m_uInitCapacity=uCapacity;

  00015	89 35 1c 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+28, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1358 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0001b	3b f0		 cmp	 esi, eax
  0001d	76 13		 jbe	 SHORT $LN6@CreateSyst

; 1359 :             if (_Newcapacity > max_size()) {

  0001f	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00025	77 33		 ja	 SHORT $LN19@CreateSyst

; 1361 :             }
; 1362 : 
; 1363 :             _Reallocate_exactly(_Newcapacity);

  00027	56		 push	 esi
  00028	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+4
  0002d	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Reallocate_exactly
$LN6@CreateSyst:

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00032	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+24
  00037	2b 05 10 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16
  0003d	c1 f8 02	 sar	 eax, 2

; 1358 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00040	3b f0		 cmp	 esi, eax
  00042	76 13		 jbe	 SHORT $LN13@CreateSyst

; 1359 :             if (_Newcapacity > max_size()) {

  00044	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0004a	77 0e		 ja	 SHORT $LN19@CreateSyst

; 1361 :             }
; 1362 : 
; 1363 :             _Reallocate_exactly(_Newcapacity);

  0004c	56		 push	 esi
  0004d	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicTextInstance@@2V?$CDynamicPool@VCGraphicTextInstance@@@@A+16
  00052	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Reallocate_exactly
$LN13@CreateSyst:
  00057	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1037 : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN19@CreateSyst:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1360 :                 _Xlength();

  0005a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicTextInstance@@V?$allocator@PAVCGraphicTextInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicTextInstance *,std::allocator<CGraphicTextInstance *> >::_Xlength
$LN20@CreateSyst:
  0005f	cc		 int	 3
?CreateSystem@CGraphicTextInstance@@SAXI@Z ENDP		; CGraphicTextInstance::CreateSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::~vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >, COMDAT
; _this$ = ecx

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 704  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00050	cc		 int	 3
??1?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::~vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@AAEXPAUSHyperlink@CGraphicTextInstance@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@AAEXPAUSHyperlink@CGraphicTextInstance@@0@Z PROC ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Destroy, COMDAT
; _this$ = ecx

; 1665 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 904  :         for (; _First != _Last; ++_First) {

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 0f		 je	 SHORT $LN5@Destroy
  0000f	90		 npad	 1
$LL6@Destroy:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
  00017	83 c6 1c	 add	 esi, 28			; 0000001cH
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL6@Destroy
$LN5@Destroy:
  0001e	5f		 pop	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1668 :     }

  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?_Destroy@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@AAEXPAUSHyperlink@CGraphicTextInstance@@0@Z ENDP ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?clear@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEXXZ PROC ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::clear, COMDAT
; _this$ = ecx

; 1436 :     _CONSTEXPR20_CONTAINER void clear() noexcept { // erase all

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 1437 :         auto& _My_data    = _Mypair._Myval2;
; 1438 :         pointer& _Myfirst = _My_data._Myfirst;
; 1439 :         pointer& _Mylast  = _My_data._Mylast;
; 1440 : 
; 1441 :         _My_data._Orphan_all();
; 1442 :         _Destroy(_Myfirst, _Mylast);

  00005	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00008	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 904  :         for (; _First != _Last; ++_First) {

  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 19		 je	 SHORT $LN19@clear
  0000e	66 90		 npad	 2
$LL8@clear:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
  00017	83 c6 1c	 add	 esi, 28			; 0000001cH
  0001a	3b f3		 cmp	 esi, ebx
  0001c	75 f2		 jne	 SHORT $LL8@clear
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1443 :         _Mylast = _Myfirst;

  0001e	8b 07		 mov	 eax, DWORD PTR [edi]
  00020	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00023	5f		 pop	 edi

; 1444 :     }

  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	c3		 ret	 0
$LN19@clear:

; 1443 :         _Mylast = _Myfirst;

  00027	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0002a	5f		 pop	 edi

; 1444 :     }

  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	c3		 ret	 0
?clear@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEXXZ ENDP ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::~vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >, COMDAT
; _this$ = ecx

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 75		 je	 SHORT $LN4@vector

; 1751 :             _Destroy(_Myfirst, _Mylast);

  0000a	53		 push	 ebx
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 904  :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 10		 je	 SHORT $LN10@vector
$LL11@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
  00019	83 c6 1c	 add	 esi, 28			; 0000001cH
  0001c	3b f3		 cmp	 esi, ebx
  0001e	75 f2		 jne	 SHORT $LL11@vector
  00020	8b 37		 mov	 esi, DWORD PTR [edi]
$LN10@vector:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00022	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00025	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0002a	2b ce		 sub	 ecx, esi
  0002c	f7 e9		 imul	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	5b		 pop	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0002f	03 d1		 add	 edx, ecx
  00031	c1 fa 04	 sar	 edx, 4
  00034	8b c2		 mov	 eax, edx
  00036	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00039	03 c2		 add	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00042	2b c8		 sub	 ecx, eax
  00044	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00047	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004d	72 12		 jb	 SHORT $LN32@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004f	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00052	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00055	2b f0		 sub	 esi, eax

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00057	83 c6 fc	 add	 esi, -4			; fffffffcH
  0005a	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  0005d	77 23		 ja	 SHORT $LN29@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0005f	8b f0		 mov	 esi, eax
$LN32@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00061	51		 push	 ecx
  00062	56		 push	 esi
  00063	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00068	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006e	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00071	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1756 :             _Myend   = nullptr;

  00078	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0007f	5f		 pop	 edi

; 704  :     }

  00080	5e		 pop	 esi
  00081	c3		 ret	 0
$LN29@vector:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00082	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN41@vector:
  00087	cc		 int	 3
??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::~vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@USHyperlink@CGraphicTextInstance@@@std@@QAEXQAUSHyperlink@CGraphicTextInstance@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USHyperlink@CGraphicTextInstance@@@std@@QAEXQAUSHyperlink@CGraphicTextInstance@@I@Z PROC ; std::allocator<CGraphicTextInstance::SHyperlink>::deallocate, COMDAT
; _this$ = ecx

; 795  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 796  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0000d	2b c8		 sub	 ecx, eax
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00012	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN15@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 10		 ja	 SHORT $LN12@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8

; 798  :     }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN12@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00042	cc		 int	 3
?deallocate@?$allocator@USHyperlink@CGraphicTextInstance@@@std@@QAEXQAUSHyperlink@CGraphicTextInstance@@I@Z ENDP ; std::allocator<CGraphicTextInstance::SHyperlink>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 704  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00050	cc		 int	 3
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::~vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >, COMDAT
; _this$ = ecx

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 704  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00050	cc		 int	 3
??1?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::~vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
;	COMDAT ??1?$CRef@VCGraphicText@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CRef@VCGraphicText@@@@QAE@XZ PROC			; CRef<CGraphicText>::~CRef<CGraphicText>, COMDAT
; _this$ = ecx

; 37   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CRef@VCGraphicText@@@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 53   : 			if (m_pObject)

  00025	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00027	85 c9		 test	 ecx, ecx
  00029	74 0b		 je	 SHORT $LN4@CRef

; 54   : 			{
; 55   : 				m_pObject->Release();

  0002b	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 56   : 				m_pObject = NULL;

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN4@CRef:

; 38   : 			Clear();
; 39   : 		}

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	5e		 pop	 esi
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CRef@VCGraphicText@@@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CRef@VCGraphicText@@@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CRef@VCGraphicText@@@@QAE@XZ ENDP			; CRef<CGraphicText>::~CRef<CGraphicText>
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AAEXQAIII@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AAEXQAIII@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 1740 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AAEXQAIII@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >, COMDAT
; _this$ = ecx

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 704  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00050	cc		 int	 3
??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
_TEXT	SEGMENT
??1SHyperlink@CGraphicTextInstance@@QAE@XZ PROC		; CGraphicTextInstance::SHyperlink::~SHyperlink, COMDAT
; _this$ = ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00006	83 f9 08	 cmp	 ecx, 8

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 2e		 jb	 SHORT $LN15@SHyperlink
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000e	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN25@SHyperlink

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 22		 ja	 SHORT $LN22@SHyperlink

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN25@SHyperlink:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN15@SHyperlink:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00039	33 c0		 xor	 eax, eax
  0003b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00042	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
  00049	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
$LN22@SHyperlink:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN31@SHyperlink:
  00054	cc		 int	 3
??1SHyperlink@CGraphicTextInstance@@QAE@XZ ENDP		; CGraphicTextInstance::SHyperlink::~SHyperlink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
tv563 = 11						; size = 1
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z PROC	; CGraphicTextInstance::__GetTextPos, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	0f 57 c9	 xorps	 xmm1, xmm1
  0000a	57		 push	 edi
  0000b	0f 57 d2	 xorps	 xmm2, xmm2
  0000e	0f 57 db	 xorps	 xmm3, xmm3
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00011	8b 5e 64	 mov	 ebx, DWORD PTR [esi+100]
  00014	8b 7e 60	 mov	 edi, DWORD PTR [esi+96]
  00017	2b df		 sub	 ebx, edi
  00019	c1 fb 02	 sar	 ebx, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 80   : 	index = min(index, m_pCharInfoVector.size());

  0001c	39 5d 08	 cmp	 DWORD PTR _index$[ebp], ebx
  0001f	0f 42 5d 08	 cmovb	 ebx, DWORD PTR _index$[ebp]
  00023	33 c9		 xor	 ecx, ecx

; 81   : 
; 82   : 	float sx = 0;
; 83   : 	float sy = 0;
; 84   : 	float fFontMaxHeight = 0;
; 85   : 
; 86   : 	for(DWORD i=0; i<index; ++i)

  00025	85 db		 test	 ebx, ebx
  00027	74 7f		 je	 SHORT $LN3@GetTextPos

; 87   : 	{
; 88   : 		if (sx+float(m_pCharInfoVector[i]->width) > m_fLimitWidth)

  00029	f3 0f 10 66 14	 movss	 xmm4, DWORD PTR [esi+20]

; 92   : 		}
; 93   : 		
; 94   : #ifdef ENABLE_MULTI_TEXTLINE
; 95   : 		if(m_isEnterToken && std::find(m_vLineCutPos.begin(), m_vLineCutPos.end(), i) != m_vLineCutPos.end())

  0002e	8a 56 1b	 mov	 dl, BYTE PTR [esi+27]
$LL4@GetTextPos:

; 87   : 	{
; 88   : 		if (sx+float(m_pCharInfoVector[i]->width) > m_fLimitWidth)

  00031	8b 3c 8f	 mov	 edi, DWORD PTR [edi+ecx*4]
  00034	0f bf 47 02	 movsx	 eax, WORD PTR [edi+2]
  00038	66 0f 6e c0	 movd	 xmm0, eax
  0003c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0003f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00043	0f 2f c4	 comiss	 xmm0, xmm4
  00046	76 0a		 jbe	 SHORT $LN5@GetTextPos

; 89   : 		{
; 90   : 			sx = 0;
; 91   : 			sy += fFontMaxHeight;

  00048	0f 28 c3	 movaps	 xmm0, xmm3
  0004b	0f 57 c9	 xorps	 xmm1, xmm1
  0004e	f3 0f 58 d0	 addss	 xmm2, xmm0
$LN5@GetTextPos:

; 92   : 		}
; 93   : 		
; 94   : #ifdef ENABLE_MULTI_TEXTLINE
; 95   : 		if(m_isEnterToken && std::find(m_vLineCutPos.begin(), m_vLineCutPos.end(), i) != m_vLineCutPos.end())

  00052	84 d2		 test	 dl, dl
  00054	74 33		 je	 SHORT $LN6@GetTextPos
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00056	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00059	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  0005c	3b c2		 cmp	 eax, edx
  0005e	74 26		 je	 SHORT $LN68@GetTextPos
$LL45@GetTextPos:

; 5186 :         if (*_First == _Val) {

  00060	39 08		 cmp	 DWORD PTR [eax], ecx
  00062	74 09		 je	 SHORT $LN67@GetTextPos

; 5185 :     for (; _First != _Last; ++_First) {

  00064	83 c0 04	 add	 eax, 4
  00067	3b c2		 cmp	 eax, edx
  00069	75 f5		 jne	 SHORT $LL45@GetTextPos
  0006b	eb 19		 jmp	 SHORT $LN68@GetTextPos
$LN67@GetTextPos:
  0006d	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 98   : 			sy += i ? m_iLineHeight : 0;

  00070	85 c9		 test	 ecx, ecx
  00072	74 05		 je	 SHORT $LN10@GetTextPos
  00074	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00077	eb 02		 jmp	 SHORT $LN11@GetTextPos
$LN10@GetTextPos:
  00079	33 c0		 xor	 eax, eax
$LN11@GetTextPos:
  0007b	66 0f 6e c0	 movd	 xmm0, eax
  0007f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00082	f3 0f 58 d0	 addss	 xmm2, xmm0
$LN68@GetTextPos:

; 99   : 		}
; 100  : #endif
; 101  : 
; 102  : 		sx += float(m_pCharInfoVector[i]->advance);

  00086	8a 56 1b	 mov	 dl, BYTE PTR [esi+27]
$LN6@GetTextPos:

; 103  : 		fFontMaxHeight = max(float(m_pCharInfoVector[i]->height), fFontMaxHeight);

  00089	0f bf 47 04	 movsx	 eax, WORD PTR [edi+4]
  0008d	41		 inc	 ecx
  0008e	f3 0f 58 4f 18	 addss	 xmm1, DWORD PTR [edi+24]
  00093	8b 7e 60	 mov	 edi, DWORD PTR [esi+96]
  00096	66 0f 6e c0	 movd	 xmm0, eax
  0009a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0009d	f3 0f 5f c3	 maxss	 xmm0, xmm3
  000a1	0f 28 d8	 movaps	 xmm3, xmm0
  000a4	3b cb		 cmp	 ecx, ebx
  000a6	72 89		 jb	 SHORT $LL4@GetTextPos
$LN3@GetTextPos:

; 104  : 	}
; 105  : 
; 106  : 	*x = sx;

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]

; 107  : 	*y = sy;

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  000b2	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b5	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2

; 108  : }

  000b9	5d		 pop	 ebp
  000ba	c2 0c 00	 ret	 12			; 0000000cH
?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z ENDP	; CGraphicTextInstance::__GetTextPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z
_TEXT	SEGMENT
_pFontTexture$ = 8					; size = 4
_codePage$ = 12						; size = 2
_text$ = 16						; size = 2
_pInsCharInfo$ = 16					; size = 4
_dwColor$ = 20						; size = 4
?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z PROC ; CGraphicTextInstance::__DrawCharacter, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 63   : 	CGraphicFontTexture::TCharacterInfomation* pInsCharInfo = pFontTexture->GetCharacterInfomation(codePage, text);

  00005	ff 75 10	 push	 DWORD PTR _text$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pFontTexture$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR _codePage$[ebp]
  00010	e8 00 00 00 00	 call	 ?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z ; CGraphicFontTexture::GetCharacterInfomation
  00015	8b f8		 mov	 edi, eax
  00017	89 7d 10	 mov	 DWORD PTR _pInsCharInfo$[ebp], edi

; 64   : 
; 65   : 	if (pInsCharInfo)

  0001a	85 ff		 test	 edi, edi
  0001c	74 78		 je	 SHORT $LN2@DrawCharac
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  0001e	8b 53 70	 mov	 edx, DWORD PTR [ebx+112]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 67   : 		m_dwColorInfoVector.push_back(dwColor);

  00021	8d 4b 6c	 lea	 ecx, DWORD PTR [ebx+108]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00024	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00027	74 0b		 je	 SHORT $LN9@DrawCharac

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00029	8b 45 14	 mov	 eax, DWORD PTR _dwColor$[ebp]
  0002c	89 02		 mov	 DWORD PTR [edx], eax

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  0002e	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00032	eb 0a		 jmp	 SHORT $LN8@DrawCharac
$LN9@DrawCharac:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00034	8d 45 14	 lea	 eax, DWORD PTR _dwColor$[ebp]
  00037	50		 push	 eax
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
$LN8@DrawCharac:

; 730  :         if (_Mylast != _My_data._Myend) {

  0003e	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 68   : 		m_pCharInfoVector.push_back(pInsCharInfo);

  00041	8d 4b 60	 lea	 ecx, DWORD PTR [ebx+96]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00044	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00047	74 08		 je	 SHORT $LN16@DrawCharac

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00049	89 38		 mov	 DWORD PTR [eax], edi

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  0004b	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0004f	eb 0a		 jmp	 SHORT $LN15@DrawCharac
$LN16@DrawCharac:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00051	8d 55 10	 lea	 edx, DWORD PTR _pInsCharInfo$[ebp]
  00054	52		 push	 edx
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSCharacterInfomation@CGraphicFontTexture@@@?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAEPAPAUSCharacterInfomation@CGraphicFontTexture@@QAPAU23@ABQAU23@@Z ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::_Emplace_reallocate<CGraphicFontTexture::SCharacterInfomation * const &>
$LN15@DrawCharac:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 70   : 		m_textWidth += pInsCharInfo->advance;

  0005b	0f b7 43 0c	 movzx	 eax, WORD PTR [ebx+12]

; 71   : 		m_textHeight = max(pInsCharInfo->height, m_textHeight);

  0005f	0f b7 4b 0e	 movzx	 ecx, WORD PTR [ebx+14]
  00063	56		 push	 esi
  00064	66 0f 6e c0	 movd	 xmm0, eax
  00068	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0006b	f3 0f 58 47 18	 addss	 xmm0, DWORD PTR [edi+24]
  00070	f3 0f 2c c0	 cvttss2si eax, xmm0
  00074	66 89 43 0c	 mov	 WORD PTR [ebx+12], ax
  00078	8b c1		 mov	 eax, ecx
  0007a	0f bf 77 04	 movsx	 esi, WORD PTR [edi+4]
  0007e	3b f1		 cmp	 esi, ecx
  00080	0f b7 d6	 movzx	 edx, si

; 72   : 		return pInsCharInfo->advance;

  00083	5e		 pop	 esi
  00084	0f 4e d0	 cmovle	 edx, eax
  00087	66 89 53 0e	 mov	 WORD PTR [ebx+14], dx
  0008b	f3 0f 2c 47 18	 cvttss2si eax, DWORD PTR [edi+24]
  00090	5f		 pop	 edi

; 76   : }

  00091	5b		 pop	 ebx
  00092	5d		 pop	 ebp
  00093	c2 10 00	 ret	 16			; 00000010H
$LN2@DrawCharac:
  00096	5f		 pop	 edi

; 73   : 	}
; 74   : 
; 75   : 	return 0;

  00097	33 c0		 xor	 eax, eax

; 76   : }

  00099	5b		 pop	 ebx
  0009a	5d		 pop	 ebp
  0009b	c2 10 00	 ret	 16			; 00000010H
?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ENDP ; CGraphicTextInstance::__DrawCharacter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?__Initialize@CGraphicTextInstance@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CGraphicTextInstance@@IAEXXZ PROC		; CGraphicTextInstance::__Initialize, COMDAT
; _this$ = ecx

; 1291 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 67   : 			CReferenceObject* pOldObject = m_pObject;

  00003	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]

; 68   : 
; 69   : 			m_pObject = pObject;

  00006	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 70   : 
; 71   : 			if (m_pObject)
; 72   : 				m_pObject->AddReference();
; 73   : 
; 74   : 			if (pOldObject)

  0000d	85 c9		 test	 ecx, ecx
  0000f	74 05		 je	 SHORT $LN7@Initialize

; 75   : 				pOldObject->Release();

  00011	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN7@Initialize:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1309 : 	m_textWidth = 0;

  00016	33 c0		 xor	 eax, eax
  00018	c7 46 10 01 10
	00 00		 mov	 DWORD PTR [esi+16], 4097 ; 00001001H
  0001f	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 1310 : 	m_textHeight = 0;
; 1311 : 
; 1312 : 	m_v3Position.x = m_v3Position.y = m_v3Position.z = 0.0f;

  00022	89 46 54	 mov	 DWORD PTR [esi+84], eax
  00025	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00028	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 1313 : 
; 1314 : 	m_dwOutLineColor=0xff000000;
; 1315 : #ifdef ENABLE_MULTI_TEXTLINE
; 1316 : 	m_isEnterToken = true;
; 1317 : 	m_iLineHeight = 12; // default line height
; 1318 : 	m_vLineCutPos.clear();

  0002b	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0002e	c7 46 14 00 00
	c8 44		 mov	 DWORD PTR [esi+20], 1153957888 ; 44c80000H
  00035	c7 46 18 00 00
	00 01		 mov	 DWORD PTR [esi+24], 16777216 ; 01000000H
  0003c	c6 46 2c 00	 mov	 BYTE PTR [esi+44], 0
  00040	c7 46 30 00 00
	00 3f		 mov	 DWORD PTR [esi+48], 1056964608 ; 3f000000H
  00047	c6 46 58 00	 mov	 BYTE PTR [esi+88], 0
  0004b	c7 46 08 00 00
	00 ff		 mov	 DWORD PTR [esi+8], -16777216 ; ff000000H
  00052	c7 46 1c 0c 00
	00 00		 mov	 DWORD PTR [esi+28], 12	; 0000000cH
  00059	89 46 24	 mov	 DWORD PTR [esi+36], eax
  0005c	5e		 pop	 esi

; 1319 : #endif
; 1320 : }

  0005d	c3		 ret	 0
?__Initialize@CGraphicTextInstance@@IAEXXZ ENDP		; CGraphicTextInstance::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetHorizontalAlign@CGraphicTextInstance@@QAEHXZ
_TEXT	SEGMENT
?GetHorizontalAlign@CGraphicTextInstance@@QAEHXZ PROC	; CGraphicTextInstance::GetHorizontalAlign, COMDAT
; _this$ = ecx

; 1287 : 	return m_hAlign;

  00000	0f b6 41 10	 movzx	 eax, BYTE PTR [ecx+16]

; 1288 : }

  00004	c3		 ret	 0
?GetHorizontalAlign@CGraphicTextInstance@@QAEHXZ ENDP	; CGraphicTextInstance::GetHorizontalAlign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z
_TEXT	SEGMENT
_iPixelPosition$ = 8					; size = 4
?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z PROC ; CGraphicTextInstance::PixelPositionToCharacterPosition, COMDAT
; _this$ = ecx

; 1271 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1273 : 	for (int i = 0; i < (int)m_pCharInfoVector.size(); ++i)

  00006	33 c0		 xor	 eax, eax
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 79 64	 mov	 edi, DWORD PTR [ecx+100]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1272 : 	int icurPosition = 0;

  0000e	33 f6		 xor	 esi, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00010	2b fa		 sub	 edi, edx
  00012	c1 ff 02	 sar	 edi, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1273 : 	for (int i = 0; i < (int)m_pCharInfoVector.size(); ++i)

  00015	85 ff		 test	 edi, edi
  00017	7e 1b		 jle	 SHORT $LN3@PixelPosit
  00019	8b 5d 08	 mov	 ebx, DWORD PTR _iPixelPosition$[ebp]
  0001c	0f 1f 40 00	 npad	 4
$LL4@PixelPosit:

; 1274 : 	{
; 1275 : 		CGraphicFontTexture::TCharacterInfomation* pCurCharInfo = m_pCharInfoVector[i];
; 1276 : 		icurPosition += pCurCharInfo->width;

  00020	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00022	0f bf 49 02	 movsx	 ecx, WORD PTR [ecx+2]
  00026	03 f1		 add	 esi, ecx

; 1277 : 
; 1278 : 		if (iPixelPosition < icurPosition)

  00028	3b de		 cmp	 ebx, esi
  0002a	7c 0b		 jl	 SHORT $LN1@PixelPosit

; 1273 : 	for (int i = 0; i < (int)m_pCharInfoVector.size(); ++i)

  0002c	40		 inc	 eax
  0002d	83 c2 04	 add	 edx, 4
  00030	3b c7		 cmp	 eax, edi
  00032	7c ec		 jl	 SHORT $LL4@PixelPosit
$LN3@PixelPosit:

; 1279 : 			return i;
; 1280 : 	}
; 1281 : 
; 1282 : 	return -1;

  00034	83 c8 ff	 or	 eax, -1
$LN1@PixelPosit:
  00037	5f		 pop	 edi

; 1283 : }

  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z ENDP ; CGraphicTextInstance::PixelPositionToCharacterPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetLineHeight@CGraphicTextInstance@@QAEGXZ
_TEXT	SEGMENT
?GetLineHeight@CGraphicTextInstance@@QAEGXZ PROC	; CGraphicTextInstance::GetLineHeight, COMDAT
; _this$ = ecx

; 1253 : 	return m_textHeight;

  00000	66 8b 41 0e	 mov	 ax, WORD PTR [ecx+14]

; 1254 : }

  00004	c3		 ret	 0
?GetLineHeight@CGraphicTextInstance@@QAEGXZ ENDP	; CGraphicTextInstance::GetLineHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetTextLineCount@CGraphicTextInstance@@QAEGXZ
_TEXT	SEGMENT
?GetTextLineCount@CGraphicTextInstance@@QAEGXZ PROC	; CGraphicTextInstance::GetTextLineCount, COMDAT
; _this$ = ecx

; 1219 : {

  00000	53		 push	 ebx
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	0f 57 c0	 xorps	 xmm0, xmm0

; 1220 : 	CGraphicFontTexture::TCharacterInfomation* pCurCharInfo;
; 1221 : 	CGraphicFontTexture::TPCharacterInfomationVector::iterator itor;
; 1222 : 
; 1223 : 	float fx = 0.0f;
; 1224 : 	WORD wLineCount = 1;

  00007	bb 01 00 00 00	 mov	 ebx, 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000c	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  0000f	8b 57 64	 mov	 edx, DWORD PTR [edi+100]
  00012	3b c2		 cmp	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1225 : 	for (itor=m_pCharInfoVector.begin(); itor!=m_pCharInfoVector.end(); ++itor)

  00014	74 47		 je	 SHORT $LN3@GetTextLin

; 1231 : 		//float fFontHeight=float(pCurCharInfo->height);
; 1232 : 
; 1233 : 		if (fx+fFontWidth > m_fLimitWidth)

  00016	f3 0f 10 5f 14	 movss	 xmm3, DWORD PTR [edi+20]
  0001b	56		 push	 esi
  0001c	0f 1f 40 00	 npad	 4
$LL21@GetTextLin:

; 1226 : 	{
; 1227 : 		pCurCharInfo = *itor;
; 1228 : 
; 1229 : 		float fFontWidth=float(pCurCharInfo->width);
; 1230 : 		float fFontAdvance=float(pCurCharInfo->advance);

  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	f3 0f 10 51 18	 movss	 xmm2, DWORD PTR [ecx+24]

; 1231 : 		//float fFontHeight=float(pCurCharInfo->height);
; 1232 : 
; 1233 : 		if (fx+fFontWidth > m_fLimitWidth)

  00027	0f bf 49 02	 movsx	 ecx, WORD PTR [ecx+2]
  0002b	66 0f 6e c9	 movd	 xmm1, ecx
  0002f	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00032	f3 0f 58 c8	 addss	 xmm1, xmm0
  00036	0f 2f cb	 comiss	 xmm1, xmm3
  00039	76 03		 jbe	 SHORT $LN5@GetTextLin
  0003b	0f 57 c0	 xorps	 xmm0, xmm0
$LN5@GetTextLin:

; 1239 : 		fx += fFontAdvance;

  0003e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00041	0f b7 f1	 movzx	 esi, cx
  00044	f3 0f 58 c2	 addss	 xmm0, xmm2
  00048	0f b7 cb	 movzx	 ecx, bx
  0004b	0f 46 f1	 cmovbe	 esi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  0004e	83 c0 04	 add	 eax, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1239 : 		fx += fFontAdvance;

  00051	0f b7 ce	 movzx	 ecx, si
  00054	8b f1		 mov	 esi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00056	8b d9		 mov	 ebx, ecx

; 150  :         return _Ptr == _Right._Ptr;

  00058	3b c2		 cmp	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1225 : 	for (itor=m_pCharInfoVector.begin(); itor!=m_pCharInfoVector.end(); ++itor)

  0005a	75 c4		 jne	 SHORT $LL21@GetTextLin
  0005c	5e		 pop	 esi
$LN3@GetTextLin:

; 1242 : 	if(m_isEnterToken && m_vLineCutPos.size())

  0005d	80 7f 1b 00	 cmp	 BYTE PTR [edi+27], 0
  00061	74 0d		 je	 SHORT $LN6@GetTextLin
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00063	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00066	2b 47 20	 sub	 eax, DWORD PTR [edi+32]
  00069	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1242 : 	if(m_isEnterToken && m_vLineCutPos.size())

  0006c	85 c0		 test	 eax, eax
  0006e	75 03		 jne	 SHORT $LN1@GetTextLin
$LN6@GetTextLin:

; 1243 : 	{
; 1244 : 		return m_vLineCutPos.size();
; 1245 : 	}
; 1246 : #endif
; 1247 : 	return wLineCount;

  00070	66 8b c3	 mov	 ax, bx
$LN1@GetTextLin:
  00073	5f		 pop	 edi

; 1248 : }

  00074	5b		 pop	 ebx
  00075	c3		 ret	 0
?GetTextLineCount@CGraphicTextInstance@@QAEGXZ ENDP	; CGraphicTextInstance::GetTextLineCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CGraphicTextInstance::GetValueStringReference, COMDAT
; _this$ = ecx

; 1215 : 	return m_stText;

  00000	8d 41 34	 lea	 eax, DWORD PTR [ecx+52]

; 1216 : }

  00003	c3		 ret	 0
?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CGraphicTextInstance::GetValueStringReference
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z
_TEXT	SEGMENT
_pRetWidth$ = 8						; size = 4
_pRetHeight$ = 12					; size = 4
?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z PROC	; CGraphicTextInstance::GetTextSize, COMDAT
; _this$ = ecx

; 1258 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 1260 : 	if(m_isEnterToken && m_vLineCutPos.size())

  00005	80 7a 1b 00	 cmp	 BYTE PTR [edx+27], 0
  00009	74 13		 je	 SHORT $LN2@GetTextSiz
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0000e	2b 42 20	 sub	 eax, DWORD PTR [edx+32]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1260 : 	if(m_isEnterToken && m_vLineCutPos.size())

  00011	a9 fc ff ff ff	 test	 eax, -4			; fffffffcH
  00016	74 06		 je	 SHORT $LN2@GetTextSiz

; 1268 : }

  00018	5d		 pop	 ebp

; 1261 : 	{
; 1262 : 		GetMultiTextSize(pRetWidth, pRetHeight);

  00019	e9 00 00 00 00	 jmp	 ?GetMultiTextSize@CGraphicTextInstance@@QAEXPAH0@Z ; CGraphicTextInstance::GetMultiTextSize
$LN2@GetTextSiz:

; 1263 : 		return;
; 1264 : 	}
; 1265 : #endif
; 1266 : 	*pRetWidth = m_textWidth;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _pRetWidth$[ebp]
  00021	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  00025	89 08		 mov	 DWORD PTR [eax], ecx

; 1267 : 	*pRetHeight = m_textHeight;

  00027	8b 45 0c	 mov	 eax, DWORD PTR _pRetHeight$[ebp]
  0002a	0f b7 4a 0e	 movzx	 ecx, WORD PTR [edx+14]
  0002e	89 08		 mov	 DWORD PTR [eax], ecx

; 1268 : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z ENDP	; CGraphicTextInstance::GetTextSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetTextWidth@CGraphicTextInstance@@QAEMH@Z
_TEXT	SEGMENT
tv488 = -4						; size = 4
_iWidth$ = -4						; size = 4
_iStart$ = 8						; size = 4
?GetTextWidth@CGraphicTextInstance@@QAEMH@Z PROC	; CGraphicTextInstance::GetTextWidth, COMDAT
; _this$ = ecx

; 1409 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	0f 57 c9	 xorps	 xmm1, xmm1

; 1412 : 	
; 1413 : 	for (int i = iStart; i < (int)m_pCharInfoVector.size(); ++i)

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _iStart$[ebp]
  0000d	8b d1		 mov	 edx, ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00011	8b 7b 64	 mov	 edi, DWORD PTR [ebx+100]
  00014	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]
  00017	2b f8		 sub	 edi, eax
  00019	c1 ff 02	 sar	 edi, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1411 : 	float iWidth = 0;

  0001c	f3 0f 11 4d fc	 movss	 DWORD PTR _iWidth$[ebp], xmm1

; 1412 : 	
; 1413 : 	for (int i = iStart; i < (int)m_pCharInfoVector.size(); ++i)

  00021	3b cf		 cmp	 ecx, edi
  00023	7d 4b		 jge	 SHORT $LN3@GetTextWid
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00025	8d 34 88	 lea	 esi, DWORD PTR [eax+ecx*4]
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetTextWid:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1417 : 		float fFontAdvance = float(pCurCharInfo->advance);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]

; 1418 : 
; 1419 : 		if(i != iStart && (std::find(m_vLineCutPos.begin(), m_vLineCutPos.end(), i) != m_vLineCutPos.end()))

  00037	3b d1		 cmp	 edx, ecx
  00039	74 18		 je	 SHORT $LN49@GetTextWid
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0003b	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  0003e	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  00041	3b c1		 cmp	 eax, ecx
  00043	74 0b		 je	 SHORT $LN60@GetTextWid
$LL38@GetTextWid:

; 5186 :         if (*_First == _Val) {

  00045	39 10		 cmp	 DWORD PTR [eax], edx
  00047	74 27		 je	 SHORT $LN3@GetTextWid

; 5185 :     for (; _First != _Last; ++_First) {

  00049	83 c0 04	 add	 eax, 4
  0004c	3b c1		 cmp	 eax, ecx
  0004e	75 f5		 jne	 SHORT $LL38@GetTextWid
$LN60@GetTextWid:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1421 : 		else if(i == (int)m_pCharInfoVector.size() - 1)

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _iStart$[ebp]
$LN49@GetTextWid:
  00053	f3 0f 58 c8	 addss	 xmm1, xmm0
  00057	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0005a	f3 0f 11 4d fc	 movss	 DWORD PTR tv488[ebp], xmm1
  0005f	3b d0		 cmp	 edx, eax
  00061	74 19		 je	 SHORT $LN51@GetTextWid

; 1423 : 		
; 1424 : 		iWidth += fFontAdvance;

  00063	42		 inc	 edx
  00064	f3 0f 11 4d fc	 movss	 DWORD PTR _iWidth$[ebp], xmm1
  00069	83 c6 04	 add	 esi, 4
  0006c	3b d7		 cmp	 edx, edi
  0006e	7c c0		 jl	 SHORT $LL4@GetTextWid
$LN3@GetTextWid:

; 1425 : 	}
; 1426 : 	
; 1427 : 	return iWidth;
; 1428 : }

  00070	d9 45 fc	 fld	 DWORD PTR _iWidth$[ebp]
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN51@GetTextWid:

; 1422 : 			return iWidth + fFontAdvance;

  0007c	d9 45 fc	 fld	 DWORD PTR tv488[ebp]
  0007f	5f		 pop	 edi

; 1425 : 	}
; 1426 : 	
; 1427 : 	return iWidth;
; 1428 : }

  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?GetTextWidth@CGraphicTextInstance@@QAEMH@Z ENDP	; CGraphicTextInstance::GetTextWidth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetLineHeight@CGraphicTextInstance@@QAEXH@Z
_TEXT	SEGMENT
_iHeight$ = 8						; size = 4
?SetLineHeight@CGraphicTextInstance@@QAEXH@Z PROC	; CGraphicTextInstance::SetLineHeight, COMDAT
; _this$ = ecx

; 1364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1365 : 	m_iLineHeight = iHeight;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iHeight$[ebp]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1366 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetLineHeight@CGraphicTextInstance@@QAEXH@Z ENDP	; CGraphicTextInstance::SetLineHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?DisableEnterToken@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?DisableEnterToken@CGraphicTextInstance@@QAEXXZ PROC	; CGraphicTextInstance::DisableEnterToken, COMDAT
; _this$ = ecx

; 1360 : 	m_isEnterToken = false;

  00000	c6 41 1b 00	 mov	 BYTE PTR [ecx+27], 0

; 1361 : }

  00004	c3		 ret	 0
?DisableEnterToken@CGraphicTextInstance@@QAEXXZ ENDP	; CGraphicTextInstance::DisableEnterToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetMultiTextSize@CGraphicTextInstance@@QAEXPAH0@Z
_TEXT	SEGMENT
tv522 = -16						; size = 4
tv526 = -12						; size = 4
tv523 = -8						; size = 4
_this$1$ = -4						; size = 4
_pRetWidth$ = 8						; size = 4
_pRetHeight$ = 12					; size = 4
?GetMultiTextSize@CGraphicTextInstance@@QAEXPAH0@Z PROC	; CGraphicTextInstance::GetMultiTextSize, COMDAT
; _this$ = ecx

; 1369 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	8b c1		 mov	 eax, ecx

; 1374 : 	for (int i = 0; i < (int)m_pCharInfoVector.size(); ++i)

  00008	33 d2		 xor	 edx, edx
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1370 : 	int iMaxWidth = 0;

  00010	33 db		 xor	 ebx, ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00012	89 4d f4	 mov	 DWORD PTR tv526[ebp], ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1371 : 	int iMaxHeigh = 0;

  00015	33 ff		 xor	 edi, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00017	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1372 : 	int iWidth = 0;

  0001a	33 f6		 xor	 esi, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001c	2b 48 60	 sub	 ecx, DWORD PTR [eax+96]
  0001f	c1 f9 02	 sar	 ecx, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1369 : {

  00022	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00025	89 4d f8	 mov	 DWORD PTR tv523[ebp], ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1374 : 	for (int i = 0; i < (int)m_pCharInfoVector.size(); ++i)

  00028	85 c9		 test	 ecx, ecx
  0002a	7e 7c		 jle	 SHORT $LN3@GetMultiTe
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1473 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  0002c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]

; 1463 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  0002f	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00032	89 45 f0	 mov	 DWORD PTR tv522[ebp], eax
$LL4@GetMultiTe:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1378 : 		float fFontAdvance = float(pCurCharInfo->advance);

  00035	8b 45 f4	 mov	 eax, DWORD PTR tv526[ebp]
  00038	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0003b	f3 0f 10 50 18	 movss	 xmm2, DWORD PTR [eax+24]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  00040	8b 45 f0	 mov	 eax, DWORD PTR tv522[ebp]
  00043	3b c1		 cmp	 eax, ecx
  00045	74 0b		 je	 SHORT $LN5@GetMultiTe
$LL44@GetMultiTe:

; 5186 :         if (*_First == _Val) {

  00047	39 10		 cmp	 DWORD PTR [eax], edx
  00049	74 38		 je	 SHORT $LN62@GetMultiTe

; 5185 :     for (; _First != _Last; ++_First) {

  0004b	83 c0 04	 add	 eax, 4
  0004e	3b c1		 cmp	 eax, ecx
  00050	75 f5		 jne	 SHORT $LL44@GetMultiTe
$LN5@GetMultiTe:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1388 : 		else if(i == (int)m_pCharInfoVector.size() - 1)

  00052	8b 45 f8	 mov	 eax, DWORD PTR tv523[ebp]
  00055	48		 dec	 eax
  00056	3b d0		 cmp	 edx, eax
  00058	75 36		 jne	 SHORT $LN8@GetMultiTe

; 1389 : 		{
; 1390 : 			if(iMaxWidth < iWidth + fFontAdvance)

  0005a	66 0f 6e ce	 movd	 xmm1, esi
  0005e	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00061	66 0f 6e c3	 movd	 xmm0, ebx
  00065	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00068	f3 0f 58 ca	 addss	 xmm1, xmm2
  0006c	0f 2f c8	 comiss	 xmm1, xmm0
  0006f	76 04		 jbe	 SHORT $LN9@GetMultiTe

; 1391 : 				iMaxWidth = iWidth + fFontAdvance;

  00071	f3 0f 2c d9	 cvttss2si ebx, xmm1
$LN9@GetMultiTe:

; 1392 : 			
; 1393 : 			iWidth = 0;
; 1394 : 			iMaxHeigh += i ? m_iLineHeight : 0;
; 1395 : 		}
; 1396 : 
; 1397 : 		iWidth += fFontAdvance;

  00075	33 f6		 xor	 esi, esi
  00077	85 d2		 test	 edx, edx
  00079	74 11		 je	 SHORT $LN13@GetMultiTe
  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007e	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00081	eb 0b		 jmp	 SHORT $LN14@GetMultiTe
$LN62@GetMultiTe:

; 1379 : 
; 1380 : 		if(std::find(m_vLineCutPos.begin(), m_vLineCutPos.end(), i) != m_vLineCutPos.end())
; 1381 : 		{
; 1382 : 			if(iMaxWidth < iWidth)
; 1383 : 				iMaxWidth = iWidth;
; 1384 : 			
; 1385 : 			iWidth = 0;

  00083	3b de		 cmp	 ebx, esi
  00085	0f 4d f3	 cmovge	 esi, ebx
  00088	8b de		 mov	 ebx, esi

; 1386 : 			iMaxHeigh += i ? m_iLineHeight : 0;

  0008a	eb e9		 jmp	 SHORT $LN9@GetMultiTe
$LN13@GetMultiTe:

; 1392 : 			
; 1393 : 			iWidth = 0;
; 1394 : 			iMaxHeigh += i ? m_iLineHeight : 0;
; 1395 : 		}
; 1396 : 
; 1397 : 		iWidth += fFontAdvance;

  0008c	33 c0		 xor	 eax, eax
$LN14@GetMultiTe:
  0008e	03 f8		 add	 edi, eax
$LN8@GetMultiTe:
  00090	66 0f 6e c6	 movd	 xmm0, esi

; 1374 : 	for (int i = 0; i < (int)m_pCharInfoVector.size(); ++i)

  00094	42		 inc	 edx

; 1392 : 			
; 1393 : 			iWidth = 0;
; 1394 : 			iMaxHeigh += i ? m_iLineHeight : 0;
; 1395 : 		}
; 1396 : 
; 1397 : 		iWidth += fFontAdvance;

  00095	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00098	f3 0f 58 c2	 addss	 xmm0, xmm2
  0009c	f3 0f 2c f0	 cvttss2si esi, xmm0
  000a0	3b 55 f8	 cmp	 edx, DWORD PTR tv523[ebp]
  000a3	7c 90		 jl	 SHORT $LL4@GetMultiTe
  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
$LN3@GetMultiTe:

; 1398 : 	}
; 1399 : 	
; 1400 : 	m_textWidth = iMaxWidth;

  000a8	66 89 58 0c	 mov	 WORD PTR [eax+12], bx

; 1401 : 	m_textHeight = iMaxHeigh;

  000ac	66 89 78 0e	 mov	 WORD PTR [eax+14], di

; 1402 : 	
; 1403 : 	*pRetWidth = iMaxWidth;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _pRetWidth$[ebp]
  000b3	89 18		 mov	 DWORD PTR [eax], ebx

; 1404 : 	*pRetHeight = iMaxHeigh;

  000b5	8b 45 0c	 mov	 eax, DWORD PTR _pRetHeight$[ebp]
  000b8	89 38		 mov	 DWORD PTR [eax], edi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx

; 1405 : }

  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
?GetMultiTextSize@CGraphicTextInstance@@QAEXPAH0@Z ENDP	; CGraphicTextInstance::GetMultiTextSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetLimitWidth@CGraphicTextInstance@@QAEXM@Z
_TEXT	SEGMENT
_fWidth$ = 8						; size = 4
?SetLimitWidth@CGraphicTextInstance@@QAEXM@Z PROC	; CGraphicTextInstance::SetLimitWidth, COMDAT
; _this$ = ecx

; 1145 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1146 : 	m_fLimitWidth = fWidth;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fWidth$[ebp]
  00008	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 1147 : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetLimitWidth@CGraphicTextInstance@@QAEXM@Z ENDP	; CGraphicTextInstance::SetLimitWidth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetMultiLine@CGraphicTextInstance@@QAEX_N@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 1
?SetMultiLine@CGraphicTextInstance@@QAEX_N@Z PROC	; CGraphicTextInstance::SetMultiLine, COMDAT
; _this$ = ecx

; 1125 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1126 : 	m_isMultiLine = Value;

  00003	8a 45 08	 mov	 al, BYTE PTR _Value$[ebp]
  00006	88 41 1a	 mov	 BYTE PTR [ecx+26], al

; 1127 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetMultiLine@CGraphicTextInstance@@QAEX_N@Z ENDP	; CGraphicTextInstance::SetMultiLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetFeather@CGraphicTextInstance@@QAEX_N@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 1
?SetFeather@CGraphicTextInstance@@QAEX_N@Z PROC		; CGraphicTextInstance::SetFeather, COMDAT
; _this$ = ecx

; 1113 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1114 : 	if (Value)

  00003	80 7d 08 00	 cmp	 BYTE PTR _Value$[ebp], 0
  00007	74 11		 je	 SHORT $LN2@SetFeather

; 1115 : 	{
; 1116 : 		m_fFontFeather = c_fFontFeather;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000

; 1117 : 	}
; 1118 : 	else
; 1119 : 	{
; 1120 : 		m_fFontFeather = 0.0f;
; 1121 : 	}
; 1122 : }

  00011	f3 0f 11 41 30	 movss	 DWORD PTR [ecx+48], xmm0
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN2@SetFeather:
  0001a	0f 57 c0	 xorps	 xmm0, xmm0
  0001d	f3 0f 11 41 30	 movss	 DWORD PTR [ecx+48], xmm0
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetFeather@CGraphicTextInstance@@QAEX_N@Z ENDP		; CGraphicTextInstance::SetFeather
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetOutline@CGraphicTextInstance@@QAEX_N@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 1
?SetOutline@CGraphicTextInstance@@QAEX_N@Z PROC		; CGraphicTextInstance::SetOutline, COMDAT
; _this$ = ecx

; 1108 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1109 : 	m_isOutline = Value;

  00003	8a 45 08	 mov	 al, BYTE PTR _Value$[ebp]
  00006	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 1110 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetOutline@CGraphicTextInstance@@QAEX_N@Z ENDP		; CGraphicTextInstance::SetOutline
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetSecret@CGraphicTextInstance@@QAEX_N@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 1
?SetSecret@CGraphicTextInstance@@QAEX_N@Z PROC		; CGraphicTextInstance::SetSecret, COMDAT
; _this$ = ecx

; 1103 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1104 : 	m_isSecret = Value;

  00003	8a 45 08	 mov	 al, BYTE PTR _Value$[ebp]
  00006	88 41 19	 mov	 BYTE PTR [ecx+25], al

; 1105 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetSecret@CGraphicTextInstance@@QAEX_N@Z ENDP		; CGraphicTextInstance::SetSecret
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetPosition@CGraphicTextInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
?SetPosition@CGraphicTextInstance@@QAEXMMM@Z PROC	; CGraphicTextInstance::SetPosition, COMDAT
; _this$ = ecx

; 1202 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1203 : 	m_v3Position.x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	f3 0f 11 41 4c	 movss	 DWORD PTR [ecx+76], xmm0

; 1204 : 	m_v3Position.y = fy;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00012	f3 0f 11 41 50	 movss	 DWORD PTR [ecx+80], xmm0

; 1205 : 	m_v3Position.z = fz;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001c	f3 0f 11 41 54	 movss	 DWORD PTR [ecx+84], xmm0

; 1206 : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CGraphicTextInstance@@QAEXMMM@Z ENDP	; CGraphicTextInstance::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetValue@CGraphicTextInstance@@QAEXPBDI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Result$1$ = 8						; size = 4
__Count$1$ = 8						; size = 4
$T1 = 8							; size = 4
_findN$ = 8						; size = 4
_c_szText$ = 8						; size = 4
_len$ = 12						; size = 4
?SetValue@CGraphicTextInstance@@QAEXPBDI@Z PROC		; CGraphicTextInstance::SetValue, COMDAT
; _this$ = ecx

; 1176 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00007	8b 7d 08	 mov	 edi, DWORD PTR _c_szText$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1176 : {

  0000a	8b d9		 mov	 ebx, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8b d7		 mov	 edx, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1176 : {

  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx

; 1177 : 	if (0 == m_stText.compare(c_szText))

  00011	8d 73 34	 lea	 esi, DWORD PTR [ebx+52]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00014	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL98@SetValue:
  00017	8a 02		 mov	 al, BYTE PTR [edx]
  00019	42		 inc	 edx
  0001a	84 c0		 test	 al, al
  0001c	75 f9		 jne	 SHORT $LL98@SetValue
  0001e	2b d1		 sub	 edx, ecx

; 2272 :         const value_type* _Result = _Bx._Buf;

  00020	8b c6		 mov	 eax, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  00022	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  00026	72 02		 jb	 SHORT $LN95@SetValue

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
$LN95@SetValue:

; 4402 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  0002a	52		 push	 edx
  0002b	57		 push	 edi
  0002c	ff 76 10	 push	 DWORD PTR [esi+16]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00035	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1177 : 	if (0 == m_stText.compare(c_szText))

  00038	85 c0		 test	 eax, eax
  0003a	0f 84 55 01 00
	00		 je	 $LN1@SetValue
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00040	8b cf		 mov	 ecx, edi
  00042	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL99@SetValue:
  00045	8a 01		 mov	 al, BYTE PTR [ecx]
  00047	41		 inc	 ecx
  00048	84 c0		 test	 al, al
  0004a	75 f9		 jne	 SHORT $LL99@SetValue
  0004c	2b ca		 sub	 ecx, edx

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004e	51		 push	 ecx
  0004f	57		 push	 edi
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1182 : 	m_vLineCutPos.clear();

  00057	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]

; 1183 : 	std::size_t findN = m_stText.find("\n");

  0005a	8b ce		 mov	 ecx, esi
  0005c	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0005e	6a 00		 push	 0
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00065	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00068	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0006d	8b c8		 mov	 ecx, eax
  0006f	89 4d 08	 mov	 DWORD PTR _findN$[ebp], ecx
  00072	83 f9 ff	 cmp	 ecx, -1

; 1184 : 	while (findN != std::string::npos)

  00075	0f 84 d6 00 00
	00		 je	 $LN3@SetValue
  0007b	8b d8		 mov	 ebx, eax
  0007d	0f 1f 00	 npad	 3
$LL2@SetValue:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00080	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00083	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00086	74 08		 je	 SHORT $LN25@SetValue

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00088	89 08		 mov	 DWORD PTR [eax], ecx

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  0008a	83 47 04 04	 add	 DWORD PTR [edi+4], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0008e	eb 0c		 jmp	 SHORT $LN24@SetValue
$LN25@SetValue:

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00090	8d 4d 08	 lea	 ecx, DWORD PTR _findN$[ebp]
  00093	51		 push	 ecx
  00094	50		 push	 eax
  00095	8b cf		 mov	 ecx, edi
  00097	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABI@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAIABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Emplace_reallocate<unsigned int const &>
$LN24@SetValue:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2291 :         if (_Mysize < _Off) {

  0009c	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0009f	3b d3		 cmp	 edx, ebx
  000a1	0f 82 f7 00 00
	00		 jb	 $LN85@SetValue

; 2309 :         return (_STD min)(_Size, _Mysize - _Off);

  000a7	8b c2		 mov	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  000a9	b9 01 00 00 00	 mov	 ecx, 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2309 :         return (_STD min)(_Size, _Mysize - _Off);

  000ae	2b c3		 sub	 eax, ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  000b0	3b c1		 cmp	 eax, ecx
  000b2	0f 42 c8	 cmovb	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000b5	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  000b9	89 4d 08	 mov	 DWORD PTR __Count$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2263 :         value_type* _Result = _Bx._Buf;

  000bc	8b c6		 mov	 eax, esi

; 2264 :         if (_Large_string_engaged()) {

  000be	72 02		 jb	 SHORT $LN97@SetValue

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  000c0	8b 06		 mov	 eax, DWORD PTR [esi]
$LN97@SetValue:

; 3430 :         _Elem* const _Erase_at    = _My_ptr + _Off;

  000c2	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]

; 3431 :         const size_type _New_size = _Old_size - _Count;

  000c5	8b 45 08	 mov	 eax, DWORD PTR __Count$1$[ebp]
  000c8	2b d0		 sub	 edx, eax

; 3432 :         _Mypair._Myval2._Mysize   = _New_size;
; 3433 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  000ca	03 c1		 add	 eax, ecx
  000cc	89 56 10	 mov	 DWORD PTR [esi+16], edx
  000cf	2b d3		 sub	 edx, ebx
  000d1	42		 inc	 edx

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000d2	52		 push	 edx
  000d3	50		 push	 eax
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 _memmove
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2272 :         const value_type* _Result = _Bx._Buf;

  000dd	89 75 08	 mov	 DWORD PTR __Result$1$[ebp], esi

; 2286 :         return _BUF_SIZE <= _Myres;

  000e0	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  000e4	8b ce		 mov	 ecx, esi

; 2273 :         if (_Large_string_engaged()) {

  000e6	72 05		 jb	 SHORT $LN96@SetValue

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  000e8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ea	89 4d 08	 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN96@SetValue:

; 4112 :         return static_cast<size_type>(_Traits_find<_Traits>(

  000ed	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 600  :     if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size) {

  000f0	83 f8 01	 cmp	 eax, 1
  000f3	72 59		 jb	 SHORT $LN83@SetValue

; 425  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  000f5	50		 push	 eax
  000f6	6a 0a		 push	 10			; 0000000aH
  000f8	51		 push	 ecx

; 616  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  000f9	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]

; 425  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  000fc	e8 00 00 00 00	 call	 _memchr
  00101	8b c8		 mov	 ecx, eax
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH

; 619  :         if (!_Match_try) { // didn't find first character; report failure

  00106	85 c9		 test	 ecx, ecx
  00108	74 44		 je	 SHORT $LN83@SetValue
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL61@SetValue:

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  00110	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00113	3c 0a		 cmp	 al, 10			; 0000000aH
  00115	75 04		 jne	 SHORT $LN100@SetValue
  00117	33 c0		 xor	 eax, eax
  00119	eb 05		 jmp	 SHORT $LN101@SetValue
$LN100@SetValue:
  0011b	1b c0		 sbb	 eax, eax
  0011d	83 c8 01	 or	 eax, 1
$LN101@SetValue:

; 623  :         if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0) { // found match

  00120	85 c0		 test	 eax, eax
  00122	74 19		 je	 SHORT $LN84@SetValue

; 617  :     for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {
; 618  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  00124	41		 inc	 ecx
  00125	8b c3		 mov	 eax, ebx
  00127	2b c1		 sub	 eax, ecx

; 425  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  00129	50		 push	 eax
  0012a	6a 0a		 push	 10			; 0000000aH
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 _memchr
  00132	8b c8		 mov	 ecx, eax
  00134	83 c4 0c	 add	 esp, 12			; 0000000cH

; 619  :         if (!_Match_try) { // didn't find first character; report failure

  00137	85 c9		 test	 ecx, ecx
  00139	75 d5		 jne	 SHORT $LL61@SetValue
  0013b	eb 11		 jmp	 SHORT $LN83@SetValue
$LN84@SetValue:

; 624  :             return static_cast<size_t>(_Match_try - _Haystack);

  0013d	2b 4d 08	 sub	 ecx, DWORD PTR __Result$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1188 : 		findN = m_stText.find("\n");

  00140	89 4d 08	 mov	 DWORD PTR _findN$[ebp], ecx
  00143	8b d9		 mov	 ebx, ecx
  00145	83 f9 ff	 cmp	 ecx, -1
  00148	0f 85 32 ff ff
	ff		 jne	 $LL2@SetValue
$LN83@SetValue:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2291 :         if (_Mysize < _Off) {

  0014e	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
$LN3@SetValue:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00151	8b c3		 mov	 eax, ebx
  00153	2b 07		 sub	 eax, DWORD PTR [edi]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1195 : 	if(m_vLineCutPos.size())

  00155	a9 fc ff ff ff	 test	 eax, -4			; fffffffcH
  0015a	74 32		 je	 SHORT $LN76@SetValue

; 1196 : 		m_vLineCutPos.push_back(0);

  0015c	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00163	3b 5f 08	 cmp	 ebx, DWORD PTR [edi+8]
  00166	74 1a		 je	 SHORT $LN77@SetValue
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1198 : 	m_isUpdate = false;

  00168	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0016b	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  00171	83 47 04 04	 add	 DWORD PTR [edi+4], 4
  00175	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1199 : }

  00176	5e		 pop	 esi
  00177	c6 40 58 00	 mov	 BYTE PTR [eax+88], 0
  0017b	5b		 pop	 ebx
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c2 08 00	 ret	 8
$LN77@SetValue:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00182	8d 45 08	 lea	 eax, DWORD PTR $T1[ebp]
  00185	8b cf		 mov	 ecx, edi
  00187	50		 push	 eax
  00188	53		 push	 ebx
  00189	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@I@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAI$$QAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Emplace_reallocate<unsigned int>
$LN76@SetValue:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1198 : 	m_isUpdate = false;

  0018e	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00191	c6 40 58 00	 mov	 BYTE PTR [eax+88], 0
$LN1@SetValue:

; 1199 : }

  00195	5f		 pop	 edi
  00196	5e		 pop	 esi
  00197	5b		 pop	 ebx
  00198	8b e5		 mov	 esp, ebp
  0019a	5d		 pop	 ebp
  0019b	c2 08 00	 ret	 8
$LN85@SetValue:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2292 :             _Xran();

  0019e	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN102@SetValue:
  001a3	cc		 int	 3
?SetValue@CGraphicTextInstance@@QAEXPBDI@Z ENDP		; CGraphicTextInstance::SetValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetValueString@CGraphicTextInstance@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
tv839 = 8						; size = 4
__Result$1$ = 8						; size = 4
__Count$1$ = 8						; size = 4
$T1 = 8							; size = 4
_findN$ = 8						; size = 4
_c_stValue$ = 8						; size = 4
?SetValueString@CGraphicTextInstance@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CGraphicTextInstance::SetValueString, COMDAT
; _this$ = ecx

; 1150 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  00007	8b 7d 08	 mov	 edi, DWORD PTR _c_stValue$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1150 : {

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  0000f	8b d7		 mov	 edx, edi

; 2286 :         return _BUF_SIZE <= _Myres;

  00011	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1151 : 	if (0 == m_stText.compare(c_stValue))

  00014	8d 70 34	 lea	 esi, DWORD PTR [eax+52]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00017	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  0001a	72 02		 jb	 SHORT $LN103@SetValueSt

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0001c	8b 17		 mov	 edx, DWORD PTR [edi]
$LN103@SetValueSt:

; 2286 :         return _BUF_SIZE <= _Myres;

  0001e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00022	8b c6		 mov	 eax, esi

; 2273 :         if (_Large_string_engaged()) {

  00024	72 02		 jb	 SHORT $LN104@SetValueSt

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00026	8b 06		 mov	 eax, DWORD PTR [esi]
$LN104@SetValueSt:

; 4380 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00028	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0002b	51		 push	 ecx
  0002c	52		 push	 edx
  0002d	ff 76 10	 push	 DWORD PTR [esi+16]
  00030	89 4d 08	 mov	 DWORD PTR tv839[ebp], ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00039	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1151 : 	if (0 == m_stText.compare(c_stValue))

  0003c	85 c0		 test	 eax, eax
  0003e	0f 84 51 01 00
	00		 je	 $LN1@SetValueSt
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  00044	3b f7		 cmp	 esi, edi
  00046	74 12		 je	 SHORT $LN20@SetValueSt

; 2286 :         return _BUF_SIZE <= _Myres;

  00048	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  0004b	72 02		 jb	 SHORT $LN25@SetValueSt

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0004d	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN25@SetValueSt:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0004f	ff 75 08	 push	 DWORD PTR tv839[ebp]
  00052	8b ce		 mov	 ecx, esi
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN20@SetValueSt:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1156 : 	m_vLineCutPos.clear();

  0005a	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]

; 1157 : 	std::size_t findN = m_stText.find("\n");

  0005d	8b ce		 mov	 ecx, esi
  0005f	6a 00		 push	 0
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00066	8b 5f 20	 mov	 ebx, DWORD PTR [edi+32]
  00069	89 5f 24	 mov	 DWORD PTR [edi+36], ebx
  0006c	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00071	8b c8		 mov	 ecx, eax
  00073	89 4d 08	 mov	 DWORD PTR _findN$[ebp], ecx
  00076	83 f9 ff	 cmp	 ecx, -1

; 1158 : 	while (findN != std::string::npos)

  00079	0f 84 d2 00 00
	00		 je	 $LN3@SetValueSt
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0007f	8b d8		 mov	 ebx, eax
$LL2@SetValueSt:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00081	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00084	3b 47 28	 cmp	 eax, DWORD PTR [edi+40]
  00087	74 08		 je	 SHORT $LN32@SetValueSt

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00089	89 08		 mov	 DWORD PTR [eax], ecx

; 716  :         ++_Mylast;

  0008b	83 47 24 04	 add	 DWORD PTR [edi+36], 4

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0008f	eb 0d		 jmp	 SHORT $LN31@SetValueSt
$LN32@SetValueSt:

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00091	8d 4d 08	 lea	 ecx, DWORD PTR _findN$[ebp]
  00094	51		 push	 ecx
  00095	50		 push	 eax
  00096	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00099	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABI@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAIABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Emplace_reallocate<unsigned int const &>
$LN31@SetValueSt:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2291 :         if (_Mysize < _Off) {

  0009e	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000a1	3b d3		 cmp	 edx, ebx
  000a3	0f 82 f5 00 00
	00		 jb	 $LN92@SetValueSt

; 2309 :         return (_STD min)(_Size, _Mysize - _Off);

  000a9	8b c2		 mov	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  000ab	b9 01 00 00 00	 mov	 ecx, 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2309 :         return (_STD min)(_Size, _Mysize - _Off);

  000b0	2b c3		 sub	 eax, ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  000b2	3b c1		 cmp	 eax, ecx
  000b4	0f 42 c8	 cmovb	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000b7	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  000bb	89 4d 08	 mov	 DWORD PTR __Count$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2263 :         value_type* _Result = _Bx._Buf;

  000be	8b c6		 mov	 eax, esi

; 2264 :         if (_Large_string_engaged()) {

  000c0	72 02		 jb	 SHORT $LN106@SetValueSt

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  000c2	8b 06		 mov	 eax, DWORD PTR [esi]
$LN106@SetValueSt:

; 3430 :         _Elem* const _Erase_at    = _My_ptr + _Off;

  000c4	8d 0c 03	 lea	 ecx, DWORD PTR [ebx+eax]

; 3431 :         const size_type _New_size = _Old_size - _Count;

  000c7	8b 45 08	 mov	 eax, DWORD PTR __Count$1$[ebp]
  000ca	2b d0		 sub	 edx, eax

; 3432 :         _Mypair._Myval2._Mysize   = _New_size;
; 3433 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  000cc	03 c1		 add	 eax, ecx
  000ce	89 56 10	 mov	 DWORD PTR [esi+16], edx
  000d1	2b d3		 sub	 edx, ebx
  000d3	42		 inc	 edx

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000d4	52		 push	 edx
  000d5	50		 push	 eax
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 _memmove
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2272 :         const value_type* _Result = _Bx._Buf;

  000df	89 75 08	 mov	 DWORD PTR __Result$1$[ebp], esi

; 2286 :         return _BUF_SIZE <= _Myres;

  000e2	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  000e6	8b ce		 mov	 ecx, esi

; 2273 :         if (_Large_string_engaged()) {

  000e8	72 05		 jb	 SHORT $LN105@SetValueSt

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  000ea	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ec	89 4d 08	 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN105@SetValueSt:

; 4112 :         return static_cast<size_type>(_Traits_find<_Traits>(

  000ef	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 600  :     if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size) {

  000f2	83 f8 01	 cmp	 eax, 1
  000f5	72 57		 jb	 SHORT $LN90@SetValueSt

; 425  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  000f7	50		 push	 eax
  000f8	6a 0a		 push	 10			; 0000000aH
  000fa	51		 push	 ecx

; 616  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  000fb	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]

; 425  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  000fe	e8 00 00 00 00	 call	 _memchr
  00103	8b c8		 mov	 ecx, eax
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH

; 619  :         if (!_Match_try) { // didn't find first character; report failure

  00108	85 c9		 test	 ecx, ecx
  0010a	74 42		 je	 SHORT $LN90@SetValueSt
  0010c	0f 1f 40 00	 npad	 4
$LL68@SetValueSt:

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  00110	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00113	3c 0a		 cmp	 al, 10			; 0000000aH
  00115	75 04		 jne	 SHORT $LN107@SetValueSt
  00117	33 c0		 xor	 eax, eax
  00119	eb 05		 jmp	 SHORT $LN108@SetValueSt
$LN107@SetValueSt:
  0011b	1b c0		 sbb	 eax, eax
  0011d	83 c8 01	 or	 eax, 1
$LN108@SetValueSt:

; 623  :         if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0) { // found match

  00120	85 c0		 test	 eax, eax
  00122	74 19		 je	 SHORT $LN91@SetValueSt

; 617  :     for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {
; 618  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  00124	41		 inc	 ecx
  00125	8b c3		 mov	 eax, ebx
  00127	2b c1		 sub	 eax, ecx

; 425  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  00129	50		 push	 eax
  0012a	6a 0a		 push	 10			; 0000000aH
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 _memchr
  00132	8b c8		 mov	 ecx, eax
  00134	83 c4 0c	 add	 esp, 12			; 0000000cH

; 619  :         if (!_Match_try) { // didn't find first character; report failure

  00137	85 c9		 test	 ecx, ecx
  00139	75 d5		 jne	 SHORT $LL68@SetValueSt
  0013b	eb 11		 jmp	 SHORT $LN90@SetValueSt
$LN91@SetValueSt:

; 624  :             return static_cast<size_t>(_Match_try - _Haystack);

  0013d	2b 4d 08	 sub	 ecx, DWORD PTR __Result$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1162 : 		findN = m_stText.find("\n");

  00140	89 4d 08	 mov	 DWORD PTR _findN$[ebp], ecx
  00143	8b d9		 mov	 ebx, ecx
  00145	83 f9 ff	 cmp	 ecx, -1
  00148	0f 85 33 ff ff
	ff		 jne	 $LL2@SetValueSt
$LN90@SetValueSt:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2291 :         if (_Mysize < _Off) {

  0014e	8b 5f 24	 mov	 ebx, DWORD PTR [edi+36]
$LN3@SetValueSt:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00151	8b c3		 mov	 eax, ebx
  00153	2b 47 20	 sub	 eax, DWORD PTR [edi+32]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1169 : 	if(m_vLineCutPos.size())

  00156	a9 fc ff ff ff	 test	 eax, -4			; fffffffcH
  0015b	74 32		 je	 SHORT $LN83@SetValueSt

; 1170 : 		m_vLineCutPos.push_back(0);

  0015d	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00164	3b 5f 28	 cmp	 ebx, DWORD PTR [edi+40]
  00167	74 19		 je	 SHORT $LN84@SetValueSt

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00169	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1172 : 	m_isUpdate = false;

  0016f	8b c7		 mov	 eax, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 716  :         ++_Mylast;

  00171	83 47 24 04	 add	 DWORD PTR [edi+36], 4
  00175	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1173 : }

  00176	5e		 pop	 esi
  00177	c6 40 58 00	 mov	 BYTE PTR [eax+88], 0
  0017b	5b		 pop	 ebx
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c2 04 00	 ret	 4
$LN84@SetValueSt:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00182	8d 45 08	 lea	 eax, DWORD PTR $T1[ebp]
  00185	50		 push	 eax
  00186	53		 push	 ebx
  00187	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0018a	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@I@?$vector@IV?$allocator@I@std@@@std@@QAEPAIQAI$$QAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Emplace_reallocate<unsigned int>
$LN83@SetValueSt:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1172 : 	m_isUpdate = false;

  0018f	8b c7		 mov	 eax, edi
  00191	c6 40 58 00	 mov	 BYTE PTR [eax+88], 0
$LN1@SetValueSt:

; 1173 : }

  00195	5f		 pop	 edi
  00196	5e		 pop	 esi
  00197	5b		 pop	 ebx
  00198	8b e5		 mov	 esp, ebp
  0019a	5d		 pop	 ebp
  0019b	c2 04 00	 ret	 4
$LN92@SetValueSt:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2292 :             _Xran();

  0019e	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN109@SetValueSt:
  001a3	cc		 int	 3
?SetValueString@CGraphicTextInstance@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CGraphicTextInstance::SetValueString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z
_TEXT	SEGMENT
_pText$ = 8						; size = 4
?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z PROC ; CGraphicTextInstance::SetTextPointer, COMDAT
; _this$ = ecx

; 1209 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 69   : 			m_pObject = pObject;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pText$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1209 : {

  00006	56		 push	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 67   : 			CReferenceObject* pOldObject = m_pObject;

  00007	8b 71 5c	 mov	 esi, DWORD PTR [ecx+92]

; 69   : 			m_pObject = pObject;

  0000a	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 70   : 
; 71   : 			if (m_pObject)

  0000d	85 c0		 test	 eax, eax
  0000f	74 07		 je	 SHORT $LN6@SetTextPoi

; 72   : 				m_pObject->AddReference();

  00011	8b c8		 mov	 ecx, eax
  00013	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference
$LN6@SetTextPoi:

; 73   : 
; 74   : 			if (pOldObject)

  00018	85 f6		 test	 esi, esi
  0001a	74 07		 je	 SHORT $LN7@SetTextPoi

; 75   : 				pOldObject->Release();

  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN7@SetTextPoi:
  00023	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1211 : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z ENDP ; CGraphicTextInstance::SetTextPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetMax@CGraphicTextInstance@@QAEXH@Z
_TEXT	SEGMENT
_iMax$ = 8						; size = 4
?SetMax@CGraphicTextInstance@@QAEXH@Z PROC		; CGraphicTextInstance::SetMax, COMDAT
; _this$ = ecx

; 1140 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1141 : 	m_iMax = iMax;

  00003	66 8b 45 08	 mov	 ax, WORD PTR _iMax$[ebp]
  00007	66 89 41 12	 mov	 WORD PTR [ecx+18], ax

; 1142 : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?SetMax@CGraphicTextInstance@@QAEXH@Z ENDP		; CGraphicTextInstance::SetMax
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z
_TEXT	SEGMENT
_vAlign$ = 8						; size = 4
?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z PROC	; CGraphicTextInstance::SetVerticalAlign, COMDAT
; _this$ = ecx

; 1135 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1136 : 	m_vAlign = vAlign;

  00003	8a 45 08	 mov	 al, BYTE PTR _vAlign$[ebp]
  00006	88 41 11	 mov	 BYTE PTR [ecx+17], al

; 1137 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z ENDP	; CGraphicTextInstance::SetVerticalAlign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z
_TEXT	SEGMENT
_hAlign$ = 8						; size = 4
?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z PROC	; CGraphicTextInstance::SetHorizonalAlign, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	m_hAlign = hAlign;

  00003	8a 45 08	 mov	 al, BYTE PTR _hAlign$[ebp]
  00006	88 41 10	 mov	 BYTE PTR [ecx+16], al

; 1132 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z ENDP	; CGraphicTextInstance::SetHorizonalAlign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z PROC	; CGraphicTextInstance::SetOutLineColor, COMDAT
; _this$ = ecx

; 1098 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 923  :     a = fa;

  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00009	0f 57 c9	 xorps	 xmm1, xmm1

; 923  :     a = fa;

  0000c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1098 : {

  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00019	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00021	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00029	72 07		 jb	 SHORT $LN9@SetOutLine
  0002b	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00030	eb 2b		 jmp	 SHORT $LN8@SetOutLine
$LN9@SetOutLine:
  00032	0f 2f c8	 comiss	 xmm1, xmm0
  00035	72 04		 jb	 SHORT $LN7@SetOutLine
  00037	33 db		 xor	 ebx, ebx
  00039	eb 22		 jmp	 SHORT $LN8@SetOutLine
$LN7@SetOutLine:
  0003b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0003f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00043	e8 00 00 00 00	 call	 __ftoui3
  00048	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00050	8b d8		 mov	 ebx, eax
  00052	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  0005a	0f 57 c9	 xorps	 xmm1, xmm1
$LN8@SetOutLine:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0005d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00062	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00069	72 07		 jb	 SHORT $LN13@SetOutLine
  0006b	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00070	eb 18		 jmp	 SHORT $LN12@SetOutLine
$LN13@SetOutLine:
  00072	0f 2f c8	 comiss	 xmm1, xmm0
  00075	72 04		 jb	 SHORT $LN11@SetOutLine
  00077	33 ff		 xor	 edi, edi
  00079	eb 0f		 jmp	 SHORT $LN12@SetOutLine
$LN11@SetOutLine:
  0007b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0007f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00083	e8 00 00 00 00	 call	 __ftoui3
  00088	8b f8		 mov	 edi, eax
$LN12@SetOutLine:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0008a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  0008f	0f 57 c9	 xorps	 xmm1, xmm1
  00092	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00099	72 07		 jb	 SHORT $LN17@SetOutLine
  0009b	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  000a0	eb 23		 jmp	 SHORT $LN16@SetOutLine
$LN17@SetOutLine:
  000a2	0f 2f c8	 comiss	 xmm1, xmm0
  000a5	72 04		 jb	 SHORT $LN15@SetOutLine
  000a7	33 f6		 xor	 esi, esi
  000a9	eb 1a		 jmp	 SHORT $LN16@SetOutLine
$LN15@SetOutLine:
  000ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000b3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000bb	e8 00 00 00 00	 call	 __ftoui3
  000c0	8b f0		 mov	 esi, eax
  000c2	0f 57 c9	 xorps	 xmm1, xmm1
$LN16@SetOutLine:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000c5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  000ca	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000d1	72 07		 jb	 SHORT $LN21@SetOutLine
  000d3	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000d8	eb 1e		 jmp	 SHORT $LN20@SetOutLine
$LN21@SetOutLine:
  000da	0f 2f c8	 comiss	 xmm1, xmm0
  000dd	72 04		 jb	 SHORT $LN19@SetOutLine
  000df	33 c0		 xor	 eax, eax
  000e1	eb 15		 jmp	 SHORT $LN20@SetOutLine
$LN19@SetOutLine:
  000e3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000eb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000f3	e8 00 00 00 00	 call	 __ftoui3
$LN20@SetOutLine:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1099 : 	m_dwOutLineColor=D3DXCOLOR(r, g, b, a);

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  000fb	c1 e0 08	 shl	 eax, 8
  000fe	0b c3		 or	 eax, ebx
  00100	c1 e0 08	 shl	 eax, 8
  00103	0b c7		 or	 eax, edi
  00105	c1 e0 08	 shl	 eax, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1099 : 	m_dwOutLineColor=D3DXCOLOR(r, g, b, a);

  00108	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00109	0b c6		 or	 eax, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1099 : 	m_dwOutLineColor=D3DXCOLOR(r, g, b, a);

  0010b	5e		 pop	 esi
  0010c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0010f	5b		 pop	 ebx

; 1100 : }

  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 10 00	 ret	 16			; 00000010H
?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z ENDP	; CGraphicTextInstance::SetOutLineColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetOutLineColor@CGraphicTextInstance@@QAEXK@Z
_TEXT	SEGMENT
_color$ = 8						; size = 4
?SetOutLineColor@CGraphicTextInstance@@QAEXK@Z PROC	; CGraphicTextInstance::SetOutLineColor, COMDAT
; _this$ = ecx

; 1093 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1094 : 	m_dwOutLineColor=color;

  00003	8b 45 08	 mov	 eax, DWORD PTR _color$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1095 : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetOutLineColor@CGraphicTextInstance@@QAEXK@Z ENDP	; CGraphicTextInstance::SetOutLineColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetColor@CGraphicTextInstance@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?SetColor@CGraphicTextInstance@@QAEXMMMM@Z PROC		; CGraphicTextInstance::SetColor, COMDAT
; _this$ = ecx

; 1088 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 923  :     a = fa;

  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00009	0f 57 c9	 xorps	 xmm1, xmm1

; 923  :     a = fa;

  0000c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1088 : {

  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00019	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00021	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00029	72 07		 jb	 SHORT $LN9@SetColor
  0002b	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00030	eb 2b		 jmp	 SHORT $LN8@SetColor
$LN9@SetColor:
  00032	0f 2f c8	 comiss	 xmm1, xmm0
  00035	72 04		 jb	 SHORT $LN7@SetColor
  00037	33 db		 xor	 ebx, ebx
  00039	eb 22		 jmp	 SHORT $LN8@SetColor
$LN7@SetColor:
  0003b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0003f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00043	e8 00 00 00 00	 call	 __ftoui3
  00048	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00050	8b d8		 mov	 ebx, eax
  00052	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  0005a	0f 57 c9	 xorps	 xmm1, xmm1
$LN8@SetColor:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0005d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00062	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00069	72 07		 jb	 SHORT $LN13@SetColor
  0006b	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00070	eb 18		 jmp	 SHORT $LN12@SetColor
$LN13@SetColor:
  00072	0f 2f c8	 comiss	 xmm1, xmm0
  00075	72 04		 jb	 SHORT $LN11@SetColor
  00077	33 ff		 xor	 edi, edi
  00079	eb 0f		 jmp	 SHORT $LN12@SetColor
$LN11@SetColor:
  0007b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0007f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00083	e8 00 00 00 00	 call	 __ftoui3
  00088	8b f8		 mov	 edi, eax
$LN12@SetColor:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0008a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  0008f	0f 57 c9	 xorps	 xmm1, xmm1
  00092	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00099	72 07		 jb	 SHORT $LN17@SetColor
  0009b	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  000a0	eb 23		 jmp	 SHORT $LN16@SetColor
$LN17@SetColor:
  000a2	0f 2f c8	 comiss	 xmm1, xmm0
  000a5	72 04		 jb	 SHORT $LN15@SetColor
  000a7	33 f6		 xor	 esi, esi
  000a9	eb 1a		 jmp	 SHORT $LN16@SetColor
$LN15@SetColor:
  000ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000b3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000bb	e8 00 00 00 00	 call	 __ftoui3
  000c0	8b f0		 mov	 esi, eax
  000c2	0f 57 c9	 xorps	 xmm1, xmm1
$LN16@SetColor:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000c5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  000ca	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000d1	72 07		 jb	 SHORT $LN21@SetColor
  000d3	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000d8	eb 1e		 jmp	 SHORT $LN20@SetColor
$LN21@SetColor:
  000da	0f 2f c8	 comiss	 xmm1, xmm0
  000dd	72 04		 jb	 SHORT $LN19@SetColor
  000df	33 c0		 xor	 eax, eax
  000e1	eb 15		 jmp	 SHORT $LN20@SetColor
$LN19@SetColor:
  000e3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000eb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000f3	e8 00 00 00 00	 call	 __ftoui3
$LN20@SetColor:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1089 : 	SetColor(D3DXCOLOR(r, g, b, a));

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  000fb	c1 e0 08	 shl	 eax, 8
  000fe	0b c3		 or	 eax, ebx
  00100	c1 e0 08	 shl	 eax, 8
  00103	0b c7		 or	 eax, edi
  00105	c1 e0 08	 shl	 eax, 8
  00108	0b c6		 or	 eax, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1089 : 	SetColor(D3DXCOLOR(r, g, b, a));

  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?SetColor@CGraphicTextInstance@@QAEXK@Z ; CGraphicTextInstance::SetColor
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx

; 1090 : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 10 00	 ret	 16			; 00000010H
?SetColor@CGraphicTextInstance@@QAEXMMMM@Z ENDP		; CGraphicTextInstance::SetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?SetColor@CGraphicTextInstance@@QAEXK@Z
_TEXT	SEGMENT
_color$ = 8						; size = 4
?SetColor@CGraphicTextInstance@@QAEXK@Z PROC		; CGraphicTextInstance::SetColor, COMDAT
; _this$ = ecx

; 1076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1077 : 	if (m_dwTextColor != color)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _color$[ebp]
  00007	39 79 04	 cmp	 DWORD PTR [ecx+4], edi
  0000a	74 35		 je	 SHORT $LN5@SetColor
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000c	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1079 : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  0000f	33 d2		 xor	 edx, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00011	2b 41 60	 sub	 eax, DWORD PTR [ecx+96]
  00014	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1079 : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00017	85 c0		 test	 eax, eax
  00019	74 23		 je	 SHORT $LN3@SetColor
  0001b	56		 push	 esi
  0001c	0f 1f 40 00	 npad	 4
$LL4@SetColor:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00020	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00023	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1080 : 			if (m_dwColorInfoVector[i] == m_dwTextColor)

  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0002b	75 02		 jne	 SHORT $LN2@SetColor

; 1081 : 				m_dwColorInfoVector[i] = color;

  0002d	89 3e		 mov	 DWORD PTR [esi], edi
$LN2@SetColor:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0002f	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1079 : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00032	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00033	2b 41 60	 sub	 eax, DWORD PTR [ecx+96]
  00036	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1079 : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00039	3b d0		 cmp	 edx, eax
  0003b	72 e3		 jb	 SHORT $LL4@SetColor
  0003d	5e		 pop	 esi
$LN3@SetColor:

; 1082 : 
; 1083 : 		m_dwTextColor = color;

  0003e	89 79 04	 mov	 DWORD PTR [ecx+4], edi
$LN5@SetColor:
  00041	5f		 pop	 edi

; 1084 : 	}
; 1085 : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?SetColor@CGraphicTextInstance@@QAEXK@Z ENDP		; CGraphicTextInstance::SetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?HideOutLine@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?HideOutLine@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::HideOutLine, COMDAT
; _this$ = ecx

; 1072 : 	m_isOutline = false;

  00000	c6 41 2c 00	 mov	 BYTE PTR [ecx+44], 0

; 1073 : }

  00004	c3		 ret	 0
?HideOutLine@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::HideOutLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?ShowOutLine@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?ShowOutLine@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::ShowOutLine, COMDAT
; _this$ = ecx

; 1067 : 	m_isOutline = true;

  00000	c6 41 2c 01	 mov	 BYTE PTR [ecx+44], 1

; 1068 : }

  00004	c3		 ret	 0
?ShowOutLine@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::ShowOutLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?HideCursor@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?HideCursor@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::HideCursor, COMDAT
; _this$ = ecx

; 1062 : 	m_isCursor = false;

  00000	c6 41 18 00	 mov	 BYTE PTR [ecx+24], 0

; 1063 : }

  00004	c3		 ret	 0
?HideCursor@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::HideCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?ShowCursor@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?ShowCursor@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::ShowCursor, COMDAT
; _this$ = ecx

; 1057 : 	m_isCursor = true;

  00000	c6 41 18 01	 mov	 BYTE PTR [ecx+24], 1

; 1058 : }

  00004	c3		 ret	 0
?ShowCursor@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::ShowCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z
_TEXT	SEGMENT
tv2858 = -200						; size = 8
_dwLighting$1$ = -196					; size = 4
_dwFogEnable$1$ = -188					; size = 4
_ulbegin$1$ = -184					; size = 4
_defCodePage$1$ = -184					; size = 4
_ulend$1$ = -180					; size = 4
tv2747 = -180						; size = 4
tv2941 = -176						; size = 16
$T1 = -172						; size = 12
$T2 = -172						; size = 12
$T3 = -172						; size = 12
$T4 = -172						; size = 12
$T5 = -172						; size = 12
$T6 = -172						; size = 12
$T7 = -172						; size = 12
$T8 = -172						; size = 12
_fFontSx$2$ = -148					; size = 4
tv3120 = -148						; size = 4
tv3116 = -148						; size = 4
tv2694 = -148						; size = 4
_fStanY$1$ = -144					; size = 4
_fFontSx$1$ = -140					; size = 4
_fFontWidth$2$ = -140					; size = 4
_pCurCharInfo$1$ = -140					; size = 4
_pFontTexture$1$ = -136					; size = 4
_ex$9 = -136						; size = 4
_fFontEx$2$ = -132					; size = 4
_fFontEx$1$ = -132					; size = 4
_fFontHeight$2$ = -132					; size = 4
_fFontHeight$1$ = -132					; size = 4
_fCurY$1$ = -128					; size = 4
_pCurCharInfo$2$ = -128					; size = 4
_fFontEy$2$ = -124					; size = 4
_fFontSy$1$ = -124					; size = 4
_fFontWidth$1$ = -124					; size = 4
_i$1$ = -124						; size = 4
_fCurY$2$ = -120					; size = 4
_i$1$ = -120						; size = 4
_sx$10 = -120						; size = 4
_fStanX$ = -116						; size = 4
_fFontEy$1$ = -112					; size = 4
_fFontSy$2$ = -112					; size = 4
_ly$1$ = -112						; size = 4
_ly$1$ = -112						; size = 4
_curpos$1$ = -112					; size = 4
tv3237 = -112						; size = 4
tv3232 = -112						; size = 4
tv2934 = -112						; size = 4
_fCurX$11 = -112					; size = 4
_fCurX$2$ = -108					; size = 4
_fCurX$1$ = -108					; size = 4
_sy$12 = -108						; size = 4
_vertices$13 = -104					; size = 96
_akVertex$14 = -104					; size = 96
__$ArrayPad$ = -4					; size = 4
_pClipRect$ = 8						; size = 4
?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z PROC	; CGraphicTextInstance::Render, COMDAT
; _this$ = ecx

; 548  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	8b f9		 mov	 edi, ecx

; 549  : 	if (!m_isUpdate)

  0002a	80 7f 58 00	 cmp	 BYTE PTR [edi+88], 0
  0002e	0f 84 6a 0e 00
	00		 je	 $LN23@Render

; 550  : 		return;
; 551  : 
; 552  : 	CGraphicText* pkText=m_roText.GetPointer();

  00034	8b 4f 5c	 mov	 ecx, DWORD PTR [edi+92]

; 553  : 	if (!pkText)

  00037	85 c9		 test	 ecx, ecx
  00039	0f 84 5f 0e 00
	00		 je	 $LN23@Render

; 554  : 		return;
; 555  : 
; 556  : 	CGraphicFontTexture* pFontTexture = pkText->GetFontTexturePointer();

  0003f	e8 00 00 00 00	 call	 ?GetFontTexturePointer@CGraphicText@@QAEPAVCGraphicFontTexture@@XZ ; CGraphicText::GetFontTexturePointer
  00044	89 85 78 ff ff
	ff		 mov	 DWORD PTR _pFontTexture$1$[ebp], eax

; 557  : 	if (!pFontTexture)

  0004a	85 c0		 test	 eax, eax
  0004c	0f 84 4c 0e 00
	00		 je	 $LN23@Render

; 558  : 		return;
; 559  : 
; 560  : 	float fStanX = m_v3Position.x;

  00052	f3 0f 10 47 4c	 movss	 xmm0, DWORD PTR [edi+76]
  00057	f3 0f 11 45 8c	 movss	 DWORD PTR _fStanX$[ebp], xmm0

; 561  : 	float fStanY = m_v3Position.y + 1.0f;

  0005c	f3 0f 10 47 50	 movss	 xmm0, DWORD PTR [edi+80]
  00061	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00069	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _fStanY$1$[ebp], xmm0

; 562  : 
; 563  : 	UINT defCodePage = GetDefaultCodePage();

  00071	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00076	0f b6 4f 10	 movzx	 ecx, BYTE PTR [edi+16]
  0007a	89 85 48 ff ff
	ff		 mov	 DWORD PTR _defCodePage$1$[ebp], eax

; 564  : 
; 565  : 	if (defCodePage == CP_ARABIC)

  00080	3d e8 04 00 00	 cmp	 eax, 1256		; 000004e8H
  00085	75 41		 jne	 SHORT $LN28@Render

; 566  : 	{
; 567  : 		switch (m_hAlign)

  00087	83 e9 01	 sub	 ecx, 1
  0008a	74 46		 je	 SHORT $LN30@Render
  0008c	83 e9 01	 sub	 ecx, 1
  0008f	75 1f		 jne	 SHORT $LN4@Render
$LN33@Render:

; 581  : 		{
; 582  : 			case HORIZONTAL_ALIGN_RIGHT:
; 583  : 				fStanX -= m_textWidth;
; 584  : 				break;
; 585  : 
; 586  : 			case HORIZONTAL_ALIGN_CENTER:
; 587  : 				fStanX -= float(m_textWidth / 2);
; 588  : 				break;
; 589  : 		}
; 590  : 	}
; 591  : 
; 592  : 	switch (m_vAlign)

  00091	66 8b 47 0c	 mov	 ax, WORD PTR [edi+12]
  00095	66 d1 e8	 shr	 ax, 1
  00098	0f b7 c0	 movzx	 eax, ax
$LN314@Render:
  0009b	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _fStanX$[ebp]
  000a0	66 0f 6e c0	 movd	 xmm0, eax
  000a4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000a7	f3 0f 5c c8	 subss	 xmm1, xmm0
  000ab	f3 0f 11 4d 8c	 movss	 DWORD PTR _fStanX$[ebp], xmm1
$LN4@Render:
  000b0	8a 47 11	 mov	 al, BYTE PTR [edi+17]
  000b3	3c 20		 cmp	 al, 32			; 00000020H
  000b5	74 21		 je	 SHORT $LN35@Render
  000b7	3c 30		 cmp	 al, 48			; 00000030H
  000b9	75 44		 jne	 SHORT $LN6@Render

; 593  : 	{
; 594  : 		case VERTICAL_ALIGN_BOTTOM:
; 595  : 			fStanY -= m_textHeight;

  000bb	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  000bf	66 0f 6e c0	 movd	 xmm0, eax
  000c3	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 596  : 			break;

  000c6	eb 23		 jmp	 SHORT $LN315@Render
$LN28@Render:

; 568  : 		{
; 569  : 			case HORIZONTAL_ALIGN_LEFT:
; 570  : 				fStanX -= m_textWidth;
; 571  : 				break;
; 572  : 
; 573  : 			case HORIZONTAL_ALIGN_CENTER:
; 574  : 				fStanX -= float(m_textWidth / 2);
; 575  : 				break;
; 576  : 		}
; 577  : 	}
; 578  : 	else
; 579  : 	{
; 580  : 		switch (m_hAlign)

  000c8	83 e9 02	 sub	 ecx, 2
  000cb	74 c4		 je	 SHORT $LN33@Render
  000cd	83 e9 01	 sub	 ecx, 1
  000d0	75 de		 jne	 SHORT $LN4@Render
$LN30@Render:

; 581  : 		{
; 582  : 			case HORIZONTAL_ALIGN_RIGHT:
; 583  : 				fStanX -= m_textWidth;
; 584  : 				break;
; 585  : 
; 586  : 			case HORIZONTAL_ALIGN_CENTER:
; 587  : 				fStanX -= float(m_textWidth / 2);
; 588  : 				break;
; 589  : 		}
; 590  : 	}
; 591  : 
; 592  : 	switch (m_vAlign)

  000d2	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  000d6	eb c3		 jmp	 SHORT $LN314@Render
$LN35@Render:

; 597  : 
; 598  : 		case VERTICAL_ALIGN_CENTER:
; 599  : 			fStanY -= float(m_textHeight) / 2.0f;

  000d8	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  000dc	66 0f 6e c0	 movd	 xmm0, eax
  000e0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000e3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
$LN315@Render:

; 600  : 			break;
; 601  : 	}
; 602  : 
; 603  : 	//WORD FillRectIndices[6] = { 0, 2, 1, 2, 3, 1 };
; 604  : 
; 605  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  000eb	f3 0f 10 8d 70
	ff ff ff	 movss	 xmm1, DWORD PTR _fStanY$1$[ebp]
  000f3	f3 0f 5c c8	 subss	 xmm1, xmm0
  000f7	f3 0f 11 8d 70
	ff ff ff	 movss	 DWORD PTR _fStanY$1$[ebp], xmm1
$LN6@Render:
  000ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00105	6a 05		 push	 5
  00107	6a 13		 push	 19			; 00000013H
  00109	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 606  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  0010e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00114	6a 06		 push	 6
  00116	6a 14		 push	 20			; 00000014H
  00118	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 607  : 	DWORD dwFogEnable = STATEMANAGER.GetRenderState(D3DRS_FOGENABLE);

  0011d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00123	6a 1c		 push	 28			; 0000001cH
  00125	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 608  : 	DWORD dwLighting = STATEMANAGER.GetRenderState(D3DRS_LIGHTING);

  0012a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00130	68 89 00 00 00	 push	 137			; 00000089H
  00135	89 85 44 ff ff
	ff		 mov	 DWORD PTR _dwFogEnable$1$[ebp], eax
  0013b	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 609  : 	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, FALSE);

  00140	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00146	6a 00		 push	 0
  00148	6a 1c		 push	 28			; 0000001cH
  0014a	89 85 3c ff ff
	ff		 mov	 DWORD PTR _dwLighting$1$[ebp], eax
  00150	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 610  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  00155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0015b	6a 00		 push	 0
  0015d	68 89 00 00 00	 push	 137			; 00000089H
  00162	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 611  : 
; 612  : 	STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0016d	68 42 01 00 00	 push	 322			; 00000142H
  00172	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 613  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  00177	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0017d	6a 02		 push	 2
  0017f	6a 02		 push	 2
  00181	6a 00		 push	 0
  00183	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 614  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0018e	6a 00		 push	 0
  00190	6a 03		 push	 3
  00192	6a 00		 push	 0
  00194	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 615  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  00199	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0019f	6a 04		 push	 4
  001a1	6a 01		 push	 1
  001a3	6a 00		 push	 0
  001a5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 616  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  001aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b0	6a 02		 push	 2
  001b2	6a 05		 push	 5
  001b4	6a 00		 push	 0
  001b6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 617  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  001bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c1	6a 00		 push	 0
  001c3	6a 06		 push	 6
  001c5	6a 00		 push	 0
  001c7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 618  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  001cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d2	6a 04		 push	 4
  001d4	6a 04		 push	 4
  001d6	6a 00		 push	 0
  001d8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 619  : 
; 620  : 	{
; 621  : 		const float fFontHalfWeight=1.0f;
; 622  : 
; 623  : 		float fCurX;
; 624  : 		float fCurY;
; 625  : 
; 626  : 		float fFontSx;
; 627  : 		float fFontSy;
; 628  : 		float fFontEx;
; 629  : 		float fFontEy;
; 630  : 		float fFontWidth;
; 631  : 		float fFontHeight;
; 632  : 		float fFontMaxHeight;
; 633  : 		float fFontAdvance;
; 634  : 
; 635  : 		SVertex akVertex[4];
; 636  : 		akVertex[0].z=m_v3Position.z;
; 637  : 		akVertex[1].z=m_v3Position.z;
; 638  : 		akVertex[2].z=m_v3Position.z;
; 639  : 		akVertex[3].z=m_v3Position.z;
; 640  : 
; 641  : 		CGraphicFontTexture::TCharacterInfomation* pCurCharInfo;
; 642  : 
; 643  : 		if (m_isOutline)

  001dd	80 7f 2c 00	 cmp	 BYTE PTR [edi+44], 0
  001e1	0f 57 db	 xorps	 xmm3, xmm3
  001e4	f3 0f 10 47 54	 movss	 xmm0, DWORD PTR [edi+84]
  001e9	f3 0f 11 45 a0	 movss	 DWORD PTR _akVertex$14[ebp+8], xmm0
  001ee	f3 0f 11 45 b8	 movss	 DWORD PTR _akVertex$14[ebp+32], xmm0
  001f3	f3 0f 11 45 d0	 movss	 DWORD PTR _akVertex$14[ebp+56], xmm0
  001f8	f3 0f 11 45 e8	 movss	 DWORD PTR _akVertex$14[ebp+80], xmm0
  001fd	0f 84 72 04 00
	00		 je	 $LN304@Render
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00203	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 653  : 			for(int i = 0; i < m_pCharInfoVector.size(); ++i)

  00206	33 c9		 xor	 ecx, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00208	8b 57 60	 mov	 edx, DWORD PTR [edi+96]
  0020b	2b c2		 sub	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 645  : 			fCurX=fStanX;

  0020d	f3 0f 10 55 8c	 movss	 xmm2, DWORD PTR _fStanX$[ebp]

; 646  : 			fCurY=fStanY;

  00212	f3 0f 10 a5 70
	ff ff ff	 movss	 xmm4, DWORD PTR _fStanY$1$[ebp]
  0021a	0f 28 ca	 movaps	 xmm1, xmm2
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0021d	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 645  : 			fCurX=fStanX;

  00220	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$1$[ebp], xmm1

; 646  : 			fCurY=fStanY;

  00225	f3 0f 11 65 80	 movss	 DWORD PTR _fCurY$1$[ebp], xmm4

; 653  : 			for(int i = 0; i < m_pCharInfoVector.size(); ++i)

  0022a	89 4d 88	 mov	 DWORD PTR _i$1$[ebp], ecx
  0022d	85 c0		 test	 eax, eax
  0022f	0f 84 40 04 00
	00		 je	 $LN304@Render
  00235	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL10@Render:

; 654  : 			{
; 655  : 				pCurCharInfo = m_pCharInfoVector[i];

  00240	8b 34 8a	 mov	 esi, DWORD PTR [edx+ecx*4]
  00243	89 b5 74 ff ff
	ff		 mov	 DWORD PTR _pCurCharInfo$1$[ebp], esi

; 656  : 
; 657  : 				fFontWidth=float(pCurCharInfo->width);

  00249	0f bf 46 02	 movsx	 eax, WORD PTR [esi+2]

; 658  : 				fFontHeight=float(pCurCharInfo->height);
; 659  : 				fFontAdvance=float(pCurCharInfo->advance);

  0024d	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  00252	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR tv2694[ebp], xmm0
  0025a	66 0f 6e e8	 movd	 xmm5, eax
  0025e	0f bf 46 04	 movsx	 eax, WORD PTR [esi+4]
  00262	0f 5b ed	 cvtdq2ps xmm5, xmm5
  00265	66 0f 6e f0	 movd	 xmm6, eax

; 660  : 
; 661  : 				if ((fCurX+fFontWidth)-m_v3Position.x > m_fLimitWidth)

  00269	0f 28 c5	 movaps	 xmm0, xmm5
  0026c	f3 0f 11 6d 84	 movss	 DWORD PTR _fFontWidth$1$[ebp], xmm5
  00271	f3 0f 58 c1	 addss	 xmm0, xmm1
  00275	0f 5b f6	 cvtdq2ps xmm6, xmm6
  00278	f3 0f 5c 47 4c	 subss	 xmm0, DWORD PTR [edi+76]
  0027d	f3 0f 11 b5 7c
	ff ff ff	 movss	 DWORD PTR _fFontHeight$1$[ebp], xmm6
  00285	0f 2f 47 14	 comiss	 xmm0, DWORD PTR [edi+20]
  00289	76 1d		 jbe	 SHORT $LN307@Render

; 662  : 				{
; 663  : 					if (m_isMultiLine)

  0028b	80 7f 1a 00	 cmp	 BYTE PTR [edi+26], 0
  0028f	0f 84 e0 03 00
	00		 je	 $LN304@Render

; 664  : 					{
; 665  : 						fCurX=fStanX;
; 666  : 						fCurY+=fFontMaxHeight;

  00295	f3 0f 58 e3	 addss	 xmm4, xmm3
  00299	0f 28 ca	 movaps	 xmm1, xmm2
  0029c	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$1$[ebp], xmm1
  002a1	f3 0f 11 65 80	 movss	 DWORD PTR _fCurY$1$[ebp], xmm4
  002a6	eb 05		 jmp	 SHORT $LN39@Render
$LN307@Render:

; 660  : 
; 661  : 				if ((fCurX+fFontWidth)-m_v3Position.x > m_fLimitWidth)

  002a8	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _fCurX$1$[ebp]
$LN39@Render:

; 667  : 					}
; 668  : 					else
; 669  : 					{
; 670  : 						break;
; 671  : 					}
; 672  : 				}
; 673  : #ifdef ENABLE_MULTI_TEXTLINE
; 674  : 			if(m_isEnterToken && std::find(m_vLineCutPos.begin(), m_vLineCutPos.end(), i) != m_vLineCutPos.end())

  002ad	80 7f 1b 00	 cmp	 BYTE PTR [edi+27], 0
  002b1	0f 84 e3 00 00
	00		 je	 $LN40@Render
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  002b7	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
  002ba	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  002bd	3b c2		 cmp	 eax, edx
  002bf	0f 84 d5 00 00
	00		 je	 $LN40@Render
$LL113@Render:

; 5186 :         if (*_First == _Val) {

  002c5	39 08		 cmp	 DWORD PTR [eax], ecx
  002c7	74 0c		 je	 SHORT $LN302@Render

; 5185 :     for (; _First != _Last; ++_First) {

  002c9	83 c0 04	 add	 eax, 4
  002cc	3b c2		 cmp	 eax, edx
  002ce	75 f5		 jne	 SHORT $LL113@Render
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 996  : 			ly = -ly + m_textHeight;

  002d0	e9 c5 00 00 00	 jmp	 $LN40@Render
$LN302@Render:

; 675  : 			{
; 676  : 				switch (m_hAlign)

  002d5	0f b6 47 10	 movzx	 eax, BYTE PTR [edi+16]
  002d9	83 e8 01	 sub	 eax, 1
  002dc	0f 84 9f 00 00
	00		 je	 $LN41@Render
  002e2	83 e8 01	 sub	 eax, 1
  002e5	74 4c		 je	 SHORT $LN42@Render
  002e7	83 e8 01	 sub	 eax, 1
  002ea	0f 85 99 00 00
	00		 jne	 $LN11@Render

; 685  : 						
; 686  : 					case HORIZONTAL_ALIGN_RIGHT:
; 687  : 						fCurX = fStanX + float(m_textWidth - GetTextWidth(i));

  002f0	0f b7 77 0c	 movzx	 esi, WORD PTR [edi+12]
  002f4	51		 push	 ecx
  002f5	8b cf		 mov	 ecx, edi
  002f7	e8 00 00 00 00	 call	 ?GetTextWidth@CGraphicTextInstance@@QAEMH@Z ; CGraphicTextInstance::GetTextWidth
  002fc	f3 0f 10 65 80	 movss	 xmm4, DWORD PTR _fCurY$1$[ebp]
  00301	f3 0f 10 6d 84	 movss	 xmm5, DWORD PTR _fFontWidth$1$[ebp]
  00306	f3 0f 10 b5 7c
	ff ff ff	 movss	 xmm6, DWORD PTR _fFontHeight$1$[ebp]
  0030e	8b 4d 88	 mov	 ecx, DWORD PTR _i$1$[ebp]
  00311	66 0f 6e c6	 movd	 xmm0, esi
  00315	8b b5 74 ff ff
	ff		 mov	 esi, DWORD PTR _pCurCharInfo$1$[ebp]
  0031b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0031e	f3 0f 11 45 90	 movss	 DWORD PTR tv3237[ebp], xmm0
  00323	d8 6d 90	 fsubr	 DWORD PTR tv3237[ebp]
  00326	d8 45 8c	 fadd	 DWORD PTR _fStanX$[ebp]
  00329	d9 5d 90	 fstp	 DWORD PTR _fCurX$11[ebp]
  0032c	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _fCurX$11[ebp]
  00331	eb 51		 jmp	 SHORT $LN316@Render
$LN42@Render:

; 680  : 						break;
; 681  : 			
; 682  : 					case HORIZONTAL_ALIGN_CENTER:
; 683  : 						fCurX = fStanX + float(m_textWidth - GetTextWidth(i)) / 2.0f;

  00333	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  00337	51		 push	 ecx
  00338	8b cf		 mov	 ecx, edi
  0033a	66 0f 6e c8	 movd	 xmm1, eax
  0033e	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00341	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$1$[ebp], xmm1
  00346	e8 00 00 00 00	 call	 ?GetTextWidth@CGraphicTextInstance@@QAEMH@Z ; CGraphicTextInstance::GetTextWidth
  0034b	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _fCurX$1$[ebp]

; 684  : 						break;

  00350	f3 0f 10 65 80	 movss	 xmm4, DWORD PTR _fCurY$1$[ebp]
  00355	f3 0f 10 6d 84	 movss	 xmm5, DWORD PTR _fFontWidth$1$[ebp]
  0035a	f3 0f 10 b5 7c
	ff ff ff	 movss	 xmm6, DWORD PTR _fFontHeight$1$[ebp]
  00362	8b 4d 88	 mov	 ecx, DWORD PTR _i$1$[ebp]
  00365	d9 5d 90	 fstp	 DWORD PTR tv3232[ebp]
  00368	f3 0f 5c 4d 90	 subss	 xmm1, DWORD PTR tv3232[ebp]
  0036d	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00375	f3 0f 58 4d 8c	 addss	 xmm1, DWORD PTR _fStanX$[ebp]
  0037a	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$1$[ebp], xmm1
  0037f	eb 08		 jmp	 SHORT $LN11@Render
$LN41@Render:

; 677  : 				{
; 678  : 					case HORIZONTAL_ALIGN_LEFT:
; 679  : 						fCurX = fStanX;

  00381	0f 28 ca	 movaps	 xmm1, xmm2
$LN316@Render:

; 688  : 						break;
; 689  : 				}
; 690  : 				
; 691  : 				//fCurX=fStanX;
; 692  : 				fCurY+=m_iLineHeight;

  00384	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$1$[ebp], xmm1
$LN11@Render:
  00389	66 0f 6e 47 1c	 movd	 xmm0, DWORD PTR [edi+28]
  0038e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00391	f3 0f 58 e0	 addss	 xmm4, xmm0
  00395	f3 0f 11 65 80	 movss	 DWORD PTR _fCurY$1$[ebp], xmm4
$LN40@Render:

; 693  : 			}
; 694  : #endif
; 695  : 				if (pClipRect)

  0039a	8b 43 08	 mov	 eax, DWORD PTR _pClipRect$[ebx]
  0039d	85 c0		 test	 eax, eax
  0039f	74 11		 je	 SHORT $LN45@Render

; 696  : 				{
; 697  : 					if (fCurY <= pClipRect->top)

  003a1	66 0f 6e 40 04	 movd	 xmm0, DWORD PTR [eax+4]
  003a6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003a9	0f 2f c4	 comiss	 xmm0, xmm4
  003ac	0f 83 92 02 00
	00		 jae	 $LN8@Render
$LN45@Render:

; 698  : 					{
; 699  : 						fCurX += fFontAdvance;
; 700  : 						continue;
; 701  : 					}
; 702  : 				}
; 703  : 
; 704  : 				fFontSx = fCurX - 0.5f;

  003b2	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f000000

; 705  : 				fFontSy = fCurY - 0.5f;
; 706  : 				fFontEx = fFontSx + fFontWidth;
; 707  : 				fFontEy = fFontSy + fFontHeight;
; 708  : 
; 709  : 				pFontTexture->SelectTexture(pCurCharInfo->index);

  003ba	0f bf 06	 movsx	 eax, WORD PTR [esi]
  003bd	0f 28 c4	 movaps	 xmm0, xmm4
  003c0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  003c8	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  003ce	50		 push	 eax
  003cf	f3 0f 11 8d 74
	ff ff ff	 movss	 DWORD PTR _fFontSx$1$[ebp], xmm1
  003d7	f3 0f 58 cd	 addss	 xmm1, xmm5
  003db	f3 0f 11 45 84	 movss	 DWORD PTR _fFontSy$1$[ebp], xmm0
  003e0	f3 0f 58 c6	 addss	 xmm0, xmm6
  003e4	f3 0f 11 8d 7c
	ff ff ff	 movss	 DWORD PTR _fFontEx$1$[ebp], xmm1
  003ec	f3 0f 11 45 90	 movss	 DWORD PTR _fFontEy$1$[ebp], xmm0
  003f1	e8 00 00 00 00	 call	 ?SelectTexture@CGraphicFontTexture@@QAEXK@Z ; CGraphicFontTexture::SelectTexture

; 710  : 				STATEMANAGER.SetTexture(0, pFontTexture->GetD3DTexture());

  003f6	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  003fc	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00401	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00407	50		 push	 eax
  00408	6a 00		 push	 0
  0040a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 711  : 
; 712  : 				akVertex[0].u=pCurCharInfo->left;

  0040f	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00414	0f 57 d2	 xorps	 xmm2, xmm2
  00417	f3 0f 11 45 a8	 movss	 DWORD PTR _akVertex$14[ebp+16], xmm0

; 713  : 				akVertex[0].v=pCurCharInfo->top;

  0041c	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00421	f3 0f 11 45 ac	 movss	 DWORD PTR _akVertex$14[ebp+20], xmm0

; 714  : 				akVertex[1].u=pCurCharInfo->left;

  00426	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0042b	f3 0f 11 45 c0	 movss	 DWORD PTR _akVertex$14[ebp+40], xmm0

; 715  : 				akVertex[1].v=pCurCharInfo->bottom;

  00430	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  00435	f3 0f 11 45 c4	 movss	 DWORD PTR _akVertex$14[ebp+44], xmm0

; 716  : 				akVertex[2].u=pCurCharInfo->right;

  0043a	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  0043f	f3 0f 11 45 d8	 movss	 DWORD PTR _akVertex$14[ebp+64], xmm0

; 717  : 				akVertex[2].v=pCurCharInfo->top;

  00444	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00449	f3 0f 11 45 dc	 movss	 DWORD PTR _akVertex$14[ebp+68], xmm0

; 718  : 				akVertex[3].u=pCurCharInfo->right;

  0044e	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00453	f3 0f 11 45 f0	 movss	 DWORD PTR _akVertex$14[ebp+88], xmm0

; 719  : 				akVertex[3].v=pCurCharInfo->bottom;

  00458	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  0045d	f3 0f 11 45 f4	 movss	 DWORD PTR _akVertex$14[ebp+92], xmm0

; 720  : 
; 721  : 				akVertex[3].color = akVertex[2].color = akVertex[1].color = akVertex[0].color = m_dwOutLineColor;
; 722  : 
; 723  : 
; 724  : 				float feather = 0.0f; // m_fFontFeather
; 725  : 
; 726  : 				akVertex[0].y=fFontSy-feather;
; 727  : 				akVertex[1].y=fFontEy+feather;

  00462	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _fFontEy$1$[ebp]
  00467	f3 0f 58 c2	 addss	 xmm0, xmm2
  0046b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0046e	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _fFontSy$1$[ebp]
  00473	f3 0f 5c ca	 subss	 xmm1, xmm2
  00477	89 45 a4	 mov	 DWORD PTR _akVertex$14[ebp+12], eax
  0047a	89 45 bc	 mov	 DWORD PTR _akVertex$14[ebp+36], eax
  0047d	89 45 d4	 mov	 DWORD PTR _akVertex$14[ebp+60], eax
  00480	f3 0f 11 45 b4	 movss	 DWORD PTR _akVertex$14[ebp+28], xmm0

; 728  : 				akVertex[2].y=fFontSy-feather;
; 729  : 				akVertex[3].y=fFontEy+feather;

  00485	f3 0f 11 45 e4	 movss	 DWORD PTR _akVertex$14[ebp+76], xmm0

; 730  : 
; 731  : 				akVertex[0].x=fFontSx-fFontHalfWeight-feather;

  0048a	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _fFontSx$1$[ebp]
  00492	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0049a	89 45 ec	 mov	 DWORD PTR _akVertex$14[ebp+84], eax

; 732  : 				akVertex[1].x=fFontSx-fFontHalfWeight-feather;
; 733  : 				akVertex[2].x=fFontEx-fFontHalfWeight+feather;
; 734  : 				akVertex[3].x=fFontEx-fFontHalfWeight+feather;
; 735  : 
; 736  : 				if (CGraphicBase::SetPDTStream((SPDTVertex*)akVertex, 4))

  0049d	8d 45 98	 lea	 eax, DWORD PTR _akVertex$14[ebp]
  004a0	6a 04		 push	 4
  004a2	50		 push	 eax
  004a3	f3 0f 11 4d 9c	 movss	 DWORD PTR _akVertex$14[ebp+4], xmm1
  004a8	f3 0f 5c c2	 subss	 xmm0, xmm2
  004ac	f3 0f 11 4d cc	 movss	 DWORD PTR _akVertex$14[ebp+52], xmm1
  004b1	f3 0f 11 45 98	 movss	 DWORD PTR _akVertex$14[ebp], xmm0
  004b6	f3 0f 11 45 b0	 movss	 DWORD PTR _akVertex$14[ebp+24], xmm0
  004bb	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _fFontEx$1$[ebp]
  004c3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  004cb	f3 0f 58 c2	 addss	 xmm0, xmm2
  004cf	f3 0f 11 45 c8	 movss	 DWORD PTR _akVertex$14[ebp+48], xmm0
  004d4	f3 0f 11 45 e0	 movss	 DWORD PTR _akVertex$14[ebp+72], xmm0
  004d9	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  004de	83 c4 08	 add	 esp, 8
  004e1	84 c0		 test	 al, al
  004e3	74 11		 je	 SHORT $LN46@Render

; 737  : 					STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  004e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004eb	6a 02		 push	 2
  004ed	6a 00		 push	 0
  004ef	6a 05		 push	 5
  004f1	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN46@Render:

; 738  : 
; 739  : 
; 740  : 				akVertex[0].x=fFontSx+fFontHalfWeight-feather;

  004f6	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _fFontSx$1$[ebp]

; 741  : 				akVertex[1].x=fFontSx+fFontHalfWeight-feather;
; 742  : 				akVertex[2].x=fFontEx+fFontHalfWeight+feather;
; 743  : 				akVertex[3].x=fFontEx+fFontHalfWeight+feather;
; 744  : 
; 745  : 				if (CGraphicBase::SetPDTStream((SPDTVertex*)akVertex, 4))

  004fe	8d 45 98	 lea	 eax, DWORD PTR _akVertex$14[ebp]
  00501	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00509	0f 57 d2	 xorps	 xmm2, xmm2
  0050c	6a 04		 push	 4
  0050e	50		 push	 eax
  0050f	f3 0f 5c c2	 subss	 xmm0, xmm2
  00513	f3 0f 11 45 98	 movss	 DWORD PTR _akVertex$14[ebp], xmm0
  00518	f3 0f 11 45 b0	 movss	 DWORD PTR _akVertex$14[ebp+24], xmm0
  0051d	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _fFontEx$1$[ebp]
  00525	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0052d	f3 0f 58 c2	 addss	 xmm0, xmm2
  00531	f3 0f 11 45 c8	 movss	 DWORD PTR _akVertex$14[ebp+48], xmm0
  00536	f3 0f 11 45 e0	 movss	 DWORD PTR _akVertex$14[ebp+72], xmm0
  0053b	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00540	83 c4 08	 add	 esp, 8
  00543	84 c0		 test	 al, al
  00545	74 11		 je	 SHORT $LN47@Render

; 746  : 					STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  00547	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0054d	6a 02		 push	 2
  0054f	6a 00		 push	 0
  00551	6a 05		 push	 5
  00553	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN47@Render:

; 747  : 
; 748  : 				akVertex[0].x=fFontSx-feather;

  00558	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _fFontSx$1$[ebp]

; 749  : 				akVertex[1].x=fFontSx-feather;
; 750  : 				akVertex[2].x=fFontEx+feather;
; 751  : 				akVertex[3].x=fFontEx+feather;
; 752  : 
; 753  : 				akVertex[0].y=fFontSy-fFontHalfWeight-feather;
; 754  : 				akVertex[1].y=fFontEy-fFontHalfWeight+feather;
; 755  : 				akVertex[2].y=fFontSy-fFontHalfWeight-feather;
; 756  : 				akVertex[3].y=fFontEy-fFontHalfWeight+feather;
; 757  : 
; 758  : 				// 20041216.myevan.DrawPrimitiveUP
; 759  : 				if (CGraphicBase::SetPDTStream((SPDTVertex*)akVertex, 4))

  00560	8d 45 98	 lea	 eax, DWORD PTR _akVertex$14[ebp]
  00563	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _fFontSy$1$[ebp]
  00568	0f 57 d2	 xorps	 xmm2, xmm2
  0056b	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  00573	f3 0f 5c c2	 subss	 xmm0, xmm2
  00577	6a 04		 push	 4
  00579	50		 push	 eax
  0057a	f3 0f 5c ca	 subss	 xmm1, xmm2
  0057e	f3 0f 11 45 98	 movss	 DWORD PTR _akVertex$14[ebp], xmm0
  00583	f3 0f 11 45 b0	 movss	 DWORD PTR _akVertex$14[ebp+24], xmm0
  00588	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _fFontEx$1$[ebp]
  00590	f3 0f 58 c2	 addss	 xmm0, xmm2
  00594	f3 0f 11 4d 9c	 movss	 DWORD PTR _akVertex$14[ebp+4], xmm1
  00599	f3 0f 11 4d cc	 movss	 DWORD PTR _akVertex$14[ebp+52], xmm1
  0059e	f3 0f 11 45 c8	 movss	 DWORD PTR _akVertex$14[ebp+48], xmm0
  005a3	f3 0f 11 45 e0	 movss	 DWORD PTR _akVertex$14[ebp+72], xmm0
  005a8	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _fFontEy$1$[ebp]
  005ad	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  005b5	f3 0f 58 c2	 addss	 xmm0, xmm2
  005b9	f3 0f 11 45 b4	 movss	 DWORD PTR _akVertex$14[ebp+28], xmm0
  005be	f3 0f 11 45 e4	 movss	 DWORD PTR _akVertex$14[ebp+76], xmm0
  005c3	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  005c8	83 c4 08	 add	 esp, 8
  005cb	84 c0		 test	 al, al
  005cd	74 11		 je	 SHORT $LN48@Render

; 760  : 					STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  005cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005d5	6a 02		 push	 2
  005d7	6a 00		 push	 0
  005d9	6a 05		 push	 5
  005db	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN48@Render:

; 761  : 
; 762  : 				akVertex[0].y=fFontSy+fFontHalfWeight-feather;

  005e0	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _fFontSy$1$[ebp]

; 763  : 				akVertex[1].y=fFontEy+fFontHalfWeight+feather;
; 764  : 				akVertex[2].y=fFontSy+fFontHalfWeight-feather;
; 765  : 				akVertex[3].y=fFontEy+fFontHalfWeight+feather;
; 766  : 
; 767  : 				// 20041216.myevan.DrawPrimitiveUP
; 768  : 				if (CGraphicBase::SetPDTStream((SPDTVertex*)akVertex, 4))

  005e5	8d 45 98	 lea	 eax, DWORD PTR _akVertex$14[ebp]
  005e8	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _fFontEy$1$[ebp]
  005ed	0f 57 d2	 xorps	 xmm2, xmm2
  005f0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  005f8	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00600	6a 04		 push	 4
  00602	50		 push	 eax
  00603	f3 0f 5c c2	 subss	 xmm0, xmm2
  00607	f3 0f 58 ca	 addss	 xmm1, xmm2
  0060b	f3 0f 11 45 9c	 movss	 DWORD PTR _akVertex$14[ebp+4], xmm0
  00610	f3 0f 11 4d b4	 movss	 DWORD PTR _akVertex$14[ebp+28], xmm1
  00615	f3 0f 11 45 cc	 movss	 DWORD PTR _akVertex$14[ebp+52], xmm0
  0061a	f3 0f 11 4d e4	 movss	 DWORD PTR _akVertex$14[ebp+76], xmm1
  0061f	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00624	83 c4 08	 add	 esp, 8
  00627	84 c0		 test	 al, al
  00629	74 11		 je	 SHORT $LN309@Render

; 769  : 					STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  0062b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00631	6a 02		 push	 2
  00633	6a 00		 push	 0
  00635	6a 05		 push	 5
  00637	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN309@Render:

; 653  : 			for(int i = 0; i < m_pCharInfoVector.size(); ++i)

  0063c	8b 4d 88	 mov	 ecx, DWORD PTR _i$1$[ebp]
  0063f	f3 0f 10 65 80	 movss	 xmm4, DWORD PTR _fCurY$1$[ebp]
$LN8@Render:
  00644	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _fCurX$1$[ebp]
  00649	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0064a	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  0064d	0f 57 db	 xorps	 xmm3, xmm3
  00650	8b 57 60	 mov	 edx, DWORD PTR [edi+96]
  00653	2b c2		 sub	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 653  : 			for(int i = 0; i < m_pCharInfoVector.size(); ++i)

  00655	f3 0f 58 8d 6c
	ff ff ff	 addss	 xmm1, DWORD PTR tv2694[ebp]
  0065d	f3 0f 10 55 8c	 movss	 xmm2, DWORD PTR _fStanX$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00662	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 653  : 			for(int i = 0; i < m_pCharInfoVector.size(); ++i)

  00665	89 4d 88	 mov	 DWORD PTR _i$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00668	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$1$[ebp], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 653  : 			for(int i = 0; i < m_pCharInfoVector.size(); ++i)

  0066d	3b c8		 cmp	 ecx, eax
  0066f	0f 82 cb fb ff
	ff		 jb	 $LL10@Render
$LN304@Render:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00675	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 779  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00678	33 f6		 xor	 esi, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0067a	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  0067d	2b c1		 sub	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 775  : 		fCurX=fStanX;

  0067f	f3 0f 10 55 8c	 movss	 xmm2, DWORD PTR _fStanX$[ebp]

; 776  : 		fCurY=fStanY;

  00684	f3 0f 10 9d 70
	ff ff ff	 movss	 xmm3, DWORD PTR _fStanY$1$[ebp]
  0068c	0f 28 ca	 movaps	 xmm1, xmm2
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0068f	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 775  : 		fCurX=fStanX;

  00692	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$2$[ebp], xmm1

; 776  : 		fCurY=fStanY;

  00697	f3 0f 11 5d 88	 movss	 DWORD PTR _fCurY$2$[ebp], xmm3

; 779  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  0069c	89 75 84	 mov	 DWORD PTR _i$1$[ebp], esi
  0069f	85 c0		 test	 eax, eax
  006a1	0f 84 e6 02 00
	00		 je	 $LN305@Render
  006a7	eb 0c		 jmp	 SHORT $LN15@Render
  006a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL308@Render:
  006b0	f3 0f 10 55 8c	 movss	 xmm2, DWORD PTR _fStanX$[ebp]
$LN15@Render:

; 780  : 		{
; 781  : 			pCurCharInfo = m_pCharInfoVector[i];

  006b5	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  006b8	89 4d 80	 mov	 DWORD PTR _pCurCharInfo$2$[ebp], ecx

; 782  : 
; 783  : 			fFontWidth=float(pCurCharInfo->width);

  006bb	0f bf 41 02	 movsx	 eax, WORD PTR [ecx+2]

; 784  : 			fFontHeight=float(pCurCharInfo->height);
; 785  : 			fFontMaxHeight=max(fFontHeight, pCurCharInfo->height);
; 786  : 			fFontAdvance=float(pCurCharInfo->advance);

  006bf	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  006c4	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR tv2747[ebp], xmm0
  006cc	66 0f 6e e8	 movd	 xmm5, eax
  006d0	0f bf 41 04	 movsx	 eax, WORD PTR [ecx+4]
  006d4	0f 5b ed	 cvtdq2ps xmm5, xmm5
  006d7	66 0f 6e e0	 movd	 xmm4, eax

; 787  : 
; 788  : 			if ((fCurX+fFontWidth)-m_v3Position.x > m_fLimitWidth)

  006db	0f 28 c5	 movaps	 xmm0, xmm5
  006de	f3 0f 11 ad 74
	ff ff ff	 movss	 DWORD PTR _fFontWidth$2$[ebp], xmm5
  006e6	f3 0f 58 c1	 addss	 xmm0, xmm1
  006ea	0f 5b e4	 cvtdq2ps xmm4, xmm4
  006ed	f3 0f 5c 47 4c	 subss	 xmm0, DWORD PTR [edi+76]
  006f2	f3 0f 11 a5 7c
	ff ff ff	 movss	 DWORD PTR _fFontHeight$2$[ebp], xmm4
  006fa	0f 2f 47 14	 comiss	 xmm0, DWORD PTR [edi+20]
  006fe	76 20		 jbe	 SHORT $LN306@Render

; 789  : 			{
; 790  : 				if (m_isMultiLine)

  00700	80 7f 1a 00	 cmp	 BYTE PTR [edi+26], 0
  00704	0f 84 83 02 00
	00		 je	 $LN305@Render

; 791  : 				{
; 792  : 					fCurX=fStanX;
; 793  : 					fCurY+=fFontMaxHeight;

  0070a	0f 28 c4	 movaps	 xmm0, xmm4
  0070d	0f 28 ca	 movaps	 xmm1, xmm2
  00710	f3 0f 58 d8	 addss	 xmm3, xmm0
  00714	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$2$[ebp], xmm1
  00719	f3 0f 11 5d 88	 movss	 DWORD PTR _fCurY$2$[ebp], xmm3
  0071e	eb 05		 jmp	 SHORT $LN52@Render
$LN306@Render:

; 787  : 
; 788  : 			if ((fCurX+fFontWidth)-m_v3Position.x > m_fLimitWidth)

  00720	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _fCurX$2$[ebp]
$LN52@Render:

; 794  : 				}
; 795  : 				else
; 796  : 				{
; 797  : 					break;
; 798  : 				}
; 799  : 			}
; 800  : #ifdef ENABLE_MULTI_TEXTLINE
; 801  : 			if(m_isEnterToken && std::find(m_vLineCutPos.begin(), m_vLineCutPos.end(), i) != m_vLineCutPos.end())

  00725	80 7f 1b 00	 cmp	 BYTE PTR [edi+27], 0
  00729	0f 84 eb 00 00
	00		 je	 $LN53@Render
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0072f	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00732	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  00735	3b c1		 cmp	 eax, ecx
  00737	0f 84 da 00 00
	00		 je	 $LN311@Render
  0073d	0f 1f 00	 npad	 3
$LL149@Render:

; 5186 :         if (*_First == _Val) {

  00740	39 30		 cmp	 DWORD PTR [eax], esi
  00742	74 0c		 je	 SHORT $LN301@Render

; 5185 :     for (; _First != _Last; ++_First) {

  00744	83 c0 04	 add	 eax, 4
  00747	3b c1		 cmp	 eax, ecx
  00749	75 f5		 jne	 SHORT $LL149@Render
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 996  : 			ly = -ly + m_textHeight;

  0074b	e9 c7 00 00 00	 jmp	 $LN311@Render
$LN301@Render:

; 802  : 			{
; 803  : 				switch (m_hAlign)

  00750	0f b6 47 10	 movzx	 eax, BYTE PTR [edi+16]
  00754	83 e8 01	 sub	 eax, 1
  00757	0f 84 a0 00 00
	00		 je	 $LN54@Render
  0075d	83 e8 01	 sub	 eax, 1
  00760	74 4c		 je	 SHORT $LN55@Render
  00762	83 e8 01	 sub	 eax, 1
  00765	0f 85 9a 00 00
	00		 jne	 $LN16@Render

; 812  : 						
; 813  : 					case HORIZONTAL_ALIGN_RIGHT:
; 814  : 						fCurX = fStanX + float(m_textWidth - GetTextWidth(i));

  0076b	ff 75 84	 push	 DWORD PTR _i$1$[ebp]
  0076e	0f b7 77 0c	 movzx	 esi, WORD PTR [edi+12]
  00772	8b cf		 mov	 ecx, edi
  00774	e8 00 00 00 00	 call	 ?GetTextWidth@CGraphicTextInstance@@QAEMH@Z ; CGraphicTextInstance::GetTextWidth
  00779	f3 0f 10 a5 7c
	ff ff ff	 movss	 xmm4, DWORD PTR _fFontHeight$2$[ebp]
  00781	f3 0f 10 ad 74
	ff ff ff	 movss	 xmm5, DWORD PTR _fFontWidth$2$[ebp]
  00789	66 0f 6e c6	 movd	 xmm0, esi
  0078d	8b 75 84	 mov	 esi, DWORD PTR _i$1$[ebp]
  00790	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00793	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR tv3120[ebp], xmm0
  0079b	d8 ad 6c ff ff
	ff		 fsubr	 DWORD PTR tv3120[ebp]
  007a1	d8 45 8c	 fadd	 DWORD PTR _fStanX$[ebp]
  007a4	d9 5d 90	 fstp	 DWORD PTR _fCurX$11[ebp]
  007a7	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _fCurX$11[ebp]
  007ac	eb 52		 jmp	 SHORT $LN317@Render
$LN55@Render:

; 807  : 						break;
; 808  : 			
; 809  : 					case HORIZONTAL_ALIGN_CENTER:
; 810  : 						fCurX = fStanX + float(m_textWidth - GetTextWidth(i)) / 2.0f;

  007ae	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  007b2	8b cf		 mov	 ecx, edi
  007b4	56		 push	 esi
  007b5	66 0f 6e c8	 movd	 xmm1, eax
  007b9	0f 5b c9	 cvtdq2ps xmm1, xmm1
  007bc	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$2$[ebp], xmm1
  007c1	e8 00 00 00 00	 call	 ?GetTextWidth@CGraphicTextInstance@@QAEMH@Z ; CGraphicTextInstance::GetTextWidth
  007c6	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _fCurX$2$[ebp]

; 811  : 						break;

  007cb	f3 0f 10 a5 7c
	ff ff ff	 movss	 xmm4, DWORD PTR _fFontHeight$2$[ebp]
  007d3	f3 0f 10 ad 74
	ff ff ff	 movss	 xmm5, DWORD PTR _fFontWidth$2$[ebp]
  007db	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR tv3116[ebp]
  007e1	f3 0f 5c 8d 6c
	ff ff ff	 subss	 xmm1, DWORD PTR tv3116[ebp]
  007e9	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  007f1	f3 0f 58 4d 8c	 addss	 xmm1, DWORD PTR _fStanX$[ebp]
  007f6	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$2$[ebp], xmm1
  007fb	eb 08		 jmp	 SHORT $LN16@Render
$LN54@Render:

; 804  : 				{
; 805  : 					case HORIZONTAL_ALIGN_LEFT:
; 806  : 						fCurX = fStanX;

  007fd	0f 28 ca	 movaps	 xmm1, xmm2
$LN317@Render:

; 815  : 						break;
; 816  : 				}
; 817  : 				
; 818  : 				//fCurX=fStanX;
; 819  : 				fCurY+=m_iLineHeight;

  00800	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$2$[ebp], xmm1
$LN16@Render:
  00805	66 0f 6e 47 1c	 movd	 xmm0, DWORD PTR [edi+28]
  0080a	0f 5b d8	 cvtdq2ps xmm3, xmm0
  0080d	f3 0f 58 5d 88	 addss	 xmm3, DWORD PTR _fCurY$2$[ebp]
  00812	f3 0f 11 5d 88	 movss	 DWORD PTR _fCurY$2$[ebp], xmm3
$LN311@Render:

; 820  : 			}
; 821  : #endif
; 822  : 			if (pClipRect)

  00817	8b 4d 80	 mov	 ecx, DWORD PTR _pCurCharInfo$2$[ebp]
$LN53@Render:
  0081a	8b 43 08	 mov	 eax, DWORD PTR _pClipRect$[ebx]
  0081d	85 c0		 test	 eax, eax
  0081f	74 11		 je	 SHORT $LN58@Render

; 823  : 			{
; 824  : 				if (fCurY <= pClipRect->top)

  00821	66 0f 6e 40 04	 movd	 xmm0, DWORD PTR [eax+4]
  00826	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00829	0f 2f c3	 comiss	 xmm0, xmm3
  0082c	0f 83 32 01 00
	00		 jae	 $LN13@Render
$LN58@Render:

; 825  : 				{
; 826  : 					fCurX += fFontAdvance;
; 827  : 					continue;
; 828  : 				}
; 829  : 			}
; 830  : 
; 831  : 			fFontSx = fCurX-0.5f;
; 832  : 			fFontSy = fCurY-0.5f;
; 833  : 			fFontEx = fFontSx + fFontWidth;
; 834  : 			fFontEy = fFontSy + fFontHeight;
; 835  : 
; 836  : 			pFontTexture->SelectTexture(pCurCharInfo->index);

  00832	0f bf 01	 movsx	 eax, WORD PTR [ecx]
  00835	0f 28 c1	 movaps	 xmm0, xmm1
  00838	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  00840	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  00846	0f 28 cb	 movaps	 xmm1, xmm3
  00849	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f000000
  00851	50		 push	 eax
  00852	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _fFontSx$2$[ebp], xmm0
  0085a	f3 0f 58 c5	 addss	 xmm0, xmm5
  0085e	f3 0f 11 4d 90	 movss	 DWORD PTR _fFontSy$2$[ebp], xmm1
  00863	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _fFontEx$2$[ebp], xmm0
  0086b	0f 28 c1	 movaps	 xmm0, xmm1
  0086e	f3 0f 58 c4	 addss	 xmm0, xmm4
  00872	f3 0f 11 45 84	 movss	 DWORD PTR _fFontEy$2$[ebp], xmm0
  00877	e8 00 00 00 00	 call	 ?SelectTexture@CGraphicFontTexture@@QAEXK@Z ; CGraphicFontTexture::SelectTexture

; 837  : 			STATEMANAGER.SetTexture(0, pFontTexture->GetD3DTexture());

  0087c	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  00882	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00887	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0088d	50		 push	 eax
  0088e	6a 00		 push	 0
  00890	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 838  : 
; 839  : 			akVertex[0].x=fFontSx;
; 840  : 			akVertex[0].y=fFontSy;
; 841  : 			akVertex[0].u=pCurCharInfo->left;

  00895	8b 45 80	 mov	 eax, DWORD PTR _pCurCharInfo$2$[ebp]
  00898	f3 0f 10 8d 6c
	ff ff ff	 movss	 xmm1, DWORD PTR _fFontSx$2$[ebp]
  008a0	f3 0f 10 55 90	 movss	 xmm2, DWORD PTR _fFontSy$2$[ebp]

; 842  : 			akVertex[0].v=pCurCharInfo->top;
; 843  : 
; 844  : 			akVertex[1].x=fFontSx;
; 845  : 			akVertex[1].y=fFontEy;
; 846  : 			akVertex[1].u=pCurCharInfo->left;
; 847  : 			akVertex[1].v=pCurCharInfo->bottom;
; 848  : 
; 849  : 			akVertex[2].x=fFontEx;

  008a5	f3 0f 10 9d 7c
	ff ff ff	 movss	 xmm3, DWORD PTR _fFontEx$2$[ebp]
  008ad	f3 0f 11 4d 98	 movss	 DWORD PTR _akVertex$14[ebp], xmm1
  008b2	f3 0f 11 55 9c	 movss	 DWORD PTR _akVertex$14[ebp+4], xmm2
  008b7	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  008bc	f3 0f 11 45 a8	 movss	 DWORD PTR _akVertex$14[ebp+16], xmm0
  008c1	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  008c6	f3 0f 11 4d b0	 movss	 DWORD PTR _akVertex$14[ebp+24], xmm1
  008cb	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _fFontEy$2$[ebp]
  008d0	f3 0f 11 45 ac	 movss	 DWORD PTR _akVertex$14[ebp+20], xmm0
  008d5	f3 0f 11 4d b4	 movss	 DWORD PTR _akVertex$14[ebp+28], xmm1
  008da	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  008df	f3 0f 11 45 c0	 movss	 DWORD PTR _akVertex$14[ebp+40], xmm0
  008e4	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  008e9	f3 0f 11 45 c4	 movss	 DWORD PTR _akVertex$14[ebp+44], xmm0
  008ee	f3 0f 11 5d c8	 movss	 DWORD PTR _akVertex$14[ebp+48], xmm3

; 850  : 			akVertex[2].y=fFontSy;

  008f3	f3 0f 11 55 cc	 movss	 DWORD PTR _akVertex$14[ebp+52], xmm2

; 851  : 			akVertex[2].u=pCurCharInfo->right;

  008f8	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  008fd	f3 0f 11 45 d8	 movss	 DWORD PTR _akVertex$14[ebp+64], xmm0

; 852  : 			akVertex[2].v=pCurCharInfo->top;

  00902	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00907	f3 0f 11 45 dc	 movss	 DWORD PTR _akVertex$14[ebp+68], xmm0

; 853  : 
; 854  : 			akVertex[3].x=fFontEx;

  0090c	f3 0f 11 5d e0	 movss	 DWORD PTR _akVertex$14[ebp+72], xmm3

; 855  : 			akVertex[3].y=fFontEy;

  00911	f3 0f 11 4d e4	 movss	 DWORD PTR _akVertex$14[ebp+76], xmm1

; 856  : 			akVertex[3].u=pCurCharInfo->right;

  00916	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0091b	f3 0f 11 45 f0	 movss	 DWORD PTR _akVertex$14[ebp+88], xmm0

; 857  : 			akVertex[3].v=pCurCharInfo->bottom;

  00920	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]

; 858  : 
; 859  : 			//m_dwColorInfoVector[i];
; 860  : 			//m_dwTextColor;
; 861  : 			akVertex[0].color = akVertex[1].color = akVertex[2].color = akVertex[3].color = m_dwColorInfoVector[i];

  00925	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  00928	f3 0f 11 45 f4	 movss	 DWORD PTR _akVertex$14[ebp+92], xmm0

; 862  : 
; 863  : 			// 20041216.myevan.DrawPrimitiveUP
; 864  : 			if (CGraphicBase::SetPDTStream((SPDTVertex*)akVertex, 4))

  0092d	6a 04		 push	 4
  0092f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00932	89 45 ec	 mov	 DWORD PTR _akVertex$14[ebp+84], eax
  00935	89 45 d4	 mov	 DWORD PTR _akVertex$14[ebp+60], eax
  00938	89 45 bc	 mov	 DWORD PTR _akVertex$14[ebp+36], eax
  0093b	89 45 a4	 mov	 DWORD PTR _akVertex$14[ebp+12], eax
  0093e	8d 45 98	 lea	 eax, DWORD PTR _akVertex$14[ebp]
  00941	50		 push	 eax
  00942	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00947	83 c4 08	 add	 esp, 8
  0094a	84 c0		 test	 al, al
  0094c	74 11		 je	 SHORT $LN310@Render

; 865  : 				STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  0094e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00954	6a 02		 push	 2
  00956	6a 00		 push	 0
  00958	6a 05		 push	 5
  0095a	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN310@Render:

; 779  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  0095f	f3 0f 10 5d 88	 movss	 xmm3, DWORD PTR _fCurY$2$[ebp]
$LN13@Render:
  00964	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _fCurX$2$[ebp]
  00969	46		 inc	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0096a	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  0096d	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  00970	2b c1		 sub	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 779  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00972	f3 0f 58 8d 4c
	ff ff ff	 addss	 xmm1, DWORD PTR tv2747[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0097a	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 779  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  0097d	89 75 84	 mov	 DWORD PTR _i$1$[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00980	f3 0f 11 4d 94	 movss	 DWORD PTR _fCurX$2$[ebp], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 779  : 		for (int i = 0; i < m_pCharInfoVector.size(); ++i)

  00985	3b f0		 cmp	 esi, eax
  00987	0f 82 23 fd ff
	ff		 jb	 $LL308@Render
$LN305@Render:

; 866  : 			//STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, akVertex, sizeof(SVertex));
; 867  : 
; 868  : 			fCurX += fFontAdvance;
; 869  : 		}
; 870  : 	}
; 871  : 
; 872  : 	if (m_isCursor)

  0098d	80 7f 18 00	 cmp	 BYTE PTR [edi+24], 0
  00991	0f 84 ea 02 00
	00		 je	 $LN68@Render

; 873  : 	{
; 874  : 		// Draw Cursor
; 875  : 		float sx, sy, ex, ey;
; 876  : 		TDiffuse diffuse;
; 877  : 
; 878  : 		int curpos = CIME::GetCurPos();

  00997	e8 00 00 00 00	 call	 ?GetCurPos@CIME@@SAHXZ	; CIME::GetCurPos
  0099c	89 45 90	 mov	 DWORD PTR _curpos$1$[ebp], eax

; 879  : 		int compend = curpos + CIME::GetCompLen();

  0099f	e8 00 00 00 00	 call	 ?GetCompLen@CIME@@SAHXZ	; CIME::GetCompLen

; 880  : 
; 881  : 		__GetTextPos(curpos, &sx, &sy);

  009a4	8d 4d 94	 lea	 ecx, DWORD PTR _sy$12[ebp]
  009a7	8b f0		 mov	 esi, eax
  009a9	8b 45 90	 mov	 eax, DWORD PTR _curpos$1$[ebp]
  009ac	03 f0		 add	 esi, eax
  009ae	51		 push	 ecx
  009af	8d 4d 88	 lea	 ecx, DWORD PTR _sx$10[ebp]
  009b2	51		 push	 ecx
  009b3	50		 push	 eax
  009b4	8b cf		 mov	 ecx, edi
  009b6	e8 00 00 00 00	 call	 ?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z ; CGraphicTextInstance::__GetTextPos

; 882  : 
; 883  : 		// If Composition
; 884  : 		if(curpos<compend)

  009bb	f3 0f 10 5d 88	 movss	 xmm3, DWORD PTR _sx$10[ebp]
  009c0	0f 29 9d 50 ff
	ff ff		 movaps	 XMMWORD PTR tv2941[ebp], xmm3
  009c7	39 75 90	 cmp	 DWORD PTR _curpos$1$[ebp], esi
  009ca	7d 29		 jge	 SHORT $LN61@Render

; 885  : 		{
; 886  : 			diffuse = 0x7fffffff;
; 887  : 			__GetTextPos(compend, &ex, &sy);

  009cc	8d 45 94	 lea	 eax, DWORD PTR _sy$12[ebp]
  009cf	8b cf		 mov	 ecx, edi
  009d1	50		 push	 eax
  009d2	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _ex$9[ebp]
  009d8	50		 push	 eax
  009d9	56		 push	 esi
  009da	e8 00 00 00 00	 call	 ?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z ; CGraphicTextInstance::__GetTextPos

; 888  : 		}

  009df	f3 0f 10 95 78
	ff ff ff	 movss	 xmm2, DWORD PTR _ex$9[ebp]
  009e7	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  009ec	0f 28 9d 50 ff
	ff ff		 movaps	 xmm3, XMMWORD PTR tv2941[ebp]
  009f3	eb 0e		 jmp	 SHORT $LN62@Render
$LN61@Render:

; 889  : 		else
; 890  : 		{
; 891  : 			diffuse = 0xffffffff;
; 892  : 			ex = sx + 2;

  009f5	0f 28 d3	 movaps	 xmm2, xmm3
  009f8	83 ca ff	 or	 edx, -1
  009fb	f3 0f 58 15 00
	00 00 00	 addss	 xmm2, DWORD PTR __real@40000000
$LN62@Render:

; 893  : 		}
; 894  : 
; 895  : 		// FOR_ARABIC_ALIGN
; 896  : 		if (defCodePage == CP_ARABIC)

  00a03	81 bd 48 ff ff
	ff e8 04 00 00	 cmp	 DWORD PTR _defCodePage$1$[ebp], 1256 ; 000004e8H
  00a0d	0f b7 4f 0e	 movzx	 ecx, WORD PTR [edi+14]
  00a11	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _sy$12[ebp]
  00a16	f3 0f 58 4f 50	 addss	 xmm1, DWORD PTR [edi+80]
  00a1b	f3 0f 10 67 4c	 movss	 xmm4, DWORD PTR [edi+76]
  00a20	66 0f 6e e9	 movd	 xmm5, ecx
  00a24	0f 5b ed	 cvtdq2ps xmm5, xmm5
  00a27	f3 0f 11 4d 94	 movss	 DWORD PTR _sy$12[ebp], xmm1
  00a2c	f3 0f 58 e9	 addss	 xmm5, xmm1
  00a30	75 0f		 jne	 SHORT $LN63@Render

; 897  : 		{
; 898  : 			sx += m_v3Position.x - m_textWidth;

  00a32	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  00a36	66 0f 6e c0	 movd	 xmm0, eax
  00a3a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00a3d	f3 0f 5c e0	 subss	 xmm4, xmm0
$LN63@Render:

; 899  : 			ex += m_v3Position.x - m_textWidth;
; 900  : 			sy += m_v3Position.y;
; 901  : 			ey = sy + m_textHeight;
; 902  : 		}
; 903  : 		else
; 904  : 		{
; 905  : 			sx += m_v3Position.x;
; 906  : 			sy += m_v3Position.y;
; 907  : 			ex += m_v3Position.x;
; 908  : 			ey = sy + m_textHeight;
; 909  : 		}
; 910  : 
; 911  : 		switch (m_vAlign)

  00a41	f3 0f 58 dc	 addss	 xmm3, xmm4
  00a45	8b c1		 mov	 eax, ecx
  00a47	8a 4f 11	 mov	 cl, BYTE PTR [edi+17]
  00a4a	f3 0f 58 d4	 addss	 xmm2, xmm4
  00a4e	0f 28 e1	 movaps	 xmm4, xmm1
  00a51	f3 0f 11 5d 88	 movss	 DWORD PTR _sx$10[ebp], xmm3
  00a56	f3 0f 11 95 78
	ff ff ff	 movss	 DWORD PTR _ex$9[ebp], xmm2
  00a5e	80 f9 20	 cmp	 cl, 32			; 00000020H
  00a61	74 11		 je	 SHORT $LN66@Render
  00a63	80 f9 30	 cmp	 cl, 48			; 00000030H
  00a66	75 2a		 jne	 SHORT $LN159@Render

; 912  : 		{
; 913  : 			case VERTICAL_ALIGN_BOTTOM:
; 914  : 				sy -= m_textHeight;

  00a68	0f b7 c0	 movzx	 eax, ax
  00a6b	66 0f 6e c0	 movd	 xmm0, eax
  00a6f	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 915  : 				break;

  00a72	eb 12		 jmp	 SHORT $LN318@Render
$LN66@Render:

; 916  : 
; 917  : 			case VERTICAL_ALIGN_CENTER:
; 918  : 				sy -= float(m_textHeight) / 2.0f;

  00a74	0f b7 c0	 movzx	 eax, ax
  00a77	66 0f 6e c0	 movd	 xmm0, eax
  00a7b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00a7e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
$LN318@Render:

; 919  : 				break;
; 920  : 		}
; 921  : 
; 922  : 		TPDTVertex vertices[4];
; 923  : 		vertices[0].diffuse = diffuse;

  00a86	0f 28 cc	 movaps	 xmm1, xmm4
  00a89	f3 0f 5c c8	 subss	 xmm1, xmm0
  00a8d	f3 0f 11 4d 94	 movss	 DWORD PTR _sy$12[ebp], xmm1
$LN159@Render:

; 931  : 
; 932  : 		STATEMANAGER.SetTexture(0, NULL);

  00a92	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00a98	0f 28 c3	 movaps	 xmm0, xmm3
  00a9b	0f 14 c1	 unpcklps xmm0, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00a9e	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 927  : 		vertices[0].position = TPosition(sx, sy, 0.0f);

  00aa8	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+8]
  00aae	89 45 a0	 mov	 DWORD PTR _vertices$13[ebp+8], eax
  00ab1	66 0f d6 45 98	 movq	 QWORD PTR _vertices$13[ebp], xmm0

; 928  : 		vertices[1].position = TPosition(ex, sy, 0.0f);

  00ab6	0f 28 c2	 movaps	 xmm0, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00ab9	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 928  : 		vertices[1].position = TPosition(ex, sy, 0.0f);

  00ac3	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp+8]
  00ac9	89 45 b8	 mov	 DWORD PTR _vertices$13[ebp+32], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00acc	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 929  : 		vertices[2].position = TPosition(sx, ey, 0.0f);

  00ad6	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+8]

; 931  : 
; 932  : 		STATEMANAGER.SetTexture(0, NULL);

  00adc	6a 00		 push	 0
  00ade	0f 14 c1	 unpcklps xmm0, xmm1
  00ae1	0f 14 dd	 unpcklps xmm3, xmm5
  00ae4	89 45 d0	 mov	 DWORD PTR _vertices$13[ebp+56], eax
  00ae7	0f 14 d5	 unpcklps xmm2, xmm5
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00aea	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 930  : 		vertices[3].position = TPosition(ex, ey, 0.0f);

  00af4	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp+8]

; 931  : 
; 932  : 		STATEMANAGER.SetTexture(0, NULL);

  00afa	6a 00		 push	 0
  00afc	89 55 a4	 mov	 DWORD PTR _vertices$13[ebp+12], edx
  00aff	89 55 bc	 mov	 DWORD PTR _vertices$13[ebp+36], edx
  00b02	89 55 d4	 mov	 DWORD PTR _vertices$13[ebp+60], edx
  00b05	89 55 ec	 mov	 DWORD PTR _vertices$13[ebp+84], edx
  00b08	66 0f d6 45 b0	 movq	 QWORD PTR _vertices$13[ebp+24], xmm0
  00b0d	66 0f d6 5d c8	 movq	 QWORD PTR _vertices$13[ebp+48], xmm3
  00b12	66 0f d6 55 e0	 movq	 QWORD PTR _vertices$13[ebp+72], xmm2
  00b17	89 45 e8	 mov	 DWORD PTR _vertices$13[ebp+80], eax
  00b1a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 933  : 
; 934  : 
; 935  : 		// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 936  : 		CGraphicBase::SetDefaultIndexBuffer(CGraphicBase::DEFAULT_IB_FILL_RECT);

  00b1f	6a 05		 push	 5
  00b21	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 937  : 		if (CGraphicBase::SetPDTStream(vertices, 4))

  00b26	8d 45 98	 lea	 eax, DWORD PTR _vertices$13[ebp]
  00b29	6a 04		 push	 4
  00b2b	50		 push	 eax
  00b2c	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00b31	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b34	84 c0		 test	 al, al
  00b36	74 15		 je	 SHORT $LN67@Render

; 938  : 			STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  00b38	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b3e	6a 02		 push	 2
  00b40	6a 00		 push	 0
  00b42	6a 04		 push	 4
  00b44	6a 00		 push	 0
  00b46	6a 04		 push	 4
  00b48	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN67@Render:

; 939  : 
; 940  : 		int ulbegin = CIME::GetULBegin();

  00b4d	e8 00 00 00 00	 call	 ?GetULBegin@CIME@@SAHXZ	; CIME::GetULBegin
  00b52	8b f0		 mov	 esi, eax
  00b54	89 b5 48 ff ff
	ff		 mov	 DWORD PTR _ulbegin$1$[ebp], esi

; 941  : 		int ulend = CIME::GetULEnd();

  00b5a	e8 00 00 00 00	 call	 ?GetULEnd@CIME@@SAHXZ	; CIME::GetULEnd
  00b5f	89 85 4c ff ff
	ff		 mov	 DWORD PTR _ulend$1$[ebp], eax

; 942  : 
; 943  : 		if(ulbegin < ulend)

  00b65	3b f0		 cmp	 esi, eax
  00b67	0f 8d 14 01 00
	00		 jge	 $LN68@Render

; 944  : 		{
; 945  : 			__GetTextPos(curpos+ulbegin, &sx, &sy);

  00b6d	8d 45 94	 lea	 eax, DWORD PTR _sy$12[ebp]
  00b70	8b ce		 mov	 ecx, esi
  00b72	03 4d 90	 add	 ecx, DWORD PTR _curpos$1$[ebp]
  00b75	50		 push	 eax
  00b76	8d 45 88	 lea	 eax, DWORD PTR _sx$10[ebp]
  00b79	50		 push	 eax
  00b7a	51		 push	 ecx
  00b7b	8b cf		 mov	 ecx, edi
  00b7d	e8 00 00 00 00	 call	 ?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z ; CGraphicTextInstance::__GetTextPos

; 946  : 			__GetTextPos(curpos+ulend, &ex, &sy);

  00b82	8d 45 94	 lea	 eax, DWORD PTR _sy$12[ebp]
  00b85	8b cf		 mov	 ecx, edi
  00b87	50		 push	 eax
  00b88	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _ex$9[ebp]
  00b8e	50		 push	 eax
  00b8f	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _ulend$1$[ebp]
  00b95	03 45 90	 add	 eax, DWORD PTR _curpos$1$[ebp]
  00b98	50		 push	 eax
  00b99	e8 00 00 00 00	 call	 ?__GetTextPos@CGraphicTextInstance@@IAEXKPAM0@Z ; CGraphicTextInstance::__GetTextPos

; 947  : 
; 948  : 			sx += m_v3Position.x;
; 949  : 			sy += m_v3Position.y + m_textHeight;

  00b9e	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  00ba2	f3 0f 10 67 4c	 movss	 xmm4, DWORD PTR [edi+76]

; 961  : 
; 962  : 			STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, c_FillRectIndices, D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));

  00ba7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00bad	0f 28 dc	 movaps	 xmm3, xmm4
  00bb0	f3 0f 58 5d 88	 addss	 xmm3, DWORD PTR _sx$10[ebp]
  00bb5	f3 0f 58 a5 78
	ff ff ff	 addss	 xmm4, DWORD PTR _ex$9[ebp]
  00bbd	66 0f 6e c8	 movd	 xmm1, eax
  00bc1	0f 5b c9	 cvtdq2ps xmm1, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00bc4	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 957  : 			vertices[0].position = TPosition(sx, sy, 0.0f);

  00bce	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp+8]
  00bd4	89 45 a0	 mov	 DWORD PTR _vertices$13[ebp+8], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00bd7	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 958  : 			vertices[1].position = TPosition(ex, sy, 0.0f);

  00be1	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+8]
  00be7	0f 28 c3	 movaps	 xmm0, xmm3
  00bea	f3 0f 58 4f 50	 addss	 xmm1, DWORD PTR [edi+80]
  00bef	89 45 b8	 mov	 DWORD PTR _vertices$13[ebp+32], eax

; 961  : 
; 962  : 			STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, c_FillRectIndices, D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));

  00bf2	6a 18		 push	 24			; 00000018H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00bf4	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 959  : 			vertices[2].position = TPosition(sx, ey, 0.0f);

  00bfe	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+8]
  00c04	f3 0f 58 4d 94	 addss	 xmm1, DWORD PTR _sy$12[ebp]
  00c09	89 45 d0	 mov	 DWORD PTR _vertices$13[ebp+56], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00c0c	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 960  : 			vertices[3].position = TPosition(ex, ey, 0.0f);

  00c16	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp+8]
  00c1c	89 45 e8	 mov	 DWORD PTR _vertices$13[ebp+80], eax

; 961  : 
; 962  : 			STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, c_FillRectIndices, D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));

  00c1f	8d 45 98	 lea	 eax, DWORD PTR _vertices$13[ebp]
  00c22	50		 push	 eax
  00c23	6a 65		 push	 101			; 00000065H
  00c25	68 00 00 00 00	 push	 OFFSET ?c_FillRectIndices@@3QBGB
  00c2a	0f 28 d1	 movaps	 xmm2, xmm1
  00c2d	0f 14 c1	 unpcklps xmm0, xmm1
  00c30	f3 0f 58 15 00
	00 00 00	 addss	 xmm2, DWORD PTR __real@40000000
  00c38	6a 02		 push	 2
  00c3a	66 0f d6 45 98	 movq	 QWORD PTR _vertices$13[ebp], xmm0
  00c3f	0f 28 c4	 movaps	 xmm0, xmm4
  00c42	6a 04		 push	 4
  00c44	6a 00		 push	 0
  00c46	0f 14 c1	 unpcklps xmm0, xmm1
  00c49	0f 14 da	 unpcklps xmm3, xmm2
  00c4c	0f 14 e2	 unpcklps xmm4, xmm2
  00c4f	6a 04		 push	 4
  00c51	c7 45 a4 00 00
	ff ff		 mov	 DWORD PTR _vertices$13[ebp+12], -65536 ; ffff0000H
  00c58	c7 45 bc 00 00
	ff ff		 mov	 DWORD PTR _vertices$13[ebp+36], -65536 ; ffff0000H
  00c5f	c7 45 d4 00 00
	ff ff		 mov	 DWORD PTR _vertices$13[ebp+60], -65536 ; ffff0000H
  00c66	c7 45 ec 00 00
	ff ff		 mov	 DWORD PTR _vertices$13[ebp+84], -65536 ; ffff0000H
  00c6d	66 0f d6 45 b0	 movq	 QWORD PTR _vertices$13[ebp+24], xmm0
  00c72	66 0f d6 5d c8	 movq	 QWORD PTR _vertices$13[ebp+48], xmm3
  00c77	66 0f d6 65 e0	 movq	 QWORD PTR _vertices$13[ebp+72], xmm4
  00c7c	e8 00 00 00 00	 call	 ?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z ; CStateManager::DrawIndexedPrimitiveUP
$LN68@Render:

; 963  : 		}
; 964  : 	}
; 965  : 
; 966  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  00c81	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00c87	6a 13		 push	 19			; 00000013H
  00c89	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 967  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  00c8e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00c94	6a 14		 push	 20			; 00000014H
  00c96	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 968  : 
; 969  : 	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, dwFogEnable);

  00c9b	ff b5 44 ff ff
	ff		 push	 DWORD PTR _dwFogEnable$1$[ebp]
  00ca1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00ca7	6a 1c		 push	 28			; 0000001cH
  00ca9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 970  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, dwLighting);

  00cae	ff b5 3c ff ff
	ff		 push	 DWORD PTR _dwLighting$1$[ebp]
  00cb4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00cba	68 89 00 00 00	 push	 137			; 00000089H
  00cbf	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
  00cc4	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?gs_mx@@3HA

; 971  : 
; 972  : #ifdef ENABLE_GOOGLE_TRANSLATE_INGAME
; 973  : 	int lx = gs_mx - m_v3Position.x;

  00ccc	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00ccf	f3 0f 5c 47 4c	 subss	 xmm0, DWORD PTR [edi+76]
  00cd4	f3 0f 2c f0	 cvttss2si esi, xmm0
  00cd8	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?gs_my@@3HA

; 974  : 	int ly = gs_my - m_v3Position.y;

  00ce0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00ce3	f3 0f 5c 47 50	 subss	 xmm0, DWORD PTR [edi+80]
  00ce8	f3 0f 2c c0	 cvttss2si eax, xmm0
  00cec	89 45 90	 mov	 DWORD PTR _ly$1$[ebp], eax

; 975  : 
; 976  : 	//아랍은 좌표 부호를 바꿔준다.
; 977  : 	if (GetDefaultCodePage() == CP_ARABIC) {

  00cef	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00cf4	3d e8 04 00 00	 cmp	 eax, 1256		; 000004e8H
  00cf9	75 0b		 jne	 SHORT $LN313@Render

; 978  : 		lx = -lx;
; 979  : 		ly = -ly + m_textHeight;

  00cfb	0f b7 4f 0e	 movzx	 ecx, WORD PTR [edi+14]
  00cff	f7 de		 neg	 esi
  00d01	2b 4d 90	 sub	 ecx, DWORD PTR _ly$1$[ebp]
  00d04	eb 03		 jmp	 SHORT $LN299@Render
$LN313@Render:

; 975  : 
; 976  : 	//아랍은 좌표 부호를 바꿔준다.
; 977  : 	if (GetDefaultCodePage() == CP_ARABIC) {

  00d06	8b 4d 90	 mov	 ecx, DWORD PTR _ly$1$[ebp]
$LN299@Render:

; 980  : 	}
; 981  : 
; 982  : 	if (lx >= 0 && ly >= 0 && lx < m_textWidth && ly < m_textHeight)

  00d09	85 f6		 test	 esi, esi
  00d0b	78 36		 js	 SHORT $LN179@Render
  00d0d	85 c9		 test	 ecx, ecx
  00d0f	78 32		 js	 SHORT $LN179@Render
  00d11	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  00d15	3b f0		 cmp	 esi, eax
  00d17	7d 2a		 jge	 SHORT $LN179@Render
  00d19	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  00d1d	3b c8		 cmp	 ecx, eax
  00d1f	7d 22		 jge	 SHORT $LN179@Render

; 983  : 	{
; 984  : 		gs_text = m_stText;

  00d21	8d 47 34	 lea	 eax, DWORD PTR [edi+52]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  00d24	3d 00 00 00 00	 cmp	 eax, OFFSET ?gs_text@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00d29	74 18		 je	 SHORT $LN179@Render

; 2286 :         return _BUF_SIZE <= _Myres;

  00d2b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00d2f	8b c8		 mov	 ecx, eax

; 2273 :         if (_Large_string_engaged()) {

  00d31	72 02		 jb	 SHORT $LN184@Render

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00d33	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN184@Render:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00d35	ff 70 10	 push	 DWORD PTR [eax+16]
  00d38	51		 push	 ecx
  00d39	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_text@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00d3e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN179@Render:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00d43	8b 4f 7c	 mov	 ecx, DWORD PTR [edi+124]
  00d46	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00d4b	2b 4f 78	 sub	 ecx, DWORD PTR [edi+120]
  00d4e	f7 e9		 imul	 ecx
  00d50	03 d1		 add	 edx, ecx
  00d52	c1 fa 04	 sar	 edx, 4
  00d55	8b c2		 mov	 eax, edx
  00d57	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00d5a	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 989  : 	if (m_hyperlinkVector.size() != 0)

  00d5c	0f 84 9f 00 00
	00		 je	 $LN303@Render

; 990  : 	{
; 991  : 		int lx = gs_mx - m_v3Position.x;

  00d62	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?gs_mx@@3HA
  00d6a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00d6d	f3 0f 5c 47 4c	 subss	 xmm0, DWORD PTR [edi+76]
  00d72	f3 0f 2c f0	 cvttss2si esi, xmm0
  00d76	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?gs_my@@3HA

; 992  : 		int ly = gs_my - m_v3Position.y;

  00d7e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00d81	f3 0f 5c 47 50	 subss	 xmm0, DWORD PTR [edi+80]
  00d86	f3 0f 2c c0	 cvttss2si eax, xmm0
  00d8a	89 45 90	 mov	 DWORD PTR _ly$1$[ebp], eax

; 993  : 
; 994  : 		if (GetDefaultCodePage() == CP_ARABIC) {

  00d8d	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00d92	3d e8 04 00 00	 cmp	 eax, 1256		; 000004e8H
  00d97	75 0b		 jne	 SHORT $LN312@Render

; 996  : 			ly = -ly + m_textHeight;

  00d99	0f b7 4f 0e	 movzx	 ecx, WORD PTR [edi+14]
  00d9d	f7 de		 neg	 esi
  00d9f	2b 4d 90	 sub	 ecx, DWORD PTR _ly$1$[ebp]
  00da2	eb 03		 jmp	 SHORT $LN300@Render
$LN312@Render:

; 993  : 
; 994  : 		if (GetDefaultCodePage() == CP_ARABIC) {

  00da4	8b 4d 90	 mov	 ecx, DWORD PTR _ly$1$[ebp]
$LN300@Render:

; 997  : 		}
; 998  : 
; 999  : 		if (lx >= 0 && ly >= 0 && lx < m_textWidth && ly < m_textHeight)

  00da7	85 f6		 test	 esi, esi
  00da9	78 56		 js	 SHORT $LN303@Render
  00dab	85 c9		 test	 ecx, ecx
  00dad	78 52		 js	 SHORT $LN303@Render
  00daf	0f b7 47 0c	 movzx	 eax, WORD PTR [edi+12]
  00db3	3b f0		 cmp	 esi, eax
  00db5	7d 4a		 jge	 SHORT $LN303@Render
  00db7	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  00dbb	3b c8		 cmp	 ecx, eax
  00dbd	7d 42		 jge	 SHORT $LN303@Render
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00dbf	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00dc2	8b 4f 7c	 mov	 ecx, DWORD PTR [edi+124]
  00dc5	3b c1		 cmp	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1003 : 			while (it != m_hyperlinkVector.end())

  00dc7	74 38		 je	 SHORT $LN303@Render
  00dc9	0f 1f 80 00 00
	00 00		 npad	 7
$LL20@Render:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 281  :         _Vector_iterator _Tmp = *this;

  00dd0	8b d0		 mov	 edx, eax

; 74   :         ++_Ptr;

  00dd2	83 c0 1c	 add	 eax, 28			; 0000001cH

; 281  :         _Vector_iterator _Tmp = *this;

  00dd5	89 55 90	 mov	 DWORD PTR tv2934[ebp], edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1006 : 				if (lx >= link.sx && lx < link.ex)

  00dd8	0f bf 12	 movsx	 edx, WORD PTR [edx]
  00ddb	3b f2		 cmp	 esi, edx
  00ddd	7c 0b		 jl	 SHORT $LN74@Render
  00ddf	8b 55 90	 mov	 edx, DWORD PTR tv2934[ebp]
  00de2	0f bf 52 02	 movsx	 edx, WORD PTR [edx+2]
  00de6	3b f2		 cmp	 esi, edx
  00de8	7c 06		 jl	 SHORT $LN241@Render
$LN74@Render:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 150  :         return _Ptr == _Right._Ptr;

  00dea	3b c1		 cmp	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1003 : 			while (it != m_hyperlinkVector.end())

  00dec	75 e2		 jne	 SHORT $LL20@Render
  00dee	eb 11		 jmp	 SHORT $LN303@Render
$LN241@Render:

; 1007 : 				{
; 1008 : 					gs_hyperlinkText = link.text;

  00df0	8b 45 90	 mov	 eax, DWORD PTR tv2934[ebp]
  00df3	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
  00df8	83 c0 04	 add	 eax, 4
  00dfb	50		 push	 eax
  00dfc	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
$LN303@Render:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00e01	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  00e07	8b b7 84 00 00
	00		 mov	 esi, DWORD PTR [edi+132]
  00e0d	2b c6		 sub	 eax, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1019 : 	if (m_emojiVector.size() != 0)

  00e0f	a9 f8 ff ff ff	 test	 eax, -8			; fffffff8H
  00e14	0f 84 84 00 00
	00		 je	 $LN23@Render
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00e1a	3b b7 88 00 00
	00		 cmp	 esi, DWORD PTR [edi+136]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1021 : 		for (std::vector<SEmoji>::iterator itor = m_emojiVector.begin(); itor != m_emojiVector.end(); ++itor)

  00e20	74 7c		 je	 SHORT $LN23@Render
$LL221@Render:

; 1022 : 		{
; 1023 : 			SEmoji & rEmo = *itor;
; 1024 : 			if (rEmo.pInstance)

  00e22	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00e25	85 c9		 test	 ecx, ecx
  00e27	74 6a		 je	 SHORT $LN22@Render

; 1025 : 			{
; 1026 : 				rEmo.pInstance->SetPosition(fStanX + rEmo.x, (fStanY + 7.0) - (rEmo.pInstance->GetHeight() / 2));

  00e29	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _fStanY$1$[ebp]
  00e31	0f 5a c0	 cvtps2pd xmm0, xmm0
  00e34	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  00e3c	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv2858[ebp], xmm0
  00e44	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight
  00e49	f2 0f 10 8d 38
	ff ff ff	 movsd	 xmm1, QWORD PTR tv2858[ebp]
  00e51	83 ec 08	 sub	 esp, 8
  00e54	99		 cdq
  00e55	2b c2		 sub	 eax, edx
  00e57	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00e5a	d1 f8		 sar	 eax, 1
  00e5c	66 0f 6e c0	 movd	 xmm0, eax
  00e60	0f bf 06	 movsx	 eax, WORD PTR [esi]
  00e63	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00e67	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00e6b	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00e6f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00e75	66 0f 6e c0	 movd	 xmm0, eax
  00e79	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00e7c	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _fStanX$[ebp]
  00e81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e86	e8 00 00 00 00	 call	 ?SetPosition@CGraphicImageInstance@@QAEXMM@Z ; CGraphicImageInstance::SetPosition

; 1027 : 				rEmo.pInstance->Render();

  00e8b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00e8e	e8 00 00 00 00	 call	 ?Render@CGraphicImageInstance@@QAEXXZ ; CGraphicImageInstance::Render
$LN22@Render:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  00e93	83 c6 08	 add	 esi, 8

; 150  :         return _Ptr == _Right._Ptr;

  00e96	3b b7 88 00 00
	00		 cmp	 esi, DWORD PTR [edi+136]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1021 : 		for (std::vector<SEmoji>::iterator itor = m_emojiVector.begin(); itor != m_emojiVector.end(); ++itor)

  00e9c	75 84		 jne	 SHORT $LL221@Render
$LN23@Render:

; 1028 : 			}
; 1029 : 		}
; 1030 : 	}
; 1031 : #endif
; 1032 : }

  00e9e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ea1	5f		 pop	 edi
  00ea2	33 cd		 xor	 ecx, ebp
  00ea4	5e		 pop	 esi
  00ea5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00eaa	8b e5		 mov	 esp, ebp
  00eac	5d		 pop	 ebp
  00ead	8b e3		 mov	 esp, ebx
  00eaf	5b		 pop	 ebx
  00eb0	c2 04 00	 ret	 4
?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z ENDP	; CGraphicTextInstance::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Update@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
_defCodePage$1$ = -1540					; size = 4
_wTextMax$1$ = -1536					; size = 4
_token$1$ = -1532					; size = 4
_len$2 = -1528						; size = 4
$T3 = -1524						; size = 1
$T4 = -1520						; size = 1
_this$1$ = -1516					; size = 4
$T5 = -1512						; size = 1
$T6 = -1508						; size = 1
_kEmoji$7 = -1504					; size = 8
_len$8 = -1496						; size = 4
_wText$1$ = -1492					; size = 4
_pSpaceInfo$1$ = -1488					; size = 4
_end$1$ = -1484						; size = 4
_i$1$ = -1480						; size = 4
_wArabicTextLen$1$ = -1480				; size = 4
_isEnglish$1$ = -1473					; size = 1
_pFontTexture$1$ = -1472				; size = 4
_dataCodePage$1$ = -1468				; size = 4
_wArabicText$1$ = -1464					; size = 4
_i$1$ = -1460						; size = 4
__Old_capacity$1$ = -1456				; size = 4
_x$1$ = -1456						; size = 4
_no_hyperlink$1$ = -1452				; size = 4
_wTextLen$1$ = -1452					; size = 4
_emojiStep$1$ = -1448					; size = 4
_nEnglishBase$1$ = -1448				; size = 4
__Result$2$ = -1444					; size = 4
__Result$2$ = -1444					; size = 4
_hyperlinkStep$1$ = -1444				; size = 4
tv4647 = -1444						; size = 4
_this$GSCopy$1$ = -1440					; size = 4
__Result$2$ = -1436					; size = 4
_hyperlinkStep$1$ = -1436				; size = 4
_e$1$ = -1436						; size = 4
_e$1$ = -1436						; size = 4
tv4487 = -1436						; size = 4
_dwColor$1$ = -1432					; size = 4
__Old_capacity$1$ = -1428				; size = 4
tv4479 = -1428						; size = 4
_kHyperlink$9 = -1424					; size = 28
_emojiBuffer$10 = -1396					; size = 24
_hyperlinkBuffer$11 = -1372				; size = 24
_kHyperlink$12 = -1348					; size = 28
_hyperlinkBuffer$13 = -1320				; size = 24
_retBuf$14 = -1296					; size = 1024
_szPath$15 = -272					; size = 255
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Update@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::Update, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Update@CGraphicTextInstance@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f8 05 00
	00		 sub	 esp, 1528		; 000005f8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 9d 60 fa ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx

; 155  : 	if (m_isUpdate)

  00036	80 7b 58 00	 cmp	 BYTE PTR [ebx+88], 0
  0003a	0f 85 71 16 00
	00		 jne	 $LN1@Update
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 62   : 			return m_pObject == NULL ? true : false;

  00040	8b 4b 5c	 mov	 ecx, DWORD PTR [ebx+92]
  00043	85 c9		 test	 ecx, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 158  : 	if (m_roText.IsNull())

  00045	75 12		 jne	 SHORT $LN38@Update

; 159  : 	{
; 160  : 		Tracef("CGraphicTextInstance::Update - Font has not been set\n");

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@FOMBDJDA@CGraphicTextInstance?3?3Update?5?9?5@
  0004c	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00051	83 c4 04	 add	 esp, 4

; 161  : 		return;

  00054	e9 58 16 00 00	 jmp	 $LN1@Update
$LN38@Update:

; 162  : 	}
; 163  : 
; 164  : 	if (m_roText->IsEmpty())

  00059	e8 00 00 00 00	 call	 ?IsEmpty@CResource@@QBE_NXZ ; CResource::IsEmpty
  0005e	84 c0		 test	 al, al
  00060	0f 85 4b 16 00
	00		 jne	 $LN1@Update

; 165  : 		return;
; 166  : 
; 167  : 	CGraphicFontTexture* pFontTexture = m_roText->GetFontTexturePointer();

  00066	8b 4b 5c	 mov	 ecx, DWORD PTR [ebx+92]
  00069	e8 00 00 00 00	 call	 ?GetFontTexturePointer@CGraphicText@@QAEPAVCGraphicFontTexture@@XZ ; CGraphicText::GetFontTexturePointer
  0006e	8b f0		 mov	 esi, eax
  00070	89 b5 40 fa ff
	ff		 mov	 DWORD PTR _pFontTexture$1$[ebp], esi

; 168  : 	if (!pFontTexture)

  00076	85 f6		 test	 esi, esi
  00078	0f 84 33 16 00
	00		 je	 $LN1@Update

; 169  : 		return;
; 170  : 
; 171  : 	UINT defCodePage = GetDefaultCodePage();

  0007e	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 172  : 
; 173  : 	UINT dataCodePage = defCodePage;
; 174  : 
; 175  : 	CGraphicFontTexture::TCharacterInfomation* pSpaceInfo = pFontTexture->GetCharacterInfomation(dataCodePage, ' ');

  00083	6a 20		 push	 32			; 00000020H
  00085	50		 push	 eax
  00086	8b ce		 mov	 ecx, esi
  00088	89 85 fc f9 ff
	ff		 mov	 DWORD PTR _defCodePage$1$[ebp], eax
  0008e	89 85 44 fa ff
	ff		 mov	 DWORD PTR _dataCodePage$1$[ebp], eax
  00094	e8 00 00 00 00	 call	 ?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z ; CGraphicFontTexture::GetCharacterInfomation
  00099	89 85 30 fa ff
	ff		 mov	 DWORD PTR _pSpaceInfo$1$[ebp], eax

; 176  : 
; 177  : 	int spaceHeight = pSpaceInfo ? pSpaceInfo->height : 12;

  0009f	85 c0		 test	 eax, eax
  000a1	74 06		 je	 SHORT $LN117@Update
  000a3	0f b7 78 04	 movzx	 edi, WORD PTR [eax+4]
  000a7	eb 05		 jmp	 SHORT $LN118@Update
$LN117@Update:
  000a9	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH
$LN118@Update:

; 178  : 
; 179  : 	m_pCharInfoVector.clear();

  000ae	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]

; 180  : 	m_dwColorInfoVector.clear();
; 181  : 	m_hyperlinkVector.clear();

  000b1	8d 4b 78	 lea	 ecx, DWORD PTR [ebx+120]
  000b4	89 43 64	 mov	 DWORD PTR [ebx+100], eax
  000b7	8b 43 6c	 mov	 eax, DWORD PTR [ebx+108]
  000ba	89 43 70	 mov	 DWORD PTR [ebx+112], eax
  000bd	e8 00 00 00 00	 call	 ?clear@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEXXZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::clear
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000c2	8b 93 88 00 00
	00		 mov	 edx, DWORD PTR [ebx+136]
  000c8	8d 83 84 00 00
	00		 lea	 eax, DWORD PTR [ebx+132]
  000ce	8b b3 84 00 00
	00		 mov	 esi, DWORD PTR [ebx+132]
  000d4	8b ce		 mov	 ecx, esi
  000d6	89 85 14 fa ff
	ff		 mov	 DWORD PTR _this$1$[ebp], eax
  000dc	8b c2		 mov	 eax, edx
  000de	2b c6		 sub	 eax, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 184  :     if (m_emojiVector.size() != 0)

  000e0	83 f8 08	 cmp	 eax, 8
  000e3	72 33		 jb	 SHORT $LN3@Update

; 186  :         for (std::vector<SEmoji>::iterator itor = m_emojiVector.begin(); itor != m_emojiVector.end(); ++itor)

  000e5	3b f2		 cmp	 esi, edx
  000e7	74 2f		 je	 SHORT $LN3@Update
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL139@Update:

; 187  :         {
; 188  :             SEmoji & rEmo = *itor;
; 189  :             if (rEmo.pInstance)

  000f0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f3	85 c0		 test	 eax, eax
  000f5	74 10		 je	 SHORT $LN2@Update

; 190  :             {
; 191  :                 CGraphicImageInstance::Delete(rEmo.pInstance);

  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ?Delete@CGraphicImageInstance@@SAXPAV1@@Z ; CGraphicImageInstance::Delete
  000fd	83 c4 04	 add	 esp, 4

; 192  :                 rEmo.pInstance = NULL;

  00100	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN2@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  00107	83 c6 08	 add	 esi, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 186  :         for (std::vector<SEmoji>::iterator itor = m_emojiVector.begin(); itor != m_emojiVector.end(); ++itor)

  0010a	3b b3 88 00 00
	00		 cmp	 esi, DWORD PTR [ebx+136]
  00110	75 de		 jne	 SHORT $LL139@Update

; 192  :                 rEmo.pInstance = NULL;

  00112	8b 8b 84 00 00
	00		 mov	 ecx, DWORD PTR [ebx+132]
$LN3@Update:

; 200  : 	m_textWidth = 0;

  00118	33 c0		 xor	 eax, eax
  0011a	89 8b 88 00 00
	00		 mov	 DWORD PTR [ebx+136], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3888 :         return _Mypair._Myval2._Myptr();

  00120	8d 73 34	 lea	 esi, DWORD PTR [ebx+52]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 200  : 	m_textWidth = 0;

  00123	66 89 43 0c	 mov	 WORD PTR [ebx+12], ax

; 201  : 	m_textHeight = spaceHeight;

  00127	66 89 7b 0e	 mov	 WORD PTR [ebx+14], di
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  0012b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0012f	72 02		 jb	 SHORT $LN153@Update

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00131	8b 36		 mov	 esi, DWORD PTR [esi]
$LN153@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 206  : 	const char* end = begin + m_stText.length();

  00133	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  00136	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]

; 207  : 
; 208  : 	int wTextMax = (end - begin) * 2;

  00139	03 c0		 add	 eax, eax
  0013b	89 85 00 fa ff
	ff		 mov	 DWORD PTR _wTextMax$1$[ebp], eax

; 209  : 	wchar_t* wText = (wchar_t*)_alloca(sizeof(wchar_t)*wTextMax);

  00141	03 c0		 add	 eax, eax
  00143	89 8d 34 fa ff
	ff		 mov	 DWORD PTR _end$1$[ebp], ecx
  00149	e8 00 00 00 00	 call	 __alloca_probe_16

; 210  : 
; 211  : 	DWORD dwColor = m_dwTextColor;
; 212  : 
; 213  : 	/* wstring end */
; 214  : 	while (begin < end)

  0014e	8b 85 34 fa ff
	ff		 mov	 eax, DWORD PTR _end$1$[ebp]
  00154	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00157	89 a5 2c fa ff
	ff		 mov	 DWORD PTR _wText$1$[ebp], esp
  0015d	89 bd 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], edi
  00163	3b f0		 cmp	 esi, eax
  00165	0f 83 37 15 00
	00		 jae	 $LN897@Update
  0016b	0f 1f 44 00 00	 npad	 5
$LL5@Update:

; 215  : 	{
; 216  : 		const char * token = FindToken(begin, end);

  00170	50		 push	 eax
  00171	56		 push	 esi
  00172	e8 00 00 00 00	 call	 ?FindToken@@YAPBDPBD0@Z	; FindToken

; 217  : 
; 218  : 		int wTextLen = Ymir_MultiByteToWideChar(dataCodePage, 0, begin, token - begin, wText, wTextMax);

  00177	ff b5 00 fa ff
	ff		 push	 DWORD PTR _wTextMax$1$[ebp]
  0017d	89 85 04 fa ff
	ff		 mov	 DWORD PTR _token$1$[ebp], eax
  00183	2b c6		 sub	 eax, esi
  00185	ff b5 2c fa ff
	ff		 push	 DWORD PTR _wText$1$[ebp]
  0018b	50		 push	 eax
  0018c	56		 push	 esi
  0018d	8b b5 44 fa ff
	ff		 mov	 esi, DWORD PTR _dataCodePage$1$[ebp]
  00193	6a 00		 push	 0
  00195	56		 push	 esi
  00196	e8 00 00 00 00	 call	 ?Ymir_MultiByteToWideChar@@YAHIKPBDHPA_WH@Z ; Ymir_MultiByteToWideChar
  0019b	8b d8		 mov	 ebx, eax
  0019d	83 c4 20	 add	 esp, 32			; 00000020H

; 219  : 
; 220  : 		if (m_isSecret)

  001a0	8b 85 60 fa ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  001a6	89 9d 54 fa ff
	ff		 mov	 DWORD PTR _wTextLen$1$[ebp], ebx
  001ac	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  001b0	74 2f		 je	 SHORT $LN43@Update

; 221  : 		{
; 222  : 			for(int i=0; i<wTextLen; ++i)

  001b2	85 db		 test	 ebx, ebx
  001b4	0f 8e b4 14 00
	00		 jle	 $LN784@Update
  001ba	66 0f 1f 44 00
	00		 npad	 6
$LL9@Update:

; 223  : 				__DrawCharacter(pFontTexture, dataCodePage, '*', dwColor);

  001c0	57		 push	 edi
  001c1	6a 2a		 push	 42			; 0000002aH
  001c3	56		 push	 esi
  001c4	ff b5 40 fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  001ca	8b c8		 mov	 ecx, eax
  001cc	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter
  001d1	8b 85 60 fa ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  001d7	83 eb 01	 sub	 ebx, 1
  001da	75 e4		 jne	 SHORT $LL9@Update

; 224  : 		}

  001dc	e9 8d 14 00 00	 jmp	 $LN784@Update
$LN43@Update:

; 225  : 		else
; 226  : 		{
; 227  : 			if (defCodePage == CP_ARABIC) // ARABIC

  001e1	81 bd fc f9 ff
	ff e8 04 00 00	 cmp	 DWORD PTR _defCodePage$1$[ebp], 1256 ; 000004e8H
  001eb	0f 85 a1 0c 00
	00		 jne	 $LN45@Update

; 228  : 			{
; 229  : 
; 230  : 				wchar_t* wArabicText = (wchar_t*)_alloca(sizeof(wchar_t) * wTextLen);

  001f1	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  001f4	e8 00 00 00 00	 call	 __alloca_probe_16
  001f9	8b c4		 mov	 eax, esp

; 231  : 				int wArabicTextLen = Arabic_MakeShape(wText, wTextLen, wArabicText, wTextLen);

  001fb	53		 push	 ebx
  001fc	50		 push	 eax
  001fd	53		 push	 ebx
  001fe	ff b5 2c fa ff
	ff		 push	 DWORD PTR _wText$1$[ebp]
  00204	89 85 48 fa ff
	ff		 mov	 DWORD PTR _wArabicText$1$[ebp], eax
  0020a	e8 00 00 00 00	 call	 ?Arabic_MakeShape@@YAIPA_WI0I@Z ; Arabic_MakeShape
  0020f	8b c8		 mov	 ecx, eax

; 232  : 
; 233  : 				bool isEnglish = true;

  00211	c6 85 3f fa ff
	ff 01		 mov	 BYTE PTR _isEnglish$1$[ebp], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00218	be 07 00 00 00	 mov	 esi, 7
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 231  : 				int wArabicTextLen = Arabic_MakeShape(wText, wTextLen, wArabicText, wTextLen);

  0021d	89 8d 38 fa ff
	ff		 mov	 DWORD PTR _wArabicTextLen$1$[ebp], ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h

; 101  : 			SHyperlink() : sx(0), ex(0) { }

  00223	33 db		 xor	 ebx, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 239  : 				int hyperlinkStep = 0;

  00225	c7 85 5c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h

; 101  : 			SHyperlink() : sx(0), ex(0) { }

  0022f	89 9d 6c fa ff
	ff		 mov	 DWORD PTR tv4479[ebp], ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 234  : 				int nEnglishBase = wArabicTextLen - 1;

  00235	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00238	89 b5 50 fa ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 234  : 				int nEnglishBase = wArabicTextLen - 1;

  0023e	89 85 58 fa ff
	ff		 mov	 DWORD PTR _nEnglishBase$1$[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h

; 101  : 			SHyperlink() : sx(0), ex(0) { }

  00244	33 c0		 xor	 eax, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00246	89 85 c0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+4], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h

; 101  : 			SHyperlink() : sx(0), ex(0) { }

  0024c	89 85 bc fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00252	89 85 d0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+20], eax

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00258	89 b5 d4 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+24], esi

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0025e	66 89 85 c0 fa
	ff ff		 mov	 WORD PTR _kHyperlink$12[ebp+4], ax

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00265	89 9d d8 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp], ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 240  : 				SHyperlink kHyperlink;

  0026b	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0026e	89 9d e8 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+16], ebx

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00274	89 b5 ec fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+20], esi

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0027a	66 89 85 d8 fa
	ff ff		 mov	 WORD PTR _hyperlinkBuffer$13[ebp], ax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 244  : 				if (Arabic_IsInSymbol(wArabicText[wArabicTextLen - 1]))

  00281	8b 85 48 fa ff
	ff		 mov	 eax, DWORD PTR _wArabicText$1$[ebp]
  00287	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0028b	89 9d 54 fa ff
	ff		 mov	 DWORD PTR _no_hyperlink$1$[ebp], ebx
  00291	0f b7 44 48 fe	 movzx	 eax, WORD PTR [eax+ecx*2-2]
  00296	50		 push	 eax
  00297	e8 00 00 00 00	 call	 ?Arabic_IsInSymbol@@YA_N_W@Z ; Arabic_IsInSymbol
  0029c	0f b6 8d 3f fa
	ff ff		 movzx	 ecx, BYTE PTR _isEnglish$1$[ebp]
  002a3	33 d2		 xor	 edx, edx
  002a5	83 c4 14	 add	 esp, 20			; 00000014H
  002a8	84 c0		 test	 al, al
  002aa	0f 45 ca	 cmovne	 ecx, edx

; 245  : 				{
; 246  : 					isEnglish = false;
; 247  : 				}
; 248  : 
; 249  : 				int i = 0;
; 250  : 				for (i = wArabicTextLen - 1 ; i >= 0; --i)

  002ad	8b 95 58 fa ff
	ff		 mov	 edx, DWORD PTR _nEnglishBase$1$[ebp]
  002b3	8b c2		 mov	 eax, edx
  002b5	89 8d 64 fa ff
	ff		 mov	 DWORD PTR tv4487[ebp], ecx
  002bb	89 85 4c fa ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  002c1	85 c0		 test	 eax, eax
  002c3	0f 88 c1 06 00
	00		 js	 $LN11@Update
  002c9	8b f2		 mov	 esi, edx
  002cb	0f 1f 44 00 00	 npad	 5
$LL12@Update:

; 251  : 				{
; 252  : 					wchar_t wArabicChar = wArabicText[i];

  002d0	8b 85 48 fa ff
	ff		 mov	 eax, DWORD PTR _wArabicText$1$[ebp]
  002d6	0f b7 34 70	 movzx	 esi, WORD PTR [eax+esi*2]

; 253  : 
; 254  : 					if (isEnglish)

  002da	56		 push	 esi
  002db	84 c9		 test	 cl, cl
  002dd	0f 84 96 05 00
	00		 je	 $LN48@Update

; 255  : 					{
; 256  : 
; 257  : 						//	(2)
; 258  : 						//		or
; 259  : 						//
; 260  : 						//
; 261  : 						if (Arabic_IsInSymbol(wArabicChar) && (

  002e3	e8 00 00 00 00	 call	 ?Arabic_IsInSymbol@@YA_N_W@Z ; Arabic_IsInSymbol
  002e8	83 c4 04	 add	 esp, 4
  002eb	84 c0		 test	 al, al
  002ed	74 6d		 je	 SHORT $LN889@Update
  002ef	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  002f5	85 c0		 test	 eax, eax
  002f7	0f 84 60 06 00
	00		 je	 $LN912@Update
  002fd	7e 4c		 jle	 SHORT $LN918@Update
  002ff	48		 dec	 eax
  00300	50		 push	 eax
  00301	ff b5 48 fa ff
	ff		 push	 DWORD PTR _wArabicText$1$[ebp]
  00307	e8 00 00 00 00	 call	 ?Arabic_HasPresentation@@YA_NPA_WH@Z ; Arabic_HasPresentation
  0030c	8b 8d 48 fa ff
	ff		 mov	 ecx, DWORD PTR _wArabicText$1$[ebp]
  00312	83 c4 08	 add	 esp, 8
  00315	84 c0		 test	 al, al
  00317	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  0031d	75 32		 jne	 SHORT $LN53@Update
  0031f	0f b7 44 41 02	 movzx	 eax, WORD PTR [ecx+eax*2+2]
  00324	50		 push	 eax
  00325	e8 00 00 00 00	 call	 ?Arabic_IsInPresentation@@YA_N_W@Z ; Arabic_IsInPresentation
  0032a	8b 8d 48 fa ff
	ff		 mov	 ecx, DWORD PTR _wArabicText$1$[ebp]
  00330	83 c4 04	 add	 esp, 4
  00333	84 c0		 test	 al, al
  00335	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  0033b	75 14		 jne	 SHORT $LN53@Update
  0033d	66 83 7c 41 02
	7c		 cmp	 WORD PTR [ecx+eax*2+2], 124 ; 0000007cH
  00343	0f 85 14 06 00
	00		 jne	 $LN912@Update
  00349	eb 06		 jmp	 SHORT $LN53@Update
$LN918@Update:
  0034b	8b 8d 48 fa ff
	ff		 mov	 ecx, DWORD PTR _wArabicText$1$[ebp]
$LN53@Update:
  00351	66 83 3c 41 7c	 cmp	 WORD PTR [ecx+eax*2], 124 ; 0000007cH
  00356	0f 84 01 06 00
	00		 je	 $LN912@Update
$LN889@Update:

; 262  : 								(i == 0) ||
; 263  : 								(i > 0 &&
; 264  : 									!(Arabic_HasPresentation(wArabicText, i - 1) || Arabic_IsInPresentation(wArabicText[i + 1]))  &&
; 265  : 									wArabicText[i+1] != '|'
; 266  : 								) ||
; 267  : 								wArabicText[i] == '|'
; 268  : 							))//if end.
; 269  : 						{
; 270  : 							// pass
; 271  : 							int temptest = 1;
; 272  : 						}
; 273  : 						else if (Arabic_IsInPresentation(wArabicChar) || Arabic_IsInSymbol(wArabicChar))

  0035c	56		 push	 esi
  0035d	e8 00 00 00 00	 call	 ?Arabic_IsInPresentation@@YA_N_W@Z ; Arabic_IsInPresentation
  00362	83 c4 04	 add	 esp, 4
  00365	84 c0		 test	 al, al
  00367	75 11		 jne	 SHORT $LN55@Update
  00369	56		 push	 esi
  0036a	e8 00 00 00 00	 call	 ?Arabic_IsInSymbol@@YA_N_W@Z ; Arabic_IsInSymbol
  0036f	83 c4 04	 add	 esp, 4
  00372	84 c0		 test	 al, al
  00374	0f 84 e3 05 00
	00		 je	 $LN912@Update
$LN55@Update:

; 274  : 						{
; 275  : 							for (int e = i + 1; e <= nEnglishBase;) {

  0037a	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  00380	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00383	89 8d 64 fa ff
	ff		 mov	 DWORD PTR _e$1$[ebp], ecx
  00389	3b 8d 58 fa ff
	ff		 cmp	 ecx, DWORD PTR _nEnglishBase$1$[ebp]
  0038f	0f 8f 32 04 00
	00		 jg	 $LN14@Update
  00395	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL13@Update:

; 276  : 								int ret = GetTextTag(&wArabicText[e], wArabicTextLen - e, len, hyperlinkBuffer);

  003a0	8b 85 48 fa ff
	ff		 mov	 eax, DWORD PTR _wArabicText$1$[ebp]
  003a6	8d 34 48	 lea	 esi, DWORD PTR [eax+ecx*2]
  003a9	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]
  003af	50		 push	 eax
  003b0	8d 85 28 fa ff
	ff		 lea	 eax, DWORD PTR _len$8[ebp]
  003b6	50		 push	 eax
  003b7	8b 85 38 fa ff
	ff		 mov	 eax, DWORD PTR _wArabicTextLen$1$[ebp]
  003bd	2b c1		 sub	 eax, ecx
  003bf	50		 push	 eax
  003c0	56		 push	 esi
  003c1	e8 00 00 00 00	 call	 ?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GetTextTag
  003c6	83 c4 10	 add	 esp, 16			; 00000010H

; 277  : 
; 278  : 								if (ret == TEXT_TAG_PLAIN || ret == TEXT_TAG_TAG)

  003c9	85 c0		 test	 eax, eax
  003cb	0f 84 d2 02 00
	00		 je	 $LN58@Update
  003d1	83 f8 01	 cmp	 eax, 1
  003d4	0f 84 c9 02 00
	00		 je	 $LN58@Update

; 296  : 										}
; 297  : 									}
; 298  : 								}
; 299  : 								else
; 300  : 								{
; 301  : 									if (ret == TEXT_TAG_COLOR)

  003da	83 f8 02	 cmp	 eax, 2
  003dd	0f 85 82 00 00
	00		 jne	 $LN62@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  003e3	83 bd ec fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$13[ebp+20], 8
  003ea	8d bd d8 fa ff
	ff		 lea	 edi, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  003f0	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  003f3	0f 43 bd d8 fa
	ff ff		 cmovae	 edi, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  003fa	33 db		 xor	 ebx, ebx
  003fc	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx

; 152  :     while (t <= --s)

  00402	8d 57 0e	 lea	 edx, DWORD PTR [edi+14]
  00405	3b fa		 cmp	 edi, edx
  00407	0f 87 8a 03 00
	00		 ja	 $LN904@Update
  0040d	0f 1f 00	 npad	 3
$LL214@Update:

; 153  :     {
; 154  : 		if (L'0' <= *s && *s <= L'9')

  00410	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00413	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00416	66 83 f8 09	 cmp	 ax, 9
  0041a	77 05		 ja	 SHORT $LN216@Update

; 155  :             x += y * (*s - L'0');

  0041c	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0041f	eb 1a		 jmp	 SHORT $LN221@Update
$LN216@Update:

; 156  :         else if (L'a' <= *s && *s <= L'f')

  00421	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  00424	66 83 f8 05	 cmp	 ax, 5
  00428	77 05		 ja	 SHORT $LN218@Update

; 157  :             x += y * (*s - L'a' + 10);

  0042a	8d 41 a9	 lea	 eax, DWORD PTR [ecx-87]
  0042d	eb 0c		 jmp	 SHORT $LN221@Update
$LN218@Update:

; 158  :         else if (L'A' <= *s && *s <= L'F')

  0042f	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  00432	66 83 f8 05	 cmp	 ax, 5
  00436	77 1f		 ja	 SHORT $LN220@Update

; 159  :             x += y * (10 + *s - L'A');

  00438	8d 41 c9	 lea	 eax, DWORD PTR [ecx-55]
$LN221@Update:

; 162  :         y <<= 4;

  0043b	8b ce		 mov	 ecx, esi
  0043d	83 ea 02	 sub	 edx, 2
  00440	0f af c8	 imul	 ecx, eax
  00443	c1 e6 04	 shl	 esi, 4
  00446	03 d9		 add	 ebx, ecx
  00448	3b fa		 cmp	 edi, edx
  0044a	76 c4		 jbe	 SHORT $LL214@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0044c	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx
  00452	e9 40 03 00 00	 jmp	 $LN904@Update
$LN220@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h

; 161  :             return -1; /* invalid input! */

  00457	83 cf ff	 or	 edi, -1
  0045a	89 bd 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], edi
  00460	e9 38 03 00 00	 jmp	 $LN213@Update
$LN62@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 303  : 									else if (ret == TEXT_TAG_RESTORE_COLOR)

  00465	83 f8 05	 cmp	 eax, 5
  00468	75 14		 jne	 SHORT $LN64@Update

; 304  : 										dwColor = m_dwTextColor;

  0046a	8b 85 60 fa ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00470	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00473	89 bd 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], edi
  00479	e9 25 03 00 00	 jmp	 $LN819@Update
$LN64@Update:

; 305  : 									else if (ret == TEXT_TAG_HYPERLINK_START)

  0047e	83 f8 03	 cmp	 eax, 3
  00481	75 21		 jne	 SHORT $LN66@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00483	6a 00		 push	 0
  00485	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  0048a	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 307  : 										hyperlinkStep = 1;

  00490	c7 85 5c fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0049a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 309  : 									}

  0049f	e9 ff 02 00 00	 jmp	 $LN819@Update
$LN66@Update:

; 310  : 									else if (ret == TEXT_TAG_HYPERLINK_END)

  004a4	83 f8 04	 cmp	 eax, 4
  004a7	0f 85 f6 02 00
	00		 jne	 $LN819@Update

; 311  : 									{
; 312  : 										if (hyperlinkStep == 1)

  004ad	83 bd 5c fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  004b4	75 1f		 jne	 SHORT $LN69@Update

; 313  : 										{
; 314  : 											++hyperlinkStep;
; 315  : 											kHyperlink.ex = kHyperlink.sx = 0;

  004b6	33 c0		 xor	 eax, eax
  004b8	c7 85 5c fa ff
	ff 02 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 2
  004c2	33 db		 xor	 ebx, ebx
  004c4	89 85 bc fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp], eax
  004ca	89 9d 6c fa ff
	ff		 mov	 DWORD PTR tv4479[ebp], ebx

; 316  : 										}

  004d0	e9 ce 02 00 00	 jmp	 $LN819@Update
$LN69@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  004d5	83 bd ec fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$13[ebp+20], 8
  004dc	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  004e2	8b 9d e8 fa ff
	ff		 mov	 ebx, DWORD PTR _hyperlinkBuffer$13[ebp+16]

; 2273 :         if (_Large_string_engaged()) {

  004e8	0f 43 85 d8 fa
	ff ff		 cmovae	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  004ef	8b 95 50 fa ff
	ff		 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]

; 2273 :         if (_Large_string_engaged()) {

  004f5	89 85 5c fa ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  004fb	3b da		 cmp	 ebx, edx

; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  004fd	77 2f		 ja	 SHORT $LN240@Update

; 2264 :         if (_Large_string_engaged()) {

  004ff	83 fa 08	 cmp	 edx, 8

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00502	89 9d d0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+20], ebx

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00508	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  0050b	56		 push	 esi

; 2263 :         value_type* _Result = _Bx._Buf;

  0050c	8d bd c0 fa ff
	ff		 lea	 edi, DWORD PTR _kHyperlink$12[ebp+4]

; 2264 :         if (_Large_string_engaged()) {

  00512	0f 43 bd c0 fa
	ff ff		 cmovae	 edi, DWORD PTR _kHyperlink$12[ebp+4]

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00519	50		 push	 eax
  0051a	57		 push	 edi
  0051b	e8 00 00 00 00	 call	 _memmove
  00520	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00523	33 c0		 xor	 eax, eax
  00525	66 89 04 37	 mov	 WORD PTR [edi+esi], ax

; 3217 :             return *this;

  00529	e9 00 01 00 00	 jmp	 $LN252@Update
$LN240@Update:

; 4474 :         if (_New_size > max_size()) {

  0052e	81 fb fe ff ff
	7f		 cmp	 ebx, 2147483646		; 7ffffffeH
  00534	0f 87 a3 11 00
	00		 ja	 $LN825@Update

; 4475 :             _Xlen_string(); // result too long
; 4476 :         }
; 4477 : 
; 4478 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0053a	8b f3		 mov	 esi, ebx
  0053c	83 ce 07	 or	 esi, 7

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0053f	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00545	76 17		 jbe	 SHORT $LN257@Update

; 4456 :             return _Max;

  00547	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0054c	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00551	50		 push	 eax
  00552	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00557	83 c4 04	 add	 esp, 4
  0055a	8b f8		 mov	 edi, eax
  0055c	eb 65		 jmp	 SHORT $LN268@Update
$LN257@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0055e	8b ca		 mov	 ecx, edx
  00560	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00565	d1 e9		 shr	 ecx, 1
  00567	2b c1		 sub	 eax, ecx
  00569	3b d0		 cmp	 edx, eax
  0056b	76 17		 jbe	 SHORT $LN258@Update

; 4460 :             return _Max;

  0056d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00572	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00577	50		 push	 eax
  00578	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0057d	83 c4 04	 add	 esp, 4
  00580	8b f8		 mov	 edi, eax
  00582	eb 3f		 jmp	 SHORT $LN268@Update
$LN258@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00584	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00587	3b f0		 cmp	 esi, eax
  00589	0f 42 f0	 cmovb	 esi, eax

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0058c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0058f	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00594	0f 87 3e 11 00
	00		 ja	 $LN826@Update

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0059a	03 c0		 add	 eax, eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0059c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  005a1	72 0d		 jb	 SHORT $LN269@Update

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  005a3	50		 push	 eax
  005a4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005a9	83 c4 04	 add	 esp, 4
  005ac	8b f8		 mov	 edi, eax
  005ae	eb 13		 jmp	 SHORT $LN268@Update
$LN269@Update:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  005b0	85 c0		 test	 eax, eax
  005b2	74 0d		 je	 SHORT $LN270@Update

; 79   :         return ::operator new(_Bytes);

  005b4	50		 push	 eax
  005b5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  005ba	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  005bd	8b f8		 mov	 edi, eax
  005bf	eb 02		 jmp	 SHORT $LN268@Update
$LN270@Update:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  005c1	33 ff		 xor	 edi, edi
$LN268@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  005c3	89 b5 d4 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+24], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005c9	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  005cc	56		 push	 esi
  005cd	ff b5 5c fa ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  005d3	89 9d d0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+20], ebx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005d9	57		 push	 edi
  005da	e8 00 00 00 00	 call	 _memcpy

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  005df	33 c0		 xor	 eax, eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  005e4	66 89 04 37	 mov	 WORD PTR [edi+esi], ax

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  005e8	8b 85 50 fa ff
	ff		 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  005ee	83 f8 08	 cmp	 eax, 8
  005f1	72 35		 jb	 SHORT $LN251@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005f3	8b 8d c0 fa ff
	ff		 mov	 ecx, DWORD PTR _kHyperlink$12[ebp+4]
  005f9	8d 14 45 02 00
	00 00		 lea	 edx, DWORD PTR [eax*2+2]
  00600	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00602	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00608	72 14		 jb	 SHORT $LN293@Update

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0060a	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0060d	83 c2 23	 add	 edx, 35			; 00000023H
  00610	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00612	83 c0 fc	 add	 eax, -4			; fffffffcH
  00615	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00618	0f 87 c4 10 00
	00		 ja	 $LN501@Update
$LN293@Update:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0061e	52		 push	 edx
  0061f	51		 push	 ecx
  00620	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00625	83 c4 08	 add	 esp, 8
$LN251@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00628	89 bd c0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+4], edi
$LN252@Update:
  0062e	8b 9d 60 fa ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00634	8d 8d bc fa ff
	ff		 lea	 ecx, DWORD PTR _kHyperlink$12[ebp]
  0063a	83 c3 78	 add	 ebx, 120		; 00000078H
  0063d	51		 push	 ecx
  0063e	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00641	50		 push	 eax
  00642	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  00645	74 0f		 je	 SHORT $LN303@Update

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00647	53		 push	 ebx
  00648	e8 00 00 00 00	 call	 ??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>
  0064d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  00650	83 43 04 1c	 add	 DWORD PTR [ebx+4], 28	; 0000001cH

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00654	eb 07		 jmp	 SHORT $LN302@Update
$LN303@Update:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00656	8b cb		 mov	 ecx, ebx
  00658	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>
$LN302@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 321  : 											no_hyperlink++;

  0065d	ff 85 54 fa ff
	ff		 inc	 DWORD PTR _no_hyperlink$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00663	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
  00669	6a 00		 push	 0
  0066b	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 324  : 											hyperlinkStep = 0;

  00670	c7 85 5c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0067a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0067f	66 8b 9d be fa
	ff ff		 mov	 bx, WORD PTR _kHyperlink$12[ebp+2]
  00686	8b 85 d4 fa ff
	ff		 mov	 eax, DWORD PTR _kHyperlink$12[ebp+24]
  0068c	8b bd 68 fa ff
	ff		 mov	 edi, DWORD PTR _dwColor$1$[ebp]
  00692	89 85 50 fa ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], eax
  00698	89 9d 6c fa ff
	ff		 mov	 DWORD PTR tv4479[ebp], ebx
  0069e	e9 00 01 00 00	 jmp	 $LN819@Update
$LN58@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 280  : 									if (hyperlinkStep == 1)

  006a3	83 bd 5c fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  006aa	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  006ad	75 62		 jne	 SHORT $LN59@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3146 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  006af	8b b5 ec fa ff
	ff		 mov	 esi, DWORD PTR _hyperlinkBuffer$13[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 281  : 										hyperlinkBuffer.append(1, wArabicText[e]);

  006b5	8b d1		 mov	 edx, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3146 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  006b7	8b 8d e8 fa ff
	ff		 mov	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp+16]
  006bd	8b c6		 mov	 eax, esi
  006bf	2b c1		 sub	 eax, ecx

; 3147 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  006c1	83 f8 01	 cmp	 eax, 1
  006c4	72 29		 jb	 SHORT $LN186@Update

; 3148 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  006c6	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2264 :         if (_Large_string_engaged()) {

  006c9	83 fe 08	 cmp	 esi, 8

; 3148 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  006cc	89 85 e8 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+16], eax

; 2263 :         value_type* _Result = _Bx._Buf;

  006d2	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 2264 :         if (_Large_string_engaged()) {

  006d8	0f 43 85 d8 fa
	ff ff		 cmovae	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h

; 261  :             *_Su = _C;

  006df	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3151 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  006e3	33 d2		 xor	 edx, edx
  006e5	66 89 54 48 02	 mov	 WORD PTR [eax+ecx*2+2], dx

; 3152 :             return *this;

  006ea	e9 b4 00 00 00	 jmp	 $LN819@Update
$LN186@Update:

; 3153 :         }
; 3154 : 
; 3155 :         return _Reallocate_grow_by(

  006ef	52		 push	 edx
  006f0	6a 01		 push	 1
  006f2	c6 85 1c fa ff
	ff 00		 mov	 BYTE PTR $T6[ebp], 0
  006f9	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
  006ff	ff b5 1c fa ff
	ff		 push	 DWORD PTR $T6[ebp]
  00705	6a 01		 push	 1
  00707	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_c3135ae829aeedc0a8af1bd1e887c66a>,unsigned int,wchar_t>
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 281  : 										hyperlinkBuffer.append(1, wArabicText[e]);

  0070c	e9 92 00 00 00	 jmp	 $LN819@Update
$LN59@Update:

; 282  : 									else
; 283  : 									{
; 284  : 										int charWidth = __DrawCharacter(pFontTexture, dataCodePage, wArabicText[e], dwColor);

  00711	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  00717	57		 push	 edi
  00718	51		 push	 ecx
  00719	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0071f	0f b7 c0	 movzx	 eax, ax
  00722	50		 push	 eax
  00723	ff b5 40 fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  00729	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter

; 285  : 										kHyperlink.ex += charWidth;

  0072e	66 03 d8	 add	 bx, ax

; 288  : 										for (int j = 1; j <= no_hyperlink; j++)

  00731	be 01 00 00 00	 mov	 esi, 1
  00736	89 9d 6c fa ff
	ff		 mov	 DWORD PTR tv4479[ebp], ebx
  0073c	66 89 9d be fa
	ff ff		 mov	 WORD PTR _kHyperlink$12[ebp+2], bx
  00743	39 b5 54 fa ff
	ff		 cmp	 DWORD PTR _no_hyperlink$1$[ebp], esi
  00749	7c 58		 jl	 SHORT $LN819@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

  0074b	0f b7 c0	 movzx	 eax, ax
  0074e	66 90		 npad	 2
$LL18@Update:

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00750	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00756	0f b7 f8	 movzx	 edi, ax
  00759	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0075e	8b 59 78	 mov	 ebx, DWORD PTR [ecx+120]
  00761	8b 49 7c	 mov	 ecx, DWORD PTR [ecx+124]
  00764	2b cb		 sub	 ecx, ebx
  00766	f7 e9		 imul	 ecx
  00768	03 d1		 add	 edx, ecx
  0076a	c1 fa 04	 sar	 edx, 4
  0076d	8b ca		 mov	 ecx, edx
  0076f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00772	03 ca		 add	 ecx, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 290  : 											if(m_hyperlinkVector.size() < j)

  00774	3b ce		 cmp	 ecx, esi
  00776	72 1f		 jb	 SHORT $LN904@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00778	2b ce		 sub	 ecx, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 288  : 										for (int j = 1; j <= no_hyperlink; j++)

  0077a	46		 inc	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  0077b	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00782	2b c1		 sub	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 294  : 											tempLink.ex += charWidth;

  00784	66 01 7c 83 02	 add	 WORD PTR [ebx+eax*4+2], di

; 295  : 											tempLink.sx += charWidth;

  00789	66 01 3c 83	 add	 WORD PTR [ebx+eax*4], di
  0078d	8b c7		 mov	 eax, edi
  0078f	3b b5 54 fa ff
	ff		 cmp	 esi, DWORD PTR _no_hyperlink$1$[ebp]
  00795	7e b9		 jle	 SHORT $LL18@Update
$LN904@Update:

; 325  : 											hyperlinkBuffer = L"";
; 326  : 										}
; 327  : 									}
; 328  : 								}
; 329  : 								e += len;

  00797	8b bd 68 fa ff
	ff		 mov	 edi, DWORD PTR _dwColor$1$[ebp]
$LN213@Update:
  0079d	8b 9d 6c fa ff
	ff		 mov	 ebx, DWORD PTR tv4479[ebp]
$LN819@Update:
  007a3	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _e$1$[ebp]
  007a9	03 8d 28 fa ff
	ff		 add	 ecx, DWORD PTR _len$8[ebp]
  007af	89 8d 64 fa ff
	ff		 mov	 DWORD PTR _e$1$[ebp], ecx
  007b5	3b 8d 58 fa ff
	ff		 cmp	 ecx, DWORD PTR _nEnglishBase$1$[ebp]
  007bb	0f 8e df fb ff
	ff		 jle	 $LL13@Update
  007c1	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
$LN14@Update:

; 330  : 							}
; 331  : 
; 332  : 							int charWidth = __DrawCharacter(pFontTexture, dataCodePage, Arabic_ConvSymbol(wArabicText[i]), dwColor);

  007c7	8b 8d 44 fa ff
	ff		 mov	 ecx, DWORD PTR _dataCodePage$1$[ebp]
  007cd	0f b7 f1	 movzx	 esi, cx
  007d0	8b 8d 48 fa ff
	ff		 mov	 ecx, DWORD PTR _wArabicText$1$[ebp]
  007d6	57		 push	 edi
  007d7	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  007db	50		 push	 eax
  007dc	e8 00 00 00 00	 call	 ?Arabic_ConvSymbol@@YA_W_W@Z ; Arabic_ConvSymbol
  007e1	8b bd 60 fa ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  007e7	83 c4 04	 add	 esp, 4
  007ea	0f b7 c0	 movzx	 eax, ax
  007ed	8b cf		 mov	 ecx, edi
  007ef	50		 push	 eax
  007f0	56		 push	 esi
  007f1	ff b5 40 fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  007f7	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter

; 333  : 							kHyperlink.ex += charWidth;

  007fc	0f b7 d8	 movzx	 ebx, ax

; 335  : 							for (int j = 1; j <= no_hyperlink; j++)

  007ff	be 01 00 00 00	 mov	 esi, 1
  00804	8b 85 6c fa ff
	ff		 mov	 eax, DWORD PTR tv4479[ebp]
  0080a	66 03 c3	 add	 ax, bx
  0080d	89 85 6c fa ff
	ff		 mov	 DWORD PTR tv4479[ebp], eax
  00813	66 89 85 be fa
	ff ff		 mov	 WORD PTR _kHyperlink$12[ebp+2], ax
  0081a	39 b5 54 fa ff
	ff		 cmp	 DWORD PTR _no_hyperlink$1$[ebp], esi
  00820	7c 44		 jl	 SHORT $LN822@Update
$LL21@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00822	8b 4f 7c	 mov	 ecx, DWORD PTR [edi+124]
  00825	8d 47 78	 lea	 eax, DWORD PTR [edi+120]
  00828	8b 38		 mov	 edi, DWORD PTR [eax]
  0082a	2b cf		 sub	 ecx, edi
  0082c	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00831	f7 e9		 imul	 ecx
  00833	03 d1		 add	 edx, ecx
  00835	c1 fa 04	 sar	 edx, 4
  00838	8b ca		 mov	 ecx, edx
  0083a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0083d	03 ca		 add	 ecx, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 337  : 								if(m_hyperlinkVector.size() < j)

  0083f	3b ce		 cmp	 ecx, esi
  00841	72 23		 jb	 SHORT $LN822@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00843	2b ce		 sub	 ecx, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 335  : 							for (int j = 1; j <= no_hyperlink; j++)

  00845	46		 inc	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00846	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0084d	2b c1		 sub	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 341  : 								tempLink.ex += charWidth;

  0084f	66 01 5c 87 02	 add	 WORD PTR [edi+eax*4+2], bx

; 342  : 								tempLink.sx += charWidth;

  00854	66 01 1c 87	 add	 WORD PTR [edi+eax*4], bx
  00858	8b bd 60 fa ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  0085e	3b b5 54 fa ff
	ff		 cmp	 esi, DWORD PTR _no_hyperlink$1$[ebp]
  00864	7e bc		 jle	 SHORT $LL21@Update
$LN822@Update:

; 343  : 							}
; 344  : 
; 345  : 							isEnglish = false;
; 346  : 						}
; 347  : 					}

  00866	8b 9d 6c fa ff
	ff		 mov	 ebx, DWORD PTR tv4479[ebp]
  0086c	32 c9		 xor	 cl, cl
  0086e	89 8d 64 fa ff
	ff		 mov	 DWORD PTR tv4487[ebp], ecx
  00874	e9 ea 00 00 00	 jmp	 $LN923@Update
$LN48@Update:

; 348  : 					else
; 349  : 					{
; 350  : 						if (Arabic_IsInPresentation(wArabicChar) || Arabic_IsInSymbol(wArabicChar))

  00879	e8 00 00 00 00	 call	 ?Arabic_IsInPresentation@@YA_N_W@Z ; Arabic_IsInPresentation
  0087e	83 c4 04	 add	 esp, 4
  00881	84 c0		 test	 al, al
  00883	75 29		 jne	 SHORT $LN74@Update
  00885	56		 push	 esi
  00886	e8 00 00 00 00	 call	 ?Arabic_IsInSymbol@@YA_N_W@Z ; Arabic_IsInSymbol
  0088b	83 c4 04	 add	 esp, 4
  0088e	84 c0		 test	 al, al
  00890	75 1c		 jne	 SHORT $LN74@Update

; 364  : 							}
; 365  : 						}
; 366  : 						else
; 367  : 						{
; 368  : 							nEnglishBase = i;

  00892	8b 95 4c fa ff
	ff		 mov	 edx, DWORD PTR _i$1$[ebp]

; 369  : 							isEnglish = true;

  00898	b9 01 00 00 00	 mov	 ecx, 1
  0089d	89 95 58 fa ff
	ff		 mov	 DWORD PTR _nEnglishBase$1$[ebp], edx
  008a3	89 8d 64 fa ff
	ff		 mov	 DWORD PTR tv4487[ebp], ecx
  008a9	e9 bb 00 00 00	 jmp	 $LN10@Update
$LN74@Update:

; 351  : 						{
; 352  : 							int charWidth = __DrawCharacter(pFontTexture, dataCodePage, Arabic_ConvSymbol(wArabicText[i]), dwColor);

  008ae	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  008b4	8b 8d 48 fa ff
	ff		 mov	 ecx, DWORD PTR _wArabicText$1$[ebp]
  008ba	0f b7 f0	 movzx	 esi, ax
  008bd	8b 85 4c fa ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  008c3	57		 push	 edi
  008c4	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  008c8	50		 push	 eax
  008c9	e8 00 00 00 00	 call	 ?Arabic_ConvSymbol@@YA_W_W@Z ; Arabic_ConvSymbol
  008ce	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  008d4	83 c4 04	 add	 esp, 4
  008d7	0f b7 c0	 movzx	 eax, ax
  008da	50		 push	 eax
  008db	56		 push	 esi
  008dc	ff b5 40 fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  008e2	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter

; 353  : 							kHyperlink.ex += charWidth;

  008e7	66 03 d8	 add	 bx, ax

; 356  : 							for (int j = 1; j <= no_hyperlink; j++)

  008ea	be 01 00 00 00	 mov	 esi, 1
  008ef	89 9d 6c fa ff
	ff		 mov	 DWORD PTR tv4479[ebp], ebx
  008f5	66 89 9d be fa
	ff ff		 mov	 WORD PTR _kHyperlink$12[ebp+2], bx
  008fc	39 b5 54 fa ff
	ff		 cmp	 DWORD PTR _no_hyperlink$1$[ebp], esi
  00902	7c 59		 jl	 SHORT $LN912@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

  00904	0f b7 c0	 movzx	 eax, ax
  00907	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL24@Update:

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00910	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00916	0f b7 f8	 movzx	 edi, ax
  00919	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0091e	8b 59 78	 mov	 ebx, DWORD PTR [ecx+120]
  00921	8b 49 7c	 mov	 ecx, DWORD PTR [ecx+124]
  00924	2b cb		 sub	 ecx, ebx
  00926	f7 e9		 imul	 ecx
  00928	03 d1		 add	 edx, ecx
  0092a	c1 fa 04	 sar	 edx, 4
  0092d	8b ca		 mov	 ecx, edx
  0092f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00932	03 ca		 add	 ecx, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 358  : 								if(m_hyperlinkVector.size() < j)

  00934	3b ce		 cmp	 ecx, esi
  00936	72 1f		 jb	 SHORT $LN906@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00938	2b ce		 sub	 ecx, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 356  : 							for (int j = 1; j <= no_hyperlink; j++)

  0093a	46		 inc	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  0093b	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00942	2b c1		 sub	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 362  : 								tempLink.ex += charWidth;

  00944	66 01 7c 83 02	 add	 WORD PTR [ebx+eax*4+2], di

; 363  : 								tempLink.sx += charWidth;

  00949	66 01 3c 83	 add	 WORD PTR [ebx+eax*4], di
  0094d	8b c7		 mov	 eax, edi
  0094f	3b b5 54 fa ff
	ff		 cmp	 esi, DWORD PTR _no_hyperlink$1$[ebp]
  00955	7e b9		 jle	 SHORT $LL24@Update
$LN906@Update:

; 255  : 					{
; 256  : 
; 257  : 						//	(2)
; 258  : 						//		or
; 259  : 						//
; 260  : 						//
; 261  : 						if (Arabic_IsInSymbol(wArabicChar) && (

  00957	8b 9d 6c fa ff
	ff		 mov	 ebx, DWORD PTR tv4479[ebp]
$LN912@Update:

; 245  : 				{
; 246  : 					isEnglish = false;
; 247  : 				}
; 248  : 
; 249  : 				int i = 0;
; 250  : 				for (i = wArabicTextLen - 1 ; i >= 0; --i)

  0095d	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR tv4487[ebp]
$LN923@Update:
  00963	8b 95 58 fa ff
	ff		 mov	 edx, DWORD PTR _nEnglishBase$1$[ebp]
$LN10@Update:
  00969	8b b5 4c fa ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
  0096f	8b bd 68 fa ff
	ff		 mov	 edi, DWORD PTR _dwColor$1$[ebp]
  00975	83 ee 01	 sub	 esi, 1
  00978	89 b5 4c fa ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
  0097e	0f 89 4c f9 ff
	ff		 jns	 $LL12@Update
  00984	8b b5 50 fa ff
	ff		 mov	 esi, DWORD PTR __Old_capacity$1$[ebp]
$LN11@Update:

; 370  : 						}
; 371  : 					}
; 372  : 				}
; 373  : 
; 374  : 				if (isEnglish)

  0098a	84 c9		 test	 cl, cl
  0098c	0f 84 55 04 00
	00		 je	 $LN899@Update

; 375  : 				{
; 376  : 					for (int e = i + 1; e <= nEnglishBase;) {

  00992	8b 8d 4c fa ff
	ff		 mov	 ecx, DWORD PTR _i$1$[ebp]
  00998	41		 inc	 ecx
  00999	89 8d 64 fa ff
	ff		 mov	 DWORD PTR _e$1$[ebp], ecx
  0099f	3b ca		 cmp	 ecx, edx
  009a1	0f 8f 40 04 00
	00		 jg	 $LN899@Update
  009a7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL25@Update:

; 377  : 						int ret = GetTextTag(&wArabicText[e], wArabicTextLen - e, len, hyperlinkBuffer);

  009b0	8b 85 48 fa ff
	ff		 mov	 eax, DWORD PTR _wArabicText$1$[ebp]
  009b6	8d 34 48	 lea	 esi, DWORD PTR [eax+ecx*2]
  009b9	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]
  009bf	50		 push	 eax
  009c0	8d 85 28 fa ff
	ff		 lea	 eax, DWORD PTR _len$8[ebp]
  009c6	50		 push	 eax
  009c7	8b 85 38 fa ff
	ff		 mov	 eax, DWORD PTR _wArabicTextLen$1$[ebp]
  009cd	2b c1		 sub	 eax, ecx
  009cf	50		 push	 eax
  009d0	56		 push	 esi
  009d1	e8 00 00 00 00	 call	 ?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GetTextTag
  009d6	83 c4 10	 add	 esp, 16			; 00000010H

; 378  : 
; 379  : 						if (ret == TEXT_TAG_PLAIN || ret == TEXT_TAG_TAG)

  009d9	85 c0		 test	 eax, eax
  009db	0f 84 df 02 00
	00		 je	 $LN79@Update
  009e1	83 f8 01	 cmp	 eax, 1
  009e4	0f 84 d6 02 00
	00		 je	 $LN79@Update

; 396  : 								}
; 397  : 							}
; 398  : 						}
; 399  : 						else
; 400  : 						{
; 401  : 							if (ret == TEXT_TAG_COLOR)

  009ea	83 f8 02	 cmp	 eax, 2
  009ed	0f 85 8f 00 00
	00		 jne	 $LN83@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  009f3	83 bd ec fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$13[ebp+20], 8
  009fa	8d bd d8 fa ff
	ff		 lea	 edi, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  00a00	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00a03	0f 43 bd d8 fa
	ff ff		 cmovae	 edi, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  00a0a	33 db		 xor	 ebx, ebx
  00a0c	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx

; 152  :     while (t <= --s)

  00a12	8d 57 0e	 lea	 edx, DWORD PTR [edi+14]
  00a15	3b fa		 cmp	 edi, edx
  00a17	77 62		 ja	 SHORT $LN915@Update
  00a19	0f 1f 80 00 00
	00 00		 npad	 7
$LL354@Update:

; 153  :     {
; 154  : 		if (L'0' <= *s && *s <= L'9')

  00a20	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00a23	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00a26	66 83 f8 09	 cmp	 ax, 9
  00a2a	77 05		 ja	 SHORT $LN356@Update

; 155  :             x += y * (*s - L'0');

  00a2c	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00a2f	eb 1a		 jmp	 SHORT $LN361@Update
$LN356@Update:

; 156  :         else if (L'a' <= *s && *s <= L'f')

  00a31	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  00a34	66 83 f8 05	 cmp	 ax, 5
  00a38	77 05		 ja	 SHORT $LN358@Update

; 157  :             x += y * (*s - L'a' + 10);

  00a3a	8d 41 a9	 lea	 eax, DWORD PTR [ecx-87]
  00a3d	eb 0c		 jmp	 SHORT $LN361@Update
$LN358@Update:

; 158  :         else if (L'A' <= *s && *s <= L'F')

  00a3f	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  00a42	66 83 f8 05	 cmp	 ax, 5
  00a46	77 25		 ja	 SHORT $LN360@Update

; 159  :             x += y * (10 + *s - L'A');

  00a48	8d 41 c9	 lea	 eax, DWORD PTR [ecx-55]
$LN361@Update:

; 162  :         y <<= 4;

  00a4b	0f af c6	 imul	 eax, esi
  00a4e	83 ea 02	 sub	 edx, 2
  00a51	c1 e6 04	 shl	 esi, 4
  00a54	03 d8		 add	 ebx, eax
  00a56	89 9d 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], ebx
  00a5c	3b fa		 cmp	 edi, edx
  00a5e	76 c0		 jbe	 SHORT $LL354@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00a60	8b fb		 mov	 edi, ebx
  00a62	89 bd 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], edi
  00a68	e9 50 03 00 00	 jmp	 $LN353@Update
$LN360@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h

; 161  :             return -1; /* invalid input! */

  00a6d	83 cf ff	 or	 edi, -1
  00a70	89 bd 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], edi
  00a76	e9 42 03 00 00	 jmp	 $LN353@Update
$LN915@Update:

; 152  :     while (t <= --s)

  00a7b	33 ff		 xor	 edi, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 402  : 								dwColor = htoi(hyperlinkBuffer.c_str(), 8);

  00a7d	e9 3b 03 00 00	 jmp	 $LN353@Update
$LN83@Update:

; 403  : 							else if (ret == TEXT_TAG_RESTORE_COLOR)

  00a82	83 f8 05	 cmp	 eax, 5
  00a85	75 14		 jne	 SHORT $LN85@Update

; 404  : 								dwColor = m_dwTextColor;

  00a87	8b 85 60 fa ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00a8d	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00a90	89 bd 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], edi
  00a96	e9 28 03 00 00	 jmp	 $LN898@Update
$LN85@Update:

; 405  : 							else if (ret == TEXT_TAG_HYPERLINK_START)

  00a9b	83 f8 03	 cmp	 eax, 3
  00a9e	75 21		 jne	 SHORT $LN87@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00aa0	6a 00		 push	 0
  00aa2	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  00aa7	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 407  : 								hyperlinkStep = 1;

  00aad	c7 85 5c fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00ab7	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 409  : 							}

  00abc	e9 02 03 00 00	 jmp	 $LN898@Update
$LN87@Update:

; 410  : 							else if (ret == TEXT_TAG_HYPERLINK_END)

  00ac1	83 f8 04	 cmp	 eax, 4
  00ac4	0f 85 f9 02 00
	00		 jne	 $LN898@Update

; 411  : 							{
; 412  : 								if (hyperlinkStep == 1)

  00aca	83 bd 5c fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  00ad1	75 1f		 jne	 SHORT $LN90@Update

; 413  : 								{
; 414  : 									++hyperlinkStep;
; 415  : 									kHyperlink.ex = kHyperlink.sx = 0;

  00ad3	33 c0		 xor	 eax, eax
  00ad5	c7 85 5c fa ff
	ff 02 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 2
  00adf	33 db		 xor	 ebx, ebx
  00ae1	89 85 bc fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp], eax
  00ae7	89 9d 6c fa ff
	ff		 mov	 DWORD PTR tv4479[ebp], ebx

; 416  : 								}

  00aed	e9 d1 02 00 00	 jmp	 $LN898@Update
$LN90@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00af2	83 bd ec fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$13[ebp+20], 8
  00af9	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00aff	8b 9d e8 fa ff
	ff		 mov	 ebx, DWORD PTR _hyperlinkBuffer$13[ebp+16]

; 2273 :         if (_Large_string_engaged()) {

  00b05	0f 43 85 d8 fa
	ff ff		 cmovae	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00b0c	8b 95 50 fa ff
	ff		 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]

; 2273 :         if (_Large_string_engaged()) {

  00b12	89 85 5c fa ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00b18	3b da		 cmp	 ebx, edx

; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  00b1a	77 2f		 ja	 SHORT $LN380@Update

; 2264 :         if (_Large_string_engaged()) {

  00b1c	83 fa 08	 cmp	 edx, 8

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00b1f	89 9d d0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+20], ebx

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00b25	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  00b28	56		 push	 esi

; 2263 :         value_type* _Result = _Bx._Buf;

  00b29	8d bd c0 fa ff
	ff		 lea	 edi, DWORD PTR _kHyperlink$12[ebp+4]

; 2264 :         if (_Large_string_engaged()) {

  00b2f	0f 43 bd c0 fa
	ff ff		 cmovae	 edi, DWORD PTR _kHyperlink$12[ebp+4]

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00b36	50		 push	 eax
  00b37	57		 push	 edi
  00b38	e8 00 00 00 00	 call	 _memmove
  00b3d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00b40	33 c0		 xor	 eax, eax
  00b42	66 89 04 37	 mov	 WORD PTR [edi+esi], ax

; 3217 :             return *this;

  00b46	e9 00 01 00 00	 jmp	 $LN392@Update
$LN380@Update:

; 4474 :         if (_New_size > max_size()) {

  00b4b	81 fb fe ff ff
	7f		 cmp	 ebx, 2147483646		; 7ffffffeH
  00b51	0f 87 86 0b 00
	00		 ja	 $LN825@Update

; 4475 :             _Xlen_string(); // result too long
; 4476 :         }
; 4477 : 
; 4478 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00b57	8b f3		 mov	 esi, ebx
  00b59	83 ce 07	 or	 esi, 7

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00b5c	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00b62	76 17		 jbe	 SHORT $LN397@Update

; 4456 :             return _Max;

  00b64	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00b69	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00b6e	50		 push	 eax
  00b6f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00b74	83 c4 04	 add	 esp, 4
  00b77	8b f8		 mov	 edi, eax
  00b79	eb 65		 jmp	 SHORT $LN408@Update
$LN397@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00b7b	8b ca		 mov	 ecx, edx
  00b7d	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00b82	d1 e9		 shr	 ecx, 1
  00b84	2b c1		 sub	 eax, ecx
  00b86	3b d0		 cmp	 edx, eax
  00b88	76 17		 jbe	 SHORT $LN398@Update

; 4460 :             return _Max;

  00b8a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00b8f	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00b94	50		 push	 eax
  00b95	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00b9a	83 c4 04	 add	 esp, 4
  00b9d	8b f8		 mov	 edi, eax
  00b9f	eb 3f		 jmp	 SHORT $LN408@Update
$LN398@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00ba1	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00ba4	3b f0		 cmp	 esi, eax
  00ba6	0f 42 f0	 cmovb	 esi, eax

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00ba9	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00bac	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00bb1	0f 87 21 0b 00
	00		 ja	 $LN826@Update

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00bb7	03 c0		 add	 eax, eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00bb9	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00bbe	72 0d		 jb	 SHORT $LN409@Update

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00bc0	50		 push	 eax
  00bc1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00bc6	83 c4 04	 add	 esp, 4
  00bc9	8b f8		 mov	 edi, eax
  00bcb	eb 13		 jmp	 SHORT $LN408@Update
$LN409@Update:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00bcd	85 c0		 test	 eax, eax
  00bcf	74 0d		 je	 SHORT $LN410@Update

; 79   :         return ::operator new(_Bytes);

  00bd1	50		 push	 eax
  00bd2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00bd7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00bda	8b f8		 mov	 edi, eax
  00bdc	eb 02		 jmp	 SHORT $LN408@Update
$LN410@Update:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00bde	33 ff		 xor	 edi, edi
$LN408@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  00be0	89 b5 d4 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+24], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00be6	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  00be9	56		 push	 esi
  00bea	ff b5 5c fa ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  00bf0	89 9d d0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+20], ebx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00bf6	57		 push	 edi
  00bf7	e8 00 00 00 00	 call	 _memcpy

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00bfc	33 c0		 xor	 eax, eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00bfe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00c01	66 89 04 37	 mov	 WORD PTR [edi+esi], ax

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  00c05	8b 85 50 fa ff
	ff		 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  00c0b	83 f8 08	 cmp	 eax, 8
  00c0e	72 35		 jb	 SHORT $LN391@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c10	8b 8d c0 fa ff
	ff		 mov	 ecx, DWORD PTR _kHyperlink$12[ebp+4]
  00c16	8d 14 45 02 00
	00 00		 lea	 edx, DWORD PTR [eax*2+2]
  00c1d	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00c1f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00c25	72 14		 jb	 SHORT $LN433@Update

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00c27	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00c2a	83 c2 23	 add	 edx, 35			; 00000023H
  00c2d	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00c2f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00c32	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00c35	0f 87 a7 0a 00
	00		 ja	 $LN501@Update
$LN433@Update:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00c3b	52		 push	 edx
  00c3c	51		 push	 ecx
  00c3d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00c42	83 c4 08	 add	 esp, 8
$LN391@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00c45	89 bd c0 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$12[ebp+4], edi
$LN392@Update:
  00c4b	8b 9d 60 fa ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00c51	8d 8d bc fa ff
	ff		 lea	 ecx, DWORD PTR _kHyperlink$12[ebp]
  00c57	83 c3 78	 add	 ebx, 120		; 00000078H
  00c5a	51		 push	 ecx
  00c5b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00c5e	50		 push	 eax
  00c5f	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  00c62	74 0f		 je	 SHORT $LN442@Update

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00c64	53		 push	 ebx
  00c65	e8 00 00 00 00	 call	 ??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>
  00c6a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  00c6d	83 43 04 1c	 add	 DWORD PTR [ebx+4], 28	; 0000001cH

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00c71	eb 07		 jmp	 SHORT $LN441@Update
$LN442@Update:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00c73	8b cb		 mov	 ecx, ebx
  00c75	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>
$LN441@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 421  : 									no_hyperlink++;

  00c7a	ff 85 54 fa ff
	ff		 inc	 DWORD PTR _no_hyperlink$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00c80	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
  00c86	6a 00		 push	 0
  00c88	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 423  : 									hyperlinkStep = 0;

  00c8d	c7 85 5c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00c97	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00c9c	66 8b 9d be fa
	ff ff		 mov	 bx, WORD PTR _kHyperlink$12[ebp+2]
  00ca3	8b 85 d4 fa ff
	ff		 mov	 eax, DWORD PTR _kHyperlink$12[ebp+24]
  00ca9	8b bd 68 fa ff
	ff		 mov	 edi, DWORD PTR _dwColor$1$[ebp]
  00caf	89 85 50 fa ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], eax
  00cb5	89 9d 6c fa ff
	ff		 mov	 DWORD PTR tv4479[ebp], ebx
  00cbb	e9 03 01 00 00	 jmp	 $LN898@Update
$LN79@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 381  : 							if (hyperlinkStep == 1)

  00cc0	83 bd 5c fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  00cc7	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00cca	75 62		 jne	 SHORT $LN80@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3146 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00ccc	8b b5 ec fa ff
	ff		 mov	 esi, DWORD PTR _hyperlinkBuffer$13[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 382  : 								hyperlinkBuffer.append(1, wArabicText[e]);

  00cd2	8b d1		 mov	 edx, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3146 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00cd4	8b 8d e8 fa ff
	ff		 mov	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp+16]
  00cda	8b c6		 mov	 eax, esi
  00cdc	2b c1		 sub	 eax, ecx

; 3147 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00cde	83 f8 01	 cmp	 eax, 1
  00ce1	72 29		 jb	 SHORT $LN326@Update

; 3148 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00ce3	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2264 :         if (_Large_string_engaged()) {

  00ce6	83 fe 08	 cmp	 esi, 8

; 3148 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00ce9	89 85 e8 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+16], eax

; 2263 :         value_type* _Result = _Bx._Buf;

  00cef	8d 85 d8 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]

; 2264 :         if (_Large_string_engaged()) {

  00cf5	0f 43 85 d8 fa
	ff ff		 cmovae	 eax, DWORD PTR _hyperlinkBuffer$13[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h

; 261  :             *_Su = _C;

  00cfc	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3151 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00d00	33 d2		 xor	 edx, edx
  00d02	66 89 54 48 02	 mov	 WORD PTR [eax+ecx*2+2], dx

; 3152 :             return *this;

  00d07	e9 b7 00 00 00	 jmp	 $LN898@Update
$LN326@Update:

; 3153 :         }
; 3154 : 
; 3155 :         return _Reallocate_grow_by(

  00d0c	52		 push	 edx
  00d0d	6a 01		 push	 1
  00d0f	c6 85 18 fa ff
	ff 00		 mov	 BYTE PTR $T5[ebp], 0
  00d16	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
  00d1c	ff b5 18 fa ff
	ff		 push	 DWORD PTR $T5[ebp]
  00d22	6a 01		 push	 1
  00d24	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_c3135ae829aeedc0a8af1bd1e887c66a>,unsigned int,wchar_t>
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 382  : 								hyperlinkBuffer.append(1, wArabicText[e]);

  00d29	e9 95 00 00 00	 jmp	 $LN898@Update
$LN80@Update:

; 383  : 							else
; 384  : 							{
; 385  : 								int charWidth = __DrawCharacter(pFontTexture, dataCodePage, wArabicText[e], dwColor);

  00d2e	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  00d34	57		 push	 edi
  00d35	51		 push	 ecx
  00d36	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00d3c	0f b7 c0	 movzx	 eax, ax
  00d3f	50		 push	 eax
  00d40	ff b5 40 fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  00d46	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter

; 386  : 								kHyperlink.ex += charWidth;

  00d4b	66 03 d8	 add	 bx, ax

; 388  : 								for (int j = 1; j <= no_hyperlink; j++)

  00d4e	be 01 00 00 00	 mov	 esi, 1
  00d53	89 9d 6c fa ff
	ff		 mov	 DWORD PTR tv4479[ebp], ebx
  00d59	66 89 9d be fa
	ff ff		 mov	 WORD PTR _kHyperlink$12[ebp+2], bx
  00d60	39 b5 54 fa ff
	ff		 cmp	 DWORD PTR _no_hyperlink$1$[ebp], esi
  00d66	7c 5b		 jl	 SHORT $LN898@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

  00d68	0f b7 c0	 movzx	 eax, ax
  00d6b	0f 1f 44 00 00	 npad	 5
$LL30@Update:

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00d70	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00d76	0f b7 f8	 movzx	 edi, ax
  00d79	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00d7e	8b 59 78	 mov	 ebx, DWORD PTR [ecx+120]
  00d81	8b 49 7c	 mov	 ecx, DWORD PTR [ecx+124]
  00d84	2b cb		 sub	 ecx, ebx
  00d86	f7 e9		 imul	 ecx
  00d88	03 d1		 add	 edx, ecx
  00d8a	c1 fa 04	 sar	 edx, 4
  00d8d	8b ca		 mov	 ecx, edx
  00d8f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00d92	03 ca		 add	 ecx, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 390  : 									if(m_hyperlinkVector.size() < j)

  00d94	3b ce		 cmp	 ecx, esi
  00d96	72 1f		 jb	 SHORT $LN907@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00d98	2b ce		 sub	 ecx, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 388  : 								for (int j = 1; j <= no_hyperlink; j++)

  00d9a	46		 inc	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00d9b	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00da2	2b c1		 sub	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 394  : 									tempLink.ex += charWidth;

  00da4	66 01 7c 83 02	 add	 WORD PTR [ebx+eax*4+2], di

; 395  : 									tempLink.sx += charWidth;

  00da9	66 01 3c 83	 add	 WORD PTR [ebx+eax*4], di
  00dad	8b c7		 mov	 eax, edi
  00daf	3b b5 54 fa ff
	ff		 cmp	 esi, DWORD PTR _no_hyperlink$1$[ebp]
  00db5	7e b9		 jle	 SHORT $LL30@Update
$LN907@Update:
  00db7	8b bd 68 fa ff
	ff		 mov	 edi, DWORD PTR _dwColor$1$[ebp]
$LN353@Update:

; 424  : 									hyperlinkBuffer = L"";
; 425  : 								}
; 426  : 							}
; 427  : 						}
; 428  : 						e += len;

  00dbd	8b 9d 6c fa ff
	ff		 mov	 ebx, DWORD PTR tv4479[ebp]
$LN898@Update:
  00dc3	8b 8d 64 fa ff
	ff		 mov	 ecx, DWORD PTR _e$1$[ebp]
  00dc9	03 8d 28 fa ff
	ff		 add	 ecx, DWORD PTR _len$8[ebp]
  00dcf	89 8d 64 fa ff
	ff		 mov	 DWORD PTR _e$1$[ebp], ecx
  00dd5	3b 8d 58 fa ff
	ff		 cmp	 ecx, DWORD PTR _nEnglishBase$1$[ebp]
  00ddb	0f 8e cf fb ff
	ff		 jle	 $LL25@Update
  00de1	8b b5 50 fa ff
	ff		 mov	 esi, DWORD PTR __Old_capacity$1$[ebp]
$LN899@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00de7	8b 95 ec fa ff
	ff		 mov	 edx, DWORD PTR _hyperlinkBuffer$13[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 432  : 			}

  00ded	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00df1	83 fa 08	 cmp	 edx, 8
  00df4	72 35		 jb	 SHORT $LN464@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00df6	8b 8d d8 fa ff
	ff		 mov	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
  00dfc	8d 14 55 02 00
	00 00		 lea	 edx, DWORD PTR [edx*2+2]
  00e03	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00e05	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00e0b	72 14		 jb	 SHORT $LN474@Update

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00e0d	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00e10	83 c2 23	 add	 edx, 35			; 00000023H
  00e13	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00e15	83 c0 fc	 add	 eax, -4			; fffffffcH
  00e18	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00e1b	0f 87 c1 08 00
	00		 ja	 $LN501@Update
$LN474@Update:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00e21	52		 push	 edx
  00e22	51		 push	 ecx
  00e23	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00e28	83 c4 08	 add	 esp, 8
$LN464@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00e2b	33 c0		 xor	 eax, eax
  00e2d	c7 85 e8 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+16], 0
  00e37	c7 85 ec fa ff
	ff 07 00 00 00	 mov	 DWORD PTR _hyperlinkBuffer$13[ebp+20], 7
  00e41	66 89 85 d8 fa
	ff ff		 mov	 WORD PTR _hyperlinkBuffer$13[ebp], ax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 432  : 			}

  00e48	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00e4f	83 fe 08	 cmp	 esi, 8

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00e52	0f 82 16 08 00
	00		 jb	 $LN784@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00e58	8b 8d c0 fa ff
	ff		 mov	 ecx, DWORD PTR _kHyperlink$12[ebp+4]
  00e5e	8d 14 75 02 00
	00 00		 lea	 edx, DWORD PTR [esi*2+2]
  00e65	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00e67	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00e6d	72 14		 jb	 SHORT $LN504@Update

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00e6f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00e72	83 c2 23	 add	 edx, 35			; 00000023H
  00e75	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00e77	83 c0 fc	 add	 eax, -4			; fffffffcH
  00e7a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00e7d	0f 87 5f 08 00
	00		 ja	 $LN501@Update
$LN504@Update:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00e83	52		 push	 edx
  00e84	51		 push	 ecx
  00e85	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00e8a	83 c4 08	 add	 esp, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 432  : 			}

  00e8d	e9 dc 07 00 00	 jmp	 $LN784@Update
$LN45@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h

; 101  : 			SHyperlink() : sx(0), ex(0) { }

  00e92	33 c0		 xor	 eax, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 435  : 				int x = 0;

  00e94	33 ff		 xor	 edi, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00e96	be 07 00 00 00	 mov	 esi, 7

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00e9b	89 85 74 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$9[ebp+4], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h

; 101  : 			SHyperlink() : sx(0), ex(0) { }

  00ea1	33 db		 xor	 ebx, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 435  : 				int x = 0;

  00ea3	89 bd 50 fa ff
	ff		 mov	 DWORD PTR _x$1$[ebp], edi

; 436  : 				int len;
; 437  : 				int hyperlinkStep = 0;

  00ea9	89 bd 64 fa ff
	ff		 mov	 DWORD PTR _hyperlinkStep$1$[ebp], edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h

; 101  : 			SHyperlink() : sx(0), ex(0) { }

  00eaf	89 85 70 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$9[ebp], eax
  00eb5	89 9d 5c fa ff
	ff		 mov	 DWORD PTR tv4647[ebp], ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00ebb	89 85 84 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$9[ebp+20], eax

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00ec1	89 b5 6c fa ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], esi
  00ec7	89 b5 88 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$9[ebp+24], esi

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00ecd	66 89 85 74 fa
	ff ff		 mov	 WORD PTR _kHyperlink$9[ebp+4], ax

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00ed4	89 9d a4 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$11[ebp], ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 438  : 				SHyperlink kHyperlink;

  00eda	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00ee1	89 9d b4 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$11[ebp+16], ebx

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00ee7	89 b5 b8 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$11[ebp+20], esi

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00eed	66 89 85 a4 fa
	ff ff		 mov	 WORD PTR _hyperlinkBuffer$11[ebp], ax

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00ef4	8b d6		 mov	 edx, esi

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00ef6	89 85 8c fa ff
	ff		 mov	 DWORD PTR _emojiBuffer$10[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.h

; 110  : 		SEmoji() : x(0)

  00efc	66 89 85 20 fa
	ff ff		 mov	 WORD PTR _kEmoji$7[ebp], ax

; 111  : 		{
; 112  : 			pInstance = NULL;

  00f03	89 85 24 fa ff
	ff		 mov	 DWORD PTR _kEmoji$7[ebp+4], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 442  : 				int emojiStep = 0;

  00f09	89 85 58 fa ff
	ff		 mov	 DWORD PTR _emojiStep$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00f0f	89 85 9c fa ff
	ff		 mov	 DWORD PTR _emojiBuffer$10[ebp+16], eax

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00f15	89 95 a0 fa ff
	ff		 mov	 DWORD PTR _emojiBuffer$10[ebp+20], edx

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00f1b	66 89 85 8c fa
	ff ff		 mov	 WORD PTR _emojiBuffer$10[ebp], ax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 446  : 				for (int i = 0; i < wTextLen; )

  00f22	8b 85 54 fa ff
	ff		 mov	 eax, DWORD PTR _wTextLen$1$[ebp]
  00f28	33 c9		 xor	 ecx, ecx
  00f2a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00f2e	89 8d 38 fa ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
  00f34	85 c0		 test	 eax, eax
  00f36	0f 8e 2f 06 00
	00		 jle	 $LN901@Update
  00f3c	0f 1f 40 00	 npad	 4
$LL31@Update:

; 447  : 				{
; 448  : 					int ret = GetTextTag(&wText[i], wTextLen - i, len, hyperlinkBuffer);

  00f40	8b 95 2c fa ff
	ff		 mov	 edx, DWORD PTR _wText$1$[ebp]
  00f46	2b c1		 sub	 eax, ecx
  00f48	8d 34 4a	 lea	 esi, DWORD PTR [edx+ecx*2]
  00f4b	8d 95 a4 fa ff
	ff		 lea	 edx, DWORD PTR _hyperlinkBuffer$11[ebp]
  00f51	52		 push	 edx
  00f52	8d 95 08 fa ff
	ff		 lea	 edx, DWORD PTR _len$2[ebp]
  00f58	52		 push	 edx
  00f59	50		 push	 eax
  00f5a	56		 push	 esi
  00f5b	e8 00 00 00 00	 call	 ?GetTextTag@@YAHPB_WHAAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GetTextTag
  00f60	83 c4 10	 add	 esp, 16			; 00000010H

; 449  : 
; 450  : 					if (ret == TEXT_TAG_PLAIN || ret == TEXT_TAG_TAG)

  00f63	85 c0		 test	 eax, eax
  00f65	0f 84 bf 04 00
	00		 je	 $LN94@Update
  00f6b	83 f8 01	 cmp	 eax, 1
  00f6e	0f 84 b6 04 00
	00		 je	 $LN94@Update

; 463  : 						}
; 464  : 					}
; 465  : #ifdef ENABLE_EMOJI_IN_TEXT
; 466  : 					else if (ret == TEXT_TAG_EMOJI_START)

  00f74	83 f8 06	 cmp	 eax, 6
  00f77	75 21		 jne	 SHORT $LN99@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f79	6a 00		 push	 0
  00f7b	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  00f80	8d 8d 8c fa ff
	ff		 lea	 ecx, DWORD PTR _emojiBuffer$10[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 468  : 						emojiStep = 1;

  00f86	c7 85 58 fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _emojiStep$1$[ebp], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f90	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 470  : 					}

  00f95	e9 9f 05 00 00	 jmp	 $LN924@Update
$LN99@Update:

; 471  : 					else if (ret == TEXT_TAG_EMOJI_END)

  00f9a	83 f8 07	 cmp	 eax, 7
  00f9d	0f 85 c6 01 00
	00		 jne	 $LN101@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00fa3	83 bd a0 fa ff
	ff 08		 cmp	 DWORD PTR _emojiBuffer$10[ebp+20], 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 476  : 						int retLen = Ymir_WideCharToMultiByte(GetDefaultCodePage(), 0, emojiBuffer.c_str(), emojiBuffer.length(), retBuf, sizeof(retBuf) - 1, NULL, NULL);

  00faa	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR _retBuf$14[ebp]
  00fb0	6a 00		 push	 0
  00fb2	6a 00		 push	 0
  00fb4	68 ff 03 00 00	 push	 1023			; 000003ffH
  00fb9	51		 push	 ecx
  00fba	ff b5 9c fa ff
	ff		 push	 DWORD PTR _emojiBuffer$10[ebp+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  00fc0	8d 85 8c fa ff
	ff		 lea	 eax, DWORD PTR _emojiBuffer$10[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 473  : 						kEmoji.x = x;

  00fc6	66 89 bd 20 fa
	ff ff		 mov	 WORD PTR _kEmoji$7[ebp], di
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00fcd	0f 43 85 8c fa
	ff ff		 cmovae	 eax, DWORD PTR _emojiBuffer$10[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 476  : 						int retLen = Ymir_WideCharToMultiByte(GetDefaultCodePage(), 0, emojiBuffer.c_str(), emojiBuffer.length(), retBuf, sizeof(retBuf) - 1, NULL, NULL);

  00fd4	50		 push	 eax
  00fd5	6a 00		 push	 0
  00fd7	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00fdc	50		 push	 eax
  00fdd	e8 00 00 00 00	 call	 ?Ymir_WideCharToMultiByte@@YAHIKPB_WHPADHPBDPAH@Z ; Ymir_WideCharToMultiByte
  00fe2	83 c4 20	 add	 esp, 32			; 00000020H

; 477  : 						retBuf[retLen] = '\0';

  00fe5	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  00fea	0f 83 e3 06 00
	00		 jae	 $LN119@Update
  00ff0	c6 84 05 f0 fa
	ff ff 00	 mov	 BYTE PTR _retBuf$14[ebp+eax], 0

; 478  : 
; 479  : 						char szPath[255];
; 480  : 						_snprintf(szPath, sizeof(szPath), "icon/%s.tga", retBuf);

  00ff8	8d 85 f0 fa ff
	ff		 lea	 eax, DWORD PTR _retBuf$14[ebp]
  00ffe	50		 push	 eax
  00fff	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NHBNKCLI@icon?1?$CFs?4tga@
  01004	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$15[ebp]
  0100a	68 ff 00 00 00	 push	 255			; 000000ffH
  0100f	50		 push	 eax
  01010	e8 00 00 00 00	 call	 __snprintf

; 481  : 						if (CResourceManager::Instance().IsFileExist(szPath))

  01015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0101b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$15[ebp]
  01021	83 c4 10	 add	 esp, 16			; 00000010H
  01024	50		 push	 eax
  01025	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@QAE_NPBD@Z ; CResourceManager::IsFileExist
  0102a	84 c0		 test	 al, al
  0102c	0f 84 16 01 00
	00		 je	 $LN104@Update

; 482  : 						{
; 483  : 							CGraphicImage * pImage = (CGraphicImage *)CResourceManager::Instance().GetResourcePointer(szPath);

  01032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  01038	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$15[ebp]
  0103e	50		 push	 eax
  0103f	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  01044	8b d8		 mov	 ebx, eax

; 484  : 							kEmoji.pInstance = CGraphicImageInstance::New();

  01046	e8 00 00 00 00	 call	 ?New@CGraphicImageInstance@@SAPAV1@XZ ; CGraphicImageInstance::New
  0104b	8b f0		 mov	 esi, eax

; 485  : 							kEmoji.pInstance->SetImagePointer(pImage);

  0104d	53		 push	 ebx
  0104e	8b ce		 mov	 ecx, esi
  01050	89 b5 24 fa ff
	ff		 mov	 DWORD PTR _kEmoji$7[ebp+4], esi
  01056	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  0105b	8b 95 14 fa ff
	ff		 mov	 edx, DWORD PTR _this$1$[ebp]
  01061	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  01064	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  01067	74 11		 je	 SHORT $LN599@Update

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  01069	8b 85 20 fa ff
	ff		 mov	 eax, DWORD PTR _kEmoji$7[ebp]
  0106f	89 01		 mov	 DWORD PTR [ecx], eax
  01071	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  01074	83 42 04 08	 add	 DWORD PTR [edx+4], 8

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  01078	eb 0f		 jmp	 SHORT $LN598@Update
$LN599@Update:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0107a	8d 85 20 fa ff
	ff		 lea	 eax, DWORD PTR _kEmoji$7[ebp]
  01080	50		 push	 eax
  01081	51		 push	 ecx
  01082	8b ca		 mov	 ecx, edx
  01084	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSEmoji@CGraphicTextInstance@@@?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAEPAUSEmoji@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::_Emplace_reallocate<CGraphicTextInstance::SEmoji const &>
$LN598@Update:
  01089	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 488  : 							for (int i = 0; i < pImage->GetWidth() / (pSpaceInfo->width-1); ++i)

  0108c	8b cb		 mov	 ecx, ebx
  0108e	66 0f 13 85 20
	fa ff ff	 movlpd	 QWORD PTR _kEmoji$7[ebp], xmm0
  01096	33 f6		 xor	 esi, esi
  01098	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth
  0109d	8b 8d 30 fa ff
	ff		 mov	 ecx, DWORD PTR _pSpaceInfo$1$[ebp]
  010a3	99		 cdq
  010a4	0f bf 49 02	 movsx	 ecx, WORD PTR [ecx+2]
  010a8	49		 dec	 ecx
  010a9	f7 f9		 idiv	 ecx
  010ab	85 c0		 test	 eax, eax
  010ad	7e 4e		 jle	 SHORT $LN868@Update
  010af	90		 npad	 1
$LL36@Update:

; 489  : 								x += __DrawCharacter(pFontTexture, dataCodePage, ' ', dwColor);

  010b0	ff b5 68 fa ff
	ff		 push	 DWORD PTR _dwColor$1$[ebp]
  010b6	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  010bc	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  010c2	6a 20		 push	 32			; 00000020H
  010c4	0f b7 f8	 movzx	 edi, ax
  010c7	57		 push	 edi
  010c8	ff b5 40 fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  010ce	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter
  010d3	01 85 50 fa ff
	ff		 add	 DWORD PTR _x$1$[ebp], eax
  010d9	8b cb		 mov	 ecx, ebx
  010db	46		 inc	 esi
  010dc	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth
  010e1	8b 8d 30 fa ff
	ff		 mov	 ecx, DWORD PTR _pSpaceInfo$1$[ebp]
  010e7	99		 cdq
  010e8	0f bf 49 02	 movsx	 ecx, WORD PTR [ecx+2]
  010ec	49		 dec	 ecx
  010ed	f7 f9		 idiv	 ecx
  010ef	3b f0		 cmp	 esi, eax
  010f1	7c bd		 jl	 SHORT $LL36@Update
  010f3	8b f7		 mov	 esi, edi
  010f5	8b bd 50 fa ff
	ff		 mov	 edi, DWORD PTR _x$1$[ebp]
  010fb	eb 09		 jmp	 SHORT $LN35@Update
$LN868@Update:
  010fd	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  01103	0f b7 f0	 movzx	 esi, ax
$LN35@Update:

; 490  : 							if (pImage->GetWidth() % (pSpaceInfo->width - 1) > 1)

  01106	8b cb		 mov	 ecx, ebx
  01108	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth
  0110d	8b 8d 30 fa ff
	ff		 mov	 ecx, DWORD PTR _pSpaceInfo$1$[ebp]
  01113	99		 cdq
  01114	0f bf 49 02	 movsx	 ecx, WORD PTR [ecx+2]
  01118	49		 dec	 ecx
  01119	f7 f9		 idiv	 ecx
  0111b	83 fa 01	 cmp	 edx, 1
  0111e	7e 22		 jle	 SHORT $LN913@Update

; 491  : 								x += __DrawCharacter(pFontTexture, dataCodePage, ' ', dwColor);

  01120	ff b5 68 fa ff
	ff		 push	 DWORD PTR _dwColor$1$[ebp]
  01126	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0112c	6a 20		 push	 32			; 00000020H
  0112e	56		 push	 esi
  0112f	ff b5 40 fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  01135	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter
  0113a	03 f8		 add	 edi, eax
  0113c	89 bd 50 fa ff
	ff		 mov	 DWORD PTR _x$1$[ebp], edi
$LN913@Update:

; 493  : 						emojiStep = 0;

  01142	8b 9d 5c fa ff
	ff		 mov	 ebx, DWORD PTR tv4647[ebp]
$LN104@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01148	6a 00		 push	 0
  0114a	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  0114f	8d 8d 8c fa ff
	ff		 lea	 ecx, DWORD PTR _emojiBuffer$10[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 493  : 						emojiStep = 0;

  01155	c7 85 58 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _emojiStep$1$[ebp], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0115f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 495  : 					}

  01164	e9 d0 03 00 00	 jmp	 $LN924@Update
$LN101@Update:

; 496  : #endif
; 497  : 					else
; 498  : 					{
; 499  : 						if (ret == TEXT_TAG_COLOR)

  01169	83 f8 02	 cmp	 eax, 2
  0116c	0f 85 8c 00 00
	00		 jne	 $LN105@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  01172	83 bd b8 fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$11[ebp+20], 8
  01179	8d bd a4 fa ff
	ff		 lea	 edi, DWORD PTR _hyperlinkBuffer$11[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h

; 149  :     int x = 0, y = 1;

  0117f	c7 85 68 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwColor$1$[ebp], 0
  01189	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  0118c	0f 43 bd a4 fa
	ff ff		 cmovae	 edi, DWORD PTR _hyperlinkBuffer$11[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h

; 152  :     while (t <= --s)

  01193	8d 57 0e	 lea	 edx, DWORD PTR [edi+14]
  01196	3b fa		 cmp	 edi, edx
  01198	0f 87 9b 03 00
	00		 ja	 $LN924@Update
  0119e	66 90		 npad	 2
$LL617@Update:

; 153  :     {
; 154  : 		if (L'0' <= *s && *s <= L'9')

  011a0	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  011a3	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  011a6	66 83 f8 09	 cmp	 ax, 9
  011aa	77 05		 ja	 SHORT $LN619@Update

; 155  :             x += y * (*s - L'0');

  011ac	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  011af	eb 1a		 jmp	 SHORT $LN624@Update
$LN619@Update:

; 156  :         else if (L'a' <= *s && *s <= L'f')

  011b1	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  011b4	66 83 f8 05	 cmp	 ax, 5
  011b8	77 05		 ja	 SHORT $LN621@Update

; 157  :             x += y * (*s - L'a' + 10);

  011ba	8d 41 a9	 lea	 eax, DWORD PTR [ecx-87]
  011bd	eb 0c		 jmp	 SHORT $LN624@Update
$LN621@Update:

; 158  :         else if (L'A' <= *s && *s <= L'F')

  011bf	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  011c2	66 83 f8 05	 cmp	 ax, 5
  011c6	77 27		 ja	 SHORT $LN623@Update

; 159  :             x += y * (10 + *s - L'A');

  011c8	8d 41 c9	 lea	 eax, DWORD PTR [ecx-55]
$LN624@Update:

; 162  :         y <<= 4;

  011cb	0f af c6	 imul	 eax, esi
  011ce	83 ea 02	 sub	 edx, 2
  011d1	c1 e6 04	 shl	 esi, 4
  011d4	03 85 68 fa ff
	ff		 add	 eax, DWORD PTR _dwColor$1$[ebp]
  011da	89 85 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], eax
  011e0	3b fa		 cmp	 edi, edx
  011e2	76 bc		 jbe	 SHORT $LL617@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  011e4	89 85 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], eax
  011ea	e9 4a 03 00 00	 jmp	 $LN924@Update
$LN623@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.h

; 161  :             return -1; /* invalid input! */

  011ef	c7 85 68 fa ff
	ff ff ff ff ff	 mov	 DWORD PTR _dwColor$1$[ebp], -1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 500  : 							dwColor = htoi(hyperlinkBuffer.c_str(), 8);

  011f9	e9 3b 03 00 00	 jmp	 $LN924@Update
$LN105@Update:

; 501  : 						else if (ret == TEXT_TAG_RESTORE_COLOR)

  011fe	83 f8 05	 cmp	 eax, 5
  01201	75 14		 jne	 SHORT $LN107@Update

; 502  : 							dwColor = m_dwTextColor;

  01203	8b 85 60 fa ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  01209	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0120c	89 85 68 fa ff
	ff		 mov	 DWORD PTR _dwColor$1$[ebp], eax
  01212	e9 22 03 00 00	 jmp	 $LN924@Update
$LN107@Update:

; 503  : 						else if (ret == TEXT_TAG_HYPERLINK_START)

  01217	83 f8 03	 cmp	 eax, 3
  0121a	75 21		 jne	 SHORT $LN109@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0121c	6a 00		 push	 0
  0121e	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  01223	8d 8d a4 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$11[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 505  : 							hyperlinkStep = 1;

  01229	c7 85 64 fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01233	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 507  : 						}

  01238	e9 fc 02 00 00	 jmp	 $LN924@Update
$LN109@Update:

; 508  : 						else if (ret == TEXT_TAG_HYPERLINK_END)

  0123d	83 f8 04	 cmp	 eax, 4
  01240	0f 85 f3 02 00
	00		 jne	 $LN924@Update

; 509  : 						{
; 510  : 							if (hyperlinkStep == 1)

  01246	83 bd 64 fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  0124d	75 19		 jne	 SHORT $LN112@Update

; 511  : 							{
; 512  : 								++hyperlinkStep;

  0124f	c7 85 64 fa ff
	ff 02 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 2

; 513  : 								kHyperlink.ex = kHyperlink.sx = x;

  01259	66 8b df	 mov	 bx, di
  0125c	66 89 bd 70 fa
	ff ff		 mov	 WORD PTR _kHyperlink$9[ebp], di

; 514  : 							}

  01263	e9 c4 02 00 00	 jmp	 $LN925@Update
$LN112@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  01268	83 bd b8 fa ff
	ff 08		 cmp	 DWORD PTR _hyperlinkBuffer$11[ebp+20], 8
  0126f	8d 85 a4 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$11[ebp]

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  01275	8b 9d b4 fa ff
	ff		 mov	 ebx, DWORD PTR _hyperlinkBuffer$11[ebp+16]

; 2273 :         if (_Large_string_engaged()) {

  0127b	0f 43 85 a4 fa
	ff ff		 cmovae	 eax, DWORD PTR _hyperlinkBuffer$11[ebp]

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  01282	8b 95 6c fa ff
	ff		 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]

; 2273 :         if (_Large_string_engaged()) {

  01288	89 85 64 fa ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0128e	3b da		 cmp	 ebx, edx

; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  01290	77 2f		 ja	 SHORT $LN643@Update

; 2264 :         if (_Large_string_engaged()) {

  01292	83 fa 08	 cmp	 edx, 8

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  01295	89 9d 84 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$9[ebp+20], ebx

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0129b	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  0129e	56		 push	 esi

; 2263 :         value_type* _Result = _Bx._Buf;

  0129f	8d bd 74 fa ff
	ff		 lea	 edi, DWORD PTR _kHyperlink$9[ebp+4]

; 2264 :         if (_Large_string_engaged()) {

  012a5	0f 43 bd 74 fa
	ff ff		 cmovae	 edi, DWORD PTR _kHyperlink$9[ebp+4]

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  012ac	50		 push	 eax
  012ad	57		 push	 edi
  012ae	e8 00 00 00 00	 call	 _memmove
  012b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  012b6	33 c0		 xor	 eax, eax
  012b8	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax

; 3217 :             return *this;

  012bc	e9 00 01 00 00	 jmp	 $LN655@Update
$LN643@Update:

; 4474 :         if (_New_size > max_size()) {

  012c1	81 fb fe ff ff
	7f		 cmp	 ebx, 2147483646		; 7ffffffeH
  012c7	0f 87 10 04 00
	00		 ja	 $LN825@Update

; 4475 :             _Xlen_string(); // result too long
; 4476 :         }
; 4477 : 
; 4478 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  012cd	8b f3		 mov	 esi, ebx
  012cf	83 ce 07	 or	 esi, 7

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  012d2	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  012d8	76 17		 jbe	 SHORT $LN660@Update

; 4456 :             return _Max;

  012da	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  012df	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  012e4	50		 push	 eax
  012e5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  012ea	83 c4 04	 add	 esp, 4
  012ed	8b f8		 mov	 edi, eax
  012ef	eb 65		 jmp	 SHORT $LN671@Update
$LN660@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  012f1	8b ca		 mov	 ecx, edx
  012f3	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  012f8	d1 e9		 shr	 ecx, 1
  012fa	2b c1		 sub	 eax, ecx
  012fc	3b d0		 cmp	 edx, eax
  012fe	76 17		 jbe	 SHORT $LN661@Update

; 4460 :             return _Max;

  01300	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  01305	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0130a	50		 push	 eax
  0130b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  01310	83 c4 04	 add	 esp, 4
  01313	8b f8		 mov	 edi, eax
  01315	eb 3f		 jmp	 SHORT $LN671@Update
$LN661@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  01317	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0131a	3b f0		 cmp	 esi, eax
  0131c	0f 42 f0	 cmovb	 esi, eax

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0131f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  01322	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  01327	0f 87 ab 03 00
	00		 ja	 $LN826@Update

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0132d	03 c0		 add	 eax, eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0132f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  01334	72 0d		 jb	 SHORT $LN672@Update

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  01336	50		 push	 eax
  01337	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0133c	83 c4 04	 add	 esp, 4
  0133f	8b f8		 mov	 edi, eax
  01341	eb 13		 jmp	 SHORT $LN671@Update
$LN672@Update:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  01343	85 c0		 test	 eax, eax
  01345	74 0d		 je	 SHORT $LN673@Update

; 79   :         return ::operator new(_Bytes);

  01347	50		 push	 eax
  01348	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0134d	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  01350	8b f8		 mov	 edi, eax
  01352	eb 02		 jmp	 SHORT $LN671@Update
$LN673@Update:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  01354	33 ff		 xor	 edi, edi
$LN671@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  01356	89 b5 88 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$9[ebp+24], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0135c	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  0135f	56		 push	 esi
  01360	ff b5 64 fa ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  01366	89 9d 84 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$9[ebp+20], ebx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0136c	57		 push	 edi
  0136d	e8 00 00 00 00	 call	 _memcpy

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  01372	8b 95 6c fa ff
	ff		 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  01378	33 c0		 xor	 eax, eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0137a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0137d	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  01381	83 fa 08	 cmp	 edx, 8
  01384	72 35		 jb	 SHORT $LN654@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01386	8b 8d 74 fa ff
	ff		 mov	 ecx, DWORD PTR _kHyperlink$9[ebp+4]
  0138c	8d 14 55 02 00
	00 00		 lea	 edx, DWORD PTR [edx*2+2]
  01393	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  01395	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0139b	72 14		 jb	 SHORT $LN696@Update

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0139d	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  013a0	83 c2 23	 add	 edx, 35			; 00000023H
  013a3	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  013a5	83 c0 fc	 add	 eax, -4			; fffffffcH
  013a8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  013ab	0f 87 31 03 00
	00		 ja	 $LN501@Update
$LN696@Update:

; 255  :         ::operator delete(_Ptr, _Bytes);

  013b1	52		 push	 edx
  013b2	51		 push	 ecx
  013b3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  013b8	83 c4 08	 add	 esp, 8
$LN654@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  013bb	89 bd 74 fa ff
	ff		 mov	 DWORD PTR _kHyperlink$9[ebp+4], edi
$LN655@Update:
  013c1	8b 9d 60 fa ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  013c7	8d 8d 70 fa ff
	ff		 lea	 ecx, DWORD PTR _kHyperlink$9[ebp]
  013cd	83 c3 78	 add	 ebx, 120		; 00000078H
  013d0	51		 push	 ecx
  013d1	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  013d4	50		 push	 eax
  013d5	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  013d8	74 0f		 je	 SHORT $LN705@Update

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  013da	53		 push	 ebx
  013db	e8 00 00 00 00	 call	 ??$construct@USHyperlink@CGraphicTextInstance@@ABU12@@?$_Default_allocator_traits@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@SAXAAV?$allocator@USHyperlink@CGraphicTextInstance@@@1@QAUSHyperlink@CGraphicTextInstance@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CGraphicTextInstance::SHyperlink> >::construct<CGraphicTextInstance::SHyperlink,CGraphicTextInstance::SHyperlink const &>
  013e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  013e3	83 43 04 1c	 add	 DWORD PTR [ebx+4], 28	; 0000001cH

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  013e7	eb 07		 jmp	 SHORT $LN704@Update
$LN705@Update:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  013e9	8b cb		 mov	 ecx, ebx
  013eb	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSHyperlink@CGraphicTextInstance@@@?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAEPAUSHyperlink@CGraphicTextInstance@@QAU23@ABU23@@Z ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::_Emplace_reallocate<CGraphicTextInstance::SHyperlink const &>
$LN704@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  013f0	6a 00		 push	 0
  013f2	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  013f7	8d 8d a4 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$11[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 520  : 								hyperlinkStep = 0;

  013fd	c7 85 64 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkStep$1$[ebp], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01407	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0140c	66 8b 9d 72 fa
	ff ff		 mov	 bx, WORD PTR _kHyperlink$9[ebp+2]
  01413	8b b5 88 fa ff
	ff		 mov	 esi, DWORD PTR _kHyperlink$9[ebp+24]
  01419	89 b5 6c fa ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], esi
  0141f	89 9d 5c fa ff
	ff		 mov	 DWORD PTR tv4647[ebp], ebx
  01425	e9 15 01 00 00	 jmp	 $LN98@Update
$LN94@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 452  : 						if (hyperlinkStep == 1)

  0142a	83 bd 64 fa ff
	ff 01		 cmp	 DWORD PTR _hyperlinkStep$1$[ebp], 1
  01431	0f b7 06	 movzx	 eax, WORD PTR [esi]
  01434	75 62		 jne	 SHORT $LN95@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3146 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  01436	8b b5 b8 fa ff
	ff		 mov	 esi, DWORD PTR _hyperlinkBuffer$11[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 453  : 							hyperlinkBuffer.append(1, wText[i]);

  0143c	8b d0		 mov	 edx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3146 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0143e	8b 8d b4 fa ff
	ff		 mov	 ecx, DWORD PTR _hyperlinkBuffer$11[ebp+16]
  01444	8b c6		 mov	 eax, esi
  01446	2b c1		 sub	 eax, ecx

; 3147 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  01448	83 f8 01	 cmp	 eax, 1
  0144b	72 29		 jb	 SHORT $LN554@Update

; 3148 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  0144d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2264 :         if (_Large_string_engaged()) {

  01450	83 fe 08	 cmp	 esi, 8

; 3148 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  01453	89 85 b4 fa ff
	ff		 mov	 DWORD PTR _hyperlinkBuffer$11[ebp+16], eax

; 2263 :         value_type* _Result = _Bx._Buf;

  01459	8d 85 a4 fa ff
	ff		 lea	 eax, DWORD PTR _hyperlinkBuffer$11[ebp]

; 2264 :         if (_Large_string_engaged()) {

  0145f	0f 43 85 a4 fa
	ff ff		 cmovae	 eax, DWORD PTR _hyperlinkBuffer$11[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h

; 261  :             *_Su = _C;

  01466	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3151 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  0146a	33 d2		 xor	 edx, edx
  0146c	66 89 54 48 02	 mov	 WORD PTR [eax+ecx*2+2], dx

; 3152 :             return *this;

  01471	e9 c3 00 00 00	 jmp	 $LN924@Update
$LN554@Update:

; 3153 :         }
; 3154 : 
; 3155 :         return _Reallocate_grow_by(

  01476	52		 push	 edx
  01477	6a 01		 push	 1
  01479	c6 85 10 fa ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0
  01480	8d 8d a4 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$11[ebp]
  01486	ff b5 10 fa ff
	ff		 push	 DWORD PTR $T4[ebp]
  0148c	6a 01		 push	 1
  0148e	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_c3135ae829aeedc0a8af1bd1e887c66a>,unsigned int,wchar_t>
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 453  : 							hyperlinkBuffer.append(1, wText[i]);

  01493	e9 a1 00 00 00	 jmp	 $LN924@Update
$LN95@Update:

; 454  : #ifdef ENABLE_EMOJI_IN_TEXT
; 455  : 						else if (emojiStep == 1)

  01498	83 bd 58 fa ff
	ff 01		 cmp	 DWORD PTR _emojiStep$1$[ebp], 1
  0149f	8b c8		 mov	 ecx, eax
  014a1	75 5c		 jne	 SHORT $LN97@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3146 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  014a3	8b b5 a0 fa ff
	ff		 mov	 esi, DWORD PTR _emojiBuffer$10[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 456  : 							emojiBuffer.append(1, wText[i]);

  014a9	8b d1		 mov	 edx, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3146 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  014ab	8b 8d 9c fa ff
	ff		 mov	 ecx, DWORD PTR _emojiBuffer$10[ebp+16]
  014b1	8b c6		 mov	 eax, esi
  014b3	2b c1		 sub	 eax, ecx

; 3147 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  014b5	83 f8 01	 cmp	 eax, 1
  014b8	72 26		 jb	 SHORT $LN569@Update

; 3148 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  014ba	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 2264 :         if (_Large_string_engaged()) {

  014bd	83 fe 08	 cmp	 esi, 8

; 3148 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  014c0	89 85 9c fa ff
	ff		 mov	 DWORD PTR _emojiBuffer$10[ebp+16], eax

; 2263 :         value_type* _Result = _Bx._Buf;

  014c6	8d 85 8c fa ff
	ff		 lea	 eax, DWORD PTR _emojiBuffer$10[ebp]

; 2264 :         if (_Large_string_engaged()) {

  014cc	0f 43 85 8c fa
	ff ff		 cmovae	 eax, DWORD PTR _emojiBuffer$10[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h

; 261  :             *_Su = _C;

  014d3	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3151 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  014d7	33 d2		 xor	 edx, edx
  014d9	66 89 54 48 02	 mov	 WORD PTR [eax+ecx*2+2], dx

; 3152 :             return *this;

  014de	eb 59		 jmp	 SHORT $LN924@Update
$LN569@Update:

; 3153 :         }
; 3154 : 
; 3155 :         return _Reallocate_grow_by(

  014e0	52		 push	 edx
  014e1	6a 01		 push	 1
  014e3	c6 85 0c fa ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  014ea	8d 8d 8c fa ff
	ff		 lea	 ecx, DWORD PTR _emojiBuffer$10[ebp]
  014f0	ff b5 0c fa ff
	ff		 push	 DWORD PTR $T3[ebp]
  014f6	6a 01		 push	 1
  014f8	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_c3135ae829aeedc0a8af1bd1e887c66a>@@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_c3135ae829aeedc0a8af1bd1e887c66a>,unsigned int,wchar_t>
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 456  : 							emojiBuffer.append(1, wText[i]);

  014fd	eb 3a		 jmp	 SHORT $LN924@Update
$LN97@Update:

; 457  : #endif
; 458  : 						else
; 459  : 						{
; 460  : 							int charWidth = __DrawCharacter(pFontTexture, dataCodePage, wText[i], dwColor);

  014ff	ff b5 68 fa ff
	ff		 push	 DWORD PTR _dwColor$1$[ebp]
  01505	8b 85 44 fa ff
	ff		 mov	 eax, DWORD PTR _dataCodePage$1$[ebp]
  0150b	51		 push	 ecx
  0150c	8b 8d 60 fa ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  01512	0f b7 c0	 movzx	 eax, ax
  01515	50		 push	 eax
  01516	ff b5 40 fa ff
	ff		 push	 DWORD PTR _pFontTexture$1$[ebp]
  0151c	e8 00 00 00 00	 call	 ?__DrawCharacter@CGraphicTextInstance@@IAEHPAVCGraphicFontTexture@@G_WK@Z ; CGraphicTextInstance::__DrawCharacter

; 461  : 							kHyperlink.ex += charWidth;

  01521	66 03 d8	 add	 bx, ax

; 462  : 							x += charWidth;

  01524	03 f8		 add	 edi, eax
  01526	89 bd 50 fa ff
	ff		 mov	 DWORD PTR _x$1$[ebp], edi
$LN925@Update:

; 521  : 								hyperlinkBuffer = L"";
; 522  : 							}
; 523  : 						}
; 524  : 					}
; 525  : 					i += len;

  0152c	66 89 9d 72 fa
	ff ff		 mov	 WORD PTR _kHyperlink$9[ebp+2], bx
  01533	89 9d 5c fa ff
	ff		 mov	 DWORD PTR tv4647[ebp], ebx
$LN924@Update:
  01539	8b b5 6c fa ff
	ff		 mov	 esi, DWORD PTR __Old_capacity$1$[ebp]
$LN98@Update:
  0153f	8b 8d 38 fa ff
	ff		 mov	 ecx, DWORD PTR _i$1$[ebp]
  01545	03 8d 08 fa ff
	ff		 add	 ecx, DWORD PTR _len$2[ebp]
  0154b	8b 85 54 fa ff
	ff		 mov	 eax, DWORD PTR _wTextLen$1$[ebp]
  01551	8b bd 50 fa ff
	ff		 mov	 edi, DWORD PTR _x$1$[ebp]
  01557	89 8d 38 fa ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
  0155d	3b c8		 cmp	 ecx, eax
  0155f	0f 8c db f9 ff
	ff		 jl	 $LL31@Update
  01565	8b 95 a0 fa ff
	ff		 mov	 edx, DWORD PTR _emojiBuffer$10[ebp+20]
$LN901@Update:

; 527  : 			}

  0156b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0156f	83 fa 08	 cmp	 edx, 8
  01572	72 35		 jb	 SHORT $LN727@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01574	8b 8d 8c fa ff
	ff		 mov	 ecx, DWORD PTR _emojiBuffer$10[ebp]
  0157a	8d 14 55 02 00
	00 00		 lea	 edx, DWORD PTR [edx*2+2]
  01581	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  01583	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  01589	72 14		 jb	 SHORT $LN737@Update

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0158b	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0158e	83 c2 23	 add	 edx, 35			; 00000023H
  01591	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  01593	83 c0 fc	 add	 eax, -4			; fffffffcH
  01596	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  01599	0f 87 43 01 00
	00		 ja	 $LN501@Update
$LN737@Update:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0159f	52		 push	 edx
  015a0	51		 push	 ecx
  015a1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  015a6	83 c4 08	 add	 esp, 8
$LN727@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  015a9	8b 95 b8 fa ff
	ff		 mov	 edx, DWORD PTR _hyperlinkBuffer$11[ebp+20]

; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  015af	33 c0		 xor	 eax, eax
  015b1	c7 85 9c fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _emojiBuffer$10[ebp+16], 0
  015bb	c7 85 a0 fa ff
	ff 07 00 00 00	 mov	 DWORD PTR _emojiBuffer$10[ebp+20], 7
  015c5	66 89 85 8c fa
	ff ff		 mov	 WORD PTR _emojiBuffer$10[ebp], ax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 527  : 			}

  015cc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  015d0	83 fa 08	 cmp	 edx, 8
  015d3	72 35		 jb	 SHORT $LN754@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  015d5	8b 8d a4 fa ff
	ff		 mov	 ecx, DWORD PTR _hyperlinkBuffer$11[ebp]
  015db	8d 14 55 02 00
	00 00		 lea	 edx, DWORD PTR [edx*2+2]
  015e2	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  015e4	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  015ea	72 14		 jb	 SHORT $LN764@Update

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  015ec	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  015ef	83 c2 23	 add	 edx, 35			; 00000023H
  015f2	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  015f4	83 c0 fc	 add	 eax, -4			; fffffffcH
  015f7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  015fa	0f 87 e2 00 00
	00		 ja	 $LN501@Update
$LN764@Update:

; 255  :         ::operator delete(_Ptr, _Bytes);

  01600	52		 push	 edx
  01601	51		 push	 ecx
  01602	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  01607	83 c4 08	 add	 esp, 8
$LN754@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0160a	33 c0		 xor	 eax, eax
  0160c	c7 85 b4 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _hyperlinkBuffer$11[ebp+16], 0
  01616	c7 85 b8 fa ff
	ff 07 00 00 00	 mov	 DWORD PTR _hyperlinkBuffer$11[ebp+20], 7
  01620	66 89 85 a4 fa
	ff ff		 mov	 WORD PTR _hyperlinkBuffer$11[ebp], ax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 527  : 			}

  01627	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0162e	83 fe 08	 cmp	 esi, 8

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  01631	72 35		 jb	 SHORT $LN914@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01633	8b 8d 74 fa ff
	ff		 mov	 ecx, DWORD PTR _kHyperlink$9[ebp+4]
  01639	8d 14 75 02 00
	00 00		 lea	 edx, DWORD PTR [esi*2+2]
  01640	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  01642	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  01648	72 14		 jb	 SHORT $LN794@Update

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0164a	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0164d	83 c2 23	 add	 edx, 35			; 00000023H
  01650	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  01652	83 c0 fc	 add	 eax, -4			; fffffffcH
  01655	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  01658	0f 87 84 00 00
	00		 ja	 $LN501@Update
$LN794@Update:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0165e	52		 push	 edx
  0165f	51		 push	 ecx
  01660	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  01665	83 c4 08	 add	 esp, 8
$LN914@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 530  : 		if (token < end)

  01668	8b bd 68 fa ff
	ff		 mov	 edi, DWORD PTR _dwColor$1$[ebp]
$LN784@Update:
  0166e	8b 85 04 fa ff
	ff		 mov	 eax, DWORD PTR _token$1$[ebp]
  01674	3b 85 34 fa ff
	ff		 cmp	 eax, DWORD PTR _end$1$[ebp]
  0167a	73 20		 jae	 SHORT $LN920@Update

; 531  : 		{
; 532  : 			int newCodePage = ReadToken(token);

  0167c	50		 push	 eax

; 533  : 			dataCodePage = newCodePage;
; 534  : 			begin = token + 5;

  0167d	8d 70 05	 lea	 esi, DWORD PTR [eax+5]
  01680	e8 00 00 00 00	 call	 ?ReadToken@@YAHPBD@Z	; ReadToken
  01685	89 85 44 fa ff
	ff		 mov	 DWORD PTR _dataCodePage$1$[ebp], eax
  0168b	83 c4 04	 add	 esp, 4
  0168e	8b 85 34 fa ff
	ff		 mov	 eax, DWORD PTR _end$1$[ebp]
  01694	3b f0		 cmp	 esi, eax
  01696	0f 82 d4 ea ff
	ff		 jb	 $LL5@Update
$LN920@Update:

; 535  : 		}
; 536  : 		else
; 537  : 		{
; 538  : 			begin = token;
; 539  : 		}
; 540  : 	}
; 541  : 
; 542  : 	pFontTexture->UpdateTexture();

  0169c	8b 9d 60 fa ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN897@Update:
  016a2	8b 8d 40 fa ff
	ff		 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  016a8	e8 00 00 00 00	 call	 ?UpdateTexture@CGraphicFontTexture@@QAE_NXZ ; CGraphicFontTexture::UpdateTexture

; 543  : 
; 544  : 	m_isUpdate = true;

  016ad	c6 43 58 01	 mov	 BYTE PTR [ebx+88], 1
$LN1@Update:

; 545  : }

  016b1	8d a5 ec f9 ff
	ff		 lea	 esp, DWORD PTR [ebp-1556]
  016b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  016ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  016c1	59		 pop	 ecx
  016c2	5f		 pop	 edi
  016c3	5e		 pop	 esi
  016c4	5b		 pop	 ebx
  016c5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  016c8	33 cd		 xor	 ecx, ebp
  016ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  016cf	8b e5		 mov	 esp, ebp
  016d1	5d		 pop	 ebp
  016d2	c3		 ret	 0
$LN119@Update:

; 477  : 						retBuf[retLen] = '\0';

  016d3	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN826@Update:

; 545  : }

  016d8	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN825@Update:
  016dd	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN501@Update:
  016e2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN922@Update:
  016e7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$0:
  00000	8d 8d bc fa ff
	ff		 lea	 ecx, DWORD PTR _kHyperlink$12[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$1:
  0000b	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$13[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$2:
  00016	8d 8d 70 fa ff
	ff		 lea	 ecx, DWORD PTR _kHyperlink$9[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$3:
  00021	8d 8d a4 fa ff
	ff		 lea	 ecx, DWORD PTR _hyperlinkBuffer$11[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?Update@CGraphicTextInstance@@QAEXXZ$4:
  0002c	8d 8d 8c fa ff
	ff		 lea	 ecx, DWORD PTR _emojiBuffer$10[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
__ehhandler$?Update@CGraphicTextInstance@@QAEXXZ:
  0003c	90		 npad	 1
  0003d	90		 npad	 1
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 8a f8 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1544]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Update@CGraphicTextInstance@@QAEXXZ
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Update@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::Update
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Destroy@CGraphicTextInstance@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGraphicTextInstance@@QAEXXZ PROC		; CGraphicTextInstance::Destroy, COMDAT
; _this$ = ecx

; 1323 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00005	6a 00		 push	 0
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1324 : 	m_stText="";

  0000c	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1325 : 	m_pCharInfoVector.clear();

  00014	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  00017	89 47 64	 mov	 DWORD PTR [edi+100], eax

; 1326 : 	m_dwColorInfoVector.clear();

  0001a	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  0001d	89 47 70	 mov	 DWORD PTR [edi+112], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1442 :         _Destroy(_Myfirst, _Mylast);

  00020	8b 5f 7c	 mov	 ebx, DWORD PTR [edi+124]
  00023	8b 77 78	 mov	 esi, DWORD PTR [edi+120]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 904  :         for (; _First != _Last; ++_First) {

  00026	3b f3		 cmp	 esi, ebx
  00028	74 17		 je	 SHORT $LN20@Destroy
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL21@Destroy:
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ??1SHyperlink@CGraphicTextInstance@@QAE@XZ
  00037	83 c6 1c	 add	 esi, 28			; 0000001cH
  0003a	3b f3		 cmp	 esi, ebx
  0003c	75 f2		 jne	 SHORT $LL21@Destroy
  0003e	8b 77 78	 mov	 esi, DWORD PTR [edi+120]
$LN20@Destroy:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1443 :         _Mylast = _Myfirst;

  00041	89 77 7c	 mov	 DWORD PTR [edi+124], esi

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00044	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  0004a	8b 8f 84 00 00
	00		 mov	 ecx, DWORD PTR [edi+132]
  00050	2b c1		 sub	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1330 : 	if (m_emojiVector.size() != 0)

  00052	a9 f8 ff ff ff	 test	 eax, -8			; fffffff8H
  00057	74 32		 je	 SHORT $LN3@Destroy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00059	8b f1		 mov	 esi, ecx
  0005b	3b b7 88 00 00
	00		 cmp	 esi, DWORD PTR [edi+136]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1332 : 		for (std::vector<SEmoji>::iterator itor = m_emojiVector.begin(); itor != m_emojiVector.end(); ++itor)

  00061	74 28		 je	 SHORT $LN3@Destroy
$LL39@Destroy:

; 1333 : 		{
; 1334 : 			SEmoji & rEmo = *itor;
; 1335 : 			if (rEmo.pInstance)

  00063	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00066	85 c0		 test	 eax, eax
  00068	74 10		 je	 SHORT $LN2@Destroy

; 1336 : 			{
; 1337 : 				CGraphicImageInstance::Delete(rEmo.pInstance);

  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?Delete@CGraphicImageInstance@@SAXPAV1@@Z ; CGraphicImageInstance::Delete
  00070	83 c4 04	 add	 esp, 4

; 1338 : 				rEmo.pInstance = NULL;

  00073	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN2@Destroy:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  0007a	83 c6 08	 add	 esi, 8

; 150  :         return _Ptr == _Right._Ptr;

  0007d	3b b7 88 00 00
	00		 cmp	 esi, DWORD PTR [edi+136]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1332 : 		for (std::vector<SEmoji>::iterator itor = m_emojiVector.begin(); itor != m_emojiVector.end(); ++itor)

  00083	75 de		 jne	 SHORT $LL39@Destroy

; 1338 : 				rEmo.pInstance = NULL;

  00085	8b 8f 84 00 00
	00		 mov	 ecx, DWORD PTR [edi+132]
$LN3@Destroy:

; 1339 : 			}
; 1340 : 		}
; 1341 : 	}
; 1342 : 	m_emojiVector.clear();

  0008b	89 8f 88 00 00
	00		 mov	 DWORD PTR [edi+136], ecx

; 1343 : #endif
; 1344 : 	__Initialize();

  00091	8b cf		 mov	 ecx, edi
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	e9 00 00 00 00	 jmp	 ?__Initialize@CGraphicTextInstance@@IAEXXZ ; CGraphicTextInstance::__Initialize
?Destroy@CGraphicTextInstance@@QAEXXZ ENDP		; CGraphicTextInstance::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ??1CGraphicTextInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicTextInstance@@UAE@XZ PROC			; CGraphicTextInstance::~CGraphicTextInstance, COMDAT
; _this$ = ecx

; 1353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicTextInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicTextInstance@@6B@

; 1354 : 	Destroy();

  0002c	e8 00 00 00 00	 call	 ?Destroy@CGraphicTextInstance@@QAEXXZ ; CGraphicTextInstance::Destroy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00031	8b 8e 84 00 00
	00		 mov	 ecx, DWORD PTR [esi+132]
  00037	85 c9		 test	 ecx, ecx
  00039	74 58		 je	 SHORT $LN6@CGraphicTe

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003b	8b 86 8c 00 00
	00		 mov	 eax, DWORD PTR [esi+140]
  00041	2b c1		 sub	 eax, ecx
  00043	c1 f8 03	 sar	 eax, 3
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00046	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0004d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00053	72 16		 jb	 SHORT $LN22@CGraphicTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00055	8b 79 fc	 mov	 edi, DWORD PTR [ecx-4]
  00058	83 c2 23	 add	 edx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005b	2b cf		 sub	 ecx, edi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005d	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00060	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00063	0f 87 8d 01 00
	00		 ja	 $LN125@CGraphicTe

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00069	8b cf		 mov	 ecx, edi
$LN22@CGraphicTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006b	52		 push	 edx
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00072	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007c	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0007f	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0

; 1756 :             _Myend   = nullptr;

  00089	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
$LN6@CGraphicTe:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1355 : }

  00093	8d 4e 78	 lea	 ecx, DWORD PTR [esi+120]
  00096	e8 00 00 00 00	 call	 ??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::~vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  0009b	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0009e	85 c9		 test	 ecx, ecx
  000a0	74 4c		 je	 SHORT $LN31@CGraphicTe

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000a2	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  000a5	2b c1		 sub	 eax, ecx
  000a7	c1 f8 02	 sar	 eax, 2
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000aa	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 16		 jb	 SHORT $LN47@CGraphicTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 79 fc	 mov	 edi, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000bf	2b cf		 sub	 ecx, edi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	0f 87 29 01 00
	00		 ja	 $LN125@CGraphicTe

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000cd	8b cf		 mov	 ecx, edi
$LN47@CGraphicTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cf	52		 push	 edx
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000d6	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000dd	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000e0	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 1756 :             _Myend   = nullptr;

  000e7	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
$LN31@CGraphicTe:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  000ee	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  000f1	85 c9		 test	 ecx, ecx
  000f3	74 4c		 je	 SHORT $LN55@CGraphicTe

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000f5	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  000f8	2b c1		 sub	 eax, ecx
  000fa	c1 f8 02	 sar	 eax, 2
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fd	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00104	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0010a	72 16		 jb	 SHORT $LN71@CGraphicTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010c	8b 79 fc	 mov	 edi, DWORD PTR [ecx-4]
  0010f	83 c2 23	 add	 edx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00112	2b cf		 sub	 ecx, edi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00114	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00117	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011a	0f 87 d6 00 00
	00		 ja	 $LN125@CGraphicTe

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00120	8b cf		 mov	 ecx, edi
$LN71@CGraphicTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00122	52		 push	 edx
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00129	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00130	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00133	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0

; 1756 :             _Myend   = nullptr;

  0013a	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
$LN55@CGraphicTe:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 53   : 			if (m_pObject)

  00141	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]

; 37   : 		{

  00144	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 53   : 			if (m_pObject)

  0014b	85 c9		 test	 ecx, ecx
  0014d	74 0c		 je	 SHORT $LN80@CGraphicTe

; 54   : 			{
; 55   : 				m_pObject->Release();

  0014f	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 56   : 				m_pObject = NULL;

  00154	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
$LN80@CGraphicTe:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0015b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0015e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00161	72 28		 jb	 SHORT $LN94@CGraphicTe
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00163	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00166	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00167	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0016d	72 12		 jb	 SHORT $LN104@CGraphicTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0016f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00172	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00175	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	83 c0 fc	 add	 eax, -4			; fffffffcH
  0017a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0017d	77 77		 ja	 SHORT $LN125@CGraphicTe

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0017f	8b c2		 mov	 eax, edx
$LN104@CGraphicTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00181	51		 push	 ecx
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00188	83 c4 08	 add	 esp, 8
$LN94@CGraphicTe:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0018b	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00192	c7 46 48 0f 00
	00 00		 mov	 DWORD PTR [esi+72], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00199	c6 46 34 00	 mov	 BYTE PTR [esi+52], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  0019d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  001a0	85 c0		 test	 eax, eax
  001a2	74 41		 je	 SHORT $LN112@CGraphicTe

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001a4	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  001a7	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a9	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001ac	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001b2	72 12		 jb	 SHORT $LN128@CGraphicTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001b4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001b7	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001ba	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001bc	83 c0 fc	 add	 eax, -4			; fffffffcH
  001bf	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001c2	77 32		 ja	 SHORT $LN125@CGraphicTe

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001c4	8b c2		 mov	 eax, edx
$LN128@CGraphicTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001c6	51		 push	 ecx
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  001cd	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001d4	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  001d7	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 1756 :             _Myend   = nullptr;

  001de	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
$LN112@CGraphicTe:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1355 : }

  001e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ef	59		 pop	 ecx
  001f0	5f		 pop	 edi
  001f1	5e		 pop	 esi
  001f2	8b e5		 mov	 esp, ebp
  001f4	5d		 pop	 ebp
  001f5	c3		 ret	 0
$LN125@CGraphicTe:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN134@CGraphicTe:
  001fb	cc		 int	 3
  001fc	cc		 int	 3
  001fd	cc		 int	 3
  001fe	cc		 int	 3
  001ff	cc		 int	 3
  00200	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicTextInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicTextInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicTextInstance@@UAE@XZ ENDP			; CGraphicTextInstance::~CGraphicTextInstance
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ??0CGraphicTextInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicTextInstance@@QAE@XZ PROC			; CGraphicTextInstance::CGraphicTextInstance, COMDAT
; _this$ = ecx

; 1348 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicTextInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicTextInstance@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002f	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00036	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  0003d	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00044	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1348 : {

  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00052	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00059	c7 46 48 0f 00
	00 00		 mov	 DWORD PTR [esi+72], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00060	c6 46 34 00	 mov	 BYTE PTR [esi+52], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\Ref.h

; 20   : 		CRef() : m_pObject(NULL)

  00064	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0006b	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00072	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
  00079	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00080	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
  00087	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
  0008e	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00095	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  0009c	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  000a3	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  000ad	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000b7	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  000c1	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 1348 : {

  000cb	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 1349 : 	__Initialize();

  000cf	e8 00 00 00 00	 call	 ?__Initialize@CGraphicTextInstance@@IAEXXZ ; CGraphicTextInstance::__Initialize

; 1350 : }

  000d4	8b c6		 mov	 eax, esi
  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e0	59		 pop	 ecx
  000e1	5e		 pop	 esi
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 20	 add	 ecx, 32			; 00000020H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 34	 add	 ecx, 52			; 00000034H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 5c	 add	 ecx, 92			; 0000005cH
  0001c	e9 00 00 00 00	 jmp	 ??1?$CRef@VCGraphicText@@@@QAE@XZ ; CRef<CGraphicText>::~CRef<CGraphicText>
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 60	 add	 ecx, 96			; 00000060H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@PAUSCharacterInfomation@CGraphicFontTexture@@V?$allocator@PAUSCharacterInfomation@CGraphicFontTexture@@@std@@@std@@QAE@XZ ; std::vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >::~vector<CGraphicFontTexture::SCharacterInfomation *,std::allocator<CGraphicFontTexture::SCharacterInfomation *> >
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00032	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 78	 add	 ecx, 120		; 00000078H
  0003d	e9 00 00 00 00	 jmp	 ??1?$vector@USHyperlink@CGraphicTextInstance@@V?$allocator@USHyperlink@CGraphicTextInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >::~vector<CGraphicTextInstance::SHyperlink,std::allocator<CGraphicTextInstance::SHyperlink> >
__unwindfunclet$??0CGraphicTextInstance@@QAE@XZ$6:
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0004b	e9 00 00 00 00	 jmp	 ??1?$vector@USEmoji@CGraphicTextInstance@@V?$allocator@USEmoji@CGraphicTextInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >::~vector<CGraphicTextInstance::SEmoji,std::allocator<CGraphicTextInstance::SEmoji> >
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
__ehhandler$??0CGraphicTextInstance@@QAE@XZ:
  00055	90		 npad	 1
  00056	90		 npad	 1
  00057	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005e	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00061	33 c8		 xor	 ecx, eax
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicTextInstance@@QAE@XZ
  0006d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicTextInstance@@QAE@XZ ENDP			; CGraphicTextInstance::CGraphicTextInstance
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?GetTextFromMousePos@CGraphicTextInstance@@SAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetTextFromMousePos@CGraphicTextInstance@@SAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CGraphicTextInstance::GetTextFromMousePos, COMDAT

; 57   : 	return gs_text;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?gs_text@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 58   : }

  00005	c3		 ret	 0
?GetTextFromMousePos@CGraphicTextInstance@@SAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CGraphicTextInstance::GetTextFromMousePos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?UpdateMousePos@CGraphicTextInstance@@SAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?UpdateMousePos@CGraphicTextInstance@@SAXHH@Z PROC	; CGraphicTextInstance::UpdateMousePos, COMDAT

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 50   : 	gs_mx = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_text@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0000b	6a 00		 push	 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 50   : 	gs_mx = x;

  0000d	a3 00 00 00 00	 mov	 DWORD PTR ?gs_mx@@3HA, eax

; 51   : 	gs_my = y;

  00012	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 51   : 	gs_my = y;

  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?gs_my@@3HA, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 53   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?UpdateMousePos@CGraphicTextInstance@@SAXHH@Z ENDP	; CGraphicTextInstance::UpdateMousePos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Hyperlink_GetText@CGraphicTextInstance@@SAHPADH@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_len$ = 12						; size = 4
?Hyperlink_GetText@CGraphicTextInstance@@SAHPADH@Z PROC	; CGraphicTextInstance::Hyperlink_GetText, COMDAT

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3985 :         return size() == 0;

  00003	83 3d 10 00 00
	00 00		 cmp	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+16, 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 39   : 	if (gs_hyperlinkText.empty())

  0000a	75 04		 jne	 SHORT $LN2@Hyperlink_

; 40   : 		return 0;

  0000c	33 c0		 xor	 eax, eax

; 45   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@Hyperlink_:

; 41   : 
; 42   : 	int codePage = GetDefaultCodePage();

  00010	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00015	83 3d 14 00 00
	00 08		 cmp	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+20, 8

; 2272 :         const value_type* _Result = _Bx._Buf;

  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 44   : 	return Ymir_WideCharToMultiByte(codePage, 0, gs_hyperlinkText.c_str(), gs_hyperlinkText.length(), buf, len, NULL, NULL);

  00021	6a 00		 push	 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00023	0f 43 0d 00 00
	00 00		 cmovae	 ecx, DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 44   : 	return Ymir_WideCharToMultiByte(codePage, 0, gs_hyperlinkText.c_str(), gs_hyperlinkText.length(), buf, len, NULL, NULL);

  0002a	6a 00		 push	 0
  0002c	ff 75 0c	 push	 DWORD PTR _len$[ebp]
  0002f	ff 75 08	 push	 DWORD PTR _buf$[ebp]
  00032	ff 35 10 00 00
	00		 push	 DWORD PTR ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+16
  00038	51		 push	 ecx
  00039	6a 00		 push	 0
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?Ymir_WideCharToMultiByte@@YAHIKPB_WHPADHPBDPAH@Z ; Ymir_WideCharToMultiByte
  00041	83 c4 20	 add	 esp, 32			; 00000020H

; 45   : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?Hyperlink_GetText@CGraphicTextInstance@@SAHPADH@Z ENDP	; CGraphicTextInstance::Hyperlink_GetText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp
;	COMDAT ?Hyperlink_UpdateMousePos@CGraphicTextInstance@@SAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?Hyperlink_UpdateMousePos@CGraphicTextInstance@@SAXHH@Z PROC ; CGraphicTextInstance::Hyperlink_UpdateMousePos, COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 32   : 	gs_mx = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_hyperlinkText@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
  0000b	6a 00		 push	 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 32   : 	gs_mx = x;

  0000d	a3 00 00 00 00	 mov	 DWORD PTR ?gs_mx@@3HA, eax

; 33   : 	gs_my = y;

  00012	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 33   : 	gs_my = y;

  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?gs_my@@3HA, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterLib\GrpTextInstance.cpp

; 35   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?Hyperlink_UpdateMousePos@CGraphicTextInstance@@SAXHH@Z ENDP ; CGraphicTextInstance::Hyperlink_UpdateMousePos
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 576  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 576  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00006	53		 push	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Right_size$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 576  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000a	56		 push	 esi

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 576  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000e	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Left_size$[ebp]
  00012	3b df		 cmp	 ebx, edi
  00014	8b cf		 mov	 ecx, edi
  00016	0f 42 cb	 cmovb	 ecx, ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  00019	83 e9 04	 sub	 ecx, 4
  0001c	72 13		 jb	 SHORT $LN12@Traits_com
  0001e	66 90		 npad	 2
$LL13@Traits_com:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN11@Traits_com
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL13@Traits_com
$LN12@Traits_com:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 34		 je	 SHORT $LN10@Traits_com
$LN11@Traits_com:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN14@Traits_com
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 29		 je	 SHORT $LN10@Traits_com
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN14@Traits_com
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1c		 je	 SHORT $LN10@Traits_com
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN14@Traits_com
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 0f		 je	 SHORT $LN10@Traits_com
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 07		 je	 SHORT $LN10@Traits_com
$LN14@Traits_com:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	eb 02		 jmp	 SHORT $LN15@Traits_com
$LN10@Traits_com:
  0006a	33 c0		 xor	 eax, eax
$LN15@Traits_com:

; 577  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 578  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));
; 579  : 
; 580  :     if (_Ans != 0) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 10		 jne	 SHORT $LN4@Traits_com

; 581  :         return _Ans;
; 582  :     }
; 583  : 
; 584  :     if (_Left_size < _Right_size) {

  00070	3b df		 cmp	 ebx, edi
  00072	76 08		 jbe	 SHORT $LN16@Traits_com

; 589  :         return 1;
; 590  :     }
; 591  : 
; 592  :     return 0;
; 593  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c8 ff	 or	 eax, -1
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN16@Traits_com:

; 585  :         return -1;
; 586  :     }
; 587  : 
; 588  :     if (_Left_size > _Right_size) {

  0007c	1b c0		 sbb	 eax, eax
  0007e	f7 d8		 neg	 eax
$LN4@Traits_com:

; 589  :         return 1;
; 590  :     }
; 591  : 
; 592  :     return 0;
; 593  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Result$1$ = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 3210 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3211 :         // assign [_Ptr, _Ptr + _Count)
; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  0000f	3b c3		 cmp	 eax, ebx
  00011	77 34		 ja	 SHORT $LN2@assign

; 2263 :         value_type* _Result = _Bx._Buf;

  00013	89 7d 0c	 mov	 DWORD PTR __Result$1$[ebp], edi

; 2286 :         return _BUF_SIZE <= _Myres;

  00016	83 fb 08	 cmp	 ebx, 8

; 2264 :         if (_Large_string_engaged()) {

  00019	72 05		 jb	 SHORT $LN5@assign

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0001b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001d	89 4d 0c	 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN5@assign:

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00020	8d 34 00	 lea	 esi, DWORD PTR [eax+eax]

; 3213 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	56		 push	 esi
  00027	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 _memmove

; 3215 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00030	8b 45 0c	 mov	 eax, DWORD PTR __Result$1$[ebp]

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3215 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00036	33 c9		 xor	 ecx, ecx
  00038	66 89 0c 06	 mov	 WORD PTR [esi+eax], cx

; 3227 :     }

  0003c	8b c7		 mov	 eax, edi
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN2@assign:

; 4474 :         if (_New_size > max_size()) {

  00047	3d fe ff ff 7f	 cmp	 eax, 2147483646		; 7ffffffeH
  0004c	0f 87 f8 00 00
	00		 ja	 $LN64@assign

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00052	8b f0		 mov	 esi, eax
  00054	83 ce 07	 or	 esi, 7
  00057	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0005d	76 17		 jbe	 SHORT $LN19@assign

; 4456 :             return _Max;

  0005f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00064	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006f	83 c4 04	 add	 esp, 4
  00072	8b c8		 mov	 ecx, eax
  00074	eb 68		 jmp	 SHORT $LN62@assign
$LN19@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00076	8b cb		 mov	 ecx, ebx
  00078	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0007d	d1 e9		 shr	 ecx, 1
  0007f	2b c1		 sub	 eax, ecx
  00081	3b d8		 cmp	 ebx, eax
  00083	76 17		 jbe	 SHORT $LN20@assign

; 4460 :             return _Max;

  00085	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0008a	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00095	83 c4 04	 add	 esp, 4
  00098	8b c8		 mov	 ecx, eax
  0009a	eb 42		 jmp	 SHORT $LN62@assign
$LN20@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0009c	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  0009f	3b f0		 cmp	 esi, eax
  000a1	0f 42 f0	 cmovb	 esi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a4	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000a7	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000ac	0f 87 9d 00 00
	00		 ja	 $LN65@assign

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000b2	03 c0		 add	 eax, eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b4	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b9	72 0d		 jb	 SHORT $LN31@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c1	83 c4 04	 add	 esp, 4
  000c4	8b c8		 mov	 ecx, eax
  000c6	eb 16		 jmp	 SHORT $LN62@assign
$LN31@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000c8	85 c0		 test	 eax, eax
  000ca	74 10		 je	 SHORT $LN32@assign

; 79   :         return ::operator new(_Bytes);

  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d2	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000d5	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000d8	8b c8		 mov	 ecx, eax
  000da	eb 05		 jmp	 SHORT $LN30@assign
$LN32@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000dc	33 c9		 xor	 ecx, ecx
$LN62@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000de	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
$LN30@assign:
  000e1	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  000e4	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e7	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ea	8d 34 00	 lea	 esi, DWORD PTR [eax+eax]
  000ed	56		 push	 esi
  000ee	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  000f1	51		 push	 ecx
  000f2	e8 00 00 00 00	 call	 _memcpy

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000f7	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  000fa	33 c9		 xor	 ecx, ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000ff	66 89 0c 06	 mov	 WORD PTR [esi+eax], cx

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  00103	83 fb 08	 cmp	 ebx, 8
  00106	72 30		 jb	 SHORT $LN13@assign
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00108	8b 07		 mov	 eax, DWORD PTR [edi]
  0010a	8d 1c 5d 02 00
	00 00		 lea	 ebx, DWORD PTR [ebx*2+2]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00111	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00117	72 12		 jb	 SHORT $LN55@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00119	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0011c	83 c3 23	 add	 ebx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0011f	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00121	83 c0 fc	 add	 eax, -4			; fffffffcH
  00124	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00127	77 1c		 ja	 SHORT $LN52@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00129	8b c1		 mov	 eax, ecx
$LN55@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0012b	53		 push	 ebx
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00132	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  00135	83 c4 08	 add	 esp, 8
$LN13@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3220 :         return _Reallocate_for(

  00138	89 07		 mov	 DWORD PTR [edi], eax

; 3227 :     }

  0013a	8b c7		 mov	 eax, edi
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 08 00	 ret	 8
$LN52@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00145	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4475 :             _Xlen_string(); // result too long

  0014a	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN65@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0014f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN60@assign:
  00154	cc		 int	 3
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 3042 :     _CONSTEXPR20_CONTAINER basic_string& operator=(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3043 :         if (this != _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b f0		 cmp	 esi, eax
  0000b	74 15		 je	 SHORT $LN11@operator

; 2286 :         return _BUF_SIZE <= _Myres;

  0000d	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8

; 2272 :         const value_type* _Result = _Bx._Buf;

  00011	8b c8		 mov	 ecx, eax

; 2273 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN7@operator

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN7@operator:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00017	ff 70 10	 push	 DWORD PTR [eax+16]
  0001a	51		 push	 ecx
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN11@operator:

; 3044 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});
; 3045 :         }
; 3046 : 
; 3047 :         return *this;
; 3048 :     }

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2968 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2286 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 08	 cmp	 ecx, 8

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 2d		 jb	 SHORT $LN12@basic_stri
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 21		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00038	33 c0		 xor	 eax, eax
  0003a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00041	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00048	66 89 06	 mov	 WORD PTR [esi], ax
  0004b	5e		 pop	 esi

; 2976 :     }

  0004c	c3		 ret	 0
$LN19@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  00052	cc		 int	 3
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
_TEXT	SEGMENT
tv209 = -8						; size = 4
__Result$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Possible_matches_end$1$ = 12				; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 4110 :         _In_z_ const _Elem* const _Ptr, const size_type _Off = 0) const noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00008	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  0000b	8b de		 mov	 ebx, esi

; 4110 :         _In_z_ const _Elem* const _Ptr, const size_type _Off = 0) const noexcept /* strengthened */ {

  0000d	57		 push	 edi

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000e	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
$LL30@find:
  00011	8a 03		 mov	 al, BYTE PTR [ebx]
  00013	43		 inc	 ebx
  00014	84 c0		 test	 al, al
  00016	75 f9		 jne	 SHORT $LL30@find
  00018	2b da		 sub	 ebx, edx

; 2272 :         const value_type* _Result = _Bx._Buf;

  0001a	89 4d fc	 mov	 DWORD PTR __Result$1$[ebp], ecx

; 2286 :         return _BUF_SIZE <= _Myres;

  0001d	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00021	8b f9		 mov	 edi, ecx

; 2273 :         if (_Large_string_engaged()) {

  00023	72 05		 jb	 SHORT $LN6@find

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00025	8b 39		 mov	 edi, DWORD PTR [ecx]
  00027	89 7d fc	 mov	 DWORD PTR __Result$1$[ebp], edi
$LN6@find:

; 4111 :         // look for [_Ptr, <null>) beginning at or after _Off
; 4112 :         return static_cast<size_type>(_Traits_find<_Traits>(

  0002a	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]

; 600  :     if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size) {

  0002d	3b d9		 cmp	 ebx, ecx
  0002f	0f 87 b7 00 00
	00		 ja	 $LN15@find
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00038	2b cb		 sub	 ecx, ebx
  0003a	3b c1		 cmp	 eax, ecx
  0003c	0f 87 aa 00 00
	00		 ja	 $LN15@find

; 601  :         // xpos cannot exist, report failure
; 602  :         // N4659 24.3.2.7.2 [string.find]/1 says:
; 603  :         // 1. _Start_at <= xpos
; 604  :         // 2. xpos + _Needle_size <= _Hay_size;
; 605  :         // therefore:
; 606  :         // 3. _Needle_size <= _Hay_size (by 2) (checked above)
; 607  :         // 4. _Start_at + _Needle_size <= _Hay_size (substitute 1 into 2)
; 608  :         // 5. _Start_at <= _Hay_size - _Needle_size (4, move _Needle_size to other side) (also checked above)
; 609  :         return static_cast<size_t>(-1);
; 610  :     }
; 611  : 
; 612  :     if (_Needle_size == 0) { // empty string always matches if xpos is possible

  00042	85 db		 test	 ebx, ebx
  00044	0f 84 a5 00 00
	00		 je	 $LN12@find

; 613  :         return _Start_at;
; 614  :     }
; 615  : 
; 616  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  0004a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0004d	03 d7		 add	 edx, edi

; 617  :     for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {

  0004f	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]

; 425  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  00052	0f be 3e	 movsx	 edi, BYTE PTR [esi]

; 616  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  00055	89 55 0c	 mov	 DWORD PTR __Possible_matches_end$1$[ebp], edx

; 618  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  00058	2b d1		 sub	 edx, ecx

; 425  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  0005a	52		 push	 edx
  0005b	57		 push	 edi
  0005c	51		 push	 ecx
  0005d	89 7d f8	 mov	 DWORD PTR tv209[ebp], edi
  00060	e8 00 00 00 00	 call	 _memchr
  00065	8b f8		 mov	 edi, eax
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 619  :         if (!_Match_try) { // didn't find first character; report failure

  0006a	85 ff		 test	 edi, edi
  0006c	74 7e		 je	 SHORT $LN15@find
  0006e	66 90		 npad	 2
$LL13@find:

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  00070	8b c6		 mov	 eax, esi
  00072	8b d7		 mov	 edx, edi
  00074	8b f3		 mov	 esi, ebx
  00076	83 ee 04	 sub	 esi, 4
  00079	72 16		 jb	 SHORT $LN33@find
  0007b	0f 1f 44 00 00	 npad	 5
$LL34@find:
  00080	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00082	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00084	75 10		 jne	 SHORT $LN32@find
  00086	83 c2 04	 add	 edx, 4
  00089	83 c0 04	 add	 eax, 4
  0008c	83 ee 04	 sub	 esi, 4
  0008f	73 ef		 jae	 SHORT $LL34@find
$LN33@find:
  00091	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00094	74 34		 je	 SHORT $LN31@find
$LN32@find:
  00096	8a 0a		 mov	 cl, BYTE PTR [edx]
  00098	3a 08		 cmp	 cl, BYTE PTR [eax]
  0009a	75 27		 jne	 SHORT $LN35@find
  0009c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0009f	74 29		 je	 SHORT $LN31@find
  000a1	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  000a4	3a 48 01	 cmp	 cl, BYTE PTR [eax+1]
  000a7	75 1a		 jne	 SHORT $LN35@find
  000a9	83 fe fe	 cmp	 esi, -2			; fffffffeH
  000ac	74 1c		 je	 SHORT $LN31@find
  000ae	8a 4a 02	 mov	 cl, BYTE PTR [edx+2]
  000b1	3a 48 02	 cmp	 cl, BYTE PTR [eax+2]
  000b4	75 0d		 jne	 SHORT $LN35@find
  000b6	83 fe ff	 cmp	 esi, -1
  000b9	74 0f		 je	 SHORT $LN31@find
  000bb	8a 4a 03	 mov	 cl, BYTE PTR [edx+3]
  000be	3a 48 03	 cmp	 cl, BYTE PTR [eax+3]
  000c1	74 07		 je	 SHORT $LN31@find
$LN35@find:
  000c3	1b c0		 sbb	 eax, eax
  000c5	83 c8 01	 or	 eax, 1
  000c8	eb 02		 jmp	 SHORT $LN36@find
$LN31@find:
  000ca	33 c0		 xor	 eax, eax
$LN36@find:

; 623  :         if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0) { // found match

  000cc	85 c0		 test	 eax, eax
  000ce	74 28		 je	 SHORT $LN26@find

; 617  :     for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {

  000d0	8b 45 0c	 mov	 eax, DWORD PTR __Possible_matches_end$1$[ebp]
  000d3	47		 inc	 edi

; 618  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  000d4	2b c7		 sub	 eax, edi

; 425  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  000d6	50		 push	 eax
  000d7	ff 75 f8	 push	 DWORD PTR tv209[ebp]
  000da	57		 push	 edi
  000db	e8 00 00 00 00	 call	 _memchr

; 619  :         if (!_Match_try) { // didn't find first character; report failure

  000e0	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]

; 425  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  000e3	8b f8		 mov	 edi, eax
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 619  :         if (!_Match_try) { // didn't find first character; report failure

  000e8	85 ff		 test	 edi, edi
  000ea	75 84		 jne	 SHORT $LL13@find
$LN15@find:

; 4113 :             _Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Off, _Ptr, _Traits::length(_Ptr)));
; 4114 :     }

  000ec	83 c8 ff	 or	 eax, -1
$LN12@find:
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 08 00	 ret	 8
$LN26@find:

; 624  :             return static_cast<size_t>(_Match_try - _Haystack);

  000f8	2b 7d fc	 sub	 edi, DWORD PTR __Result$1$[ebp]

; 4111 :         // look for [_Ptr, <null>) beginning at or after _Off
; 4112 :         return static_cast<size_type>(_Traits_find<_Traits>(

  000fb	8b c7		 mov	 eax, edi
  000fd	5f		 pop	 edi

; 4113 :             _Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Off, _Ptr, _Traits::length(_Ptr)));
; 4114 :     }

  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3210 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3211 :         // assign [_Ptr, _Ptr + _Count)
; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2263 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3213 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3215 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3225 :             },
; 3226 :             _Ptr);
; 3227 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4474 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4456 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4460 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 79   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3220 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3225 :             },
; 3226 :             _Ptr);
; 3227 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4475 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2968 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2286 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 2976 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2304 :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2340 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
