; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30151.0 

	TITLE	C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\Distribute\ActorInstanceCollisionDetection.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
PUBLIC	?_Reallocate_exactly@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXI@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Reallocate_exactly
PUBLIC	?_Umove_if_noexcept@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXPAUCDynamicSphereInstance@@00@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Umove_if_noexcept
PUBLIC	?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Change_array
PUBLIC	?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xlength
PUBLIC	?_Xrange@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xrange
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Getal
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Insert_node
PUBLIC	??1?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@XZ ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::~map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >
PUBLIC	?CreateCollisionInstancePiece@CActorInstance@@QAE_NKPBUSAttachingData@NRaceData@@PAUSCollisionPointInstance@1@@Z ; CActorInstance::CreateCollisionInstancePiece
PUBLIC	?UpdatePointInstance@CActorInstance@@QAEXXZ	; CActorInstance::UpdatePointInstance
PUBLIC	?UpdatePointInstance@CActorInstance@@QAEXPAUSCollisionPointInstance@1@@Z ; CActorInstance::UpdatePointInstance
PUBLIC	?CheckCollisionDetection@CActorInstance@@QAE_NPBV?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@PAUD3DXVECTOR3@@@Z ; CActorInstance::CheckCollisionDetection
PUBLIC	?TestCollisionWithDynamicSphere@CActorInstance@@UAE_NABUCDynamicSphereInstance@@@Z ; CActorInstance::TestCollisionWithDynamicSphere
PUBLIC	?UpdateAdvancingPointInstance@CActorInstance@@QAEXXZ ; CActorInstance::UpdateAdvancingPointInstance
PUBLIC	?AvoidObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z ; CActorInstance::AvoidObject
PUBLIC	?IsBlockObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z ; CActorInstance::IsBlockObject
PUBLIC	?BlockMovement@CActorInstance@@QAEXXZ		; CActorInstance::BlockMovement
PUBLIC	?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z ; CActorInstance::__TestObjectCollision
PUBLIC	?TestActorCollision@CActorInstance@@QAEHAAV1@@Z	; CActorInstance::TestActorCollision
PUBLIC	?TestPhysicsBlendingCollision@CActorInstance@@QAEHAAV1@@Z ; CActorInstance::TestPhysicsBlendingCollision
PUBLIC	?AttackingProcess@CActorInstance@@QAEHAAV1@@Z	; CActorInstance::AttackingProcess
PUBLIC	?__SplashAttackProcess@CActorInstance@@QAEHAAV1@@Z ; CActorInstance::__SplashAttackProcess
PUBLIC	?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z ; CActorInstance::__NormalAttackProcess
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > > >::_Insert_node
PUBLIC	?EnableSkipCollision@CActorInstance@@QAEXXZ	; CActorInstance::EnableSkipCollision
PUBLIC	?DisableSkipCollision@CActorInstance@@QAEXXZ	; CActorInstance::DisableSkipCollision
PUBLIC	?CanSkipCollision@CActorInstance@@QAE_NXZ	; CActorInstance::CanSkipCollision
PUBLIC	?__InitializeCollisionData@CActorInstance@@IAEXXZ ; CActorInstance::__InitializeCollisionData
PUBLIC	??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>
PUBLIC	??1?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@XZ ; std::pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >::~pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
PUBLIC	??$_Emplace_reallocate@ABUCDynamicSphereInstance@@@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@QAEPAUCDynamicSphereInstance@@QAU2@ABU2@@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Emplace_reallocate<CDynamicSphereInstance const &>
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
PUBLIC	??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>
PUBLIC	??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >
PUBLIC	??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@2@@std@@QAE@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >
PUBLIC	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_tag>
PUBLIC	??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCPythonBackground@@@@0PAVCPythonBackground@@A ; CSingleton<CPythonBackground>::ms_singleton
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	??_C@_0GM@IMNFDCHL@CActorInstance?3?3UpdateAdvancing@ ; `string'
PUBLIC	??_C@_0GI@OFDOMPIB@CActorInstance?3?3UpdateAdvancing@ ; `string'
PUBLIC	??_C@_0BD@MDOIBFBP@metin2_map_oxevent@		; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f000000
PUBLIC	__real@42480000
PUBLIC	__real@47afc800
PUBLIC	__real@48742400
PUBLIC	__real@491c4000
PUBLIC	__real@49742400
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?GetElapsedSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetElapsedSecond
EXTRN	?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ:PROC ; CSphereCollisionInstance::GetAttribute
EXTRN	?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z:PROC ; DetectCollisionDynamicSphereVSDynamicSphere
EXTRN	?DetectCollisionDynamicZCylinderVSDynamicZCylinder@@YA_NABUCDynamicSphereInstance@@0@Z:PROC ; DetectCollisionDynamicZCylinderVSDynamicZCylinder
EXTRN	?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ:PROC ; CGraphicObjectInstance::GetPosition
EXTRN	?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z:PROC ; CGraphicObjectInstance::MovementCollisionDynamicSphere
EXTRN	?GetBoneMatrixPointer@CGrannyModelInstance@@QBEPBMH@Z:PROC ; CGrannyModelInstance::GetBoneMatrixPointer
EXTRN	?GetCompositeBoneMatrixPointer@CGrannyModelInstance@@QBEPBMH@Z:PROC ; CGrannyModelInstance::GetCompositeBoneMatrixPointer
EXTRN	?GetBoneIndexByName@CGrannyModelInstance@@QBE_NPBDPAH@Z:PROC ; CGrannyModelInstance::GetBoneIndexByName
EXTRN	?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ:PROC ; CGrannyLODController::GetModelInstance
EXTRN	?GetLocalTime@CGraphicThingInstance@@QAEMXZ:PROC ; CGraphicThingInstance::GetLocalTime
EXTRN	?GetLastPosition@CPhysicsObject@@QAEXPAUD3DXVECTOR3@@@Z:PROC ; CPhysicsObject::GetLastPosition
EXTRN	?GetWarpMapName@CPythonBackground@@QAEPBDXZ:PROC ; CPythonBackground::GetWarpMapName
EXTRN	?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ:PROC ; CRaceMotionData::GetMotionAttackDataPointer
EXTRN	?GetRace@CActorInstance@@QAEKXZ:PROC		; CActorInstance::GetRace
EXTRN	?isAttacking@CActorInstance@@QAEHXZ:PROC	; CActorInstance::isAttacking
EXTRN	?GetAttackingElapsedTime@CActorInstance@@QAEMXZ:PROC ; CActorInstance::GetAttackingElapsedTime
EXTRN	?GetBlendingPosition@CActorInstance@@QAEXPAUD3DXVECTOR3@@@Z:PROC ; CActorInstance::GetBlendingPosition
EXTRN	?IsWaiting@CActorInstance@@QAEHXZ:PROC		; CActorInstance::IsWaiting
EXTRN	?IsDead@CActorInstance@@QAEHXZ:PROC		; CActorInstance::IsDead
EXTRN	?NEW_SetAtkPixelPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@@Z:PROC ; CActorInstance::NEW_SetAtkPixelPosition
EXTRN	?NEW_GetCurPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ:PROC ; CActorInstance::NEW_GetCurPixelPositionRef
EXTRN	?GetRotation@CActorInstance@@QAEMXZ:PROC	; CActorInstance::GetRotation
EXTRN	?__AdjustCollisionMovement@CActorInstance@@IAEXPBVCGraphicObjectInstance@@@Z:PROC ; CActorInstance::__AdjustCollisionMovement
EXTRN	?__IsInSplashTime@CActorInstance@@IAE_NXZ:PROC	; CActorInstance::__IsInSplashTime
EXTRN	?isValidAttacking@CActorInstance@@IAEHXZ:PROC	; CActorInstance::isValidAttacking
EXTRN	?__InitializeMovement@CActorInstance@@IAEXXZ:PROC ; CActorInstance::__InitializeMovement
EXTRN	?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z:PROC ; CActorInstance::__ProcessDataAttackSuccess
EXTRN	?__isInvisible@CActorInstance@@IAE_NXZ:PROC	; CActorInstance::__isInvisible
EXTRN	?__GetReachScale@CActorInstance@@IAEMXZ:PROC	; CActorInstance::__GetReachScale
EXTRN	?__IsFlyTargetPC@CActorInstance@@IAE_NXZ:PROC	; CActorInstance::__IsFlyTargetPC
EXTRN	?__IsSameFlyTarget@CActorInstance@@IAE_NPAV1@@Z:PROC ; CActorInstance::__IsSameFlyTarget
EXTRN	?IS_HUGE_RACE@@YA_NI@Z:PROC			; IS_HUGE_RACE
EXTRN	?IS_HUGE_RACE@@YA_NI@Z:PROC			; IS_HUGE_RACE
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonBackground@@@@0PAVCPythonBackground@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonBackground@@@@0PAVCPythonBackground@@A DD 01H DUP (?) ; CSingleton<CPythonBackground>::ms_singleton
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@491c4000
CONST	SEGMENT
__real@491c4000 DD 0491c4000r			; 640000
CONST	ENDS
;	COMDAT __real@48742400
CONST	SEGMENT
__real@48742400 DD 048742400r			; 250000
CONST	ENDS
;	COMDAT __real@47afc800
CONST	SEGMENT
__real@47afc800 DD 047afc800r			; 90000
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MDOIBFBP@metin2_map_oxevent@
CONST	SEGMENT
??_C@_0BD@MDOIBFBP@metin2_map_oxevent@ DB 'metin2_map_oxevent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@OFDOMPIB@CActorInstance?3?3UpdateAdvancing@
CONST	SEGMENT
??_C@_0GI@OFDOMPIB@CActorInstance?3?3UpdateAdvancing@ DB 'CActorInstance:'
	DB	':UpdateAdvancingPointInstance - m_LODControllerVector[rInstan'
	DB	'ce.dwModelIndex=%d] is NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@IMNFDCHL@CActorInstance?3?3UpdateAdvancing@
CONST	SEGMENT
??_C@_0GM@IMNFDCHL@CActorInstance?3?3UpdateAdvancing@ DB 'CActorInstance:'
	DB	':UpdateAdvancingPointInstance - rInstance.dwModelIndex=%d >= '
	DB	'm_LODControllerVector.size()=%d', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?NPOS@@3USItemPos@@B DB 01H DUP (?)
	DW	0ffffH					; NPOS
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@AAU?$pair@QAVCActorInstance@@M@2@@?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU01@AAU?$pair@QAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@AAU?$pair@QAVCActorInstance@@M@2@@?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU01@AAU?$pair@QAVCActorInstance@@M@1@@Z$0
__ehfuncinfo$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@AAU?$pair@QAVCActorInstance@@M@2@@?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU01@AAU?$pair@QAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Buynode@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@AAU?$pair@QAVCActorInstance@@M@2@@?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU01@AAU?$pair@QAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Buynode@AAU?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Buynode@AAU?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z$0
__ehfuncinfo$??$_Buynode@AAU?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Buynode@AAU?$pair@QAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Copy_or_move@U?$pair@QAVCActorInstance@@M@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Copy_or_move@U?$pair@QAVCActorInstance@@M@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z$0
__ehfuncinfo$??$_Copy_or_move@U?$pair@QAVCActorInstance@@M@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Copy_or_move@U?$pair@QAVCActorInstance@@M@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@AAU?$pair@QAVCActorInstance@@M@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$0
__tryblocktable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$3
__unwindtable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$2
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$0
__ehfuncinfo$??$?0U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@PAVCActorInstance@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@PAVCActorInstance@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z$1
__ehfuncinfo$??$?0U?$pair@PAVCActorInstance@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@PAVCActorInstance@@M@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??$?0V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$1
__ehfuncinfo$??$_Emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$1
__ehfuncinfo$??$emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@$0A@@?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@$0A@@?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@1@@Z$2
__ehfuncinfo$??$?0PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@$0A@@?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@$0A@@?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z$2
__ehfuncinfo$??$emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace@U?$pair@PAVCActorInstance@@M@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@$0A@@?$map@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@$0A@@?$map@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@$0A@@?$map@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z$1
__ehfuncinfo$??$insert@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@$0A@@?$map@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$insert@U?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@$0A@@?$map@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_pair@PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@YA?AU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@0@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_pair@PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@YA?AU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@0@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@0@@Z$3
__ehfuncinfo$??$make_pair@PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@YA?AU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@0@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_pair@PBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@YA?AU?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@0@$$QAPBUSHitData@NRaceData@@AAV?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z$2
__ehfuncinfo$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$11
	DD	00H
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$1
	DD	03H
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$14
	DD	03H
	DD	FLAT:__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$13
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TestActorCollision@CActorInstance@@QAEHAAV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TestActorCollision@CActorInstance@@QAEHAAV1@@Z$0
__ehfuncinfo$?TestActorCollision@CActorInstance@@QAEHAAV1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TestActorCollision@CActorInstance@@QAEHAAV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >, COMDAT
; _this$ = ecx

; 732  :     void _Erase_tree_and_orphan(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 733  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 734  :             _Erase_tree_and_orphan(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 733  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 735  :             auto _To_delete = _STD exchange(_Rootnode, _Rootnode->_Left);
; 736  :             _Orphan_ptr(_To_delete);
; 737  :             _Alnode::value_type::_Freenode(_Al, _To_delete);
; 738  :         }
; 739  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
_TEXT	SEGMENT
__Newnode$2 = -28					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Rootnode$ = 8						; size = 4
__Newroot$ = 12						; size = 4
__Wherenode$ = 12					; size = 4
__Movefl$ = 16						; size = 1
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_tag>, COMDAT
; _this$ = ecx

; 1651 :     _Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode, _Moveit _Movefl) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 1652 :         // copy entire subtree, recursively
; 1653 :         const auto _Scary = _Get_scary();
; 1654 :         _Nodeptr _Newroot = _Scary->_Myhead; // point at nil node
; 1655 : 
; 1656 :         if (!_Rootnode->_Isnil) { // copy or move a node, then any subtrees

  00030	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  00033	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00035	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00039	75 77		 jne	 SHORT $LN8@Copy_nodes
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0003b	89 7d e4	 mov	 DWORD PTR __Newnode$2[ebp], edi

; 79   :         return ::operator new(_Bytes);

  0003e	6a 18		 push	 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 357  :         _Alloc_construct_ptr<_Alloc> _Newnode(_Al);

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00047	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$2[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 359  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

  00053	8b 55 08	 mov	 edx, DWORD PTR __Rootnode$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 235  :         return _Traits::_Allocate(_Bytes);

  00056	8b f0		 mov	 esi, eax

; 79   :         return ::operator new(_Bytes);

  00058	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1665 :             _TRY_BEGIN

  0005b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 359  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

  00062	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00065	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00068	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 1657 :             bool_constant<is_same_v<key_type, value_type>> _Is_set;
; 1658 :             _Nodeptr _Pnode = _Copy_or_move(_Rootnode->_Myval, _Movefl, _Is_set);
; 1659 :             _Pnode->_Parent = _Wherenode;

  0006b	8b 45 0c	 mov	 eax, DWORD PTR __Wherenode$[ebp]

; 359  :         allocator_traits<_Alloc>::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

  0006e	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 1666 :             _Pnode->_Left  = _Copy_nodes(_Rootnode->_Left, _Pnode, _Movefl);

  00071	8b cf		 mov	 ecx, edi

; 360  :         _Construct_in_place(_Newnode._Ptr->_Left, _Myhead);

  00073	89 1e		 mov	 DWORD PTR [esi], ebx

; 361  :         _Construct_in_place(_Newnode._Ptr->_Parent, _Myhead);
; 362  :         _Construct_in_place(_Newnode._Ptr->_Right, _Myhead);

  00075	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 363  :         _Newnode._Ptr->_Color = _Red;

  00078	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0

; 1657 :             bool_constant<is_same_v<key_type, value_type>> _Is_set;
; 1658 :             _Nodeptr _Pnode = _Copy_or_move(_Rootnode->_Myval, _Movefl, _Is_set);
; 1659 :             _Pnode->_Parent = _Wherenode;

  0007e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1660 :             _Pnode->_Color  = _Rootnode->_Color;

  00081	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  00084	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 1666 :             _Pnode->_Left  = _Copy_nodes(_Rootnode->_Left, _Pnode, _Movefl);

  00087	ff 75 10	 push	 DWORD PTR __Movefl$[ebp]
  0008a	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  0008e	56		 push	 esi
  0008f	ff 32		 push	 DWORD PTR [edx]
  00091	0f 45 de	 cmovne	 ebx, esi
  00094	89 5d 0c	 mov	 DWORD PTR __Newroot$[ebp], ebx
  00097	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_tag>
  0009c	89 06		 mov	 DWORD PTR [esi], eax

; 1667 :             _Pnode->_Right = _Copy_nodes(_Rootnode->_Right, _Pnode, _Movefl);

  0009e	8b cf		 mov	 ecx, edi
  000a0	ff 75 10	 push	 DWORD PTR __Movefl$[ebp]
  000a3	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  000a6	56		 push	 esi
  000a7	ff 70 08	 push	 DWORD PTR [eax+8]
  000aa	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_tag>
  000af	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN8@Copy_nodes:

; 1671 :             _CATCH_END
; 1672 :         }
; 1673 : 
; 1674 :         return _Newroot; // return newly constructed tree

  000b2	8b c3		 mov	 eax, ebx

; 1675 :     }

  000b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000be	59		 pop	 ecx
  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 0c 00	 ret	 12			; 0000000cH
__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$0:

; 1668 :             _CATCH_ALL
; 1669 :             _Scary->_Erase_tree_and_orphan(_Getal(), _Newroot); // subtree copy failed, bail out

  000c8	ff 75 0c	 push	 DWORD PTR __Newroot$[ebp]
  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Getal@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Getal
  000d3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??$_Erase_tree_and_orphan@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree_and_orphan<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >

; 1670 :             _RERAISE;

  000dc	6a 00		 push	 0
  000de	6a 00		 push	 0
  000e0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN65@Copy_nodes:
  000e5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_tag>
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@2@@std@@QAE@XZ PROC ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >, COMDAT
; _this$ = ecx

; 774  :         if (_Mycont) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 09		 je	 SHORT $LN2@Tree_head_

; 775  :             _Mycont->_Erase_head(_Al);

  00007	ff 31		 push	 DWORD PTR [ecx]
  00009	8b c8		 mov	 ecx, eax
  0000b	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
$LN2@Tree_head_:

; 776  :         }
; 777  :     }

  00010	c3		 ret	 0
??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 1c		 push	 28			; 0000001cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 1c		 push	 28			; 0000001cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 971  :             _Al.deallocate(_Ptr, 1);
; 972  :         }
; 973  :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 971  :             _Al.deallocate(_Ptr, 1);
; 972  :         }
; 973  :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z PROC ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>, COMDAT
; _this$ = ecx

; 1595 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1596 :         const auto _Scary = _Get_scary();
; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1604 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1607 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1608 :             }
; 1609 :         }
; 1610 : 
; 1611 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1612 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ENDP ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z PROC ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>, COMDAT
; _this$ = ecx

; 1595 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1596 :         const auto _Scary = _Get_scary();
; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1604 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1607 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1608 :             }
; 1609 :         }
; 1610 : 
; 1611 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1612 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z ENDP ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUCDynamicSphereInstance@@@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@QAEPAUCDynamicSphereInstance@@QAU2@ABU2@@Z
_TEXT	SEGMENT
tv466 = -12						; size = 4
__Whereoff$1$ = -12					; size = 4
__Newsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
$T3 = 8							; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUCDynamicSphereInstance@@@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@QAEPAUCDynamicSphereInstance@@QAU2@ABU2@@Z PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Emplace_reallocate<CDynamicSphereInstance const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00009	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  00012	57		 push	 edi

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00013	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00016	8b fe		 mov	 edi, esi
  00018	2b 3b		 sub	 edi, DWORD PTR [ebx]
  0001a	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0001c	f7 ef		 imul	 edi
  0001e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00021	03 d7		 add	 edx, edi
  00023	c1 fa 04	 sar	 edx, 4
  00026	8b c2		 mov	 eax, edx
  00028	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002b	03 c2		 add	 eax, edx
  0002d	89 45 f4	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00030	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00035	f7 e9		 imul	 ecx
  00037	03 d1		 add	 edx, ecx
  00039	c1 fa 04	 sar	 edx, 4
  0003c	8b c2		 mov	 eax, edx
  0003e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00041	03 c2		 add	 eax, edx

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00043	3d 49 92 24 09	 cmp	 eax, 153391689		; 09249249H
  00048	0f 84 52 01 00
	00		 je	 $LN75@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004e	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00051	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00054	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00056	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0005b	f7 e9		 imul	 ecx

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005d	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00062	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00065	03 d1		 add	 edx, ecx
  00067	c1 fa 04	 sar	 edx, 4
  0006a	8b ca		 mov	 ecx, edx
  0006c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0006f	03 ca		 add	 ecx, edx

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00071	8b d1		 mov	 edx, ecx
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 17		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  0007b	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00080	bf 49 92 24 09	 mov	 edi, 153391689		; 09249249H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	8b d0		 mov	 edx, eax
  00090	eb 4a		 jmp	 SHORT $LN73@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00092	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00095	3b c7		 cmp	 eax, edi
  00097	0f 43 f8	 cmovae	 edi, eax
  0009a	81 ff 49 92 24
	09		 cmp	 edi, 153391689		; 09249249H
  000a0	0f 87 ff 00 00
	00		 ja	 $LN76@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000a6	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  000ad	2b c7		 sub	 eax, edi
  000af	c1 e0 02	 shl	 eax, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b7	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000bf	83 c4 04	 add	 esp, 4
  000c2	8b d0		 mov	 edx, eax
  000c4	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000c6	85 c0		 test	 eax, eax
  000c8	74 10		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d0	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000d3	89 45 08	 mov	 DWORD PTR $T3[ebp], eax
  000d6	8b d0		 mov	 edx, eax
  000d8	eb 05		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000da	33 d2		 xor	 edx, edx
$LN73@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000dc	89 55 08	 mov	 DWORD PTR $T3[ebp], edx
$LN23@Emplace_re:
  000df	8b 4d f4	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]
  000e2	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000e9	2b c1		 sub	 eax, ecx
  000eb	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000ee	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000f1	89 4d f4	 mov	 DWORD PTR tv466[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000f4	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000f7	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000fa	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000ff	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00104	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00107	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0010a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0010d	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  00110	8b 08		 mov	 ecx, DWORD PTR [eax]
  00112	3b f3		 cmp	 esi, ebx
  00114	75 0f		 jne	 SHORT $LN4@Emplace_re

; 780  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00116	52		 push	 edx
  00117	53		 push	 ebx
  00118	51		 push	 ecx
  00119	8b c8		 mov	 ecx, eax
  0011b	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXPAUCDynamicSphereInstance@@00@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Umove_if_noexcept

; 781  :         } else { // provide basic guarantee

  00120	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00123	eb 61		 jmp	 SHORT $LN51@Emplace_re
$LN4@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  00125	3b ce		 cmp	 ecx, esi
  00127	74 30		 je	 SHORT $LN71@Emplace_re
  00129	0f 1f 80 00 00
	00 00		 npad	 7
$LL37@Emplace_re:

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00130	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 1621 :         ++_Last;

  00133	8d 52 1c	 lea	 edx, DWORD PTR [edx+28]

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00136	0f 11 42 e4	 movups	 XMMWORD PTR [edx-28], xmm0
  0013a	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  0013f	66 0f d6 42 f4	 movq	 QWORD PTR [edx-12], xmm0
  00144	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  00147	83 c1 1c	 add	 ecx, 28			; 0000001cH

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0014a	89 42 fc	 mov	 DWORD PTR [edx-4], eax

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0014d	3b ce		 cmp	 ecx, esi
  0014f	75 df		 jne	 SHORT $LL37@Emplace_re
  00151	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00154	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  00157	eb 02		 jmp	 SHORT $LN36@Emplace_re
$LN71@Emplace_re:
  00159	8b d0		 mov	 edx, eax
$LN36@Emplace_re:
  0015b	3b f3		 cmp	 esi, ebx
  0015d	74 27		 je	 SHORT $LN51@Emplace_re

; 1622 :     }
; 1623 : 
; 1624 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last
; 1625 :         _First = _Last;
; 1626 :         return _Last;
; 1627 :     }
; 1628 : 
; 1629 : private:
; 1630 :     pointer _First;
; 1631 :     pointer _Last;
; 1632 :     _Alloc& _Al;
; 1633 : };
; 1634 : 
; 1635 : template <class _InIt, class _Alloc>
; 1636 : _CONSTEXPR20_DYNALLOC _Alloc_ptr_t<_Alloc> _Uninitialized_copy(
; 1637 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {
; 1638 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1639 :     // note: only called internally from elsewhere in the STL
; 1640 :     using _Ptrval = typename _Alloc::value_type*;
; 1641 : 
; 1642 :     auto _UFirst      = _Get_unwrapped(_First);
; 1643 :     const auto _ULast = _Get_unwrapped(_Last);
; 1644 : 
; 1645 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1646 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1647 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1648 :         if (!_STD is_constant_evaluated())
; 1649 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1650 :         {
; 1651 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1652 :             _Dest += _ULast - _UFirst;
; 1653 :             return _Dest;
; 1654 :         }
; 1655 :     }
; 1656 : 
; 1657 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1658 :     for (; _UFirst != _ULast; ++_UFirst) {
; 1659 :         _Backout._Emplace_back(*_UFirst);
; 1660 :     }
; 1661 : 
; 1662 :     return _Backout._Release();
; 1663 : }
; 1664 : 
; 1665 : template <class _InIt, class _NoThrowFwdIt>
; 1666 : _CONSTEXPR20_DYNALLOC _NoThrowFwdIt _Uninitialized_copy_unchecked(
; 1667 :     _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {
; 1668 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1669 :     if constexpr (_Ptr_copy_cat<_InIt, _NoThrowFwdIt>::_Really_trivial) {
; 1670 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1671 :         if (!_STD is_constant_evaluated())
; 1672 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1673 :         {
; 1674 :             return _Copy_memmove(_First, _Last, _Dest);
; 1675 :         }
; 1676 :     }
; 1677 : 
; 1678 :     _Uninitialized_backout<_NoThrowFwdIt> _Backout{_Dest};
; 1679 :     for (; _First != _Last; ++_First) {
; 1680 :         _Backout._Emplace_back(*_First);
; 1681 :     }
; 1682 : 
; 1683 :     return _Backout._Release();
; 1684 : }
; 1685 : 
; 1686 : template <class _InIt, class _NoThrowFwdIt>
; 1687 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {
; 1688 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1689 :     _Adl_verify_range(_First, _Last);
; 1690 :     auto _UFirst      = _Get_unwrapped(_First);
; 1691 :     const auto _ULast = _Get_unwrapped(_Last);
; 1692 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1693 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1694 :     return _Dest;
; 1695 : }
; 1696 : 
; 1697 : template <class _InIt, class _Alloc>
; 1698 : _CONSTEXPR20_DYNALLOC _Alloc_ptr_t<_Alloc> _Uninitialized_move(
; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {
; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

  0015f	8b 4d f4	 mov	 ecx, DWORD PTR tv466[ebp]
  00162	83 c1 1c	 add	 ecx, 28			; 0000001cH
$LL52@Emplace_re:

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00165	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  00168	8d 49 1c	 lea	 ecx, DWORD PTR [ecx+28]

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0016b	0f 11 41 e4	 movups	 XMMWORD PTR [ecx-28], xmm0
  0016f	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  00174	66 0f d6 41 f4	 movq	 QWORD PTR [ecx-12], xmm0
  00179	8b 46 18	 mov	 eax, DWORD PTR [esi+24]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0017c	83 c6 1c	 add	 esi, 28			; 0000001cH

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0017f	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  00182	3b f3		 cmp	 esi, ebx
  00184	75 df		 jne	 SHORT $LL52@Emplace_re
$LN51@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00186	57		 push	 edi
  00187	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  0018a	8b ca		 mov	 ecx, edx
  0018c	ff 75 08	 push	 DWORD PTR $T3[ebp]
  0018f	e8 00 00 00 00	 call	 ?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Change_array

; 793  :         return _Newvec + _Whereoff;

  00194	8b 45 f4	 mov	 eax, DWORD PTR tv466[ebp]
  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx

; 794  :     }

  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c2 08 00	 ret	 8
$LN75@Emplace_re:

; 765  :             _Xlength();

  001a0	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xlength
$LN76@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  001a5	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN72@Emplace_re:
  001aa	cc		 int	 3
??$_Emplace_reallocate@ABUCDynamicSphereInstance@@@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@QAEPAUCDynamicSphereInstance@@QAU2@ABU2@@Z ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Emplace_reallocate<CDynamicSphereInstance const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >, COMDAT
; _this$ = ecx

; 750  :     void _Erase_head(_Alnode& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 751  :         this->_Orphan_all();
; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00007	8b 07		 mov	 eax, DWORD PTR [edi]
  00009	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0000c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00010	75 27		 jne	 SHORT $LN5@Erase_head
  00012	53		 push	 ebx
  00013	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
$LL4@Erase_head:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00016	ff 76 08	 push	 DWORD PTR [esi+8]
  00019	8b cf		 mov	 ecx, edi
  0001b	53		 push	 ebx
  0001c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00021	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00023	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00025	6a 18		 push	 24			; 00000018H
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00030	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00034	74 e0		 je	 SHORT $LL4@Erase_head
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	5b		 pop	 ebx
$LN5@Erase_head:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00039	6a 18		 push	 24			; 00000018H
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00041	83 c4 08	 add	 esp, 8
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 754  :     }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4786 : _NODISCARD bool operator==(_In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00006	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@operator:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL12@operator

; 2272 :         const value_type* _Result = _Bx._Buf;

  00017	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b ca		 sub	 ecx, edx

; 2272 :         const value_type* _Result = _Bx._Buf;

  0001c	8b d0		 mov	 edx, eax

; 2286 :         return _BUF_SIZE <= _Myres;

  0001e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  00022	72 02		 jb	 SHORT $LN8@operator

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00024	8b 10		 mov	 edx, DWORD PTR [eax]
$LN8@operator:

; 4344 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00026	51		 push	 ecx
  00027	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  0002a	ff 70 10	 push	 DWORD PTR [eax+16]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00033	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 :     return _Right._Equal(_Left);
; 4788 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@XZ PROC ; std::pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >::~pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >, COMDAT
; _this$ = ecx
  00000	83 c1 04	 add	 ecx, 4

; 1086 :         _Scary->_Erase_head(_Getal());

  00003	51		 push	 ecx
  00004	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
  00009	c3		 ret	 0
??1?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@XZ ENDP ; std::pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >::~pair<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
_TEXT	SEGMENT
__Loc$3 = -36						; size = 12
$T4 = -24						; size = 12
$T5 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z PROC ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>, COMDAT
; _this$ = ecx

; 162  :     pair<iterator, bool> insert(_Valty&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T4[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 0b		 jne	 SHORT $LN6@insert
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004e	72 04		 jb	 SHORT $LN6@insert
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00050	32 d2		 xor	 dl, dl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1008 :                 return {_Loc._Bound, false};

  00052	eb 51		 jmp	 SHORT $LN85@insert
$LN6@insert:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0005b	74 64		 je	 SHORT $LN103@insert

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T5[ebp], edi

; 79   :         return ::operator new(_Bytes);

  00062	6a 18		 push	 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  0007c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0007f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00082	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00085	8b cf		 mov	 ecx, edi
  00087	50		 push	 eax
  00088	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp+4]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0008b	89 30		 mov	 DWORD PTR [eax], esi

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008d	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp]

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00090	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00093	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 809  :         this->_Ptr->_Color = _Red;

  00096	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Insert_node
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000a1	8b c8		 mov	 ecx, eax
  000a3	b2 01		 mov	 dl, 1
$LN85@insert:
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx
  000aa	88 50 04	 mov	 BYTE PTR [eax+4], dl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map

; 164  :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN103@insert:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

  000c1	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN101@insert:
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z ENDP ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__InitializeCollisionData@CActorInstance@@IAEXXZ
_TEXT	SEGMENT
?__InitializeCollisionData@CActorInstance@@IAEXXZ PROC	; CActorInstance::__InitializeCollisionData, COMDAT
; _this$ = ecx

; 9    : 	m_canSkipCollision=false;

  00000	c6 81 20 1a 00
	00 00		 mov	 BYTE PTR [ecx+6688], 0

; 10   : }

  00007	c3		 ret	 0
?__InitializeCollisionData@CActorInstance@@IAEXXZ ENDP	; CActorInstance::__InitializeCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?CanSkipCollision@CActorInstance@@QAE_NXZ
_TEXT	SEGMENT
?CanSkipCollision@CActorInstance@@QAE_NXZ PROC		; CActorInstance::CanSkipCollision, COMDAT
; _this$ = ecx

; 24   : 	return m_canSkipCollision;

  00000	8a 81 20 1a 00
	00		 mov	 al, BYTE PTR [ecx+6688]

; 25   : }

  00006	c3		 ret	 0
?CanSkipCollision@CActorInstance@@QAE_NXZ ENDP		; CActorInstance::CanSkipCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?DisableSkipCollision@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
?DisableSkipCollision@CActorInstance@@QAEXXZ PROC	; CActorInstance::DisableSkipCollision, COMDAT
; _this$ = ecx

; 19   : 	m_canSkipCollision=false;

  00000	c6 81 20 1a 00
	00 00		 mov	 BYTE PTR [ecx+6688], 0

; 20   : }

  00007	c3		 ret	 0
?DisableSkipCollision@CActorInstance@@QAEXXZ ENDP	; CActorInstance::DisableSkipCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?EnableSkipCollision@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
?EnableSkipCollision@CActorInstance@@QAEXXZ PROC	; CActorInstance::EnableSkipCollision, COMDAT
; _this$ = ecx

; 14   : 	m_canSkipCollision=true;

  00000	c6 81 20 1a 00
	00 01		 mov	 BYTE PTR [ecx+6688], 1

; 15   : }

  00007	c3		 ret	 0
?EnableSkipCollision@CActorInstance@@QAEXXZ ENDP	; CActorInstance::EnableSkipCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z
_TEXT	SEGMENT
__Loc$4 = -152						; size = 12
$T5 = -152						; size = 12
__Loc$6 = -152						; size = 12
__Loc$7 = -152						; size = 12
$T8 = -140						; size = 8
$T9 = -140						; size = 8
_fx$1$ = -136						; size = 4
_this$10 = -136						; size = 4
_motiontime$ = -132					; size = 4
$T1$sroa$2473$3$ = -128					; size = 4
tv273 = -128						; size = 4
_range_start$2$ = -124					; size = 4
$T11 = -120						; size = 12
__Sentinel$12 = -116					; size = 8
$T13 = -116						; size = 8
$T14 = -116						; size = 8
_fy$1$ = -112						; size = 4
__Myhead$1$ = -112					; size = 4
__Myhead$1$ = -112					; size = 4
$T15 = -112						; size = 1
$T16 = -112						; size = 4
_fDistance$1$ = -108					; size = 4
_itorHitData$1$ = -108					; size = 4
_pad$1$ = -104						; size = 4
$T2$sroa$2472$2$ = -100					; size = 4
__Loc$17 = -96						; size = 12
$T18 = -96						; size = 12
_this$1$ = -84						; size = 4
_HittedInstanceMap$19 = -80				; size = 8
_c$1$ = -76						; size = 4
_rHittedInstanceMap$1$ = -76				; size = 4
tv5083 = -76						; size = 4
_this$GSCopy$1$ = -72					; size = 4
_rVictim$GSCopy$1$ = -68				; size = 4
$T20 = -64						; size = 8
_s$1$ = -60						; size = 4
$T21 = -60						; size = 4
tv4918 = -60						; size = 4
tv4780 = -60						; size = 4
tv3315 = -60						; size = 4
__X$ = -60						; size = 4
__X$ = -60						; size = 4
$T22 = -60						; size = 4
$T23 = -60						; size = 4
$T24 = -60						; size = 4
_dsi$25 = -56						; size = 28
__Loc$26 = -28						; size = 12
_v3HitPosition$27 = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rVictim$ = 8						; size = 4
?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z PROC	; CActorInstance::__NormalAttackProcess, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	89 7d b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00032	8b 75 08	 mov	 esi, DWORD PTR _rVictim$[ebp]

; 324  : 	if (IS_HUGE_RACE(rVictim.GetRace()))

  00035	8b ce		 mov	 ecx, esi
  00037	89 75 bc	 mov	 DWORD PTR _rVictim$GSCopy$1$[ebp], esi
  0003a	f3 0f 10 8e 24
	19 00 00	 movss	 xmm1, DWORD PTR [esi+6436]
  00042	f3 0f 5c 8f 24
	19 00 00	 subss	 xmm1, DWORD PTR [edi+6436]
  0004a	f3 0f 10 86 2c
	19 00 00	 movss	 xmm0, DWORD PTR [esi+6444]
  00052	f3 0f 5c 87 2c
	19 00 00	 subss	 xmm0, DWORD PTR [edi+6444]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0005a	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0005e	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00062	f3 0f 58 c8	 addss	 xmm1, xmm0
  00066	f3 0f 58 c8	 addss	 xmm1, xmm0
  0006a	f3 0f 11 4d 94	 movss	 DWORD PTR _fDistance$1$[ebp], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 324  : 	if (IS_HUGE_RACE(rVictim.GetRace()))

  0006f	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?IS_HUGE_RACE@@YA_NI@Z	; IS_HUGE_RACE
  0007a	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fDistance$1$[ebp]
  0007f	83 c4 04	 add	 esp, 4
  00082	84 c0		 test	 al, al
  00084	74 28		 je	 SHORT $LN14@NormalAtta

; 325  : 	{
; 326  : 		if (fDistance >= 500.0f*500.0f)

  00086	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@48742400
  0008d	72 28		 jb	 SHORT $LN17@NormalAtta
$LN718@NormalAtta:

; 450  : 					}
; 451  : 				}
; 452  : 			}
; 453  : 		}
; 454  : 	}
; 455  : 
; 456  : 	return FALSE;

  0008f	33 c0		 xor	 eax, eax
$LN1@NormalAtta:

; 457  : }

  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	33 cd		 xor	 ecx, ebp
  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
$LN14@NormalAtta:

; 327  : 			return FALSE;
; 328  : 	}
; 329  : 	else
; 330  : 	{
; 331  : 		if (fDistance >= 300.0f*300.0f)

  000ae	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@47afc800
  000b5	73 d8		 jae	 SHORT $LN718@NormalAtta
$LN17@NormalAtta:

; 332  : 			return FALSE;
; 333  : 	}
; 334  : 
; 335  : 	if (!isValidAttacking())

  000b7	8b cf		 mov	 ecx, edi
  000b9	e8 00 00 00 00	 call	 ?isValidAttacking@CActorInstance@@IAEHXZ ; CActorInstance::isValidAttacking
  000be	85 c0		 test	 eax, eax
  000c0	74 cd		 je	 SHORT $LN718@NormalAtta

; 336  : 		return FALSE;
; 337  : 
; 338  : 	const float c_fAttackRadius = 20.0f;
; 339  : 	const NRaceData::TMotionAttackData * pad = m_pkCurRaceMotionData->GetMotionAttackDataPointer();

  000c2	8b 8f e0 18 00
	00		 mov	 ecx, DWORD PTR [edi+6368]
  000c8	e8 00 00 00 00	 call	 ?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ ; CRaceMotionData::GetMotionAttackDataPointer

; 341  : 	const float motiontime = GetAttackingElapsedTime();

  000cd	8b cf		 mov	 ecx, edi
  000cf	89 45 98	 mov	 DWORD PTR _pad$1$[ebp], eax
  000d2	e8 00 00 00 00	 call	 ?GetAttackingElapsedTime@CActorInstance@@QAEMXZ ; CActorInstance::GetAttackingElapsedTime
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000d7	8b 45 98	 mov	 eax, DWORD PTR _pad$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 341  : 	const float motiontime = GetAttackingElapsedTime();

  000da	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR _motiontime$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000e0	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  000e3	89 7d 94	 mov	 DWORD PTR _itorHitData$1$[ebp], edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 344  : 	for (; itorHitData != pad->HitDataContainer.end(); ++itorHitData)

  000e6	3b 78 20	 cmp	 edi, DWORD PTR [eax+32]
  000e9	74 a4		 je	 SHORT $LN718@NormalAtta
  000eb	8b 45 b8	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  000ee	05 08 1a 00 00	 add	 eax, 6664		; 00001a08H
  000f3	89 45 ac	 mov	 DWORD PTR _this$1$[ebp], eax
$LL44@NormalAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000f6	8d 4d c4	 lea	 ecx, DWORD PTR $T24[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 348  : 		THitDataMap::iterator itHitData = m_HitDataMap.find(&c_rHitData);

  000f9	89 7d c4	 mov	 DWORD PTR $T24[ebp], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000fc	51		 push	 ecx
  000fd	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR __Loc$7[ebp]
  00103	51		 push	 ecx
  00104	8b c8		 mov	 ecx, eax
  00106	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0010b	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR __Loc$7[ebp+8]
  00111	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00115	75 0a		 jne	 SHORT $LN56@NormalAtta
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00117	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0011a	72 05		 jb	 SHORT $LN56@NormalAtta

; 1355 :             return _Loc._Bound;

  0011c	8b 4d ac	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0011f	eb 05		 jmp	 SHORT $LN55@NormalAtta
$LN56@NormalAtta:

; 1356 :         }
; 1357 : 
; 1358 :         return _Get_scary()->_Myhead;

  00121	8b 4d ac	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00124	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN55@NormalAtta:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 349  : 		if (itHitData != m_HitDataMap.end())

  00126	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00128	74 5e		 je	 SHORT $LN21@NormalAtta
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0012a	8d 4d c4	 lea	 ecx, DWORD PTR $T23[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 354  : 			if ((itInstance=rHittedInstanceMap.find(&rVictim)) != rHittedInstanceMap.end())

  0012d	89 75 c4	 mov	 DWORD PTR $T23[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00130	51		 push	 ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 351  : 			THittedInstanceMap & rHittedInstanceMap = itHitData->second;

  00131	83 c0 14	 add	 eax, 20			; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00134	8d 4d e4	 lea	 ecx, DWORD PTR __Loc$26[ebp]
  00137	51		 push	 ecx
  00138	8b c8		 mov	 ecx, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 351  : 			THittedInstanceMap & rHittedInstanceMap = itHitData->second;

  0013a	89 45 b4	 mov	 DWORD PTR _rHittedInstanceMap$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0013d	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00142	8b 45 ec	 mov	 eax, DWORD PTR __Loc$26[ebp+8]
  00145	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00149	75 3d		 jne	 SHORT $LN21@NormalAtta
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  0014b	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0014e	72 38		 jb	 SHORT $LN21@NormalAtta
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 354  : 			if ((itInstance=rHittedInstanceMap.find(&rVictim)) != rHittedInstanceMap.end())

  00150	8b 4d b4	 mov	 ecx, DWORD PTR _rHittedInstanceMap$1$[ebp]
  00153	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00155	74 31		 je	 SHORT $LN21@NormalAtta

; 355  : 			{
; 356  : 				if (pad->iMotionType==NRaceData::MOTION_TYPE_COMBO || itInstance->second > GetLocalTime())

  00157	8b 4d 98	 mov	 ecx, DWORD PTR _pad$1$[ebp]
  0015a	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  0015e	0f 84 de 02 00
	00		 je	 $LN2@NormalAtta
  00164	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00169	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0016c	f3 0f 11 45 c4	 movss	 DWORD PTR tv4780[ebp], xmm0
  00171	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  00176	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR tv4780[ebp]
  0017b	d9 5d b4	 fstp	 DWORD PTR tv5083[ebp]
  0017e	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR tv5083[ebp]
  00182	0f 87 ba 02 00
	00		 ja	 $LN2@NormalAtta
$LN21@NormalAtta:

; 362  : 		range_start = c_rHitData.mapHitPosition.lower_bound(motiontime-CTimer::Instance().GetElapsedSecond());

  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0018e	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00193	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00196	8b d0		 mov	 edx, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 362  : 		range_start = c_rHitData.mapHitPosition.lower_bound(motiontime-CTimer::Instance().GetElapsedSecond());

  00198	d8 ad 7c ff ff
	ff		 fsubr	 DWORD PTR _motiontime$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  0019e	89 45 9c	 mov	 DWORD PTR $T2$sroa$2472$2$[ebp], eax
  001a1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 362  : 		range_start = c_rHitData.mapHitPosition.lower_bound(motiontime-CTimer::Instance().GetElapsedSecond());

  001a4	d9 5d c4	 fstp	 DWORD PTR tv3315[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1599 :         while (!_Trynode->_Isnil) {

  001a7	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001ab	75 63		 jne	 SHORT $LN141@NormalAtta
  001ad	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR tv3315[ebp]
  001b2	8b c1		 mov	 eax, ecx
$LL140@NormalAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  001b4	0f 2f 40 10	 comiss	 xmm0, DWORD PTR [eax+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  001b8	76 05		 jbe	 SHORT $LN142@NormalAtta

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

  001ba	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1604 :             } else {

  001bd	eb 04		 jmp	 SHORT $LN143@NormalAtta
$LN142@NormalAtta:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

  001bf	8b d0		 mov	 edx, eax

; 1607 :                 _Trynode                 = _Trynode->_Left;

  001c1	8b 00		 mov	 eax, DWORD PTR [eax]
$LN143@NormalAtta:

; 1599 :         while (!_Trynode->_Isnil) {

  001c3	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001c7	74 eb		 je	 SHORT $LL140@NormalAtta
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 399  : 				for(dsit = c_DefendingSphereVector.begin(); dsit!= c_DefendingSphereVector.end();++dsit, ++index)

  001c9	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR _motiontime$[ebp]
  001d1	8b f2		 mov	 esi, edx
  001d3	8b 45 9c	 mov	 eax, DWORD PTR $T2$sroa$2472$2$[ebp]
$LL154@NormalAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  001d6	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1576 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

  001db	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  001dd	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1576 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

  001e0	89 45 c4	 mov	 DWORD PTR tv4918[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  001e3	0f 97 c0	 seta	 al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1576 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {

  001e6	84 c0		 test	 al, al
  001e8	74 04		 je	 SHORT $LN156@NormalAtta

; 1577 :                 _Result._Location._Child = _Tree_child::_Left;
; 1578 :                 _Result._Bound           = _Trynode;
; 1579 :                 _Trynode                 = _Trynode->_Left;

  001ea	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 1580 :             } else {

  001ec	eb 03		 jmp	 SHORT $LN157@NormalAtta
$LN156@NormalAtta:

; 1581 :                 _Result._Location._Child = _Tree_child::_Right;
; 1582 :                 _Trynode                 = _Trynode->_Right;

  001ee	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
$LN157@NormalAtta:

; 1573 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1574 :         while (!_Trynode->_Isnil) {

  001f1	84 c0		 test	 al, al
  001f3	89 7d 9c	 mov	 DWORD PTR $T2$sroa$2472$2$[ebp], edi
  001f6	8b c7		 mov	 eax, edi
  001f8	0f 44 45 c4	 cmove	 eax, DWORD PTR tv4918[ebp]
  001fc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00200	89 45 9c	 mov	 DWORD PTR $T2$sroa$2472$2$[ebp], eax
  00203	74 d1		 je	 SHORT $LL154@NormalAtta
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 399  : 				for(dsit = c_DefendingSphereVector.begin(); dsit!= c_DefendingSphereVector.end();++dsit, ++index)

  00205	8b 7d 94	 mov	 edi, DWORD PTR _itorHitData$1$[ebp]
  00208	89 55 80	 mov	 DWORD PTR $T1$sroa$2473$3$[ebp], edx
  0020b	89 75 84	 mov	 DWORD PTR _range_start$2$[ebp], esi
  0020e	eb 0b		 jmp	 SHORT $LN155@NormalAtta
$LN141@NormalAtta:

; 362  : 		range_start = c_rHitData.mapHitPosition.lower_bound(motiontime-CTimer::Instance().GetElapsedSecond());

  00210	8b f2		 mov	 esi, edx
  00212	89 55 84	 mov	 DWORD PTR _range_start$2$[ebp], edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1572 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00215	89 45 9c	 mov	 DWORD PTR $T2$sroa$2472$2$[ebp], eax
  00218	89 45 80	 mov	 DWORD PTR $T1$sroa$2473$3$[ebp], eax
$LN155@NormalAtta:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 364  : 		float c = cosf(D3DXToRadian(GetRotation()));

  0021b	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0021e	e8 00 00 00 00	 call	 ?GetRotation@CActorInstance@@QAEMXZ ; CActorInstance::GetRotation
  00223	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c8efa35
  00229	d9 5d c4	 fstp	 DWORD PTR __X$[ebp]
  0022c	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR __X$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  00231	0f 5a c0	 cvtps2pd xmm0, xmm0
  00234	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 365  : 		float s = sinf(D3DXToRadian(GetRotation()));

  00239	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  0023c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00240	f3 0f 11 45 b4	 movss	 DWORD PTR _c$1$[ebp], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 365  : 		float s = sinf(D3DXToRadian(GetRotation()));

  00245	e8 00 00 00 00	 call	 ?GetRotation@CActorInstance@@QAEMXZ ; CActorInstance::GetRotation
  0024a	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c8efa35
  00250	d9 5d c4	 fstp	 DWORD PTR __X$[ebp]
  00253	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR __X$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  00258	0f 5a c0	 cvtps2pd xmm0, xmm0
  0025b	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 367  : 		for(;range_start!=range_end;++range_start)

  00260	8b 45 9c	 mov	 eax, DWORD PTR $T2$sroa$2472$2$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  00263	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00267	f3 0f 11 45 c4	 movss	 DWORD PTR _s$1$[ebp], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 367  : 		for(;range_start!=range_end;++range_start)

  0026c	39 45 80	 cmp	 DWORD PTR $T1$sroa$2473$3$[ebp], eax
  0026f	0f 84 ca 01 00
	00		 je	 $LN720@NormalAtta
$LL175@NormalAtta:

; 368  : 		{
; 369  : 			const CDynamicSphereInstance& dsiSrc=range_start->second;
; 370  : 
; 371  : 			CDynamicSphereInstance dsi;
; 372  : 			dsi = dsiSrc;

  00275	0f 10 46 14	 movups	 xmm0, XMMWORD PTR [esi+20]

; 376  : 				v3SrcDir*=__GetReachScale();

  00279	8b 7d b8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  0027c	8b cf		 mov	 ecx, edi
  0027e	c7 45 e0 00 00
	a0 41		 mov	 DWORD PTR _dsi$25[ebp+24], 1101004800 ; 41a00000H
  00285	0f 11 45 c8	 movups	 XMMWORD PTR _dsi$25[ebp], xmm0
  00289	f3 0f 7e 46 24	 movq	 xmm0, QWORD PTR [esi+36]
  0028e	66 0f d6 45 d8	 movq	 QWORD PTR _dsi$25[ebp+16], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00293	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  00298	f3 0f 5c 46 20	 subss	 xmm0, DWORD PTR [esi+32]
  0029d	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _fx$1$[ebp], xmm0
  002a5	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  002aa	f3 0f 5c 46 24	 subss	 xmm0, DWORD PTR [esi+36]
  002af	f3 0f 11 45 90	 movss	 DWORD PTR _fy$1$[ebp], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 376  : 				v3SrcDir*=__GetReachScale();

  002b4	e8 00 00 00 00	 call	 ?__GetReachScale@CActorInstance@@IAEMXZ ; CActorInstance::__GetReachScale
  002b9	f3 0f 10 9d 78
	ff ff ff	 movss	 xmm3, DWORD PTR _fx$1$[ebp]

; 382  : 				v3Dst += GetPosition();

  002c1	8b cf		 mov	 ecx, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 222  :     x *= f;

  002c3	f3 0f 10 55 90	 movss	 xmm2, DWORD PTR _fy$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 376  : 				v3SrcDir*=__GetReachScale();

  002c8	d9 5d 80	 fstp	 DWORD PTR tv273[ebp]
  002cb	f3 0f 59 5d 80	 mulss	 xmm3, DWORD PTR tv273[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 222  :     x *= f;

  002d0	f3 0f 59 55 80	 mulss	 xmm2, DWORD PTR tv273[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  002d5	f3 0f 58 5e 20	 addss	 xmm3, DWORD PTR [esi+32]
  002da	f3 0f 58 56 24	 addss	 xmm2, DWORD PTR [esi+36]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 380  : 				v3Dst.x = v3Src.x * c - v3Src.y * s;

  002df	0f 28 cb	 movaps	 xmm1, xmm3

; 381  : 				v3Dst.y = v3Src.x * s + v3Src.y * c;

  002e2	f3 0f 59 5d c4	 mulss	 xmm3, DWORD PTR _s$1$[ebp]
  002e7	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _c$1$[ebp]
  002ec	0f 28 c2	 movaps	 xmm0, xmm2
  002ef	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _s$1$[ebp]
  002f4	f3 0f 59 55 b4	 mulss	 xmm2, DWORD PTR _c$1$[ebp]
  002f9	f3 0f 5c c8	 subss	 xmm1, xmm0
  002fd	f3 0f 58 da	 addss	 xmm3, xmm2
  00301	f3 0f 11 4d c8	 movss	 DWORD PTR _dsi$25[ebp], xmm1
  00306	f3 0f 11 5d cc	 movss	 DWORD PTR _dsi$25[ebp+4], xmm3

; 382  : 				v3Dst += GetPosition();

  0030b	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00310	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _dsi$25[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 389  : 				v3Dst += GetPosition();

  00315	8b cf		 mov	 ecx, edi
  00317	f3 0f 10 5e 20	 movss	 xmm3, DWORD PTR [esi+32]
  0031c	f3 0f 10 56 24	 movss	 xmm2, DWORD PTR [esi+36]
  00321	0f 28 cb	 movaps	 xmm1, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00324	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 387  : 				v3Dst.x = v3Src.x * c - v3Src.y * s;

  00328	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _c$1$[ebp]

; 388  : 				v3Dst.y = v3Src.x * s + v3Src.y * c;

  0032d	f3 0f 59 5d c4	 mulss	 xmm3, DWORD PTR _s$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00332	f3 0f 11 45 c8	 movss	 DWORD PTR _dsi$25[ebp], xmm0

; 205  :     y += v.y;

  00337	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _dsi$25[ebp+4]
  0033c	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00341	f3 0f 11 45 cc	 movss	 DWORD PTR _dsi$25[ebp+4], xmm0

; 206  :     z += v.z;

  00346	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _dsi$25[ebp+8]
  0034b	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00350	f3 0f 11 45 d0	 movss	 DWORD PTR _dsi$25[ebp+8], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 387  : 				v3Dst.x = v3Src.x * c - v3Src.y * s;

  00355	0f 28 c2	 movaps	 xmm0, xmm2
  00358	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _s$1$[ebp]

; 388  : 				v3Dst.y = v3Src.x * s + v3Src.y * c;

  0035d	f3 0f 59 55 b4	 mulss	 xmm2, DWORD PTR _c$1$[ebp]
  00362	f3 0f 5c c8	 subss	 xmm1, xmm0
  00366	f3 0f 58 d3	 addss	 xmm2, xmm3
  0036a	f3 0f 11 4d d4	 movss	 DWORD PTR _dsi$25[ebp+12], xmm1
  0036f	f3 0f 11 55 d8	 movss	 DWORD PTR _dsi$25[ebp+16], xmm2

; 389  : 				v3Dst += GetPosition();

  00374	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00379	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _dsi$25[ebp+12]
  0037e	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00382	f3 0f 11 45 d4	 movss	 DWORD PTR _dsi$25[ebp+12], xmm0

; 205  :     y += v.y;

  00387	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _dsi$25[ebp+16]
  0038c	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00391	f3 0f 11 45 d8	 movss	 DWORD PTR _dsi$25[ebp+16], xmm0

; 206  :     z += v.z;

  00396	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dsi$25[ebp+20]
  0039b	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  003a0	8b 45 bc	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
  003a3	8b 80 fc 17 00
	00		 mov	 eax, DWORD PTR [eax+6140]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  003a9	f3 0f 11 45 dc	 movss	 DWORD PTR _dsi$25[ebp+20], xmm0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  003ae	8b 38		 mov	 edi, DWORD PTR [eax]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 394  : 			for(cpit = rVictim.m_DefendingPointInstanceList.begin(); cpit!=rVictim.m_DefendingPointInstanceList.end();++cpit)

  003b0	3b f8		 cmp	 edi, eax
  003b2	74 39		 je	 SHORT $LN5@NormalAtta
  003b4	8b 45 bc	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
$LL220@NormalAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  003b7	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 399  : 				for(dsit = c_DefendingSphereVector.begin(); dsit!= c_DefendingSphereVector.end();++dsit, ++index)

  003ba	3b 77 1c	 cmp	 esi, DWORD PTR [edi+28]
  003bd	74 21		 je	 SHORT $LN8@NormalAtta
  003bf	90		 npad	 1
$LL13@NormalAtta:

; 400  : 				{
; 401  : 					const CDynamicSphereInstance& sub = *dsit;
; 402  : 					if (DetectCollisionDynamicZCylinderVSDynamicZCylinder(dsi, sub))

  003c0	8d 45 c8	 lea	 eax, DWORD PTR _dsi$25[ebp]
  003c3	56		 push	 esi
  003c4	50		 push	 eax
  003c5	e8 00 00 00 00	 call	 ?DetectCollisionDynamicZCylinderVSDynamicZCylinder@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicZCylinderVSDynamicZCylinder
  003ca	83 c4 08	 add	 esp, 8
  003cd	84 c0		 test	 al, al
  003cf	0f 85 87 00 00
	00		 jne	 $LN674@NormalAtta
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  003d5	83 c6 1c	 add	 esi, 28			; 0000001cH

; 150  :         return _Ptr == _Right._Ptr;

  003d8	3b 77 1c	 cmp	 esi, DWORD PTR [edi+28]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 399  : 				for(dsit = c_DefendingSphereVector.begin(); dsit!= c_DefendingSphereVector.end();++dsit, ++index)

  003db	75 e3		 jne	 SHORT $LL13@NormalAtta
  003dd	8b 45 bc	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
$LN8@NormalAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  003e0	8b 3f		 mov	 edi, DWORD PTR [edi]

; 198  :         return this->_Ptr == _Right._Ptr;

  003e2	3b b8 fc 17 00
	00		 cmp	 edi, DWORD PTR [eax+6140]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 394  : 			for(cpit = rVictim.m_DefendingPointInstanceList.begin(); cpit!=rVictim.m_DefendingPointInstanceList.end();++cpit)

  003e8	75 cd		 jne	 SHORT $LL220@NormalAtta
  003ea	8b 75 84	 mov	 esi, DWORD PTR _range_start$2$[ebp]
$LN5@NormalAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  003ed	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003f0	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  003f4	74 21		 je	 SHORT $LN174@NormalAtta

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  003f6	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  003f9	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  003fd	75 11		 jne	 SHORT $LN719@NormalAtta
  003ff	90		 npad	 1
$LL172@NormalAtta:
  00400	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00403	75 0b		 jne	 SHORT $LN719@NormalAtta

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00405	8b f0		 mov	 esi, eax
  00407	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0040a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0040e	74 f0		 je	 SHORT $LL172@NormalAtta
$LN719@NormalAtta:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  00410	8b f0		 mov	 esi, eax
  00412	89 75 84	 mov	 DWORD PTR _range_start$2$[ebp], esi

; 58   :         } else {

  00415	eb 1c		 jmp	 SHORT $LN179@NormalAtta
$LN174@NormalAtta:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00417	8b f0		 mov	 esi, eax
  00419	89 75 84	 mov	 DWORD PTR _range_start$2$[ebp], esi

; 451  :         while (!_Pnode->_Left->_Isnil) {

  0041c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0041e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00422	75 0f		 jne	 SHORT $LN179@NormalAtta
$LL178@NormalAtta:
  00424	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00426	8b f1		 mov	 esi, ecx
  00428	89 75 84	 mov	 DWORD PTR _range_start$2$[ebp], esi
  0042b	8b c8		 mov	 ecx, eax
  0042d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00431	74 f1		 je	 SHORT $LL178@NormalAtta
$LN179@NormalAtta:

; 233  :         return this->_Ptr == _Right._Ptr;

  00433	3b 75 9c	 cmp	 esi, DWORD PTR $T2$sroa$2472$2$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 367  : 		for(;range_start!=range_end;++range_start)

  00436	0f 85 39 fe ff
	ff		 jne	 $LL175@NormalAtta
  0043c	8b 7d 94	 mov	 edi, DWORD PTR _itorHitData$1$[ebp]
$LN720@NormalAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  0043f	8b 75 bc	 mov	 esi, DWORD PTR _rVictim$GSCopy$1$[ebp]
$LN2@NormalAtta:

; 150  :         return _Ptr == _Right._Ptr;

  00442	8b 45 98	 mov	 eax, DWORD PTR _pad$1$[ebp]

; 74   :         ++_Ptr;

  00445	83 c7 2c	 add	 edi, 44			; 0000002cH
  00448	89 7d 94	 mov	 DWORD PTR _itorHitData$1$[ebp], edi

; 150  :         return _Ptr == _Right._Ptr;

  0044b	3b 78 20	 cmp	 edi, DWORD PTR [eax+32]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 344  : 	for (; itorHitData != pad->HitDataContainer.end(); ++itorHitData)

  0044e	0f 84 3b fc ff
	ff		 je	 $LN718@NormalAtta
  00454	8b 45 ac	 mov	 eax, DWORD PTR _this$1$[ebp]
  00457	e9 9a fc ff ff	 jmp	 $LL44@NormalAtta
$LN674@NormalAtta:

; 404  : 						THitDataMap::iterator itHitData = m_HitDataMap.find(&c_rHitData);

  0045c	8b 7d 94	 mov	 edi, DWORD PTR _itorHitData$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0045f	8d 45 90	 lea	 eax, DWORD PTR $T16[ebp]
  00462	8b 4d ac	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00465	50		 push	 eax
  00466	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR __Loc$6[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 404  : 						THitDataMap::iterator itHitData = m_HitDataMap.find(&c_rHitData);

  0046c	89 7d 90	 mov	 DWORD PTR $T16[ebp], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0046f	50		 push	 eax
  00470	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00475	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR __Loc$6[ebp+8]
  0047b	89 45 c4	 mov	 DWORD PTR $T21[ebp], eax
  0047e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00482	75 05		 jne	 SHORT $LN258@NormalAtta
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00484	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00487	73 08		 jae	 SHORT $LN257@NormalAtta
$LN258@NormalAtta:

; 1358 :         return _Get_scary()->_Myhead;

  00489	8b 45 ac	 mov	 eax, DWORD PTR _this$1$[ebp]
  0048c	8b 00		 mov	 eax, DWORD PTR [eax]
  0048e	89 45 c4	 mov	 DWORD PTR $T21[ebp], eax
$LN257@NormalAtta:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 405  : 						if (itHitData == m_HitDataMap.end())

  00491	8b 4d ac	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00494	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00496	0f 85 83 02 00
	00		 jne	 $LN24@NormalAtta
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0049c	6a 18		 push	 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0049e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _HittedInstanceMap$19[ebp], 0
  004a5	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _HittedInstanceMap$19[ebp+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  004ac	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  004b1	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  004b4	89 00		 mov	 DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  004b6	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  004b9	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

  004bc	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  004c2	89 45 b0	 mov	 DWORD PTR _HittedInstanceMap$19[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 408  : 							HittedInstanceMap.insert(make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  004c5	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  004c8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  004cf	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  004d4	8b 45 98	 mov	 eax, DWORD PTR _pad$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  004d7	8d 4d b0	 lea	 ecx, DWORD PTR _HittedInstanceMap$19[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 408  : 							HittedInstanceMap.insert(make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  004da	d8 40 08	 fadd	 DWORD PTR [eax+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  004dd	8b 45 bc	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
  004e0	89 45 8c	 mov	 DWORD PTR $T14[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  004e3	8d 45 8c	 lea	 eax, DWORD PTR $T14[ebp]
  004e6	50		 push	 eax
  004e7	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 408  : 							HittedInstanceMap.insert(make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  004ed	d9 5d c4	 fstp	 DWORD PTR $T22[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  004f0	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR $T22[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  004f5	50		 push	 eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  004f6	f3 0f 11 45 90	 movss	 DWORD PTR $T14[ebp+4], xmm0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  004fb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>
  00500	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00503	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00507	66 0f d6 45 a0	 movq	 QWORD PTR __Loc$17[ebp], xmm0

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0050c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00510	75 08		 jne	 SHORT $LN328@NormalAtta
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00512	8b 45 bc	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
  00515	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00518	73 68		 jae	 SHORT $LN402@NormalAtta
$LN328@NormalAtta:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  0051a	81 7d b4 aa aa
	aa 0a		 cmp	 DWORD PTR _HittedInstanceMap$19[ebp+4], 178956970 ; 0aaaaaaaH
  00521	0f 84 27 03 00
	00		 je	 $LN724@NormalAtta

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00527	8b 45 b0	 mov	 eax, DWORD PTR _HittedInstanceMap$19[ebp]
  0052a	89 45 90	 mov	 DWORD PTR __Myhead$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0052d	8d 45 b0	 lea	 eax, DWORD PTR _HittedInstanceMap$19[ebp]
  00530	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T8[ebp], eax

; 79   :         return ::operator new(_Bytes);

  00536	6a 18		 push	 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00538	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0053c	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00546	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  0054b	8b 4d bc	 mov	 ecx, DWORD PTR _rVictim$GSCopy$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0054e	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00551	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR $T22[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 785  :     }

  00556	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  0055a	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0055d	8b 4d 90	 mov	 ecx, DWORD PTR __Myhead$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00560	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00565	50		 push	 eax
  00566	ff 75 a4	 push	 DWORD PTR __Loc$17[ebp+4]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00569	89 08		 mov	 DWORD PTR [eax], ecx

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0056b	ff 75 a0	 push	 DWORD PTR __Loc$17[ebp]

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0056e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00571	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00574	8d 4d b0	 lea	 ecx, DWORD PTR _HittedInstanceMap$19[ebp]

; 809  :         this->_Ptr->_Color = _Red;

  00577	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0057d	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Insert_node
$LN402@NormalAtta:

; 765  :     _Tree_head_scoped_ptr(_Alnode& _Al_, _Scary_val& _Mycont_) : _Al(_Al_), _Mycont(_STD addressof(_Mycont_)) {

  00582	8d 45 a4	 lea	 eax, DWORD PTR $T18[ebp+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00585	89 7d a0	 mov	 DWORD PTR $T18[ebp], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00588	6a 18		 push	 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0058a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T18[ebp+4], 0
  00591	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T18[ebp+8], 0

; 765  :     _Tree_head_scoped_ptr(_Alnode& _Al_, _Scary_val& _Mycont_) : _Al(_Al_), _Mycont(_STD addressof(_Mycont_)) {

  00598	89 45 8c	 mov	 DWORD PTR __Sentinel$12[ebp], eax
  0059b	89 45 90	 mov	 DWORD PTR __Sentinel$12[ebp+4], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0059e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  005a3	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  005a6	89 00		 mov	 DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  005a8	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  005ab	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

  005ae	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 766  :         _Mycont->_Myhead = _Alnode::value_type::_Buyheadnode(_Al);

  005b4	89 45 a4	 mov	 DWORD PTR $T18[ebp+4], eax

; 1624 :         _Scary->_Myhead->_Parent = _Copy_nodes(_Right_scary->_Myhead->_Parent, _Scary->_Myhead, _Movefl);

  005b7	ff 75 90	 push	 DWORD PTR $T15[ebp]
  005ba	8d 4d a4	 lea	 ecx, DWORD PTR $T18[ebp+4]

; 899  :         _Tree_head_scoped_ptr<_Alnode, _Scary_val> _Sentinel(_Getal(), *_Scary);

  005bd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1624 :         _Scary->_Myhead->_Parent = _Copy_nodes(_Right_scary->_Myhead->_Parent, _Scary->_Myhead, _Movefl);

  005c1	50		 push	 eax
  005c2	8b 45 b0	 mov	 eax, DWORD PTR _HittedInstanceMap$19[ebp]
  005c5	ff 70 04	 push	 DWORD PTR [eax+4]
  005c8	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Copy_tag>
  005cd	8b 4d a4	 mov	 ecx, DWORD PTR $T18[ebp+4]
  005d0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1625 :         _Scary->_Mysize          = _Right_scary->_Mysize;
; 1626 :         if (!_Scary->_Myhead->_Parent->_Isnil) { // nonempty tree, look for new smallest and largest

  005d3	8b 7d a4	 mov	 edi, DWORD PTR $T18[ebp+4]
  005d6	8b 45 b4	 mov	 eax, DWORD PTR _HittedInstanceMap$19[ebp+4]
  005d9	89 45 a8	 mov	 DWORD PTR $T18[ebp+8], eax
  005dc	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  005df	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  005e3	75 3b		 jne	 SHORT $LN452@NormalAtta

; 451  :         while (!_Pnode->_Left->_Isnil) {

  005e5	8b 0a		 mov	 ecx, DWORD PTR [edx]
  005e7	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  005eb	75 0f		 jne	 SHORT $LN457@NormalAtta
  005ed	0f 1f 00	 npad	 3
$LL456@NormalAtta:
  005f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  005f2	8b d1		 mov	 edx, ecx
  005f4	8b c8		 mov	 ecx, eax
  005f6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  005fa	74 f4		 je	 SHORT $LL456@NormalAtta
$LN457@NormalAtta:

; 1627 :             _Scary->_Myhead->_Left  = _Scary_val::_Min(_Scary->_Myhead->_Parent);

  005fc	89 17		 mov	 DWORD PTR [edi], edx

; 1628 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

  005fe	8b 55 a4	 mov	 edx, DWORD PTR $T18[ebp+4]
  00601	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 443  :         while (!_Pnode->_Right->_Isnil) {

  00604	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00607	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0060b	75 0e		 jne	 SHORT $LN461@NormalAtta
  0060d	0f 1f 00	 npad	 3
$LL460@NormalAtta:

; 444  :             _Pnode = _Pnode->_Right;

  00610	8b c8		 mov	 ecx, eax
  00612	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00615	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00619	74 f5		 je	 SHORT $LL460@NormalAtta
$LN461@NormalAtta:

; 1628 :             _Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);

  0061b	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1629 :         } else { // empty tree, just tidy head pointers

  0061e	eb 08		 jmp	 SHORT $LN453@NormalAtta
$LN452@NormalAtta:

; 1630 :             _Scary->_Myhead->_Left  = _Scary->_Myhead;

  00620	89 3f		 mov	 DWORD PTR [edi], edi

; 1631 :             _Scary->_Myhead->_Right = _Scary->_Myhead;

  00622	8b 45 a4	 mov	 eax, DWORD PTR $T18[ebp+4]
  00625	89 40 08	 mov	 DWORD PTR [eax+8], eax
$LN453@NormalAtta:

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  00628	8b 7d ac	 mov	 edi, DWORD PTR _this$1$[ebp]
  0062b	8d 45 a0	 lea	 eax, DWORD PTR $T18[ebp]
  0062e	50		 push	 eax
  0062f	8d 45 88	 lea	 eax, DWORD PTR $T11[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 410  : 							m_HitDataMap.insert(make_pair(&c_rHitData, HittedInstanceMap));

  00632	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  00636	50		 push	 eax
  00637	8b cf		 mov	 ecx, edi
  00639	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PBUSHitData@NRaceData@@@?$_Tree@V?$_Tmap_traits@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@U?$less@PBUSHitData@NRaceData@@@4@V?$allocator@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@1@ABQBUSHitData@NRaceData@@@Z ; std::_Tree<std::_Tmap_traits<NRaceData::SHitData const *,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >,std::less<NRaceData::SHitData const *>,std::allocator<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > >,0> >::_Find_lower_bound<NRaceData::SHitData const *>
  0063e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00641	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00645	66 0f d6 85 68
	ff ff ff	 movq	 QWORD PTR __Loc$4[ebp], xmm0

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0064d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00651	75 0c		 jne	 SHORT $LN479@NormalAtta
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00653	8b 45 a0	 mov	 eax, DWORD PTR $T18[ebp]
  00656	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00659	0f 83 a1 00 00
	00		 jae	 $LN608@NormalAtta
$LN479@NormalAtta:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  0065f	81 7f 04 49 92
	24 09		 cmp	 DWORD PTR [edi+4], 153391689 ; 09249249H
  00666	0f 84 e7 01 00
	00		 je	 $LN725@NormalAtta

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0066c	8b 07		 mov	 eax, DWORD PTR [edi]
  0066e	89 45 90	 mov	 DWORD PTR __Myhead$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00671	89 7d c0	 mov	 DWORD PTR $T20[ebp], edi

; 79   :         return ::operator new(_Bytes);

  00674	6a 1c		 push	 28			; 0000001cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00676	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0067a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00681	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 966  :         _Ptr = _Al.allocate(1);

  00686	89 45 c4	 mov	 DWORD PTR $T20[ebp+4], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00689	8b 4d a0	 mov	 ecx, DWORD PTR $T18[ebp]
  0068c	8d 78 14	 lea	 edi, DWORD PTR [eax+20]
  0068f	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00692	89 bd 78 ff ff
	ff		 mov	 DWORD PTR _this$10[ebp], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00698	6a 18		 push	 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 804  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  0069a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0069e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  006a4	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  006ab	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  006b0	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  006b3	89 00		 mov	 DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  006b5	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  006b8	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

  006bb	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  006c1	89 07		 mov	 DWORD PTR [edi], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

  006c3	8b 4d a4	 mov	 ecx, DWORD PTR $T18[ebp+4]
  006c6	89 0f		 mov	 DWORD PTR [edi], ecx

; 102  :     _Right   = _STD move(_Tmp);

  006c8	89 45 a4	 mov	 DWORD PTR $T18[ebp+4], eax

; 100  :     _Ty _Tmp = _STD move(_Left);

  006cb	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 101  :     _Left    = _STD move(_Right);

  006ce	8b 45 a8	 mov	 eax, DWORD PTR $T18[ebp+8]
  006d1	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  006d4	8b 45 c4	 mov	 eax, DWORD PTR $T20[ebp+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 102  :     _Right   = _STD move(_Tmp);

  006d7	89 4d a8	 mov	 DWORD PTR $T18[ebp+8], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  006da	8b 4d 90	 mov	 ecx, DWORD PTR __Myhead$1$[ebp]

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  006dd	50		 push	 eax
  006de	ff b5 6c ff ff
	ff		 push	 DWORD PTR __Loc$4[ebp+4]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  006e4	89 08		 mov	 DWORD PTR [eax], ecx

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  006e6	ff b5 68 ff ff
	ff		 push	 DWORD PTR __Loc$4[ebp]

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  006ec	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  006ef	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  006f2	8b 4d ac	 mov	 ecx, DWORD PTR _this$1$[ebp]

; 809  :         this->_Ptr->_Color = _Red;

  006f5	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  006fb	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > > > >::_Insert_node
$LN608@NormalAtta:

; 1086 :         _Scary->_Erase_head(_Getal());

  00700	8d 45 a4	 lea	 eax, DWORD PTR $T18[ebp+4]
  00703	50		 push	 eax
  00704	8b c8		 mov	 ecx, eax
  00706	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
  0070b	8d 45 b0	 lea	 eax, DWORD PTR _HittedInstanceMap$19[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 413  : 						}

  0070e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1086 :         _Scary->_Erase_head(_Getal());

  00715	50		 push	 eax
  00716	8b c8		 mov	 ecx, eax
  00718	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 413  : 						}

  0071d	eb 53		 jmp	 SHORT $LN29@NormalAtta
$LN24@NormalAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0071f	8b 45 bc	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 416  : 							itHitData->second.insert(make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  00722	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00725	89 45 8c	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 416  : 							itHitData->second.insert(make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  00728	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  0072d	8b 45 98	 mov	 eax, DWORD PTR _pad$1$[ebp]
  00730	8b 7d c4	 mov	 edi, DWORD PTR $T21[ebp]
  00733	d8 40 08	 fadd	 DWORD PTR [eax+8]
  00736	8d 45 8c	 lea	 eax, DWORD PTR $T13[ebp]
  00739	50		 push	 eax
  0073a	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00740	50		 push	 eax
  00741	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00744	d9 5d 90	 fstp	 DWORD PTR $T13[ebp+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 416  : 							itHitData->second.insert(make_pair(&rVictim, GetLocalTime()+pad->fInvisibleTime));

  00747	e8 00 00 00 00	 call	 ??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>

; 417  : 							//itHitData->second.insert(make_pair(&rVictim, GetLocalTime()+HIT_COOL_TIME));
; 418  : 
; 419  : 							//Tracef(" ----------- Next Hit : %d\n", itHitData->second.size());
; 420  : 
; 421  : 							int iCurrentHitCount = itHitData->second.size();
; 422  : 							if (NRaceData::MOTION_TYPE_COMBO == pad->iMotionType || NRaceData::MOTION_TYPE_NORMAL == pad->iMotionType)

  0074c	8b 55 98	 mov	 edx, DWORD PTR _pad$1$[ebp]
  0074f	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00752	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00755	83 f9 02	 cmp	 ecx, 2
  00758	74 0f		 je	 SHORT $LN28@NormalAtta
  0075a	83 f9 01	 cmp	 ecx, 1
  0075d	74 0a		 je	 SHORT $LN28@NormalAtta

; 425  : 								{
; 426  : 									//Tracef(" Type NORMAL :: Overflow - Can't process, skip\n");
; 427  : 									return FALSE;
; 428  : 								}
; 429  : 							}
; 430  : 							else
; 431  : 							{
; 432  : 								if (iCurrentHitCount > pad->iHitLimitCount)

  0075f	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  00762	7e 0e		 jle	 SHORT $LN29@NormalAtta

; 399  : 				for(dsit = c_DefendingSphereVector.begin(); dsit!= c_DefendingSphereVector.end();++dsit, ++index)

  00764	e9 26 f9 ff ff	 jmp	 $LN718@NormalAtta
$LN28@NormalAtta:

; 423  : 							{
; 424  : 								if (iCurrentHitCount > 16)

  00769	83 f8 10	 cmp	 eax, 16			; 00000010H
  0076c	0f 8f 1d f9 ff
	ff		 jg	 $LN718@NormalAtta
$LN29@NormalAtta:

; 433  : 								{
; 434  : 									//Tracef(" Type SKILL :: Overflow - Can't process, skip\n");
; 435  : 									return FALSE;
; 436  : 								}
; 437  : 							}
; 438  : 						}
; 439  : 
; 440  : 						D3DXVECTOR3 v3HitPosition = (GetPosition() + rVictim.GetPosition()) *0.5f;

  00772	8b 4d bc	 mov	 ecx, DWORD PTR _rVictim$GSCopy$1$[ebp]
  00775	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
  0077a	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0077d	8b f8		 mov	 edi, eax
  0077f	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00784	f3 0f 10 5f 04	 movss	 xmm3, DWORD PTR [edi+4]
  00789	f3 0f 10 67 08	 movss	 xmm4, DWORD PTR [edi+8]
  0078e	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00792	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00797	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0079c	f3 0f 58 d9	 addss	 xmm3, xmm1
  007a0	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]

; 182  :     z = fz;

  007a4	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f000000

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007ac	f3 0f 58 e2	 addss	 xmm4, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 443  : 						if (IS_HUGE_RACE(rVictim.GetRace()))

  007b0	8b 7d bc	 mov	 edi, DWORD PTR _rVictim$GSCopy$1$[ebp]
  007b3	8b cf		 mov	 ecx, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  007b5	f3 0f 59 dd	 mulss	 xmm3, xmm5

; 182  :     z = fz;

  007b9	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 181  :     y = fy;

  007bd	f3 0f 59 e5	 mulss	 xmm4, xmm5
  007c1	f3 0f 11 45 e4	 movss	 DWORD PTR _v3HitPosition$27[ebp], xmm0
  007c6	f3 0f 11 5d e8	 movss	 DWORD PTR _v3HitPosition$27[ebp+4], xmm3

; 182  :     z = fz;

  007cb	f3 0f 11 65 ec	 movss	 DWORD PTR _v3HitPosition$27[ebp+8], xmm4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 443  : 						if (IS_HUGE_RACE(rVictim.GetRace()))

  007d0	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  007d5	50		 push	 eax
  007d6	e8 00 00 00 00	 call	 ?IS_HUGE_RACE@@YA_NI@Z	; IS_HUGE_RACE
  007db	83 c4 04	 add	 esp, 4
  007de	84 c0		 test	 al, al
  007e0	74 47		 je	 SHORT $LN31@NormalAtta

; 445  : 							v3HitPosition = (GetPosition() + sub.v3Position) * 0.5f;

  007e2	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  007e5	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007ea	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]

; 182  :     z = fz;

  007ee	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007f6	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  007fb	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00800	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00804	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00809	f3 0f 58 56 08	 addss	 xmm2, DWORD PTR [esi+8]

; 182  :     z = fz;

  0080e	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 180  :     x = fx;

  00812	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 181  :     y = fy;

  00816	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 445  : 							v3HitPosition = (GetPosition() + sub.v3Position) * 0.5f;

  0081a	f3 0f 11 45 e4	 movss	 DWORD PTR _v3HitPosition$27[ebp], xmm0
  0081f	f3 0f 11 4d e8	 movss	 DWORD PTR _v3HitPosition$27[ebp+4], xmm1
  00824	f3 0f 11 55 ec	 movss	 DWORD PTR _v3HitPosition$27[ebp+8], xmm2
$LN31@NormalAtta:

; 446  : 						}
; 447  : 
; 448  : 						__ProcessDataAttackSuccess(*pad, rVictim, v3HitPosition, m_kCurMotNode.uSkill);

  00829	8b 45 b8	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0082c	8d 4d e4	 lea	 ecx, DWORD PTR _v3HitPosition$27[ebp]
  0082f	6a 01		 push	 1
  00831	ff b0 ec 17 00
	00		 push	 DWORD PTR [eax+6124]
  00837	51		 push	 ecx
  00838	8b 4d 98	 mov	 ecx, DWORD PTR _pad$1$[ebp]
  0083b	57		 push	 edi
  0083c	51		 push	 ecx
  0083d	8b c8		 mov	 ecx, eax
  0083f	e8 00 00 00 00	 call	 ?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z ; CActorInstance::__ProcessDataAttackSuccess

; 449  : 						return TRUE;

  00844	b8 01 00 00 00	 mov	 eax, 1
  00849	e9 43 f8 ff ff	 jmp	 $LN1@NormalAtta
$LN724@NormalAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

  0084e	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN725@NormalAtta:
  00853	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN722@NormalAtta:
  00858	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR _HittedInstanceMap$19[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@XZ
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$5:
  00008	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$11:
  00013	8d 4d 8c	 lea	 ecx, DWORD PTR __Sentinel$12[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$_Tree_head_scoped_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@2@@std@@QAE@XZ ; std::_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >::~_Tree_head_scoped_ptr<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > > >
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$1:
  0001b	8d 4d a0	 lea	 ecx, DWORD PTR $T18[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$pair@PBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@QAE@XZ
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$14:
  00023	8d 4d c0	 lea	 ecx, DWORD PTR $T20[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<NRaceData::SHitData const * const,std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > > >,void *> > >
__unwindfunclet$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z$13:
  0002b	8d 4d c0	 lea	 ecx, DWORD PTR $T20[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QBUSHitData@NRaceData@@V?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
  00036	cc		 int	 3
  00037	cc		 int	 3
__ehhandler$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z:
  00038	90		 npad	 1
  00039	90		 npad	 1
  0003a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00041	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00051	33 c8		 xor	 ecx, eax
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z
  0005d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z ENDP	; CActorInstance::__NormalAttackProcess
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__SplashAttackProcess@CActorInstance@@QAEHAAV1@@Z
_TEXT	SEGMENT
__Loc$1 = -36						; size = 12
$T2 = -32						; size = 8
$T3 = -24						; size = 8
$T4 = -20						; size = 4
_v3HitPosition$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_rVictim$ = 8						; size = 4
?__SplashAttackProcess@CActorInstance@@QAEHAAV1@@Z PROC	; CActorInstance::__SplashAttackProcess, COMDAT
; _this$ = ecx

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _rVictim$[ebp]
  00016	8b f1		 mov	 esi, ecx

; 267  : 	D3DXVECTOR3 v3Distance(rVictim.m_x - m_x, rVictim.m_z - m_z, rVictim.m_z - m_z);

  00018	f3 0f 10 8f 24
	19 00 00	 movss	 xmm1, DWORD PTR [edi+6436]
  00020	f3 0f 5c 8e 24
	19 00 00	 subss	 xmm1, DWORD PTR [esi+6436]
  00028	f3 0f 10 87 2c
	19 00 00	 movss	 xmm0, DWORD PTR [edi+6444]
  00030	f3 0f 5c 86 2c
	19 00 00	 subss	 xmm0, DWORD PTR [esi+6444]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00038	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 182  :     z = fz;

  0003c	f3 0f 59 c0	 mulss	 xmm0, xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00040	f3 0f 58 c8	 addss	 xmm1, xmm0
  00044	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 269  : 	if (fDistance >= 1000.0f*1000.0f)

  00048	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@49742400
  0004f	0f 83 f4 00 00
	00		 jae	 $LN8@SplashAtta

; 270  : 		return FALSE;
; 271  : 
; 272  : 	// Check Distance
; 273  : 	if (!__IsInSplashTime())

  00055	e8 00 00 00 00	 call	 ?__IsInSplashTime@CActorInstance@@IAE_NXZ ; CActorInstance::__IsInSplashTime
  0005a	84 c0		 test	 al, al
  0005c	0f 84 e7 00 00
	00		 je	 $LN8@SplashAtta

; 277  : 	const NRaceData::TAttackData & c_rAttackData = c_pAttackingEvent->AttackData;

  00062	8b 9e 14 18 00
	00		 mov	 ebx, DWORD PTR [esi+6164]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00068	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  0006b	51		 push	 ecx
  0006c	8d 4d dc	 lea	 ecx, DWORD PTR __Loc$1[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 280  : 	if (rHittedInstanceMap.end() != rHittedInstanceMap.find(&rVictim))

  0006f	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00072	51		 push	 ecx
  00073	8d 8e 24 18 00
	00		 lea	 ecx, DWORD PTR [esi+6180]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 277  : 	const NRaceData::TAttackData & c_rAttackData = c_pAttackingEvent->AttackData;

  00079	83 c3 28	 add	 ebx, 40			; 00000028H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0007c	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVCActorInstance@@@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@ABQAVCActorInstance@@@Z ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Find_lower_bound<CActorInstance *>

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00081	8b 45 e4	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00084	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00088	75 11		 jne	 SHORT $LN4@SplashAtta
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  0008a	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0008d	72 0c		 jb	 SHORT $LN4@SplashAtta

; 233  :         return this->_Ptr == _Right._Ptr;

  0008f	39 86 24 18 00
	00		 cmp	 DWORD PTR [esi+6180], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 280  : 	if (rHittedInstanceMap.end() != rHittedInstanceMap.find(&rVictim))

  00095	0f 85 ae 00 00
	00		 jne	 $LN8@SplashAtta
$LN4@SplashAtta:

; 281  : 	{
; 282  : 		return FALSE;
; 283  : 	}
; 284  : 
; 285  : 	if (NRaceData::ATTACK_TYPE_SNIPE == c_rAttackData.iAttackType)

  0009b	83 3b 01	 cmp	 DWORD PTR [ebx], 1
  0009e	75 1b		 jne	 SHORT $LN7@SplashAtta

; 286  : 	{
; 287  : 		if (__IsFlyTargetPC())

  000a0	8b ce		 mov	 ecx, esi
  000a2	e8 00 00 00 00	 call	 ?__IsFlyTargetPC@CActorInstance@@IAE_NXZ ; CActorInstance::__IsFlyTargetPC
  000a7	84 c0		 test	 al, al
  000a9	74 10		 je	 SHORT $LN7@SplashAtta

; 288  : 			if (!__IsSameFlyTarget(&rVictim))

  000ab	57		 push	 edi
  000ac	8b ce		 mov	 ecx, esi
  000ae	e8 00 00 00 00	 call	 ?__IsSameFlyTarget@CActorInstance@@IAE_NPAV1@@Z ; CActorInstance::__IsSameFlyTarget
  000b3	84 c0		 test	 al, al
  000b5	0f 84 8e 00 00
	00		 je	 $LN8@SplashAtta
$LN7@SplashAtta:

; 289  : 				return FALSE;
; 290  : 
; 291  : 
; 292  : 	}
; 293  : 
; 294  : 	D3DXVECTOR3 v3HitPosition;
; 295  : 	if (rVictim.CheckCollisionDetection(&m_kSplashArea.SphereInstanceVector, &v3HitPosition))

  000bb	8d 45 f0	 lea	 eax, DWORD PTR _v3HitPosition$[ebp]
  000be	8b cf		 mov	 ecx, edi
  000c0	50		 push	 eax
  000c1	8d 86 18 18 00
	00		 lea	 eax, DWORD PTR [esi+6168]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?CheckCollisionDetection@CActorInstance@@QAE_NPBV?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@PAUD3DXVECTOR3@@@Z ; CActorInstance::CheckCollisionDetection
  000cd	84 c0		 test	 al, al
  000cf	74 78		 je	 SHORT $LN8@SplashAtta

; 297  : 		rHittedInstanceMap.insert(make_pair(&rVictim, GetLocalTime()+c_rAttackData.fInvisibleTime));

  000d1	8b ce		 mov	 ecx, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000d3	89 7d e8	 mov	 DWORD PTR $T3[ebp], edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 297  : 		rHittedInstanceMap.insert(make_pair(&rVictim, GetLocalTime()+c_rAttackData.fInvisibleTime));

  000d6	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  000db	d8 43 08	 fadd	 DWORD PTR [ebx+8]
  000de	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000e1	50		 push	 eax
  000e2	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
  000e5	50		 push	 eax
  000e6	8d 8e 24 18 00
	00		 lea	 ecx, DWORD PTR [esi+6180]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000ec	d9 5d ec	 fstp	 DWORD PTR $T3[ebp+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 297  : 		rHittedInstanceMap.insert(make_pair(&rVictim, GetLocalTime()+c_rAttackData.fInvisibleTime));

  000ef	e8 00 00 00 00	 call	 ??$insert@U?$pair@PAVCActorInstance@@M@std@@$0A@@?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@PAVCActorInstance@@M@1@@Z ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::insert<std::pair<CActorInstance *,float>,0>

; 298  : 
; 299  : 		int iCurrentHitCount = rHittedInstanceMap.size();
; 300  : 		int iMaxHitCount = (0 == c_rAttackData.iHitLimitCount ? 16 : c_rAttackData.iHitLimitCount);

  000f4	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000f7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000fc	85 c0		 test	 eax, eax
  000fe	0f 44 c1	 cmove	 eax, ecx

; 301  : 		//Tracef(" ------------------- Splash Hit : %d\n", iCurrentHitCount);
; 302  : 
; 303  : 		if (iCurrentHitCount > iMaxHitCount)

  00101	39 86 28 18 00
	00		 cmp	 DWORD PTR [esi+6184], eax
  00107	7f 40		 jg	 SHORT $LN8@SplashAtta

; 304  : 		{
; 305  : 			//Tracef(" ------------------- OVER FLOW :: Splash Hit Count : %d\n", iCurrentHitCount);
; 306  : 			return FALSE;
; 307  : 		}
; 308  : 
; 309  : 		NEW_SetAtkPixelPosition(NEW_GetCurPixelPositionRef());

  00109	8b ce		 mov	 ecx, esi
  0010b	e8 00 00 00 00	 call	 ?NEW_GetCurPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ ; CActorInstance::NEW_GetCurPixelPositionRef
  00110	50		 push	 eax
  00111	8b ce		 mov	 ecx, esi
  00113	e8 00 00 00 00	 call	 ?NEW_SetAtkPixelPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@@Z ; CActorInstance::NEW_SetAtkPixelPosition

; 310  : 		__ProcessDataAttackSuccess(c_rAttackData, rVictim, v3HitPosition, m_kSplashArea.uSkill, m_kSplashArea.isEnableHitProcess);

  00118	ff b6 04 18 00
	00		 push	 DWORD PTR [esi+6148]
  0011e	8d 45 f0	 lea	 eax, DWORD PTR _v3HitPosition$[ebp]
  00121	8b ce		 mov	 ecx, esi
  00123	ff b6 08 18 00
	00		 push	 DWORD PTR [esi+6152]
  00129	50		 push	 eax
  0012a	57		 push	 edi
  0012b	53		 push	 ebx
  0012c	e8 00 00 00 00	 call	 ?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z ; CActorInstance::__ProcessDataAttackSuccess
  00131	5f		 pop	 edi

; 311  : 		return TRUE;
; 312  : 	}
; 313  : 
; 314  : 	return FALSE;
; 315  : }

  00132	5e		 pop	 esi
  00133	b8 01 00 00 00	 mov	 eax, 1
  00138	5b		 pop	 ebx
  00139	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013c	33 cd		 xor	 ecx, ebp
  0013e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 04 00	 ret	 4
$LN8@SplashAtta:
  00149	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014c	33 c0		 xor	 eax, eax
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	33 cd		 xor	 ecx, ebp
  00152	5b		 pop	 ebx
  00153	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 04 00	 ret	 4
?__SplashAttackProcess@CActorInstance@@QAEHAAV1@@Z ENDP	; CActorInstance::__SplashAttackProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?AttackingProcess@CActorInstance@@QAEHAAV1@@Z
_TEXT	SEGMENT
_rVictim$ = 8						; size = 4
?AttackingProcess@CActorInstance@@QAEHAAV1@@Z PROC	; CActorInstance::AttackingProcess, COMDAT
; _this$ = ecx

; 460  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 461  : 	if (rVictim.__isInvisible())

  00004	8b 75 08	 mov	 esi, DWORD PTR _rVictim$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?__isInvisible@CActorInstance@@IAE_NXZ ; CActorInstance::__isInvisible
  00011	84 c0		 test	 al, al
  00013	75 23		 jne	 SHORT $LN4@AttackingP

; 462  : 		return FALSE;
; 463  : 
; 464  : 	if (__SplashAttackProcess(rVictim))

  00015	56		 push	 esi
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ?__SplashAttackProcess@CActorInstance@@QAEHAAV1@@Z ; CActorInstance::__SplashAttackProcess
  0001d	85 c0		 test	 eax, eax
  0001f	75 0c		 jne	 SHORT $LN6@AttackingP

; 465  : 		return TRUE;
; 466  : 
; 467  : 	if (__NormalAttackProcess(rVictim))

  00021	56		 push	 esi
  00022	8b cf		 mov	 ecx, edi
  00024	e8 00 00 00 00	 call	 ?__NormalAttackProcess@CActorInstance@@QAEHAAV1@@Z ; CActorInstance::__NormalAttackProcess
  00029	85 c0		 test	 eax, eax
  0002b	74 0b		 je	 SHORT $LN4@AttackingP
$LN6@AttackingP:
  0002d	5f		 pop	 edi

; 468  : 		return TRUE;

  0002e	b8 01 00 00 00	 mov	 eax, 1

; 471  : }

  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN4@AttackingP:
  00038	5f		 pop	 edi

; 469  : 
; 470  : 	return FALSE;

  00039	33 c0		 xor	 eax, eax

; 471  : }

  0003b	5e		 pop	 esi
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?AttackingProcess@CActorInstance@@QAEHAAV1@@Z ENDP	; CActorInstance::AttackingProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?TestPhysicsBlendingCollision@CActorInstance@@QAEHAAV1@@Z
_TEXT	SEGMENT
_prevPosition$4$ = -112					; size = 8
_prevLastPosition$1$ = -104				; size = 8
_prevPosition$ = -96					; size = 12
_c_rVictimSphere$1$ = -84				; size = 4
_rVictim$GSCopy$1$ = -80				; size = 4
_prevPosition$1$ = -76					; size = 4
_prevPosition$2$ = -72					; size = 4
_prevPosition$3$ = -68					; size = 4
_prevPosition$5$ = -64					; size = 4
_prevLastPosition$2$ = -60				; size = 4
_this$GSCopy$1$ = -56					; size = 4
$T1 = -52						; size = 4
_i$1$ = -48						; size = 4
_c_rMainSphere$1$ = -44					; size = 4
tv1081 = -40						; size = 4
_i$1$ = -36						; size = 4
_j$1$ = -32						; size = 4
_kPDelta$ = -28						; size = 12
_kPPosLast$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_rVictim$ = 8						; size = 4
?TestPhysicsBlendingCollision@CActorInstance@@QAEHAAV1@@Z PROC ; CActorInstance::TestPhysicsBlendingCollision, COMDAT
; _this$ = ecx

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _rVictim$[ebp]
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx
  00018	89 75 b0	 mov	 DWORD PTR _rVictim$GSCopy$1$[ebp], esi

; 475  : 	if (rVictim.IsDead())

  0001b	8b ce		 mov	 ecx, esi
  0001d	89 7d c8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00020	e8 00 00 00 00	 call	 ?IsDead@CActorInstance@@QAEHXZ ; CActorInstance::IsDead
  00025	85 c0		 test	 eax, eax
  00027	0f 85 6f 02 00
	00		 jne	 $LN132@TestPhysic

; 476  : 		return FALSE;
; 477  : 
; 478  : 	TPixelPosition kPPosLast;
; 479  : 	GetBlendingPosition( &kPPosLast );

  0002d	8d 45 f0	 lea	 eax, DWORD PTR _kPPosLast$[ebp]
  00030	8b cf		 mov	 ecx, edi
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?GetBlendingPosition@CActorInstance@@QAEXPAUD3DXVECTOR3@@@Z ; CActorInstance::GetBlendingPosition

; 480  : 
; 481  : 	D3DXVECTOR3 v3Distance = D3DXVECTOR3(rVictim.m_x - kPPosLast.x, rVictim.m_y - kPPosLast.y, rVictim.m_z - kPPosLast.z);

  00038	f3 0f 10 8e 24
	19 00 00	 movss	 xmm1, DWORD PTR [esi+6436]
  00040	f3 0f 10 96 28
	19 00 00	 movss	 xmm2, DWORD PTR [esi+6440]
  00048	f3 0f 5c 55 f4	 subss	 xmm2, DWORD PTR _kPPosLast$[ebp+4]
  0004d	f3 0f 5c 4d f0	 subss	 xmm1, DWORD PTR _kPPosLast$[ebp]
  00052	f3 0f 10 86 2c
	19 00 00	 movss	 xmm0, DWORD PTR [esi+6444]
  0005a	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _kPPosLast$[ebp+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0005f	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00063	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00067	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0006b	f3 0f 58 d1	 addss	 xmm2, xmm1
  0006f	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 483  : 	if (fDistance > 800.0f*800.0f)

  00073	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@491c4000
  0007a	0f 87 1c 02 00
	00		 ja	 $LN132@TestPhysic

; 484  : 		return FALSE;
; 485  : 
; 486  : 	TCollisionPointInstanceList * pMainList;
; 487  : 	TCollisionPointInstanceList * pVictimList;
; 488  : 	if (isAttacking() || IsWaiting())

  00080	8b cf		 mov	 ecx, edi
  00082	e8 00 00 00 00	 call	 ?isAttacking@CActorInstance@@QAEHXZ ; CActorInstance::isAttacking
  00087	85 c0		 test	 eax, eax
  00089	75 10		 jne	 SHORT $LN21@TestPhysic
  0008b	8b cf		 mov	 ecx, edi
  0008d	e8 00 00 00 00	 call	 ?IsWaiting@CActorInstance@@QAEHXZ ; CActorInstance::IsWaiting

; 492  : 	}
; 493  : 	else
; 494  : 	{
; 495  : 		pMainList = &m_BodyPointInstanceList;
; 496  : 		pVictimList = &rVictim.m_BodyPointInstanceList;

  00092	bb f4 17 00 00	 mov	 ebx, 6132		; 000017f4H
  00097	85 c0		 test	 eax, eax
  00099	74 05		 je	 SHORT $LN136@TestPhysic
$LN21@TestPhysic:

; 489  : 	{
; 490  : 		pMainList = &m_DefendingPointInstanceList;
; 491  : 		pVictimList = &rVictim.m_DefendingPointInstanceList;

  0009b	bb fc 17 00 00	 mov	 ebx, 6140		; 000017fcH
$LN136@TestPhysic:

; 497  : 	}
; 498  : 
; 499  : 	TPixelPosition kPDelta;
; 500  : 	m_PhysicsObject.GetLastPosition(&kPDelta);

  000a0	8d 45 e4	 lea	 eax, DWORD PTR _kPDelta$[ebp]
  000a3	89 5d cc	 mov	 DWORD PTR $T1[ebp], ebx
  000a6	50		 push	 eax
  000a7	8d 8f 3c 18 00
	00		 lea	 ecx, DWORD PTR [edi+6204]
  000ad	e8 00 00 00 00	 call	 ?GetLastPosition@CPhysicsObject@@QAEXPAUD3DXVECTOR3@@@Z ; CPhysicsObject::GetLastPosition
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  000b2	8b 0c 1f	 mov	 ecx, DWORD PTR [edi+ebx]
  000b5	8b 04 1e	 mov	 eax, DWORD PTR [esi+ebx]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000b8	8b 39		 mov	 edi, DWORD PTR [ecx]
  000ba	8b 30		 mov	 esi, DWORD PTR [eax]
  000bc	3b f9		 cmp	 edi, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 507  : 	for (; itorMain != pMainList->end(); ++itorMain)

  000be	0f 84 d8 01 00
	00		 je	 $LN132@TestPhysic
  000c4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@42480000
  000cc	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000cf	90		 npad	 1
$LL47@TestPhysic:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 198  :         return this->_Ptr == _Right._Ptr;

  000d0	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 509  : 		for (; itorVictim != pVictimList->end(); ++itorVictim)

  000d2	0f 84 b9 01 00
	00		 je	 $LN2@TestPhysic
$LL63@TestPhysic:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000d8	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 514  : 			for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  000db	33 c9		 xor	 ecx, ecx
  000dd	89 4d dc	 mov	 DWORD PTR _i$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000e0	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000e5	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  000e8	2b cb		 sub	 ecx, ebx
  000ea	f7 e9		 imul	 ecx
  000ec	03 d1		 add	 edx, ecx
  000ee	c1 fa 04	 sar	 edx, 4
  000f1	8b c2		 mov	 eax, edx
  000f3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f6	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 514  : 			for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  000f8	0f 84 7d 01 00
	00		 je	 $LN5@TestPhysic
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

  000fe	33 c0		 xor	 eax, eax
  00100	89 45 d8	 mov	 DWORD PTR tv1081[ebp], eax
$LL10@TestPhysic:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 518  : 				prevLastPosition = c_rMainSphere.v3LastPosition;

  00103	f3 0f 7e 44 03
	0c		 movq	 xmm0, QWORD PTR [ebx+eax+12]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00109	03 d8		 add	 ebx, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 518  : 				prevLastPosition = c_rMainSphere.v3LastPosition;

  0010b	66 0f d6 45 98	 movq	 QWORD PTR _prevLastPosition$1$[ebp], xmm0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00110	89 5d d4	 mov	 DWORD PTR _c_rMainSphere$1$[ebp], ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 519  : 				prevPosition	 = c_rMainSphere.v3Position;

  00113	f3 0f 7e 03	 movq	 xmm0, QWORD PTR [ebx]
  00117	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0011a	66 0f d6 45 a0	 movq	 QWORD PTR _prevPosition$[ebp], xmm0

; 520  : 
; 521  : 				c_rMainSphere.v3LastPosition = prevPosition;
; 522  : 
; 523  : 				for( int i = 1; i <= nSubCheckCount; ++ i )

  0011f	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _prevPosition$[ebp+4]
  00124	f3 0f 10 65 a0	 movss	 xmm4, DWORD PTR _prevPosition$[ebp]
  00129	66 0f d6 45 90	 movq	 QWORD PTR _prevPosition$4$[ebp], xmm0
  0012e	f3 0f 7e c0	 movq	 xmm0, xmm0
  00132	89 45 c4	 mov	 DWORD PTR _prevLastPosition$2$[ebp], eax
  00135	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00138	66 0f d6 43 0c	 movq	 QWORD PTR [ebx+12], xmm0
  0013d	89 45 a8	 mov	 DWORD PTR _prevPosition$[ebp+8], eax
  00140	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _prevPosition$[ebp+8]
  00145	89 45 c0	 mov	 DWORD PTR _prevPosition$5$[ebp], eax
  00148	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  0014b	b8 01 00 00 00	 mov	 eax, 1
  00150	89 45 d0	 mov	 DWORD PTR _i$1$[ebp], eax
  00153	f3 0f 11 45 b8	 movss	 DWORD PTR _prevPosition$2$[ebp], xmm0
  00158	f3 0f 11 4d b4	 movss	 DWORD PTR _prevPosition$1$[ebp], xmm1
  0015d	f3 0f 11 65 bc	 movss	 DWORD PTR _prevPosition$3$[ebp], xmm4
$LL13@TestPhysic:

; 527  : 					for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  00162	66 0f 6e d0	 movd	 xmm2, eax
  00166	33 c9		 xor	 ecx, ecx
  00168	0f 5b d2	 cvtdq2ps xmm2, xmm2
  0016b	89 4d e0	 mov	 DWORD PTR _j$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0016e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 525  : 					c_rMainSphere.v3Position = prevPosition + (float)(i/(float)nSubCheckCount) * kPDelta;

  00173	f3 0f 5e d3	 divss	 xmm2, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00177	f3 0f 10 5d e8	 movss	 xmm3, DWORD PTR _kPDelta$[ebp+4]
  0017c	f3 0f 59 da	 mulss	 xmm3, xmm2

; 180  :     x = fx;

  00180	f3 0f 58 d9	 addss	 xmm3, xmm1

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00184	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _kPDelta$[ebp+8]
  00189	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 181  :     y = fy;

  0018d	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00191	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _kPDelta$[ebp]
  00196	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 182  :     z = fz;

  0019a	f3 0f 58 c4	 addss	 xmm0, xmm4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 525  : 					c_rMainSphere.v3Position = prevPosition + (float)(i/(float)nSubCheckCount) * kPDelta;

  0019e	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  001a2	f3 0f 11 5b 04	 movss	 DWORD PTR [ebx+4], xmm3
  001a7	f3 0f 11 4b 08	 movss	 DWORD PTR [ebx+8], xmm1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001ac	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  001af	2b 4e 18	 sub	 ecx, DWORD PTR [esi+24]
  001b2	f7 e9		 imul	 ecx
  001b4	03 d1		 add	 edx, ecx
  001b6	c1 fa 04	 sar	 edx, 4
  001b9	8b c2		 mov	 eax, edx
  001bb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001be	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 527  : 					for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001c0	74 4a		 je	 SHORT $LN11@TestPhysic
  001c2	33 db		 xor	 ebx, ebx
$LL16@TestPhysic:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  001c4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  001c7	03 c3		 add	 eax, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 531  : 						if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, c_rVictimSphere))

  001c9	50		 push	 eax
  001ca	ff 75 d4	 push	 DWORD PTR _c_rMainSphere$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  001cd	89 45 ac	 mov	 DWORD PTR _c_rVictimSphere$1$[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 531  : 						if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, c_rVictimSphere))

  001d0	e8 00 00 00 00	 call	 ?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicSphereVSDynamicSphere
  001d5	83 c4 08	 add	 esp, 8
  001d8	84 c0		 test	 al, al
  001da	0f 85 d1 00 00
	00		 jne	 $LN109@TestPhysic
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001e0	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  001e3	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001e8	2b 4e 18	 sub	 ecx, DWORD PTR [esi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 527  : 					for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001eb	83 c3 1c	 add	 ebx, 28			; 0000001cH
  001ee	ff 45 e0	 inc	 DWORD PTR _j$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001f1	f7 e9		 imul	 ecx
  001f3	03 d1		 add	 edx, ecx
  001f5	c1 fa 04	 sar	 edx, 4
  001f8	8b c2		 mov	 eax, edx
  001fa	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001fd	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 527  : 					for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001ff	39 45 e0	 cmp	 DWORD PTR _j$1$[ebp], eax
  00202	72 c0		 jb	 SHORT $LL16@TestPhysic
  00204	f3 0f 10 65 bc	 movss	 xmm4, DWORD PTR _prevPosition$3$[ebp]
  00209	8b 5d d4	 mov	 ebx, DWORD PTR _c_rMainSphere$1$[ebp]
$LN11@TestPhysic:

; 520  : 
; 521  : 				c_rMainSphere.v3LastPosition = prevPosition;
; 522  : 
; 523  : 				for( int i = 1; i <= nSubCheckCount; ++ i )

  0020c	8b 45 d0	 mov	 eax, DWORD PTR _i$1$[ebp]
  0020f	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _prevPosition$2$[ebp]
  00214	40		 inc	 eax
  00215	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _prevPosition$1$[ebp]
  0021a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@42480000
  00222	89 45 d0	 mov	 DWORD PTR _i$1$[ebp], eax
  00225	83 f8 32	 cmp	 eax, 50			; 00000032H
  00228	0f 8e 34 ff ff
	ff		 jle	 $LL13@TestPhysic

; 537  : 
; 538  : 							return bResult;
; 539  : 						}
; 540  : 					}
; 541  : 				}
; 542  : 
; 543  : 				//restore
; 544  : 				c_rMainSphere.v3LastPosition = prevLastPosition;

  0022e	f3 0f 7e 45 98	 movq	 xmm0, QWORD PTR _prevLastPosition$1$[ebp]
  00233	8b 45 c4	 mov	 eax, DWORD PTR _prevLastPosition$2$[ebp]
  00236	ff 45 dc	 inc	 DWORD PTR _i$1$[ebp]
  00239	83 45 d8 1c	 add	 DWORD PTR tv1081[ebp], 28 ; 0000001cH
  0023d	66 0f d6 43 0c	 movq	 QWORD PTR [ebx+12], xmm0

; 545  : 				c_rMainSphere.v3Position	 = prevPosition;

  00242	f3 0f 7e 45 90	 movq	 xmm0, QWORD PTR _prevPosition$4$[ebp]
  00247	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  0024a	8b 45 c0	 mov	 eax, DWORD PTR _prevPosition$5$[ebp]
  0024d	66 0f d6 03	 movq	 QWORD PTR [ebx], xmm0
  00251	89 43 08	 mov	 DWORD PTR [ebx+8], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00254	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00259	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  0025c	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  0025f	2b cb		 sub	 ecx, ebx
  00261	f7 e9		 imul	 ecx
  00263	03 d1		 add	 edx, ecx
  00265	c1 fa 04	 sar	 edx, 4
  00268	8b c2		 mov	 eax, edx
  0026a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0026d	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 514  : 			for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  0026f	39 45 dc	 cmp	 DWORD PTR _i$1$[ebp], eax
  00272	8b 45 d8	 mov	 eax, DWORD PTR tv1081[ebp]
  00275	0f 82 88 fe ff
	ff		 jb	 $LL10@TestPhysic
$LN5@TestPhysic:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0027b	8b 5d cc	 mov	 ebx, DWORD PTR $T1[ebp]
  0027e	8b 45 b0	 mov	 eax, DWORD PTR _rVictim$GSCopy$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00281	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00283	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]

; 198  :         return this->_Ptr == _Right._Ptr;

  00286	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 509  : 		for (; itorVictim != pVictimList->end(); ++itorVictim)

  00288	0f 85 4a fe ff
	ff		 jne	 $LL63@TestPhysic
  0028e	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@TestPhysic:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00291	8b 3f		 mov	 edi, DWORD PTR [edi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00293	3b 3c 19	 cmp	 edi, DWORD PTR [ecx+ebx]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 507  : 	for (; itorMain != pMainList->end(); ++itorMain)

  00296	0f 85 34 fe ff
	ff		 jne	 $LL47@TestPhysic
$LN132@TestPhysic:
  0029c	5f		 pop	 edi

; 551  : }

  0029d	5e		 pop	 esi
  0029e	33 c0		 xor	 eax, eax
  002a0	5b		 pop	 ebx
  002a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a4	33 cd		 xor	 ecx, ebp
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c2 04 00	 ret	 4
$LN109@TestPhysic:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002b1	8b 4d d4	 mov	 ecx, DWORD PTR _c_rMainSphere$1$[ebp]
  002b4	8b 45 ac	 mov	 eax, DWORD PTR _c_rVictimSphere$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 535  : 							c_rMainSphere.v3LastPosition = prevLastPosition;

  002b7	f3 0f 7e 45 98	 movq	 xmm0, QWORD PTR _prevLastPosition$1$[ebp]
  002bc	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002bd	f3 0f 10 61 04	 movss	 xmm4, DWORD PTR [ecx+4]
  002c2	f3 0f 5c 60 04	 subss	 xmm4, DWORD PTR [eax+4]
  002c7	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  002cb	f3 0f 5c 10	 subss	 xmm2, DWORD PTR [eax]
  002cf	f3 0f 10 59 10	 movss	 xmm3, DWORD PTR [ecx+16]
  002d4	f3 0f 5c 58 04	 subss	 xmm3, DWORD PTR [eax+4]
  002d9	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  002de	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 535  : 							c_rMainSphere.v3LastPosition = prevLastPosition;

  002e2	8b 45 c4	 mov	 eax, DWORD PTR _prevLastPosition$2$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002e5	f3 0f 59 e4	 mulss	 xmm4, xmm4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 551  : }

  002e9	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002ea	f3 0f 59 d2	 mulss	 xmm2, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 551  : }

  002ee	5b		 pop	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002ef	f3 0f 59 c9	 mulss	 xmm1, xmm1
  002f3	f3 0f 59 db	 mulss	 xmm3, xmm3
  002f7	f3 0f 58 e2	 addss	 xmm4, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 535  : 							c_rMainSphere.v3LastPosition = prevLastPosition;

  002fb	66 0f d6 41 0c	 movq	 QWORD PTR [ecx+12], xmm0

; 536  : 							c_rMainSphere.v3Position	 = prevPosition;

  00300	f3 0f 7e 45 90	 movq	 xmm0, QWORD PTR _prevPosition$4$[ebp]
  00305	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  00308	f3 0f 58 cb	 addss	 xmm1, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 536  : 							c_rMainSphere.v3Position	 = prevPosition;

  0030c	8b 45 c0	 mov	 eax, DWORD PTR _prevPosition$5$[ebp]
  0030f	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00313	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00316	33 c0		 xor	 eax, eax

; 551  : }

  00318	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031b	0f 2f cc	 comiss	 xmm1, xmm4
  0031e	0f 93 c0	 setae	 al
  00321	33 cd		 xor	 ecx, ebp
  00323	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00328	8b e5		 mov	 esp, ebp
  0032a	5d		 pop	 ebp
  0032b	c2 04 00	 ret	 4
?TestPhysicsBlendingCollision@CActorInstance@@QAEHAAV1@@Z ENDP ; CActorInstance::TestPhysicsBlendingCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?TestActorCollision@CActorInstance@@QAEHAAV1@@Z
_TEXT	SEGMENT
_c_rVictimSphere$1$ = -72				; size = 4
_rVictim$GSCopy$1$ = -68				; size = 4
_this$GSCopy$1$ = -64					; size = 4
_j$1$ = -60						; size = 4
_i$1$ = -56						; size = 4
tv1085 = -52						; size = 4
tv1089 = -48						; size = 4
$T2 = -44						; size = 4
_stringName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rVictim$ = 8						; size = 4
?TestActorCollision@CActorInstance@@QAEHAAV1@@Z PROC	; CActorInstance::TestActorCollision, COMDAT
; _this$ = ecx

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TestActorCollision@CActorInstance@@QAEHAAV1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 c0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00030	8b 5d 08	 mov	 ebx, DWORD PTR _rVictim$[ebp]

; 556  : #ifdef ENABLE_OFFLINE_SHOP
; 557  : 	if (rVictim.GetRace() == 30000)

  00033	8b cb		 mov	 ecx, ebx
  00035	89 5d bc	 mov	 DWORD PTR _rVictim$GSCopy$1$[ebp], ebx
  00038	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  0003d	3d 30 75 00 00	 cmp	 eax, 30000		; 00007530H
  00042	0f 84 ce 02 00
	00		 je	 $LN155@TestActorC

; 558  : 		return FALSE;
; 559  : #endif
; 560  : 
; 561  : 	if (rVictim.IsDead())

  00048	8b cb		 mov	 ecx, ebx
  0004a	e8 00 00 00 00	 call	 ?IsDead@CActorInstance@@QAEHXZ ; CActorInstance::IsDead
  0004f	85 c0		 test	 eax, eax
  00051	0f 85 bf 02 00
	00		 jne	 $LN155@TestActorC

; 562  : 		return FALSE;
; 563  : 
; 564  : #ifdef REMOVE_PETS_COLLISION
; 565  : 	if (rVictim.GetRace()>=34001 && rVictim.GetRace()<=34099) // Mob Vnum

  00057	8b cb		 mov	 ecx, ebx
  00059	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  0005e	3d d1 84 00 00	 cmp	 eax, 34001		; 000084d1H
  00063	72 12		 jb	 SHORT $LN16@TestActorC
  00065	8b cb		 mov	 ecx, ebx
  00067	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  0006c	3d 33 85 00 00	 cmp	 eax, 34099		; 00008533H
  00071	0f 86 9f 02 00
	00		 jbe	 $LN155@TestActorC
$LN16@TestActorC:

; 566  : 		return false;
; 567  : #endif
; 568  : 
; 569  : #ifdef REMOVE_SHOPS_COLLISION
; 570  : 	if (rVictim.GetRace()>=30000 && rVictim.GetRace()<=30001) // Mob Vnum

  00077	8b cb		 mov	 ecx, ebx
  00079	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  0007e	3d 30 75 00 00	 cmp	 eax, 30000		; 00007530H
  00083	72 12		 jb	 SHORT $LN17@TestActorC
  00085	8b cb		 mov	 ecx, ebx
  00087	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  0008c	3d 31 75 00 00	 cmp	 eax, 30001		; 00007531H
  00091	0f 86 7f 02 00
	00		 jbe	 $LN155@TestActorC
$LN17@TestActorC:

; 571  : 		return false;
; 572  : #endif
; 573  : 
; 574  : #ifdef REMOVE_MOUNTS_COLLISION
; 575  : 	if (rVictim.GetRace()>=20101 && rVictim.GetRace()<=20299) // Mob Vnum

  00097	8b cb		 mov	 ecx, ebx
  00099	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  0009e	3d 85 4e 00 00	 cmp	 eax, 20101		; 00004e85H
  000a3	72 12		 jb	 SHORT $LN18@TestActorC
  000a5	8b cb		 mov	 ecx, ebx
  000a7	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  000ac	3d 4b 4f 00 00	 cmp	 eax, 20299		; 00004f4bH
  000b1	0f 86 5f 02 00
	00		 jbe	 $LN155@TestActorC
$LN18@TestActorC:

; 577  : #endif
; 578  : 
; 579  : #ifdef REMOVE_OX_PLAYER_COLLISION
; 580  : 	const char* strMapEventOx = "metin2_map_oxevent";
; 581  : 	std::string stringName = CPythonBackground::Instance().GetWarpMapName();

  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonBackground@@@@0PAVCPythonBackground@@A ; CSingleton<CPythonBackground>::ms_singleton
  000bd	e8 00 00 00 00	 call	 ?GetWarpMapName@CPythonBackground@@QAEPBDXZ ; CPythonBackground::GetWarpMapName
  000c2	50		 push	 eax
  000c3	8d 4d d8	 lea	 ecx, DWORD PTR _stringName$[ebp]
  000c6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 582  : 
; 583  : 	if (strMapEventOx == stringName)

  000cb	8d 45 d8	 lea	 eax, DWORD PTR _stringName$[ebp]
  000ce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d5	50		 push	 eax
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MDOIBFBP@metin2_map_oxevent@
  000db	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000e0	83 c4 08	 add	 esp, 8
  000e3	84 c0		 test	 al, al
  000e5	74 17		 je	 SHORT $LN20@TestActorC

; 584  : 	{
; 585  : 	#ifdef ENABLE_WOLFMAN_CHARACTER
; 586  : 		if (0 <= rVictim.GetRace() && rVictim.GetRace() <= 8)

  000e7	8b cb		 mov	 ecx, ebx
  000e9	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  000ee	8b cb		 mov	 ecx, ebx
  000f0	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  000f5	83 f8 08	 cmp	 eax, 8
  000f8	0f 86 94 01 00
	00		 jbe	 $LN157@TestActorC
$LN20@TestActorC:

; 587  : 	#else
; 588  : 		if (0 <= rVictim.GetRace() && rVictim.GetRace() <= 7)
; 589  : 	#endif
; 590  : 			return false;
; 591  : 	}
; 592  : #endif
; 593  : 
; 594  : 	// Check Distance
; 595  : 	D3DXVECTOR3 v3Distance = D3DXVECTOR3(rVictim.m_x - m_x, rVictim.m_y - m_y, rVictim.m_z - m_z);

  000fe	f3 0f 10 8b 24
	19 00 00	 movss	 xmm1, DWORD PTR [ebx+6436]
  00106	f3 0f 10 93 28
	19 00 00	 movss	 xmm2, DWORD PTR [ebx+6440]
  0010e	f3 0f 5c 96 28
	19 00 00	 subss	 xmm2, DWORD PTR [esi+6440]
  00116	f3 0f 5c 8e 24
	19 00 00	 subss	 xmm1, DWORD PTR [esi+6436]
  0011e	f3 0f 10 83 2c
	19 00 00	 movss	 xmm0, DWORD PTR [ebx+6444]
  00126	f3 0f 5c 86 2c
	19 00 00	 subss	 xmm0, DWORD PTR [esi+6444]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0012e	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00132	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00136	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0013a	f3 0f 58 d1	 addss	 xmm2, xmm1
  0013e	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 597  : 	if (fDistance > 800.0f*800.0f)

  00142	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@491c4000
  00149	0f 87 43 01 00
	00		 ja	 $LN157@TestActorC

; 598  : 		return FALSE;
; 599  : 
; 600  : 	TCollisionPointInstanceList * pMainList;
; 601  : 	TCollisionPointInstanceList * pVictimList;
; 602  : 	if (isAttacking() || IsWaiting())

  0014f	8b ce		 mov	 ecx, esi
  00151	e8 00 00 00 00	 call	 ?isAttacking@CActorInstance@@QAEHXZ ; CActorInstance::isAttacking
  00156	85 c0		 test	 eax, eax
  00158	75 10		 jne	 SHORT $LN24@TestActorC
  0015a	8b ce		 mov	 ecx, esi
  0015c	e8 00 00 00 00	 call	 ?IsWaiting@CActorInstance@@QAEHXZ ; CActorInstance::IsWaiting
  00161	85 c0		 test	 eax, eax

; 606  : 	}
; 607  : 	else
; 608  : 	{
; 609  : 		pMainList = &m_BodyPointInstanceList;
; 610  : 		pVictimList = &rVictim.m_BodyPointInstanceList;

  00163	b8 f4 17 00 00	 mov	 eax, 6132		; 000017f4H
  00168	74 05		 je	 SHORT $LN160@TestActorC
$LN24@TestActorC:

; 603  : 	{
; 604  : 		pMainList = &m_DefendingPointInstanceList;
; 605  : 		pVictimList = &rVictim.m_DefendingPointInstanceList;

  0016a	b8 fc 17 00 00	 mov	 eax, 6140		; 000017fcH
$LN160@TestActorC:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0016f	8b 0c 06	 mov	 ecx, DWORD PTR [esi+eax]
  00172	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00175	8b 04 03	 mov	 eax, DWORD PTR [ebx+eax]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00178	8b 39		 mov	 edi, DWORD PTR [ecx]
  0017a	8b 30		 mov	 esi, DWORD PTR [eax]
  0017c	3b f9		 cmp	 edi, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 615  : 	for (; itorMain != pMainList->end(); ++itorMain)

  0017e	0f 84 0e 01 00
	00		 je	 $LN157@TestActorC
  00184	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp]
  00187	8b 55 c0	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  0018a	66 0f 1f 44 00
	00		 npad	 6
$LL56@TestActorC:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 198  :         return this->_Ptr == _Right._Ptr;

  00190	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 616  : 	for (; itorVictim != pVictimList->end(); ++itorVictim)

  00192	0f 84 ef 00 00
	00		 je	 $LN2@TestActorC
  00198	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL72@TestActorC:

; 621  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  001a0	33 c9		 xor	 ecx, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001a2	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 621  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  001a7	89 4d c8	 mov	 DWORD PTR _i$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001aa	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  001ad	2b 4f 18	 sub	 ecx, DWORD PTR [edi+24]
  001b0	f7 e9		 imul	 ecx
  001b2	03 d1		 add	 edx, ecx
  001b4	c1 fa 04	 sar	 edx, 4
  001b7	8b c2		 mov	 eax, edx
  001b9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001bc	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 621  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  001be	0f 84 ad 00 00
	00		 je	 $LN5@TestActorC
  001c4	33 db		 xor	 ebx, ebx
  001c6	89 5d cc	 mov	 DWORD PTR tv1085[ebp], ebx
  001c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@TestActorC:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001d0	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  001d3	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001d8	2b 4e 18	 sub	 ecx, DWORD PTR [esi+24]
  001db	f7 e9		 imul	 ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 622  : 		for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001dd	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _j$1$[ebp], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001e4	03 d1		 add	 edx, ecx
  001e6	c1 fa 04	 sar	 edx, 4
  001e9	8b c2		 mov	 eax, edx
  001eb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001ee	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 622  : 		for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  001f0	74 51		 je	 SHORT $LN8@TestActorC
  001f2	33 c0		 xor	 eax, eax
  001f4	89 45 d0	 mov	 DWORD PTR tv1089[ebp], eax
$LL13@TestActorC:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1566 :         return _My_data._Myfirst[_Pos];

  001f7	03 46 18	 add	 eax, DWORD PTR [esi+24]
  001fa	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  001fd	03 5d cc	 add	 ebx, DWORD PTR tv1085[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 627  : 			if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, c_rVictimSphere))

  00200	50		 push	 eax
  00201	53		 push	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1566 :         return _My_data._Myfirst[_Pos];

  00202	89 45 b8	 mov	 DWORD PTR _c_rVictimSphere$1$[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 627  : 			if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, c_rVictimSphere))

  00205	e8 00 00 00 00	 call	 ?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicSphereVSDynamicSphere
  0020a	83 c4 08	 add	 esp, 8
  0020d	84 c0		 test	 al, al
  0020f	0f 85 a7 00 00
	00		 jne	 $LN137@TestActorC
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00215	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00218	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0021d	2b 4e 18	 sub	 ecx, DWORD PTR [esi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 622  : 		for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  00220	8b 5d c4	 mov	 ebx, DWORD PTR _j$1$[ebp]
  00223	83 45 d0 1c	 add	 DWORD PTR tv1089[ebp], 28 ; 0000001cH
  00227	43		 inc	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00228	f7 e9		 imul	 ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 622  : 		for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  0022a	89 5d c4	 mov	 DWORD PTR _j$1$[ebp], ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0022d	03 d1		 add	 edx, ecx
  0022f	c1 fa 04	 sar	 edx, 4
  00232	8b c2		 mov	 eax, edx
  00234	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00237	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 622  : 		for (DWORD j = 0; j < c_rVictimSphereVector.size(); ++j)

  00239	3b d8		 cmp	 ebx, eax
  0023b	8b 45 d0	 mov	 eax, DWORD PTR tv1089[ebp]
  0023e	72 b7		 jb	 SHORT $LL13@TestActorC
  00240	8b 5d cc	 mov	 ebx, DWORD PTR tv1085[ebp]
$LN8@TestActorC:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00243	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00246	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0024b	2b 4f 18	 sub	 ecx, DWORD PTR [edi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 621  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  0024e	83 c3 1c	 add	 ebx, 28			; 0000001cH
  00251	ff 45 c8	 inc	 DWORD PTR _i$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00254	f7 e9		 imul	 ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 621  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00256	89 5d cc	 mov	 DWORD PTR tv1085[ebp], ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00259	03 d1		 add	 edx, ecx
  0025b	c1 fa 04	 sar	 edx, 4
  0025e	8b c2		 mov	 eax, edx
  00260	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00263	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 621  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00265	39 45 c8	 cmp	 DWORD PTR _i$1$[ebp], eax
  00268	0f 82 62 ff ff
	ff		 jb	 $LL10@TestActorC
  0026e	8b 5d bc	 mov	 ebx, DWORD PTR _rVictim$GSCopy$1$[ebp]
$LN5@TestActorC:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00271	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00274	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00276	8b 04 03	 mov	 eax, DWORD PTR [ebx+eax]

; 198  :         return this->_Ptr == _Right._Ptr;

  00279	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 616  : 	for (; itorVictim != pVictimList->end(); ++itorVictim)

  0027b	0f 85 1f ff ff
	ff		 jne	 $LL72@TestActorC
  00281	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp]
  00284	8b 55 c0	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@TestActorC:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00287	8b 3f		 mov	 edi, DWORD PTR [edi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00289	3b 3c 0a	 cmp	 edi, DWORD PTR [edx+ecx]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 615  : 	for (; itorMain != pMainList->end(); ++itorMain)

  0028c	0f 85 fe fe ff
	ff		 jne	 $LL56@TestActorC
$LN157@TestActorC:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00292	33 f6		 xor	 esi, esi
$LN32@TestActorC:
  00294	8b 55 ec	 mov	 edx, DWORD PTR _stringName$[ebp+20]
  00297	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0029a	72 76		 jb	 SHORT $LN117@TestActorC
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0029c	8b 4d d8	 mov	 ecx, DWORD PTR _stringName$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0029f	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002a0	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002a2	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  002a8	72 5e		 jb	 SHORT $LN127@TestActorC

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002aa	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  002ad	83 c2 23	 add	 edx, 35			; 00000023H
  002b0	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002b2	83 c0 fc	 add	 eax, -4			; fffffffcH
  002b5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002b8	77 7c		 ja	 SHORT $LN162@TestActorC
  002ba	eb 4c		 jmp	 SHORT $LN127@TestActorC
$LN137@TestActorC:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 44   : 	return (c_rv3Source.x-c_rv3Target.x)*(c_rv3Source.x-c_rv3Target.x) + (c_rv3Source.y-c_rv3Target.y)*(c_rv3Source.y-c_rv3Target.y);

  002bc	8b 45 b8	 mov	 eax, DWORD PTR _c_rVictimSphere$1$[ebp]
  002bf	f3 0f 10 5b 04	 movss	 xmm3, DWORD PTR [ebx+4]
  002c4	f3 0f 10 23	 movss	 xmm4, DWORD PTR [ebx]
  002c8	f3 0f 10 53 10	 movss	 xmm2, DWORD PTR [ebx+16]
  002cd	f3 0f 10 4b 0c	 movss	 xmm1, DWORD PTR [ebx+12]
  002d2	f3 0f 5c 20	 subss	 xmm4, DWORD PTR [eax]
  002d6	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]
  002da	f3 0f 5c 58 04	 subss	 xmm3, DWORD PTR [eax+4]
  002df	f3 0f 5c 50 04	 subss	 xmm2, DWORD PTR [eax+4]
  002e4	f3 0f 59 e4	 mulss	 xmm4, xmm4
  002e8	f3 0f 59 db	 mulss	 xmm3, xmm3
  002ec	f3 0f 59 c9	 mulss	 xmm1, xmm1
  002f0	f3 0f 59 d2	 mulss	 xmm2, xmm2
  002f4	f3 0f 58 e3	 addss	 xmm4, xmm3
  002f8	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 629  : 				if (GetVector3Distance(c_rMainSphere.v3Position, c_rVictimSphere.v3Position) <=

  002fc	0f 2f cc	 comiss	 xmm1, xmm4
  002ff	72 91		 jb	 SHORT $LN157@TestActorC

; 630  : 					GetVector3Distance(c_rMainSphere.v3LastPosition, c_rVictimSphere.v3Position))
; 631  : 				{
; 632  : 					return TRUE;

  00301	be 01 00 00 00	 mov	 esi, 1
  00306	eb 8c		 jmp	 SHORT $LN32@TestActorC
$LN127@TestActorC:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00308	52		 push	 edx
  00309	51		 push	 ecx
  0030a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0030f	83 c4 08	 add	 esp, 8
$LN117@TestActorC:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 639  : 	return FALSE;

  00312	8b c6		 mov	 eax, esi
  00314	eb 02		 jmp	 SHORT $LN1@TestActorC
$LN155@TestActorC:

; 576  : 		return false;

  00316	33 c0		 xor	 eax, eax
$LN1@TestActorC:

; 640  : }

  00318	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0031b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00322	59		 pop	 ecx
  00323	5f		 pop	 edi
  00324	5e		 pop	 esi
  00325	5b		 pop	 ebx
  00326	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00329	33 cd		 xor	 ecx, ebp
  0032b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00330	8b e5		 mov	 esp, ebp
  00332	5d		 pop	 ebp
  00333	c2 04 00	 ret	 4
$LN162@TestActorC:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00336	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN159@TestActorC:
  0033b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TestActorCollision@CActorInstance@@QAEHAAV1@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _stringName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?TestActorCollision@CActorInstance@@QAEHAAV1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TestActorCollision@CActorInstance@@QAEHAAV1@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TestActorCollision@CActorInstance@@QAEHAAV1@@Z ENDP	; CActorInstance::TestActorCollision
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
_c_pObjectInstance$ = 8					; size = 4
?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z PROC ; CActorInstance::__TestObjectCollision, COMDAT
; _this$ = ecx

; 682  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 683  : 	if (m_pkHorse)

  00006	8b 81 10 1a 00
	00		 mov	 eax, DWORD PTR [ecx+6672]
  0000c	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	85 c0		 test	 eax, eax
  00014	74 20		 je	 SHORT $LN8@TestObject

; 684  : 	{
; 685  : 		if (m_pkHorse->__TestObjectCollision(c_pObjectInstance))

  00016	ff 75 08	 push	 DWORD PTR _c_pObjectInstance$[ebp]
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z ; CActorInstance::__TestObjectCollision
  00020	85 c0		 test	 eax, eax
  00022	0f 84 cf 00 00
	00		 je	 $LN57@TestObject
$LN48@TestObject:
  00028	5f		 pop	 edi

; 706  : 			{
; 707  : 				//const D3DXVECTOR3 & c_rv3Position = c_pObjectInstance->GetPosition();
; 708  : 				//if (GetVector3Distance(c_rMainSphere.v3Position, c_rv3Position) <
; 709  : 				//	GetVector3Distance(c_rMainSphere.v3LastPosition, c_rv3Position))
; 710  : 				{
; 711  : 					return TRUE;
; 712  : 				}
; 713  : 
; 714  : 				//return FALSE;
; 715  : 			}
; 716  : 		}
; 717  : 	}
; 718  : 
; 719  : 	return FALSE;
; 720  : }

  00029	5e		 pop	 esi
  0002a	b8 01 00 00 00	 mov	 eax, 1
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN8@TestObject:

; 686  : 			return TRUE;
; 687  : 
; 688  : 		return FALSE;
; 689  : 	}
; 690  : 
; 691  : 	if (m_canSkipCollision)

  00036	80 b9 20 1a 00
	00 00		 cmp	 BYTE PTR [ecx+6688], 0
  0003d	0f 85 b4 00 00
	00		 jne	 $LN57@TestObject

; 692  : 		return FALSE;
; 693  : 
; 694  : 	if (m_v3Movement.x == 0.0f && m_v3Movement.y == 0.0f && m_v3Movement.z == 0.0f)

  00043	f3 0f 10 81 3c
	19 00 00	 movss	 xmm0, DWORD PTR [ecx+6460]
  0004b	0f 57 c9	 xorps	 xmm1, xmm1
  0004e	0f 2e c1	 ucomiss xmm0, xmm1
  00051	9f		 lahf
  00052	f6 c4 44	 test	 ah, 68			; 00000044H
  00055	7a 22		 jp	 SHORT $LN11@TestObject
  00057	f3 0f 10 81 40
	19 00 00	 movss	 xmm0, DWORD PTR [ecx+6464]
  0005f	0f 2e c1	 ucomiss xmm0, xmm1
  00062	9f		 lahf
  00063	f6 c4 44	 test	 ah, 68			; 00000044H
  00066	7a 11		 jp	 SHORT $LN11@TestObject
  00068	f3 0f 10 81 44
	19 00 00	 movss	 xmm0, DWORD PTR [ecx+6468]
  00070	0f 2e c1	 ucomiss xmm0, xmm1
  00073	9f		 lahf
  00074	f6 c4 44	 test	 ah, 68			; 00000044H
  00077	7b 7e		 jnp	 SHORT $LN57@TestObject
$LN11@TestObject:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00079	8b 81 f4 17 00
	00		 mov	 eax, DWORD PTR [ecx+6132]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0007f	8b 30		 mov	 esi, DWORD PTR [eax]
  00081	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 698  : 	for (; itorMain != m_BodyPointInstanceList.end(); ++itorMain)

  00083	74 72		 je	 SHORT $LN57@TestObject
$LL25@TestObject:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00085	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 701  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00088	33 c9		 xor	 ecx, ecx
  0008a	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0008d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00092	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00095	2b cb		 sub	 ecx, ebx
  00097	f7 e9		 imul	 ecx
  00099	03 d1		 add	 edx, ecx
  0009b	c1 fa 04	 sar	 edx, 4
  0009e	8b c2		 mov	 eax, edx
  000a0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a3	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 701  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  000a5	74 43		 je	 SHORT $LN2@TestObject
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

  000a7	33 ff		 xor	 edi, edi
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@TestObject:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 705  : 			if (c_pObjectInstance->MovementCollisionDynamicSphere(c_rMainSphere))

  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _c_pObjectInstance$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1566 :         return _My_data._Myfirst[_Pos];

  000b3	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 705  : 			if (c_pObjectInstance->MovementCollisionDynamicSphere(c_rMainSphere))

  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::MovementCollisionDynamicSphere
  000bc	84 c0		 test	 al, al
  000be	0f 85 64 ff ff
	ff		 jne	 $LN48@TestObject
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000c4	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000c7	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000cc	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 701  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  000cf	83 c7 1c	 add	 edi, 28			; 0000001cH
  000d2	ff 45 fc	 inc	 DWORD PTR _i$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000d5	2b cb		 sub	 ecx, ebx
  000d7	f7 e9		 imul	 ecx
  000d9	03 d1		 add	 edx, ecx
  000db	c1 fa 04	 sar	 edx, 4
  000de	8b c2		 mov	 eax, edx
  000e0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e3	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 701  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  000e5	39 45 fc	 cmp	 DWORD PTR _i$1$[ebp], eax
  000e8	72 c6		 jb	 SHORT $LL7@TestObject
$LN2@TestObject:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 198  :         return this->_Ptr == _Right._Ptr;

  000ea	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  000ed	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  000ef	3b b0 f4 17 00
	00		 cmp	 esi, DWORD PTR [eax+6132]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 698  : 	for (; itorMain != m_BodyPointInstanceList.end(); ++itorMain)

  000f5	75 8e		 jne	 SHORT $LL25@TestObject
$LN57@TestObject:
  000f7	5f		 pop	 edi

; 706  : 			{
; 707  : 				//const D3DXVECTOR3 & c_rv3Position = c_pObjectInstance->GetPosition();
; 708  : 				//if (GetVector3Distance(c_rMainSphere.v3Position, c_rv3Position) <
; 709  : 				//	GetVector3Distance(c_rMainSphere.v3LastPosition, c_rv3Position))
; 710  : 				{
; 711  : 					return TRUE;
; 712  : 				}
; 713  : 
; 714  : 				//return FALSE;
; 715  : 			}
; 716  : 		}
; 717  : 	}
; 718  : 
; 719  : 	return FALSE;
; 720  : }

  000f8	5e		 pop	 esi
  000f9	33 c0		 xor	 eax, eax
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z ENDP ; CActorInstance::__TestObjectCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?BlockMovement@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
?BlockMovement@CActorInstance@@QAEXXZ PROC		; CActorInstance::BlockMovement, COMDAT
; _this$ = ecx

; 672  : 	if (m_pkHorse)

  00000	8b 81 10 1a 00
	00		 mov	 eax, DWORD PTR [ecx+6672]
  00006	85 c0		 test	 eax, eax
  00008	0f 45 c8	 cmovne	 ecx, eax

; 673  : 	{
; 674  : 		m_pkHorse->__InitializeMovement();
; 675  : 		return;
; 676  : 	}
; 677  : 
; 678  : 	__InitializeMovement();
; 679  : }

  0000b	e9 00 00 00 00	 jmp	 ?__InitializeMovement@CActorInstance@@IAEXXZ ; CActorInstance::__InitializeMovement
?BlockMovement@CActorInstance@@QAEXXZ ENDP		; CActorInstance::BlockMovement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?IsBlockObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z
_TEXT	SEGMENT
_c_rkBGObj$ = 8						; size = 4
?IsBlockObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z PROC ; CActorInstance::IsBlockObject, COMDAT
; _this$ = ecx

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 661  : 	if (this==&c_rkBGObj)

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rkBGObj$[ebp]
  00006	3b c8		 cmp	 ecx, eax
  00008	74 10		 je	 SHORT $LN5@IsBlockObj

; 662  : 		return false;
; 663  : 
; 664  : 	if (!__TestObjectCollision(&c_rkBGObj))

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z ; CActorInstance::__TestObjectCollision
  00010	85 c0		 test	 eax, eax
  00012	74 06		 je	 SHORT $LN5@IsBlockObj

; 666  : 
; 667  : 	return true;

  00014	b0 01		 mov	 al, 1

; 668  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@IsBlockObj:

; 665  : 		return false;

  0001a	32 c0		 xor	 al, al

; 668  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?IsBlockObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z ENDP ; CActorInstance::IsBlockObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?AvoidObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z
_TEXT	SEGMENT
_c_rkBGObj$ = 8						; size = 4
?AvoidObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z PROC ; CActorInstance::AvoidObject, COMDAT
; _this$ = ecx

; 643  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 644  : #ifdef __MOVIE_MODE__
; 645  : 	if (IsMovieMode())
; 646  : 		return false;
; 647  : #endif
; 648  : 
; 649  : 	if (this==&c_rkBGObj)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _c_rkBGObj$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 1a		 je	 SHORT $LN5@AvoidObjec

; 650  : 		return false;
; 651  : 
; 652  : 	if (!__TestObjectCollision(&c_rkBGObj))

  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 ?__TestObjectCollision@CActorInstance@@IAEHPBVCGraphicObjectInstance@@@Z ; CActorInstance::__TestObjectCollision
  00014	85 c0		 test	 eax, eax
  00016	74 10		 je	 SHORT $LN5@AvoidObjec

; 654  : 
; 655  : 	__AdjustCollisionMovement(&c_rkBGObj);

  00018	57		 push	 edi
  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?__AdjustCollisionMovement@CActorInstance@@IAEXPBVCGraphicObjectInstance@@@Z ; CActorInstance::__AdjustCollisionMovement
  00020	5f		 pop	 edi

; 656  : 	return true;

  00021	b0 01		 mov	 al, 1

; 657  : }

  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN5@AvoidObjec:
  00028	5f		 pop	 edi

; 653  : 		return false;

  00029	32 c0		 xor	 al, al

; 657  : }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?AvoidObject@CActorInstance@@QAE_NABVCGraphicObjectInstance@@@Z ENDP ; CActorInstance::AvoidObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?UpdateAdvancingPointInstance@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
_this$GSCopy$1$ = -228					; size = 4
_c_pCollisionData$1$ = -224				; size = 4
_v3Movement$ = -220					; size = 12
tv637 = -208						; size = 4
_j$1$ = -204						; size = 4
tv638 = -200						; size = 4
$T1 = -196						; size = 64
_matPoint$ = -132					; size = 64
_matCenter$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
?UpdateAdvancingPointInstance@CActorInstance@@QAEXXZ PROC ; CActorInstance::UpdateAdvancingPointInstance, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	56		 push	 esi
  00017	89 9d 1c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx

; 99   : 	D3DXVECTOR3 v3Movement = m_v3Movement;

  0001d	f3 0f 7e 83 3c
	19 00 00	 movq	 xmm0, QWORD PTR [ebx+6460]

; 100  : 	if (m_pkHorse)

  00025	8b 8b 10 1a 00
	00		 mov	 ecx, DWORD PTR [ebx+6672]
  0002b	8b 83 44 19 00
	00		 mov	 eax, DWORD PTR [ebx+6468]
  00031	66 0f d6 85 24
	ff ff ff	 movq	 QWORD PTR _v3Movement$[ebp], xmm0
  00039	89 85 2c ff ff
	ff		 mov	 DWORD PTR _v3Movement$[ebp+8], eax
  0003f	85 c9		 test	 ecx, ecx
  00041	74 21		 je	 SHORT $LN9@UpdateAdva

; 101  : 		v3Movement = m_pkHorse->m_v3Movement;

  00043	f3 0f 7e 81 3c
	19 00 00	 movq	 xmm0, QWORD PTR [ecx+6460]
  0004b	8b 81 44 19 00
	00		 mov	 eax, DWORD PTR [ecx+6468]
  00051	66 0f d6 85 24
	ff ff ff	 movq	 QWORD PTR _v3Movement$[ebp], xmm0
  00059	89 85 2c ff ff
	ff		 mov	 DWORD PTR _v3Movement$[ebp+8], eax

; 102  : 
; 103  : 	if (m_pkHorse)
; 104  : 		m_pkHorse->UpdateAdvancingPointInstance();

  0005f	e8 00 00 00 00	 call	 ?UpdateAdvancingPointInstance@CActorInstance@@QAEXXZ ; CActorInstance::UpdateAdvancingPointInstance
$LN9@UpdateAdva:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00064	8b 83 f4 17 00
	00		 mov	 eax, DWORD PTR [ebx+6132]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0006a	8b 30		 mov	 esi, DWORD PTR [eax]
  0006c	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 110  : 	for (; itor != m_BodyPointInstanceList.end(); ++itor)

  0006e	0f 84 44 02 00
	00		 je	 $LN3@UpdateAdva
  00074	57		 push	 edi
$LL28@UpdateAdva:

; 111  : 	{
; 112  : 		TCollisionPointInstance & rInstance = *itor;
; 113  : 
; 114  : 		if (rInstance.isAttached)

  00075	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00079	0f 84 8e 00 00
	00		 je	 $LN10@UpdateAdva
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0007f	8b 83 5c 03 00
	00		 mov	 eax, DWORD PTR [ebx+860]
  00085	8b 93 58 03 00
	00		 mov	 edx, DWORD PTR [ebx+856]
  0008b	2b c2		 sub	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 116  : 			if (rInstance.dwModelIndex>=m_LODControllerVector.size())

  0008d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00090	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 116  : 			if (rInstance.dwModelIndex>=m_LODControllerVector.size())

  00093	3b c8		 cmp	 ecx, eax
  00095	72 14		 jb	 SHORT $LN12@UpdateAdva

; 117  : 			{
; 118  : 				Tracenf("CActorInstance::UpdateAdvancingPointInstance - rInstance.dwModelIndex=%d >= m_LODControllerVector.size()=%d",

  00097	50		 push	 eax
  00098	51		 push	 ecx
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0GM@IMNFDCHL@CActorInstance?3?3UpdateAdvancing@
  0009e	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 119  : 					rInstance.dwModelIndex, m_LODControllerVector.size());
; 120  : 				continue;

  000a6	e9 fe 01 00 00	 jmp	 $LN2@UpdateAdva
$LN12@UpdateAdva:

; 121  : 			}
; 122  : 
; 123  : 			CGrannyLODController* pGrnLODController=m_LODControllerVector[rInstance.dwModelIndex];

  000ab	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]

; 124  : 			if (!pGrnLODController)

  000ae	85 c0		 test	 eax, eax
  000b0	75 13		 jne	 SHORT $LN13@UpdateAdva

; 125  : 			{
; 126  : 				Tracenf("CActorInstance::UpdateAdvancingPointInstance - m_LODControllerVector[rInstance.dwModelIndex=%d] is NULL", rInstance.dwModelIndex);

  000b2	51		 push	 ecx
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OFDOMPIB@CActorInstance?3?3UpdateAdvancing@
  000b8	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  000bd	83 c4 08	 add	 esp, 8

; 127  : 				continue;

  000c0	e9 e4 01 00 00	 jmp	 $LN2@UpdateAdva
$LN13@UpdateAdva:

; 128  : 			}
; 129  : 
; 130  : 			CGrannyModelInstance * pModelInstance = pGrnLODController->GetModelInstance();

  000c5	8b c8		 mov	 ecx, eax
  000c7	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance

; 131  : 			if (!pModelInstance)

  000cc	85 c0		 test	 eax, eax
  000ce	0f 84 d5 01 00
	00		 je	 $LN2@UpdateAdva

; 137  : 			matCenter = *(D3DXMATRIX *)pModelInstance->GetBoneMatrixPointer(rInstance.dwBoneIndex);

  000d4	ff 76 14	 push	 DWORD PTR [esi+20]
  000d7	8b c8		 mov	 ecx, eax
  000d9	e8 00 00 00 00	 call	 ?GetBoneMatrixPointer@CGrannyModelInstance@@QBEPBMH@Z ; CGrannyModelInstance::GetBoneMatrixPointer
  000de	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000e1	0f 11 45 bc	 movups	 XMMWORD PTR _matCenter$[ebp], xmm0
  000e5	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  000e9	0f 11 45 cc	 movups	 XMMWORD PTR _matCenter$[ebp+16], xmm0
  000ed	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  000f1	0f 11 45 dc	 movups	 XMMWORD PTR _matCenter$[ebp+32], xmm0
  000f5	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]

; 138  : 			matCenter *= m_worldMatrix;

  000f9	8d 43 6c	 lea	 eax, DWORD PTR [ebx+108]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  000fc	50		 push	 eax
  000fd	8d 45 bc	 lea	 eax, DWORD PTR _matCenter$[ebp]
  00100	50		 push	 eax
  00101	50		 push	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 137  : 			matCenter = *(D3DXMATRIX *)pModelInstance->GetBoneMatrixPointer(rInstance.dwBoneIndex);

  00102	0f 11 45 ec	 movups	 XMMWORD PTR _matCenter$[ebp+48], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  00106	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 139  : 		}

  0010b	eb 26		 jmp	 SHORT $LN11@UpdateAdva
$LN10@UpdateAdva:

; 140  : 		else
; 141  : 		{
; 142  : 			matCenter = m_worldMatrix;

  0010d	0f 10 43 6c	 movups	 xmm0, XMMWORD PTR [ebx+108]
  00111	0f 11 45 bc	 movups	 XMMWORD PTR _matCenter$[ebp], xmm0
  00115	0f 10 43 7c	 movups	 xmm0, XMMWORD PTR [ebx+124]
  00119	0f 11 45 cc	 movups	 XMMWORD PTR _matCenter$[ebp+16], xmm0
  0011d	0f 10 83 8c 00
	00 00		 movups	 xmm0, XMMWORD PTR [ebx+140]
  00124	0f 11 45 dc	 movups	 XMMWORD PTR _matCenter$[ebp+32], xmm0
  00128	0f 10 83 9c 00
	00 00		 movups	 xmm0, XMMWORD PTR [ebx+156]
  0012f	0f 11 45 ec	 movups	 XMMWORD PTR _matCenter$[ebp+48], xmm0
$LN11@UpdateAdva:

; 143  : 		}
; 144  : 
; 145  : 		// Update Collision Sphere
; 146  : 		const NRaceData::TCollisionData * c_pCollisionData = rInstance.c_pCollisionData;

  00133	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00136	89 85 20 ff ff
	ff		 mov	 DWORD PTR _c_pCollisionData$1$[ebp], eax

; 147  : 		if (c_pCollisionData)

  0013c	85 c0		 test	 eax, eax
  0013e	0f 84 65 01 00
	00		 je	 $LN2@UpdateAdva

; 149  : 			for (DWORD j = 0; j < c_pCollisionData->SphereDataVector.size(); ++j)

  00144	33 c9		 xor	 ecx, ecx
  00146	89 8d 34 ff ff
	ff		 mov	 DWORD PTR _j$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0014c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0014f	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  00152	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00157	f7 e9		 imul	 ecx
  00159	c1 fa 03	 sar	 edx, 3
  0015c	8b c2		 mov	 eax, edx
  0015e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00161	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 149  : 			for (DWORD j = 0; j < c_pCollisionData->SphereDataVector.size(); ++j)

  00163	0f 84 40 01 00
	00		 je	 $LN2@UpdateAdva
  00169	8b 9d 20 ff ff
	ff		 mov	 ebx, DWORD PTR _c_pCollisionData$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

  0016f	33 ff		 xor	 edi, edi
  00171	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv638[ebp], 0
  0017b	89 bd 30 ff ff
	ff		 mov	 DWORD PTR tv637[ebp], edi
$LL7@UpdateAdva:

; 1566 :         return _My_data._Myfirst[_Pos];

  00181	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00184	03 cf		 add	 ecx, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 151  : 				const TSphereData & c = c_pCollisionData->SphereDataVector[j].GetAttribute();

  00186	e8 00 00 00 00	 call	 ?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  0018b	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 154  : 				D3DXMatrixTranslation(&matPoint, c.v3Position.x, c.v3Position.y, c.v3Position.z);

  0018e	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00191	03 bd 38 ff ff
	ff		 add	 edi, DWORD PTR tv638[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 154  : 				D3DXMatrixTranslation(&matPoint, c.v3Position.x, c.v3Position.y, c.v3Position.z);

  00197	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0019c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001a2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001a7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001ad	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001b1	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _matPoint$[ebp]
  001b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  001c2	8d 45 bc	 lea	 eax, DWORD PTR _matCenter$[ebp]
  001c5	50		 push	 eax
  001c6	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _matPoint$[ebp]
  001cc	50		 push	 eax
  001cd	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 155  : 				matPoint = matPoint * matCenter;

  001d9	0f 10 85 3c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  001e0	ff 85 34 ff ff
	ff		 inc	 DWORD PTR _j$1$[ebp]
  001e6	83 85 38 ff ff
	ff 1c		 add	 DWORD PTR tv638[ebp], 28 ; 0000001cH
  001ed	0f 11 85 7c ff
	ff ff		 movups	 XMMWORD PTR _matPoint$[ebp], xmm0
  001f4	0f 10 85 4c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp+16]
  001fb	0f 11 45 8c	 movups	 XMMWORD PTR _matPoint$[ebp+16], xmm0
  001ff	0f 10 85 5c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp+32]
  00206	0f 11 45 9c	 movups	 XMMWORD PTR _matPoint$[ebp+32], xmm0
  0020a	0f 10 85 6c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp+48]
  00211	0f 11 45 ac	 movups	 XMMWORD PTR _matPoint$[ebp+48], xmm0

; 156  : 
; 157  : 				rSphereInstance.v3LastPosition.x = matPoint._41;

  00215	f3 0f 11 47 0c	 movss	 DWORD PTR [edi+12], xmm0

; 158  : 				rSphereInstance.v3LastPosition.y = matPoint._42;

  0021a	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _matPoint$[ebp+52]
  0021f	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0

; 159  : 				rSphereInstance.v3LastPosition.z = matPoint._43;

  00224	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _matPoint$[ebp+56]
  00229	f3 0f 11 47 14	 movss	 DWORD PTR [edi+20], xmm0

; 160  : 				rSphereInstance.v3Position = rSphereInstance.v3LastPosition;

  0022e	f3 0f 7e 47 0c	 movq	 xmm0, QWORD PTR [edi+12]
  00233	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00236	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0023a	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _v3Movement$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 160  : 				rSphereInstance.v3Position = rSphereInstance.v3LastPosition;

  00242	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00245	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0024a	f3 0f 58 07	 addss	 xmm0, DWORD PTR [edi]
  0024e	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 205  :     y += v.y;

  00252	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v3Movement$[ebp+4]
  0025a	f3 0f 58 47 04	 addss	 xmm0, DWORD PTR [edi+4]
  0025f	f3 0f 11 47 04	 movss	 DWORD PTR [edi+4], xmm0

; 206  :     z += v.z;

  00264	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _v3Movement$[ebp+8]
  0026c	f3 0f 58 47 08	 addss	 xmm0, DWORD PTR [edi+8]
  00271	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00276	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00279	2b 4b 08	 sub	 ecx, DWORD PTR [ebx+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 149  : 			for (DWORD j = 0; j < c_pCollisionData->SphereDataVector.size(); ++j)

  0027c	8b bd 30 ff ff
	ff		 mov	 edi, DWORD PTR tv637[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00282	f7 e9		 imul	 ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 149  : 			for (DWORD j = 0; j < c_pCollisionData->SphereDataVector.size(); ++j)

  00284	83 c7 14	 add	 edi, 20			; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00287	c1 fa 03	 sar	 edx, 3
  0028a	8b c2		 mov	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 149  : 			for (DWORD j = 0; j < c_pCollisionData->SphereDataVector.size(); ++j)

  0028c	89 bd 30 ff ff
	ff		 mov	 DWORD PTR tv637[ebp], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00292	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00295	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 149  : 			for (DWORD j = 0; j < c_pCollisionData->SphereDataVector.size(); ++j)

  00297	39 85 34 ff ff
	ff		 cmp	 DWORD PTR _j$1$[ebp], eax
  0029d	0f 82 de fe ff
	ff		 jb	 $LL7@UpdateAdva
  002a3	8b 9d 1c ff ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@UpdateAdva:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  002a9	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  002ab	3b b3 f4 17 00
	00		 cmp	 esi, DWORD PTR [ebx+6132]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 110  : 	for (; itor != m_BodyPointInstanceList.end(); ++itor)

  002b1	0f 85 be fd ff
	ff		 jne	 $LL28@UpdateAdva
  002b7	5f		 pop	 edi
$LN3@UpdateAdva:

; 161  : 				rSphereInstance.v3Position += v3Movement;
; 162  : 			}
; 163  : 		}
; 164  : 	}
; 165  : }

  002b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002bb	5e		 pop	 esi
  002bc	33 cd		 xor	 ecx, ebp
  002be	5b		 pop	 ebx
  002bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c4	8b e5		 mov	 esp, ebp
  002c6	5d		 pop	 ebp
  002c7	c3		 ret	 0
?UpdateAdvancingPointInstance@CActorInstance@@QAEXXZ ENDP ; CActorInstance::UpdateAdvancingPointInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?TestCollisionWithDynamicSphere@CActorInstance@@UAE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_i$1$ = -4						; size = 4
_dsi$ = 8						; size = 4
?TestCollisionWithDynamicSphere@CActorInstance@@UAE_NABUCDynamicSphereInstance@@@Z PROC ; CActorInstance::TestCollisionWithDynamicSphere, COMDAT
; _this$ = ecx

; 724  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b c1		 mov	 eax, ecx
  00008	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0000d	8b 80 f4 17 00
	00		 mov	 eax, DWORD PTR [eax+6132]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 724  : {

  00013	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00014	8b 30		 mov	 esi, DWORD PTR [eax]
  00016	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 726  : 	for (; itorMain != m_BodyPointInstanceList.end(); ++itorMain)

  00018	74 70		 je	 SHORT $LN53@TestCollis
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL21@TestCollis:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00020	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 729  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00023	33 c9		 xor	 ecx, ecx
  00025	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00028	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0002d	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00030	2b cb		 sub	 ecx, ebx
  00032	f7 e9		 imul	 ecx
  00034	03 d1		 add	 edx, ecx
  00036	c1 fa 04	 sar	 edx, 4
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 729  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00040	74 3b		 je	 SHORT $LN2@TestCollis
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

  00042	33 ff		 xor	 edi, edi
$LL7@TestCollis:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 733  : 			if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, dsi))

  00044	ff 75 08	 push	 DWORD PTR _dsi$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1566 :         return _My_data._Myfirst[_Pos];

  00047	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 733  : 			if (DetectCollisionDynamicSphereVSDynamicSphere(c_rMainSphere, dsi))

  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicSphereVSDynamicSphere
  00050	83 c4 08	 add	 esp, 8
  00053	84 c0		 test	 al, al
  00055	75 3e		 jne	 SHORT $LN44@TestCollis
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00057	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0005a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0005f	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 729  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00062	83 c7 1c	 add	 edi, 28			; 0000001cH
  00065	ff 45 fc	 inc	 DWORD PTR _i$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	03 d1		 add	 edx, ecx
  0006e	c1 fa 04	 sar	 edx, 4
  00071	8b c2		 mov	 eax, edx
  00073	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00076	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 729  : 		for (DWORD i = 0; i < c_rMainSphereVector.size(); ++i)

  00078	39 45 fc	 cmp	 DWORD PTR _i$1$[ebp], eax
  0007b	72 c7		 jb	 SHORT $LL7@TestCollis
$LN2@TestCollis:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 198  :         return this->_Ptr == _Right._Ptr;

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00080	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00082	3b b0 f4 17 00
	00		 cmp	 esi, DWORD PTR [eax+6132]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 726  : 	for (; itorMain != m_BodyPointInstanceList.end(); ++itorMain)

  00088	75 96		 jne	 SHORT $LL21@TestCollis
$LN53@TestCollis:
  0008a	5f		 pop	 edi

; 734  : 			{
; 735  : 				return true;
; 736  : 			}
; 737  : 		}
; 738  : 	}
; 739  : 
; 740  : 	return false;
; 741  : }

  0008b	5e		 pop	 esi
  0008c	32 c0		 xor	 al, al
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
$LN44@TestCollis:
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	b0 01		 mov	 al, 1
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?TestCollisionWithDynamicSphere@CActorInstance@@UAE_NABUCDynamicSphereInstance@@@Z ENDP ; CActorInstance::TestCollisionWithDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?CheckCollisionDetection@CActorInstance@@QAE_NPBV?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@PAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rAttackingSphere$1$ = -24				; size = 4
_this$1$ = -20						; size = 4
tv708 = -16						; size = 4
_i$1$ = -12						; size = 4
tv712 = -8						; size = 4
_j$1$ = -4						; size = 4
_c_pAttackingSphereVector$ = 8				; size = 4
_pv3Position$ = 12					; size = 4
?CheckCollisionDetection@CActorInstance@@QAE_NPBV?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@PAUD3DXVECTOR3@@@Z PROC ; CActorInstance::CheckCollisionDetection, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx

; 169  : 	if (!c_pAttackingSphereVector)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _c_pAttackingSphereVector$[ebp]
  0000a	8b c1		 mov	 eax, ecx
  0000c	89 45 ec	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	85 db		 test	 ebx, ebx
  00013	0f 84 48 01 00
	00		 je	 $LN87@CheckColli
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00019	8b 80 fc 17 00
	00		 mov	 eax, DWORD PTR [eax+6140]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0001f	8b 30		 mov	 esi, DWORD PTR [eax]
  00021	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 176  : 	for (itor = m_DefendingPointInstanceList.begin(); itor != m_DefendingPointInstanceList.end(); ++itor)

  00023	0f 84 38 01 00
	00		 je	 $LN87@CheckColli
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL31@CheckColli:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00030	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00033	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00038	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0003a	f7 e9		 imul	 ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 180  : 		for (DWORD i = 0; i < c_pAttackingSphereVector->size(); ++i)

  0003c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00043	03 d1		 add	 edx, ecx
  00045	c1 fa 04	 sar	 edx, 4
  00048	8b c2		 mov	 eax, edx
  0004a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004d	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 180  : 		for (DWORD i = 0; i < c_pAttackingSphereVector->size(); ++i)

  0004f	0f 84 fb 00 00
	00		 je	 $LN2@CheckColli
  00055	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv708[ebp], 0
  0005c	0f 1f 40 00	 npad	 4
$LL7@CheckColli:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00060	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00063	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00068	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  0006b	8b cf		 mov	 ecx, edi
  0006d	2b cb		 sub	 ecx, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 181  : 		for (DWORD j = 0; j < c_pDefendingSphereVector->size(); ++j)

  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _j$1$[ebp], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00076	f7 e9		 imul	 ecx
  00078	03 d1		 add	 edx, ecx
  0007a	c1 fa 04	 sar	 edx, 4
  0007d	8b c2		 mov	 eax, edx
  0007f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00082	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 181  : 		for (DWORD j = 0; j < c_pDefendingSphereVector->size(); ++j)

  00084	0f 84 98 00 00
	00		 je	 $LN5@CheckColli
  0008a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv712[ebp], 0
$LL10@CheckColli:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1580 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00091	8b 4d 08	 mov	 ecx, DWORD PTR _c_pAttackingSphereVector$[ebp]
  00094	8b 01		 mov	 eax, DWORD PTR [ecx]
  00096	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00099	2b c8		 sub	 ecx, eax
  0009b	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000a0	f7 e9		 imul	 ecx
  000a2	03 d1		 add	 edx, ecx
  000a4	c1 fa 04	 sar	 edx, 4
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
  000ae	3b 45 f4	 cmp	 eax, DWORD PTR _i$1$[ebp]
  000b1	0f 86 04 01 00
	00		 jbe	 $LN71@CheckColli

; 1582 :         }
; 1583 : 
; 1584 :         return _My_data._Myfirst[_Pos];

  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _c_pAttackingSphereVector$[ebp]

; 1580 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000ba	2b fb		 sub	 edi, ebx

; 1584 :         return _My_data._Myfirst[_Pos];

  000bc	8b 01		 mov	 eax, DWORD PTR [ecx]
  000be	8b 4d f0	 mov	 ecx, DWORD PTR tv708[ebp]
  000c1	03 c8		 add	 ecx, eax

; 1580 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000c3	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000c8	f7 ef		 imul	 edi

; 1584 :         return _My_data._Myfirst[_Pos];

  000ca	89 4d e8	 mov	 DWORD PTR _c_rAttackingSphere$1$[ebp], ecx

; 1580 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000cd	03 d7		 add	 edx, edi
  000cf	c1 fa 04	 sar	 edx, 4
  000d2	8b c2		 mov	 eax, edx
  000d4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d7	03 c2		 add	 eax, edx
  000d9	3b 45 fc	 cmp	 eax, DWORD PTR _j$1$[ebp]
  000dc	0f 86 d9 00 00
	00		 jbe	 $LN71@CheckColli

; 1582 :         }
; 1583 : 
; 1584 :         return _My_data._Myfirst[_Pos];

  000e2	8b 7d f8	 mov	 edi, DWORD PTR tv712[ebp]
  000e5	03 fb		 add	 edi, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 186  : 			if (DetectCollisionDynamicSphereVSDynamicSphere(c_rAttackingSphere, c_rDefendingSphere))

  000e7	57		 push	 edi
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 ?DetectCollisionDynamicSphereVSDynamicSphere@@YA_NABUCDynamicSphereInstance@@0@Z ; DetectCollisionDynamicSphereVSDynamicSphere
  000ee	83 c4 08	 add	 esp, 8
  000f1	84 c0		 test	 al, al
  000f3	75 77		 jne	 SHORT $LN72@CheckColli
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f5	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  000f8	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000fd	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00100	8b cf		 mov	 ecx, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 181  : 		for (DWORD j = 0; j < c_pDefendingSphereVector->size(); ++j)

  00102	ff 45 fc	 inc	 DWORD PTR _j$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00105	2b cb		 sub	 ecx, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 181  : 		for (DWORD j = 0; j < c_pDefendingSphereVector->size(); ++j)

  00107	83 45 f8 1c	 add	 DWORD PTR tv712[ebp], 28 ; 0000001cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0010b	f7 e9		 imul	 ecx
  0010d	03 d1		 add	 edx, ecx
  0010f	c1 fa 04	 sar	 edx, 4
  00112	8b c2		 mov	 eax, edx
  00114	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00117	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 181  : 		for (DWORD j = 0; j < c_pDefendingSphereVector->size(); ++j)

  00119	39 45 fc	 cmp	 DWORD PTR _j$1$[ebp], eax
  0011c	0f 82 6f ff ff
	ff		 jb	 $LL10@CheckColli
$LN5@CheckColli:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00122	8b 5d 08	 mov	 ebx, DWORD PTR _c_pAttackingSphereVector$[ebp]
  00125	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 180  : 		for (DWORD i = 0; i < c_pAttackingSphereVector->size(); ++i)

  0012a	8b 7d f4	 mov	 edi, DWORD PTR _i$1$[ebp]
  0012d	83 45 f0 1c	 add	 DWORD PTR tv708[ebp], 28 ; 0000001cH
  00131	47		 inc	 edi
  00132	89 7d f4	 mov	 DWORD PTR _i$1$[ebp], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00135	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00138	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0013a	f7 e9		 imul	 ecx
  0013c	03 d1		 add	 edx, ecx
  0013e	c1 fa 04	 sar	 edx, 4
  00141	8b c2		 mov	 eax, edx
  00143	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00146	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 180  : 		for (DWORD i = 0; i < c_pAttackingSphereVector->size(); ++i)

  00148	3b f8		 cmp	 edi, eax
  0014a	0f 82 10 ff ff
	ff		 jb	 $LL7@CheckColli
$LN2@CheckColli:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 198  :         return this->_Ptr == _Right._Ptr;

  00150	8b 45 ec	 mov	 eax, DWORD PTR _this$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00153	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00155	3b b0 fc 17 00
	00		 cmp	 esi, DWORD PTR [eax+6140]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 176  : 	for (itor = m_DefendingPointInstanceList.begin(); itor != m_DefendingPointInstanceList.end(); ++itor)

  0015b	0f 85 cf fe ff
	ff		 jne	 $LL31@CheckColli
$LN87@CheckColli:
  00161	5f		 pop	 edi

; 195  : }

  00162	5e		 pop	 esi
  00163	32 c0		 xor	 al, al
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 08 00	 ret	 8
$LN72@CheckColli:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0016c	8b 45 e8	 mov	 eax, DWORD PTR _c_rAttackingSphere$1$[ebp]
  0016f	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00173	f3 0f 10 5f 04	 movss	 xmm3, DWORD PTR [edi+4]
  00178	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]
  0017d	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00181	f3 0f 58 58 04	 addss	 xmm3, DWORD PTR [eax+4]
  00186	f3 0f 58 50 08	 addss	 xmm2, DWORD PTR [eax+8]

; 180  :     x = fx;

  0018b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 188  : 				*pv3Position = (c_rAttackingSphere.v3Position + c_rDefendingSphere.v3Position) / 2.0f;

  00193	8b 45 0c	 mov	 eax, DWORD PTR _pv3Position$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 275  :     FLOAT fInv = 1.0f / f;

  00196	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0019a	5f		 pop	 edi

; 180  :     x = fx;

  0019b	f3 0f 59 d9	 mulss	 xmm3, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 195  : }

  0019f	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 181  :     y = fy;

  001a0	f3 0f 59 d1	 mulss	 xmm2, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 195  : }

  001a4	5b		 pop	 ebx
  001a5	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  001a9	f3 0f 11 58 04	 movss	 DWORD PTR [eax+4], xmm3
  001ae	f3 0f 11 50 08	 movss	 DWORD PTR [eax+8], xmm2
  001b3	b0 01		 mov	 al, 1
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 08 00	 ret	 8
$LN71@CheckColli:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1581 :             _Xrange();

  001bb	e8 00 00 00 00	 call	 ?_Xrange@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xrange
$LN88@CheckColli:
  001c0	cc		 int	 3
?CheckCollisionDetection@CActorInstance@@QAE_NPBV?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@PAUD3DXVECTOR3@@@Z ENDP ; CActorInstance::CheckCollisionDetection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?UpdatePointInstance@CActorInstance@@QAEXPAUSCollisionPointInstance@1@@Z
_TEXT	SEGMENT
_pModelInstance$1$ = -200				; size = 4
_matPoint$1 = -196					; size = 64
$T2 = -132						; size = 64
_matBone$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_pPointInstance$ = 8					; size = 4
?UpdatePointInstance@CActorInstance@@QAEXPAUSCollisionPointInstance@1@@Z PROC ; CActorInstance::UpdatePointInstance, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _pPointInstance$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 36   : 	if (!pPointInstance)

  0001a	85 db		 test	 ebx, ebx
  0001c	0f 84 6e 01 00
	00		 je	 $LN3@UpdatePoin

; 37   : 	{
; 38   : 		assert(!"CActorInstance::UpdatePointInstance - pPointInstance is NULL");
; 39   : 		return;
; 40   : 	}
; 41   : 
; 42   : 	D3DXMATRIX matBone;
; 43   : 
; 44   : 	if (pPointInstance->isAttached)

  00022	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  00026	56		 push	 esi
  00027	0f 84 a1 00 00
	00		 je	 $LN6@UpdatePoin
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0002d	8b 87 5c 03 00
	00		 mov	 eax, DWORD PTR [edi+860]
  00033	8b 8f 58 03 00
	00		 mov	 ecx, DWORD PTR [edi+856]
  00039	2b c1		 sub	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 46   : 		if (pPointInstance->dwModelIndex>=m_LODControllerVector.size())

  0003b	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003e	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 46   : 		if (pPointInstance->dwModelIndex>=m_LODControllerVector.size())

  00041	3b d0		 cmp	 edx, eax
  00043	0f 83 46 01 00
	00		 jae	 $LN48@UpdatePoin

; 47   : 		{
; 48   : 			//Tracenf("CActorInstance::UpdatePointInstance - rInstance.dwModelIndex=%d >= m_LODControllerVector.size()=%d",
; 49   : 			//		pPointInstance->dwModelIndex>m_LODControllerVector.size());
; 50   : 			return;
; 51   : 		}
; 52   : 
; 53   : 		CGrannyLODController* pGrnLODController=m_LODControllerVector[pPointInstance->dwModelIndex];

  00049	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]

; 54   : 		if (!pGrnLODController)

  0004c	85 c9		 test	 ecx, ecx
  0004e	0f 84 3b 01 00
	00		 je	 $LN48@UpdatePoin

; 55   : 		{
; 56   : 			//Tracenf("CActorInstance::UpdatePointInstance - m_LODControllerVector[pPointInstance->dwModelIndex=%d] is NULL", pPointInstance->dwModelIndex);
; 57   : 			return;
; 58   : 		}
; 59   : 
; 60   : 		CGrannyModelInstance * pModelInstance = pGrnLODController->GetModelInstance();

  00054	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance
  00059	89 85 38 ff ff
	ff		 mov	 DWORD PTR _pModelInstance$1$[ebp], eax

; 61   : 		if (!pModelInstance)

  0005f	85 c0		 test	 eax, eax
  00061	0f 84 28 01 00
	00		 je	 $LN48@UpdatePoin

; 62   : 		{
; 63   : 			//Tracenf("CActorInstance::UpdatePointInstance - pGrnLODController->GetModelInstance() is NULL");
; 64   : 			return;
; 65   : 		}
; 66   : 
; 67   : 		D3DXMATRIX * pmatBone = (D3DXMATRIX *)pModelInstance->GetBoneMatrixPointer(pPointInstance->dwBoneIndex);

  00067	ff 73 0c	 push	 DWORD PTR [ebx+12]
  0006a	8b c8		 mov	 ecx, eax
  0006c	e8 00 00 00 00	 call	 ?GetBoneMatrixPointer@CGrannyModelInstance@@QBEPBMH@Z ; CGrannyModelInstance::GetBoneMatrixPointer

; 68   : 		matBone = *(D3DXMATRIX *)pModelInstance->GetCompositeBoneMatrixPointer(pPointInstance->dwBoneIndex);

  00071	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00074	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _pModelInstance$1$[ebp]
  0007a	8b f0		 mov	 esi, eax
  0007c	e8 00 00 00 00	 call	 ?GetCompositeBoneMatrixPointer@CGrannyModelInstance@@QBEPBMH@Z ; CGrannyModelInstance::GetCompositeBoneMatrixPointer
  00081	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00084	0f 11 45 bc	 movups	 XMMWORD PTR _matBone$[ebp], xmm0
  00088	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0008c	0f 11 45 cc	 movups	 XMMWORD PTR _matBone$[ebp+16], xmm0
  00090	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00094	0f 11 45 dc	 movups	 XMMWORD PTR _matBone$[ebp+32], xmm0
  00098	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]

; 72   : 		matBone *= m_worldMatrix;

  0009c	8d 47 6c	 lea	 eax, DWORD PTR [edi+108]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  0009f	50		 push	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 68   : 		matBone = *(D3DXMATRIX *)pModelInstance->GetCompositeBoneMatrixPointer(pPointInstance->dwBoneIndex);

  000a0	0f 11 45 ec	 movups	 XMMWORD PTR _matBone$[ebp+48], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  000a4	8d 45 bc	 lea	 eax, DWORD PTR _matBone$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 69   : 		matBone._41 = pmatBone->_41;

  000a7	f3 0f 10 46 30	 movss	 xmm0, DWORD PTR [esi+48]
  000ac	f3 0f 11 45 ec	 movss	 DWORD PTR _matBone$[ebp+48], xmm0

; 70   : 		matBone._42 = pmatBone->_42;

  000b1	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  000b6	f3 0f 11 45 f0	 movss	 DWORD PTR _matBone$[ebp+52], xmm0

; 71   : 		matBone._43 = pmatBone->_43;

  000bb	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  000c0	50		 push	 eax
  000c1	50		 push	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 71   : 		matBone._43 = pmatBone->_43;

  000c2	f3 0f 11 45 f4	 movss	 DWORD PTR _matBone$[ebp+56], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  000c7	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 73   : 	}

  000cc	eb 26		 jmp	 SHORT $LN7@UpdatePoin
$LN6@UpdatePoin:

; 74   : 	else
; 75   : 	{
; 76   : 		matBone = m_worldMatrix;

  000ce	0f 10 47 6c	 movups	 xmm0, XMMWORD PTR [edi+108]
  000d2	0f 11 45 bc	 movups	 XMMWORD PTR _matBone$[ebp], xmm0
  000d6	0f 10 47 7c	 movups	 xmm0, XMMWORD PTR [edi+124]
  000da	0f 11 45 cc	 movups	 XMMWORD PTR _matBone$[ebp+16], xmm0
  000de	0f 10 87 8c 00
	00 00		 movups	 xmm0, XMMWORD PTR [edi+140]
  000e5	0f 11 45 dc	 movups	 XMMWORD PTR _matBone$[ebp+32], xmm0
  000e9	0f 10 87 9c 00
	00 00		 movups	 xmm0, XMMWORD PTR [edi+156]
  000f0	0f 11 45 ec	 movups	 XMMWORD PTR _matBone$[ebp+48], xmm0
$LN7@UpdatePoin:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1468 :         return const_iterator(_My_data._Myfirst, _STD addressof(_My_data));

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000f6	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  000f9	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  000fc	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 82   : 	for (;sit!=pPointInstance->c_pCollisionData->SphereDataVector.end();++sit,++dit)

  000ff	0f 84 8a 00 00
	00		 je	 $LN48@UpdatePoin
$LL33@UpdatePoin:

; 83   : 	{
; 84   : 		const TSphereData & c = sit->GetAttribute();//c_pCollisionData->SphereDataVector[j].GetAttribute();

  00105	8b cf		 mov	 ecx, edi
  00107	e8 00 00 00 00	 call	 ?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute

; 85   : 
; 86   : 		D3DXMATRIX matPoint;
; 87   : 		D3DXMatrixTranslation(&matPoint, c.v3Position.x, c.v3Position.y, c.v3Position.z);

  0010c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0010f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00114	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0011a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0011f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00125	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00129	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matPoint$1[ebp]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  0013a	8d 45 bc	 lea	 eax, DWORD PTR _matBone$[ebp]
  0013d	50		 push	 eax
  0013e	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _matPoint$1[ebp]
  00144	50		 push	 eax
  00145	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 90   : 		dit->v3LastPosition = dit->v3Position;

  00151	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  00155	8d 76 1c	 lea	 esi, DWORD PTR [esi+28]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 90   : 		dit->v3LastPosition = dit->v3Position;

  00158	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  0015b	83 c7 14	 add	 edi, 20			; 00000014H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 90   : 		dit->v3LastPosition = dit->v3Position;

  0015e	66 0f d6 46 f0	 movq	 QWORD PTR [esi-16], xmm0

; 91   : 		dit->v3Position.x = matPoint._41;

  00163	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR $T2[ebp+48]
  00168	f3 0f 11 46 e4	 movss	 DWORD PTR [esi-28], xmm0

; 92   : 		dit->v3Position.y = matPoint._42;

  0016d	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR $T2[ebp+52]
  00172	f3 0f 11 46 e8	 movss	 DWORD PTR [esi-24], xmm0

; 93   : 		dit->v3Position.z = matPoint._43;

  00177	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR $T2[ebp+56]
  0017c	89 46 f8	 mov	 DWORD PTR [esi-8], eax
  0017f	f3 0f 11 46 ec	 movss	 DWORD PTR [esi-20], xmm0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00184	8b 03		 mov	 eax, DWORD PTR [ebx]

; 150  :         return _Ptr == _Right._Ptr;

  00186	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 82   : 	for (;sit!=pPointInstance->c_pCollisionData->SphereDataVector.end();++sit,++dit)

  00189	0f 85 76 ff ff
	ff		 jne	 $LL33@UpdatePoin
$LN48@UpdatePoin:
  0018f	5e		 pop	 esi
$LN3@UpdatePoin:

; 94   : 	}
; 95   : }

  00190	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00193	5f		 pop	 edi
  00194	33 cd		 xor	 ecx, ebp
  00196	5b		 pop	 ebx
  00197	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c2 04 00	 ret	 4
?UpdatePointInstance@CActorInstance@@QAEXPAUSCollisionPointInstance@1@@Z ENDP ; CActorInstance::UpdatePointInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?UpdatePointInstance@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
?UpdatePointInstance@CActorInstance@@QAEXXZ PROC	; CActorInstance::UpdatePointInstance, COMDAT
; _this$ = ecx

; 28   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00004	8b 87 fc 17 00
	00		 mov	 eax, DWORD PTR [edi+6140]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 30   : 	for (itor = m_DefendingPointInstanceList.begin(); itor != m_DefendingPointInstanceList.end(); ++itor)

  0000e	74 15		 je	 SHORT $LN3@UpdatePoin
$LL23@UpdatePoin:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 151  :         return this->_Ptr->_Myval;

  00010	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 31   : 		UpdatePointInstance(&(*itor));

  00013	8b cf		 mov	 ecx, edi
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?UpdatePointInstance@CActorInstance@@QAEXPAUSCollisionPointInstance@1@@Z ; CActorInstance::UpdatePointInstance
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0001b	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  0001d	3b b7 fc 17 00
	00		 cmp	 esi, DWORD PTR [edi+6140]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 30   : 	for (itor = m_DefendingPointInstanceList.begin(); itor != m_DefendingPointInstanceList.end(); ++itor)

  00023	75 eb		 jne	 SHORT $LL23@UpdatePoin
$LN3@UpdatePoin:
  00025	5f		 pop	 edi

; 32   : }

  00026	5e		 pop	 esi
  00027	c3		 ret	 0
?UpdatePointInstance@CActorInstance@@QAEXXZ ENDP	; CActorInstance::UpdatePointInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?CreateCollisionInstancePiece@CActorInstance@@QAE_NKPBUSAttachingData@NRaceData@@PAUSCollisionPointInstance@1@@Z
_TEXT	SEGMENT
_dsi$ = -28						; size = 28
$T1 = 8							; size = 4
_dwAttachingModelIndex$ = 8				; size = 4
tv580 = 12						; size = 4
_iAttachingBoneIndex$2 = 12				; size = 4
_c_pAttachingData$ = 12					; size = 4
$T3 = 16						; size = 4
_pPointInstance$ = 16					; size = 4
?CreateCollisionInstancePiece@CActorInstance@@QAE_NKPBUSAttachingData@NRaceData@@PAUSCollisionPointInstance@1@@Z PROC ; CActorInstance::CreateCollisionInstancePiece, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 199  : 	if (!c_pAttachingData)

  00008	8b 75 0c	 mov	 esi, DWORD PTR _c_pAttachingData$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	0f 84 73 01 00
	00		 je	 $LN63@CreateColl

; 200  : 	{
; 201  : 		assert(!"CActorInstance::CreateCollisionInstancePiece - c_pAttachingData is NULL");
; 202  : 		return false;
; 203  : 	}
; 204  : 
; 205  : 	if (!c_pAttachingData->pCollisionData)

  00013	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00017	0f 84 69 01 00
	00		 je	 $LN63@CreateColl

; 206  : 	{
; 207  : 		assert(!"CActorInstance::CreateCollisionInstancePiece - c_pAttachingData->pCollisionData is NULL");
; 208  : 		return false;
; 209  : 	}
; 210  : 
; 211  : 	if (!pPointInstance)

  0001d	8b 5d 10	 mov	 ebx, DWORD PTR _pPointInstance$[ebp]
  00020	85 db		 test	 ebx, ebx
  00022	0f 84 5e 01 00
	00		 je	 $LN63@CreateColl

; 215  : 	}
; 216  : 
; 217  : 	pPointInstance->dwModelIndex = dwAttachingModelIndex;

  00028	8b 55 08	 mov	 edx, DWORD PTR _dwAttachingModelIndex$[ebp]
  0002b	89 53 08	 mov	 DWORD PTR [ebx+8], edx

; 218  : 	pPointInstance->isAttached = FALSE;

  0002e	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 219  : 	pPointInstance->dwBoneIndex = 0;

  00035	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0

; 220  : 	pPointInstance->c_pCollisionData = c_pAttachingData->pCollisionData;

  0003c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0003f	89 03		 mov	 DWORD PTR [ebx], eax

; 221  : 
; 222  : 	if (c_pAttachingData->isAttaching)

  00041	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00045	74 43		 je	 SHORT $LN10@CreateColl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00047	8b 89 58 03 00
	00		 mov	 ecx, DWORD PTR [ecx+856]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 226  : 		CGrannyModelInstance * pModelInstance = m_LODControllerVector[dwAttachingModelIndex]->GetModelInstance();

  0004d	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00050	e8 00 00 00 00	 call	 ?GetModelInstance@CGrannyLODController@@QAEPAVCGrannyModelInstance@@XZ ; CGrannyLODController::GetModelInstance

; 228  : 		if (pModelInstance && pModelInstance->GetBoneIndexByName(c_pAttachingData->strAttachingBoneName.c_str(),

  00055	85 c0		 test	 eax, eax
  00057	74 23		 je	 SHORT $LN9@CreateColl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00059	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H

; 3888 :         return _Mypair._Myval2._Myptr();

  0005d	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]

; 2273 :         if (_Large_string_engaged()) {

  00060	72 02		 jb	 SHORT $LN17@CreateColl

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00062	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN17@CreateColl:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 228  : 		if (pModelInstance && pModelInstance->GetBoneIndexByName(c_pAttachingData->strAttachingBoneName.c_str(),

  00064	8d 55 0c	 lea	 edx, DWORD PTR _iAttachingBoneIndex$2[ebp]
  00067	52		 push	 edx
  00068	51		 push	 ecx
  00069	8b c8		 mov	 ecx, eax
  0006b	e8 00 00 00 00	 call	 ?GetBoneIndexByName@CGrannyModelInstance@@QBE_NPBDPAH@Z ; CGrannyModelInstance::GetBoneIndexByName
  00070	84 c0		 test	 al, al
  00072	74 08		 je	 SHORT $LN9@CreateColl

; 229  : 												&iAttachingBoneIndex))
; 230  : 		{
; 231  : 			pPointInstance->isAttached = TRUE;
; 232  : 			pPointInstance->dwBoneIndex = iAttachingBoneIndex;

  00074	8b 45 0c	 mov	 eax, DWORD PTR _iAttachingBoneIndex$2[ebp]
  00077	89 43 0c	 mov	 DWORD PTR [ebx+12], eax

; 233  : 		}

  0007a	eb 07		 jmp	 SHORT $LN66@CreateColl
$LN9@CreateColl:

; 234  : 		else
; 235  : 		{
; 236  : 			//TraceError("CActorInstance::CreateCollisionInstancePiece: Cannot get matrix of bone %s ModelInstance 0x%p",	c_pAttachingData->strAttachingBoneName.c_str(), pModelInstance);
; 237  : 			pPointInstance->isAttached = TRUE;
; 238  : 			pPointInstance->dwBoneIndex = 0;

  0007c	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
$LN66@CreateColl:

; 243  : 	const CSphereCollisionInstanceVector & c_rSphereDataVector = c_pAttachingData->pCollisionData->SphereDataVector;

  00083	c7 43 04 01 00
	00 00		 mov	 DWORD PTR [ebx+4], 1
$LN10@CreateColl:
  0008a	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  0008d	57		 push	 edi

; 244  : 
; 245  : 	pPointInstance->SphereInstanceVector.clear();

  0008e	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  00091	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00094	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00097	8b c8		 mov	 ecx, eax
  00099	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
  0009c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 243  : 	const CSphereCollisionInstanceVector & c_rSphereDataVector = c_pAttachingData->pCollisionData->SphereDataVector;

  000a1	89 75 0c	 mov	 DWORD PTR tv580[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000a4	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  000a7	2b ce		 sub	 ecx, esi
  000a9	f7 e9		 imul	 ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000ab	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000ae	c1 fa 03	 sar	 edx, 3

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000b1	2b cf		 sub	 ecx, edi

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000b3	8b c2		 mov	 eax, edx
  000b5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b8	03 c2		 add	 eax, edx
  000ba	89 45 10	 mov	 DWORD PTR $T3[ebp], eax

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000bd	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000c2	f7 e9		 imul	 ecx
  000c4	03 d1		 add	 edx, ecx

; 1358 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  000c6	8b 4d 10	 mov	 ecx, DWORD PTR $T3[ebp]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000c9	c1 fa 04	 sar	 edx, 4
  000cc	8b c2		 mov	 eax, edx
  000ce	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d1	03 c2		 add	 eax, edx

; 1358 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  000d3	3b c8		 cmp	 ecx, eax
  000d5	76 20		 jbe	 SHORT $LN64@CreateColl

; 1359 :             if (_Newcapacity > max_size()) {

  000d7	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  000dd	0f 87 ad 00 00
	00		 ja	 $LN68@CreateColl

; 1361 :             }
; 1362 : 
; 1363 :             _Reallocate_exactly(_Newcapacity);

  000e3	51		 push	 ecx
  000e4	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  000e7	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXI@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Reallocate_exactly
  000ec	8b 7d 0c	 mov	 edi, DWORD PTR tv580[ebp]
  000ef	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  000f2	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000f5	eb 06		 jmp	 SHORT $LN24@CreateColl
$LN64@CreateColl:

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }
; 741  : 
; 742  :     _CONSTEXPR20_CONTAINER void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee
; 743  :         emplace_back(_Val);
; 744  :     }
; 745  : 
; 746  :     _CONSTEXPR20_CONTAINER void push_back(_Ty&& _Val) {
; 747  :         // insert by moving into element at end, provide strong guarantee
; 748  :         emplace_back(_STD move(_Val));
; 749  :     }
; 750  : 
; 751  :     template <class... _Valty>
; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {
; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);
; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 763  : 
; 764  :         if (_Oldsize == max_size()) {
; 765  :             _Xlength();
; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;
; 769  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 770  : 
; 771  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);
; 772  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 773  :         pointer _Constructed_first      = _Constructed_last;
; 774  : 
; 775  :         _TRY_BEGIN
; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);
; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee
; 780  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 781  :         } else { // provide basic guarantee
; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;
; 794  :     }
; 795  : 
; 796  :     template <class... _Valty>
; 797  :     _CONSTEXPR20_CONTAINER iterator emplace(const_iterator _Where, _Valty&&... _Val) {
; 798  :         // insert by perfectly forwarding _Val at _Where
; 799  :         const pointer _Whereptr = _Where._Ptr;
; 800  :         auto& _My_data          = _Mypair._Myval2;
; 801  :         const pointer _Oldlast  = _My_data._Mylast;
; 802  : #if _ITERATOR_DEBUG_LEVEL == 2
; 803  :         _STL_VERIFY(
; 804  :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Oldlast >= _Whereptr,
; 805  :             "vector emplace iterator outside range");
; 806  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 807  : 
; 808  :         if (_Oldlast != _My_data._Myend) {
; 809  :             if (_Whereptr == _Oldlast) { // at back, provide strong guarantee
; 810  :                 _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 811  :             } else {
; 812  :                 auto& _Al = _Getal();
; 813  :                 _Alloc_temporary2<_Alty> _Obj(_Al, _STD forward<_Valty>(_Val)...); // handle aliasing
; 814  :                 // after constructing _Obj, provide basic guarantee
; 815  :                 _Orphan_range(_Whereptr, _Oldlast);
; 816  :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));
; 817  :                 ++_My_data._Mylast;
; 818  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - 1, _Oldlast);
; 819  :                 *_Whereptr = _STD move(_Obj._Get_value());
; 820  :             }
; 821  : 
; 822  :             return _Make_iterator(_Whereptr);
; 823  :         }
; 824  : 
; 825  :         return _Make_iterator(_Emplace_reallocate(_Whereptr, _STD forward<_Valty>(_Val)...));
; 826  :     }
; 827  : 
; 828  :     _CONSTEXPR20_CONTAINER iterator insert(const_iterator _Where, const _Ty& _Val) { // insert _Val at _Where
; 829  :         return emplace(_Where, _Val);
; 830  :     }
; 831  : 
; 832  :     _CONSTEXPR20_CONTAINER iterator insert(const_iterator _Where, _Ty&& _Val) { // insert by moving _Val at _Where
; 833  :         return emplace(_Where, _STD move(_Val));
; 834  :     }
; 835  : 
; 836  :     _CONSTEXPR20_CONTAINER iterator insert(
; 837  :         const_iterator _Where, _CRT_GUARDOVERFLOW const size_type _Count, const _Ty& _Val) {
; 838  :         // insert _Count * _Val at _Where
; 839  :         const pointer _Whereptr = _Where._Ptr;
; 840  : 
; 841  :         auto& _My_data   = _Mypair._Myval2;
; 842  :         pointer& _Mylast = _My_data._Mylast;
; 843  : 
; 844  :         const pointer _Oldfirst = _My_data._Myfirst;
; 845  :         const pointer _Oldlast  = _Mylast;
; 846  : #if _ITERATOR_DEBUG_LEVEL == 2
; 847  :         _STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _Oldlast >= _Whereptr,
; 848  :             "vector insert iterator outside range");
; 849  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 850  : 
; 851  :         const auto _Whereoff        = static_cast<size_type>(_Whereptr - _Oldfirst);
; 852  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
; 853  :         const bool _One_at_back     = _Count == 1 && _Whereptr == _Oldlast;
; 854  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators
; 855  :         } else if (_Count > _Unused_capacity) { // reallocate
; 856  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);
; 857  : 
; 858  :             if (_Count > max_size() - _Oldsize) {
; 859  :                 _Xlength();
; 860  :             }
; 861  : 
; 862  :             const size_type _Newsize     = _Oldsize + _Count;
; 863  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 864  : 
; 865  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);
; 866  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 867  :             pointer _Constructed_first      = _Constructed_last;
; 868  : 
; 869  :             _TRY_BEGIN
; 870  :             _Ufill(_Newvec + _Whereoff, _Count, _Val);
; 871  :             _Constructed_first = _Newvec + _Whereoff;
; 872  : 
; 873  :             if (_One_at_back) { // provide strong guarantee
; 874  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
; 875  :             } else { // provide basic guarantee
; 876  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);
; 877  :                 _Constructed_first = _Newvec;
; 878  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
; 879  :             }
; 880  :             _CATCH_ALL
; 881  :             _Destroy(_Constructed_first, _Constructed_last);
; 882  :             _Getal().deallocate(_Newvec, _Newcapacity);
; 883  :             _RERAISE;
; 884  :             _CATCH_END
; 885  : 
; 886  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 887  :         } else if (_One_at_back) { // provide strong guarantee
; 888  :             _Emplace_back_with_unused_capacity(_Val);
; 889  :         } else { // provide basic guarantee
; 890  :             const _Alloc_temporary2<_Alty> _Tmp_storage(_Getal(), _Val); // handle aliasing
; 891  :             const auto& _Tmp              = _Tmp_storage._Get_value();
; 892  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
; 893  :             _Orphan_range(_Whereptr, _Oldlast);
; 894  : 
; 895  :             if (_Count > _Affected_elements) { // new stuff spills off end
; 896  :                 _Mylast = _Ufill(_Oldlast, _Count - _Affected_elements, _Tmp);
; 897  :                 _Mylast = _Umove(_Whereptr, _Oldlast, _Mylast);
; 898  :                 _STD fill(_Whereptr, _Oldlast, _Tmp);
; 899  :             } else { // new stuff can all be assigned
; 900  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
; 901  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
; 902  :                 _STD fill(_Whereptr, _Whereptr + _Count, _Tmp);
; 903  :             }
; 904  :         }
; 905  : 
; 906  :         return _Make_iterator_offset(_Whereoff);
; 907  :     }
; 908  : 
; 909  : private:
; 910  :     template <class _Iter>
; 911  :     _CONSTEXPR20_CONTAINER void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, input_iterator_tag) {
; 912  :         // insert input range [_First, _Last) at _Where
; 913  :         if (_First == _Last) {
; 914  :             return; // nothing to do, avoid invalidating iterators
; 915  :         }
; 916  : 
; 917  :         auto& _My_data       = _Mypair._Myval2;
; 918  :         pointer& _Myfirst    = _My_data._Myfirst;
; 919  :         pointer& _Mylast     = _My_data._Mylast;
; 920  :         const auto _Whereoff = static_cast<size_type>(_Where._Ptr - _Myfirst);
; 921  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 922  : 
; 923  :         // For one-at-back, provide strong guarantee.
; 924  :         // Otherwise, provide basic guarantee (despite N4659 26.3.11.5 [vector.modifiers]/1).
; 925  :         // Performance note: except for one-at-back, emplace_back()'s strong guarantee is unnecessary here.
; 926  : 
; 927  :         for (; _First != _Last; ++_First) {
; 928  :             emplace_back(*_First);
; 929  :         }
; 930  : 
; 931  :         _Orphan_range(_Myfirst + _Whereoff, _Myfirst + _Oldsize);
; 932  : 
; 933  :         _STD rotate(_Myfirst + _Whereoff, _Myfirst + _Oldsize, _Mylast);
; 934  :     }
; 935  : 
; 936  :     template <class _Iter>
; 937  :     _CONSTEXPR20_CONTAINER void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag) {
; 938  :         // insert forward range [_First, _Last) at _Where
; 939  :         const pointer _Whereptr = _Where._Ptr;
; 940  :         const auto _Count       = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 941  : 
; 942  :         auto& _My_data   = _Mypair._Myval2;
; 943  :         pointer& _Mylast = _My_data._Mylast;
; 944  : 
; 945  :         const pointer _Oldfirst     = _My_data._Myfirst;
; 946  :         const pointer _Oldlast      = _Mylast;
; 947  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
; 948  : 
; 949  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators
; 950  :         } else if (_Count > _Unused_capacity) { // reallocate
; 951  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);
; 952  : 
; 953  :             if (_Count > max_size() - _Oldsize) {
; 954  :                 _Xlength();
; 955  :             }
; 956  : 
; 957  :             const size_type _Newsize     = _Oldsize + _Count;
; 958  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 959  : 
; 960  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);
; 961  :             const auto _Whereoff            = static_cast<size_type>(_Whereptr - _Oldfirst);
; 962  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 963  :             pointer _Constructed_first      = _Constructed_last;
; 964  : 
; 965  :             _TRY_BEGIN
; 966  :             _Ucopy(_First, _Last, _Newvec + _Whereoff);
; 967  :             _Constructed_first = _Newvec + _Whereoff;
; 968  : 
; 969  :             if (_Count == 1 && _Whereptr == _Oldlast) { // one at back, provide strong guarantee
; 970  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
; 971  :             } else { // provide basic guarantee
; 972  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);
; 973  :                 _Constructed_first = _Newvec;
; 974  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
; 975  :             }
; 976  :             _CATCH_ALL
; 977  :             _Destroy(_Constructed_first, _Constructed_last);
; 978  :             _Getal().deallocate(_Newvec, _Newcapacity);
; 979  :             _RERAISE;
; 980  :             _CATCH_END
; 981  : 
; 982  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 983  :         } else { // Attempt to provide the strong guarantee for EmplaceConstructible failure.
; 984  :                  // If we encounter copy/move construction/assignment failure, provide the basic guarantee.
; 985  :                  // (For one-at-back, this provides the strong guarantee.)
; 986  : 
; 987  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
; 988  : 
; 989  :             if (_Count < _Affected_elements) { // some affected elements must be assigned
; 990  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
; 991  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
; 992  :                 _Destroy(_Whereptr, _Whereptr + _Count);
; 993  : 
; 994  :                 _TRY_BEGIN
; 995  :                 _Ucopy(_First, _Last, _Whereptr);
; 996  :                 _CATCH_ALL
; 997  :                 // glue the broken pieces back together
; 998  : 
; 999  :                 _TRY_BEGIN
; 1000 :                 _Umove(_Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr);
; 1001 :                 _CATCH_ALL
; 1002 :                 // vaporize the detached piece
; 1003 :                 _Orphan_range(_Whereptr, _Oldlast);
; 1004 :                 _Destroy(_Whereptr + _Count, _Mylast);
; 1005 :                 _Mylast = _Whereptr;
; 1006 :                 _RERAISE;
; 1007 :                 _CATCH_END
; 1008 : 
; 1009 :                 _Move_unchecked(_Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count);
; 1010 :                 _Destroy(_Oldlast, _Mylast);
; 1011 :                 _Mylast = _Oldlast;
; 1012 :                 _RERAISE;
; 1013 :                 _CATCH_END
; 1014 :             } else { // affected elements don't overlap before/after
; 1015 :                 const pointer _Relocated = _Whereptr + _Count;
; 1016 :                 _Mylast                  = _Umove(_Whereptr, _Oldlast, _Relocated);
; 1017 :                 _Destroy(_Whereptr, _Oldlast);
; 1018 : 
; 1019 :                 _TRY_BEGIN
; 1020 :                 _Ucopy(_First, _Last, _Whereptr);
; 1021 :                 _CATCH_ALL
; 1022 :                 // glue the broken pieces back together
; 1023 : 
; 1024 :                 _TRY_BEGIN
; 1025 :                 _Umove(_Relocated, _Mylast, _Whereptr);
; 1026 :                 _CATCH_ALL
; 1027 :                 // vaporize the detached piece
; 1028 :                 _Orphan_range(_Whereptr, _Oldlast);
; 1029 :                 _Destroy(_Relocated, _Mylast);
; 1030 :                 _Mylast = _Whereptr;
; 1031 :                 _RERAISE;
; 1032 :                 _CATCH_END
; 1033 : 
; 1034 :                 _Destroy(_Relocated, _Mylast);
; 1035 :                 _Mylast = _Oldlast;
; 1036 :                 _RERAISE;
; 1037 :                 _CATCH_END
; 1038 :             }
; 1039 : 
; 1040 :             _Orphan_range(_Whereptr, _Oldlast);
; 1041 :         }
; 1042 :     }
; 1043 : 
; 1044 : public:
; 1045 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 1046 :     _CONSTEXPR20_CONTAINER iterator insert(const_iterator _Where, _Iter _First, _Iter _Last) {
; 1047 :         const pointer _Whereptr = _Where._Ptr;
; 1048 :         auto& _My_data          = _Mypair._Myval2;
; 1049 :         const pointer _Oldfirst = _My_data._Myfirst;
; 1050 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1051 :         _STL_VERIFY(
; 1052 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _My_data._Mylast >= _Whereptr,
; 1053 :             "vector insert iterator outside range");
; 1054 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1055 : 
; 1056 :         _Adl_verify_range(_First, _Last);
; 1057 :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);
; 1058 :         _Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 1059 :         return _Make_iterator_offset(_Whereoff);
; 1060 :     }
; 1061 : 
; 1062 :     _CONSTEXPR20_CONTAINER iterator insert(const_iterator _Where, initializer_list<_Ty> _Ilist) {
; 1063 :         return insert(_Where, _Ilist.begin(), _Ilist.end());
; 1064 :     }
; 1065 : 
; 1066 :     _CONSTEXPR20_CONTAINER void assign(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) {
; 1067 :         // assign _Newsize * _Val
; 1068 :         auto& _My_data    = _Mypair._Myval2;
; 1069 :         pointer& _Myfirst = _My_data._Myfirst;
; 1070 :         pointer& _Mylast  = _My_data._Mylast;
; 1071 : 
; 1072 :         _My_data._Orphan_all();
; 1073 : 
; 1074 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1075 :         if (_Newsize > _Oldsize) {
; 1076 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1077 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1078 :                 _Clear_and_reserve_geometric(_Newsize);
; 1079 :                 _Oldsize = 0;
; 1080 :             } else {
; 1081 :                 _STD fill(_Myfirst, _Mylast, _Val);
; 1082 :             }
; 1083 : 
; 1084 :             _Mylast = _Ufill(_Mylast, _Newsize - _Oldsize, _Val);
; 1085 :         } else {
; 1086 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1087 :             _STD fill(_Myfirst, _Newlast, _Val);
; 1088 :             _Destroy(_Newlast, _Mylast);
; 1089 :             _Mylast = _Newlast;
; 1090 :         }
; 1091 :     }
; 1092 : 
; 1093 : private:
; 1094 :     template <class _Iter>
; 1095 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, input_iterator_tag) {
; 1096 :         // assign input range [_First, _Last)
; 1097 :         auto& _My_data    = _Mypair._Myval2;
; 1098 :         pointer& _Myfirst = _My_data._Myfirst;
; 1099 :         pointer& _Mylast  = _My_data._Mylast;
; 1100 : 
; 1101 :         _My_data._Orphan_all();
; 1102 : 
; 1103 :         pointer _Next = _Myfirst;
; 1104 : 
; 1105 :         for (; _First != _Last && _Next != _Mylast; ++_First, (void) ++_Next) {
; 1106 :             *_Next = *_First;
; 1107 :         }
; 1108 : 
; 1109 :         // Code size optimization: we've exhausted only the source, only the dest, or both.
; 1110 :         // If we've exhausted only the source: we Trim, then Append does nothing.
; 1111 :         // If we've exhausted only the dest: Trim does nothing, then we Append.
; 1112 :         // If we've exhausted both: Trim does nothing, then Append does nothing.
; 1113 : 
; 1114 :         // Trim.
; 1115 :         _Destroy(_Next, _Mylast);
; 1116 :         _Mylast = _Next;
; 1117 : 
; 1118 :         // Append.
; 1119 :         for (; _First != _Last; ++_First) {
; 1120 :             emplace_back(*_First); // performance note: emplace_back()'s strong guarantee is unnecessary here
; 1121 :         }
; 1122 :     }
; 1123 : 
; 1124 :     template <class _Iter>
; 1125 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {
; 1126 :         // assign forward range [_First, _Last)
; 1127 :         const auto _Newsize = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 1128 :         auto& _My_data      = _Mypair._Myval2;
; 1129 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1130 :         pointer& _Mylast    = _My_data._Mylast;
; 1131 :         pointer& _Myend     = _My_data._Myend;
; 1132 : 
; 1133 :         _My_data._Orphan_all();
; 1134 : 
; 1135 :         if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<_Iter, _Ty*>::_Trivially_copyable>,
; 1136 :                           _Uses_default_construct<_Alty, _Ty*, decltype(*_First)>,
; 1137 :                           _Uses_default_destroy<_Alty, _Ty*>>) {
; 1138 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1139 :             if (!_STD is_constant_evaluated())
; 1140 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1141 :             {
; 1142 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1143 :                 if (_Newsize > _Oldcapacity) {
; 1144 :                     _Clear_and_reserve_geometric(_Newsize);
; 1145 :                 }
; 1146 : 
; 1147 :                 _Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));
; 1148 :                 return;
; 1149 :             }
; 1150 :         }
; 1151 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1152 : 
; 1153 :         if (_Newsize > _Oldsize) {
; 1154 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1155 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1156 :                 _Clear_and_reserve_geometric(_Newsize);
; 1157 :                 _Oldsize = 0;
; 1158 :             }
; 1159 : 
; 1160 :             // performance note: traversing [_First, _Mid) twice
; 1161 :             const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));
; 1162 :             _Copy_unchecked(_First, _Mid, _Myfirst);
; 1163 :             _Mylast = _Ucopy(_Mid, _Last, _Mylast);
; 1164 :         } else {
; 1165 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1166 :             _Copy_unchecked(_First, _Last, _Myfirst);
; 1167 :             _Destroy(_Newlast, _Mylast);
; 1168 :             _Mylast = _Newlast;
; 1169 :         }
; 1170 :     }
; 1171 : 
; 1172 : public:
; 1173 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 1174 :     _CONSTEXPR20_CONTAINER void assign(_Iter _First, _Iter _Last) {
; 1175 :         _Adl_verify_range(_First, _Last);
; 1176 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 1177 :     }
; 1178 : 
; 1179 :     _CONSTEXPR20_CONTAINER void assign(initializer_list<_Ty> _Ilist) {
; 1180 :         _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
; 1181 :     }
; 1182 : 
; 1183 : private:
; 1184 :     _CONSTEXPR20_CONTAINER void _Copy_assign(const vector& _Right, false_type) {
; 1185 :         _Pocca(_Getal(), _Right._Getal());
; 1186 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1187 :         assign(_Right_data._Myfirst, _Right_data._Mylast);
; 1188 :     }
; 1189 : 
; 1190 :     _CONSTEXPR20_CONTAINER void _Copy_assign(const vector& _Right, true_type) {
; 1191 :         if (_Getal() != _Right._Getal()) {
; 1192 :             _Tidy();
; 1193 :             _Mypair._Myval2._Reload_proxy(
; 1194 :                 _GET_PROXY_ALLOCATOR(_Alty, _Getal()), _GET_PROXY_ALLOCATOR(_Alty, _Right._Getal()));
; 1195 :         }
; 1196 : 
; 1197 :         _Copy_assign(_Right, false_type{});
; 1198 :     }
; 1199 : 
; 1200 : public:
; 1201 :     _CONSTEXPR20_CONTAINER vector& operator=(const vector& _Right) {
; 1202 :         if (this != _STD addressof(_Right)) {
; 1203 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});
; 1204 :         }
; 1205 : 
; 1206 :         return *this;
; 1207 :     }
; 1208 : 
; 1209 :     _CONSTEXPR20_CONTAINER vector& operator=(initializer_list<_Ty> _Ilist) {
; 1210 :         _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
; 1211 :         return *this;
; 1212 :     }
; 1213 : 
; 1214 : private:
; 1215 :     template <class _Ty2>
; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {
; 1217 :         if (_Newsize > max_size()) {
; 1218 :             _Xlength();
; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);
; 1226 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1227 : 
; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);
; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;
; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN
; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);
; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1238 :         _RERAISE;
; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }
; 1243 : 
; 1244 :     template <class _Ty2>
; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {
; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim
; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append
; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1262 :                 _Resize_reallocate(_Newsize, _Val);
; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);
; 1268 :             _Orphan_range(_Oldlast, _Oldlast);
; 1269 :         }
; 1270 : 
; 1271 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1272 :     }
; 1273 : 
; 1274 : public:
; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {
; 1276 :         // trim or append value-initialized elements, provide strong guarantee
; 1277 :         _Resize(_Newsize, _Value_init_tag{});
; 1278 :     }
; 1279 : 
; 1280 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) {
; 1281 :         // trim or append copies of _Val, provide strong guarantee
; 1282 :         _Resize(_Newsize, _Val);
; 1283 :     }
; 1284 : 
; 1285 : private:
; 1286 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {
; 1287 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1288 :         auto& _My_data    = _Mypair._Myval2;
; 1289 :         pointer& _Myfirst = _My_data._Myfirst;
; 1290 :         pointer& _Mylast  = _My_data._Mylast;
; 1291 : 
; 1292 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);
; 1293 : 
; 1294 :         const pointer _Newvec = _Getal().allocate(_Newcapacity);
; 1295 : 
; 1296 :         _TRY_BEGIN
; 1297 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1298 :         _CATCH_ALL
; 1299 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1300 :         _RERAISE;
; 1301 :         _CATCH_END
; 1302 : 
; 1303 :         _Change_array(_Newvec, _Size, _Newcapacity);
; 1304 :     }
; 1305 : 
; 1306 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1307 :     void _Check_all_orphaned_locked() const noexcept {
; 1308 :         _Lockit _Lock(_LOCK_DEBUG);
; 1309 :         auto& _My_data = _Mypair._Myval2;
; 1310 :         _STL_INTERNAL_CHECK(!_My_data._Myproxy->_Myfirstiter);
; 1311 :     }
; 1312 : 
; 1313 :     _CONSTEXPR20_CONTAINER void _Check_all_orphaned() const noexcept {
; 1314 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1315 :         if (_STD is_constant_evaluated()) {
; 1316 :             auto& _My_data = _Mypair._Myval2;
; 1317 :             _STL_INTERNAL_CHECK(!_My_data._Myproxy->_Myfirstiter);
; 1318 :         } else
; 1319 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1320 :         {
; 1321 :             _Check_all_orphaned_locked();
; 1322 :         }
; 1323 :     }
; 1324 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1325 : 
; 1326 :     _CONSTEXPR20_CONTAINER void _Clear_and_reserve_geometric(const size_type _Newsize) {
; 1327 :         auto& _My_data    = _Mypair._Myval2;
; 1328 :         pointer& _Myfirst = _My_data._Myfirst;
; 1329 :         pointer& _Mylast  = _My_data._Mylast;
; 1330 :         pointer& _Myend   = _My_data._Myend;
; 1331 : 
; 1332 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1333 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1334 :         _Check_all_orphaned();
; 1335 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1336 : 
; 1337 :         if (_Newsize > max_size()) {
; 1338 :             _Xlength();
; 1339 :         }
; 1340 : 
; 1341 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1342 : 
; 1343 :         if (_Myfirst) { // destroy and deallocate old array
; 1344 :             _Destroy(_Myfirst, _Mylast);
; 1345 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));
; 1346 : 
; 1347 :             _Myfirst = nullptr;
; 1348 :             _Mylast  = nullptr;
; 1349 :             _Myend   = nullptr;
; 1350 :         }
; 1351 : 
; 1352 :         _Buy_raw(_Newcapacity);
; 1353 :     }
; 1354 : 
; 1355 : public:
; 1356 :     _CONSTEXPR20_CONTAINER void reserve(_CRT_GUARDOVERFLOW const size_type _Newcapacity) {
; 1357 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1358 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  000f7	8b 7d 0c	 mov	 edi, DWORD PTR tv580[ebp]
  000fa	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
$LN24@CreateColl:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 251  : 	dsi.v3LastPosition = D3DXVECTOR3(0.0f,0.0f,0.0f);

  000fd	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp+12], 0
  00104	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp+16], 0
  0010b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp+20], 0

; 252  : 	dsi.v3Position = D3DXVECTOR3(0.0f,0.0f,0.0f);

  00112	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp], 0
  00119	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp+4], 0
  00120	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dsi$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00127	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 253  : 	for (it = c_rSphereDataVector.begin(); it!=c_rSphereDataVector.end(); ++it)

  00129	74 50		 je	 SHORT $LN3@CreateColl
  0012b	0f 1f 44 00 00	 npad	 5
$LL41@CreateColl:

; 254  : 	{
; 255  : 		const TSphereData & c_rSphereData = it->GetAttribute();

  00130	8b ce		 mov	 ecx, esi
  00132	e8 00 00 00 00	 call	 ?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00137	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 256  : 		dsi.fRadius = c_rSphereData.fRadius;

  0013a	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0013f	f3 0f 11 45 fc	 movss	 DWORD PTR _dsi$[ebp+24], xmm0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00144	3b 4b 18	 cmp	 ecx, DWORD PTR [ebx+24]
  00147	74 1d		 je	 SHORT $LN53@CreateColl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00149	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR _dsi$[ebp]
  0014d	8b 45 fc	 mov	 eax, DWORD PTR _dsi$[ebp+24]
  00150	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00153	f3 0f 7e 45 f4	 movq	 xmm0, QWORD PTR _dsi$[ebp+16]
  00158	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  0015d	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 716  :         ++_Mylast;

  00160	83 43 14 1c	 add	 DWORD PTR [ebx+20], 28	; 0000001cH

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00164	eb 0d		 jmp	 SHORT $LN2@CreateColl
$LN53@CreateColl:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00166	8d 45 e4	 lea	 eax, DWORD PTR _dsi$[ebp]
  00169	50		 push	 eax
  0016a	51		 push	 ecx
  0016b	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  0016e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUCDynamicSphereInstance@@@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@QAEPAUCDynamicSphereInstance@@QAU2@ABU2@@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Emplace_reallocate<CDynamicSphereInstance const &>
$LN2@CreateColl:

; 74   :         ++_Ptr;

  00173	83 c6 14	 add	 esi, 20			; 00000014H

; 150  :         return _Ptr == _Right._Ptr;

  00176	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp

; 253  : 	for (it = c_rSphereDataVector.begin(); it!=c_rSphereDataVector.end(); ++it)

  00179	75 b5		 jne	 SHORT $LL41@CreateColl
$LN3@CreateColl:

; 257  : 		pPointInstance->SphereInstanceVector.push_back(dsi);
; 258  : 	}
; 259  : 
; 260  : 	return true;

  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	b0 01		 mov	 al, 1

; 261  : }

  0017f	5b		 pop	 ebx
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c2 0c 00	 ret	 12			; 0000000cH
$LN63@CreateColl:
  00186	5e		 pop	 esi

; 212  : 	{
; 213  : 		assert(!"CActorInstance::CreateCollisionInstancePiece - pPointInstance is NULL");
; 214  : 		return false;

  00187	32 c0		 xor	 al, al

; 261  : }

  00189	5b		 pop	 ebx
  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	c2 0c 00	 ret	 12			; 0000000cH
$LN68@CreateColl:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1360 :                 _Xlength();

  00190	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xlength
$LN65@CreateColl:
  00195	cc		 int	 3
?CreateCollisionInstancePiece@CActorInstance@@QAE_NKPBUSAttachingData@NRaceData@@PAUSCollisionPointInstance@1@@Z ENDP ; CActorInstance::CreateCollisionInstancePiece
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@XZ PROC ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::~map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >, COMDAT
; _this$ = ecx

; 1086 :         _Scary->_Erase_head(_Getal());

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<CActorInstance * const,float>,void *> > >
  00006	c3		 ret	 0
??1?$map@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@@std@@QAE@XZ ENDP ; std::map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >::~map<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCActorInstance@@M@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CActorInstance * const,float> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1935 :         return _Mypair._Myval2._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1936 :     }

  00002	c3		 ret	 0
?_Getal@?$_Tree@V?$_Tmap_traits@PAVCActorInstance@@MU?$less@PAVCActorInstance@@@std@@V?$allocator@U?$pair@QAVCActorInstance@@M@std@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@QAVCActorInstance@@M@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<CActorInstance *,float,std::less<CActorInstance *>,std::allocator<std::pair<CActorInstance * const,float> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xrange@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xrange, COMDAT

; 1765 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	85 f6		 test	 esi, esi
  0000b	74 48		 je	 SHORT $LN8@Change_arr

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00010	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00015	2b ce		 sub	 ecx, esi
  00017	f7 e9		 imul	 ecx
  00019	03 d1		 add	 edx, ecx
  0001b	c1 fa 04	 sar	 edx, 4
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00025	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0002c	2b c8		 sub	 ecx, eax
  0002e	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00031	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00037	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00039	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0003c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003f	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00041	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00044	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00047	77 3b		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b f2		 mov	 esi, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00058	8b 55 08	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0005b	89 17		 mov	 DWORD PTR [edi], edx
  0005d	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00064	2b c8		 sub	 ecx, eax
  00066	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00069	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  0006c	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0006f	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00076	2b c8		 sub	 ecx, eax
  00078	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0007b	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 1740 :     }

  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00084	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00089	cc		 int	 3
?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXPAUCDynamicSphereInstance@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXPAUCDynamicSphereInstance@@00@Z PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1703 :     auto _UFirst      = _Get_unwrapped(_First);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1659 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

  00006	56		 push	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	3b c6		 cmp	 eax, esi
  0000c	74 25		 je	 SHORT $LN7@Umove_if_n

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000e	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00011	2b d0		 sub	 edx, eax
$LL8@Umove_if_n:

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00013	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00016	0f 11 04 02	 movups	 XMMWORD PTR [edx+eax], xmm0
  0001a	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001f	66 0f d6 44 02
	10		 movq	 QWORD PTR [edx+eax+16], xmm0
  00025	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00028	89 4c 02 18	 mov	 DWORD PTR [edx+eax+24], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0002c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0002f	3b c6		 cmp	 eax, esi
  00031	75 e0		 jne	 SHORT $LL8@Umove_if_n
$LN7@Umove_if_n:
  00033	5e		 pop	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1663 :     }

  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXPAUCDynamicSphereInstance@@00@Z ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXI@Z PROC ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1286 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 1287 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1288 :         auto& _My_data    = _Mypair._Myval2;
; 1289 :         pointer& _Myfirst = _My_data._Myfirst;
; 1290 :         pointer& _Mylast  = _My_data._Mylast;
; 1291 : 
; 1292 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00007	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1286 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {

  0000f	56		 push	 esi
  00010	57		 push	 edi

; 1287 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1288 :         auto& _My_data    = _Mypair._Myval2;
; 1289 :         pointer& _Myfirst = _My_data._Myfirst;
; 1290 :         pointer& _Mylast  = _My_data._Mylast;
; 1291 : 
; 1292 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00011	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00014	2b 33		 sub	 esi, DWORD PTR [ebx]
  00016	f7 ee		 imul	 esi
  00018	03 d6		 add	 edx, esi
  0001a	c1 fa 04	 sar	 edx, 4
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx
  00024	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00027	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  0002d	77 79		 ja	 SHORT $LN44@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0002f	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00036	2b c1		 sub	 eax, ecx
  00038	c1 e0 02	 shl	 eax, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00040	72 0d		 jb	 SHORT $LN15@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00048	83 c4 04	 add	 esp, 4
  0004b	8b f0		 mov	 esi, eax
  0004d	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0004f	85 c0		 test	 eax, eax
  00051	74 0d		 je	 SHORT $LN16@Reallocate

; 79   :         return ::operator new(_Bytes);

  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0005c	8b f0		 mov	 esi, eax
  0005e	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00060	33 f6		 xor	 esi, esi
$LN14@Reallocate:

; 1704 :     const auto _ULast = _Get_unwrapped(_Last);

  00062	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00065	8b d6		 mov	 edx, esi

; 801  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00067	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  00069	3b c7		 cmp	 eax, edi
  0006b	74 24		 je	 SHORT $LN27@Reallocate
  0006d	0f 1f 00	 npad	 3
$LL28@Reallocate:

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00070	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 1621 :         ++_Last;

  00073	8d 52 1c	 lea	 edx, DWORD PTR [edx+28]

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00076	0f 11 42 e4	 movups	 XMMWORD PTR [edx-28], xmm0
  0007a	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0007f	66 0f d6 42 f4	 movq	 QWORD PTR [edx-12], xmm0
  00084	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  00087	83 c0 1c	 add	 eax, 28			; 0000001cH

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0008a	89 4a fc	 mov	 DWORD PTR [edx-4], ecx

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0008d	3b c7		 cmp	 eax, edi
  0008f	75 df		 jne	 SHORT $LL28@Reallocate
$LN27@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1303 :         _Change_array(_Newvec, _Size, _Newcapacity);

  00091	ff 75 08	 push	 DWORD PTR __Newcapacity$[ebp]
  00094	8b cb		 mov	 ecx, ebx
  00096	ff 75 fc	 push	 DWORD PTR __Size$1$[ebp]
  00099	56		 push	 esi
  0009a	e8 00 00 00 00	 call	 ?_Change_array@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXQAUCDynamicSphereInstance@@II@Z ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Change_array
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1304 :     }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN44@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000a8	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN42@Reallocate:
  000ad	cc		 int	 3
?_Reallocate_exactly@?$vector@UCDynamicSphereInstance@@V?$allocator@UCDynamicSphereInstance@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CDynamicSphereInstance,std::allocator<CDynamicSphereInstance> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z PROC ; std::_Traits_equal<std::char_traits<char> >, COMDAT

; 569  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 570  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) for equality using _Traits
; 571  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Left_size$[ebp]
  00006	3b 4d 14	 cmp	 ecx, DWORD PTR __Right_size$[ebp]
  00009	75 61		 jne	 SHORT $LN3@Traits_equ

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  0000b	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]
  00012	83 e9 04	 sub	 ecx, 4
  00015	72 11		 jb	 SHORT $LN9@Traits_equ
$LL10@Traits_equ:
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	3b 06		 cmp	 eax, DWORD PTR [esi]
  0001b	75 10		 jne	 SHORT $LN8@Traits_equ
  0001d	83 c2 04	 add	 edx, 4
  00020	83 c6 04	 add	 esi, 4
  00023	83 e9 04	 sub	 ecx, 4
  00026	73 ef		 jae	 SHORT $LL10@Traits_equ
$LN9@Traits_equ:
  00028	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  0002b	74 34		 je	 SHORT $LN7@Traits_equ
$LN8@Traits_equ:
  0002d	8a 02		 mov	 al, BYTE PTR [edx]
  0002f	3a 06		 cmp	 al, BYTE PTR [esi]
  00031	75 27		 jne	 SHORT $LN11@Traits_equ
  00033	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00036	74 29		 je	 SHORT $LN7@Traits_equ
  00038	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0003b	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  0003e	75 1a		 jne	 SHORT $LN11@Traits_equ
  00040	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00043	74 1c		 je	 SHORT $LN7@Traits_equ
  00045	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00048	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  0004b	75 0d		 jne	 SHORT $LN11@Traits_equ
  0004d	83 f9 ff	 cmp	 ecx, -1
  00050	74 0f		 je	 SHORT $LN7@Traits_equ
  00052	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00055	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00058	74 07		 je	 SHORT $LN7@Traits_equ
$LN11@Traits_equ:
  0005a	1b c0		 sbb	 eax, eax
  0005c	83 c8 01	 or	 eax, 1
  0005f	eb 02		 jmp	 SHORT $LN12@Traits_equ
$LN7@Traits_equ:
  00061	33 c0		 xor	 eax, eax
$LN12@Traits_equ:
  00063	5e		 pop	 esi

; 570  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) for equality using _Traits
; 571  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00064	85 c0		 test	 eax, eax
  00066	75 04		 jne	 SHORT $LN3@Traits_equ
  00068	b0 01		 mov	 al, 1

; 572  : }

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN3@Traits_equ:

; 570  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) for equality using _Traits
; 571  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0006c	32 c0		 xor	 al, al

; 572  : }

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ENDP ; std::_Traits_equal<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 416  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3210 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3211 :         // assign [_Ptr, _Ptr + _Count)
; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2263 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3213 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3215 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3225 :             },
; 3226 :             _Ptr);
; 3227 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4474 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4456 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4460 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 79   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3220 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3225 :             },
; 3226 :             _Ptr);
; 3227 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4475 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2968 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2286 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 2976 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2483 :     _CONSTEXPR20_CONTAINER basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx

; 2483 :     _CONSTEXPR20_CONTAINER basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 4562 :         _My_data._Mysize = 0;

  00015	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0001c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
$LL17@basic_stri:

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00023	8a 08		 mov	 cl, BYTE PTR [eax]
  00025	40		 inc	 eax
  00026	84 c9		 test	 cl, cl
  00028	75 f9		 jne	 SHORT $LL17@basic_stri
  0002a	2b c7		 sub	 eax, edi

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002c	8b ce		 mov	 ecx, esi
  0002e	50		 push	 eax
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2484 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2485 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2486 :         _Tidy_init();
; 2487 :         assign(_Ptr);
; 2488 :         _Proxy._Release();
; 2489 :     }

  00035	5f		 pop	 edi
  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2340 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\ActorInstanceCollisionDetection.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
