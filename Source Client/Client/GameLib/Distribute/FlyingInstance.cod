; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30151.0 

	TITLE	C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\Distribute\FlyingInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCFlyingInstance@@@@6B@	; CDynamicPool<CFlyingInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCFlyingInstance@@@@@8	; CDynamicPool<CFlyingInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCFlyingInstance@@@@8	; CDynamicPool<CFlyingInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCFlyingInstance@@@@8	; CDynamicPool<CFlyingInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCFlyingInstance@@@@8 ; CDynamicPool<CFlyingInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCFlyingInstance@@@@6B@	; CDynamicPool<CFlyingInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z ; CDynamicPool<CFlyingInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CFlyingInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCFlyingInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCFlyingInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCFlyingInstance@@@@6B@ ; CDynamicPool<CFlyingInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCFlyingInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCFlyingInstance@@@@@8 ; CDynamicPool<CFlyingInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCFlyingInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCFlyingInstance@@@@8 ; CDynamicPool<CFlyingInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCFlyingInstance@@@@8 DD 00H	; CDynamicPool<CFlyingInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCFlyingInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCFlyingInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CFlyingInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCFlyingInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCFlyingInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCFlyingInstance@@@@6B@ DD 00H	; CDynamicPool<CFlyingInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCFlyingInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCFlyingInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; SafeRotationNormalizedArc
PUBLIC	?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ; square_distance_between_linesegment_and_point
PUBLIC	??1SpherePackCallback@@UAE@XZ			; SpherePackCallback::~SpherePackCallback
PUBLIC	?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::VisibilityCallback
PUBLIC	?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ; SpherePackCallback::RayTraceCallback
PUBLIC	?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::RangeTestCallback
PUBLIC	?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::PointTest2dCallback
PUBLIC	??_GSpherePackCallback@@UAEPAXI@Z		; SpherePackCallback::`scalar deleting destructor'
PUBLIC	?Clear@CFlyingInstance@@QAEXXZ			; CFlyingInstance::Clear
PUBLIC	?SetDataPointer@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ; CFlyingInstance::SetDataPointer
PUBLIC	?SetFlyTarget@CFlyingInstance@@QAEXABVCFlyTarget@@@Z ; CFlyingInstance::SetFlyTarget
PUBLIC	??0CFlyingInstance@@QAE@XZ			; CFlyingInstance::CFlyingInstance
PUBLIC	??1CFlyingInstance@@UAE@XZ			; CFlyingInstance::~CFlyingInstance
PUBLIC	?Destroy@CFlyingInstance@@QAEXXZ		; CFlyingInstance::Destroy
PUBLIC	?Create@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@ABVCFlyTarget@@_N@Z ; CFlyingInstance::Create
PUBLIC	?Update@CFlyingInstance@@QAE_NXZ		; CFlyingInstance::Update
PUBLIC	?Render@CFlyingInstance@@QAEXXZ			; CFlyingInstance::Render
PUBLIC	?AdjustDirectionForHoming@CFlyingInstance@@QAEXABUD3DXVECTOR3@@@Z ; CFlyingInstance::AdjustDirectionForHoming
PUBLIC	?BuildAttachInstance@CFlyingInstance@@QAEXXZ	; CFlyingInstance::BuildAttachInstance
PUBLIC	?UpdateAttachInstance@CFlyingInstance@@QAEXXZ	; CFlyingInstance::UpdateAttachInstance
PUBLIC	?RenderAttachInstance@CFlyingInstance@@QAEXXZ	; CFlyingInstance::RenderAttachInstance
PUBLIC	?ClearAttachInstance@CFlyingInstance@@QAEXXZ	; CFlyingInstance::ClearAttachInstance
PUBLIC	?__Explode@CFlyingInstance@@QAEX_N@Z		; CFlyingInstance::__Explode
PUBLIC	?__Bomb@CFlyingInstance@@QAEXXZ			; CFlyingInstance::__Bomb
PUBLIC	?__Initialize@CFlyingInstance@@IAEXXZ		; CFlyingInstance::__Initialize
PUBLIC	?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ; CFlyingInstance::__SetDataPointer
PUBLIC	?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z ; CFlyingInstance::__SetTargetDirection
PUBLIC	?__SetTargetNormalizedDirection@CFlyingInstance@@IAEXABUD3DXVECTOR3@@@Z ; CFlyingInstance::__SetTargetNormalizedDirection
PUBLIC	??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::~vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >
PUBLIC	?_Xlength@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@CAXXZ ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Xlength
PUBLIC	??1?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::~_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEPAU?$_Tree_node@PAVIActorInstance@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Insert_node
PUBLIC	??_GCFlyingInstance@@UAEPAXI@Z			; CFlyingInstance::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ	; CDynamicPool<CFlyingInstance>::~CDynamicPool<CFlyingInstance>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
PUBLIC	??$_Emplace_reallocate@ABUTAttachEffectInstance@CFlyingInstance@@@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAEPAUTAttachEffectInstance@CFlyingInstance@@QAU23@ABU23@@Z ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Emplace_reallocate<CFlyingInstance::TAttachEffectInstance const &>
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
PUBLIC	??1?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAE@XZ ; RangeTester<FCheckAnotherMonsterDuringFlying>::~RangeTester<FCheckAnotherMonsterDuringFlying>
PUBLIC	?RayTraceCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ; RangeTester<FCheckAnotherMonsterDuringFlying>::RayTraceCallback
PUBLIC	?VisibilityCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckAnotherMonsterDuringFlying>::VisibilityCallback
PUBLIC	?RangeTestCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckAnotherMonsterDuringFlying>::RangeTestCallback
PUBLIC	?PointTest2dCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckAnotherMonsterDuringFlying>::PointTest2dCallback
PUBLIC	??_G?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z ; RangeTester<FCheckAnotherMonsterDuringFlying>::`scalar deleting destructor'
PUBLIC	??1?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAE@XZ ; RangeTester<FCheckBackgroundDuringFlying>::~RangeTester<FCheckBackgroundDuringFlying>
PUBLIC	?RayTraceCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ; RangeTester<FCheckBackgroundDuringFlying>::RayTraceCallback
PUBLIC	?VisibilityCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckBackgroundDuringFlying>::VisibilityCallback
PUBLIC	?RangeTestCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckBackgroundDuringFlying>::RangeTestCallback
PUBLIC	?PointTest2dCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ; RangeTester<FCheckBackgroundDuringFlying>::PointTest2dCallback
PUBLIC	??_G?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z ; RangeTester<FCheckBackgroundDuringFlying>::`scalar deleting destructor'
PUBLIC	??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::_Find_lower_bound<IActorInstance *>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
PUBLIC	??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z ; std::_Copy_memmove<CFlyingInstance::TAttachEffectInstance *,CFlyingInstance::TAttachEffectInstance *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7SpherePackCallback@@6B@			; SpherePackCallback::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
PUBLIC	?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A ; CFlyingInstance::ms_kPool
PUBLIC	??_7CFlyingInstance@@6B@			; CFlyingInstance::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A ; CSingleton<CFlyingManager>::ms_singleton
PUBLIC	??_7?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@ ; RangeTester<FCheckAnotherMonsterDuringFlying>::`vftable'
PUBLIC	??_7?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@ ; RangeTester<FCheckBackgroundDuringFlying>::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4SpherePackCallback@@6B@			; SpherePackCallback::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSpherePackCallback@@@8			; SpherePackCallback `RTTI Type Descriptor'
PUBLIC	??_R3SpherePackCallback@@8			; SpherePackCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SpherePackCallback@@8			; SpherePackCallback::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SpherePackCallback@@8		; SpherePackCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFlyingInstance@@6B@			; CFlyingInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlyingInstance@@@8			; CFlyingInstance `RTTI Type Descriptor'
PUBLIC	??_R3CFlyingInstance@@8				; CFlyingInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlyingInstance@@8				; CFlyingInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlyingInstance@@8		; CFlyingInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@ ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying> `RTTI Type Descriptor'
PUBLIC	??_R3?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@ ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@@8 ; RangeTester<FCheckBackgroundDuringFlying> `RTTI Type Descriptor'
PUBLIC	??_R3?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f000000
PUBLIC	__real@3f7ff972
PUBLIC	__real@3f800000
PUBLIC	__real@40490fdb
PUBLIC	__real@42480000
PUBLIC	__real@42b40000
PUBLIC	__real@43340000
PUBLIC	__real@bf7ff972
PUBLIC	__real@c0000000
PUBLIC	__xmm@3f800000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetCaseCRC32@@YAKPBDI0@Z:PROC			; GetCaseCRC32
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	_D3DXQuaternionRotationYawPitchRoll@16:PROC
EXTRN	_D3DXQuaternionMultiply@12:PROC
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	?GetElapsedSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetElapsedSecond
EXTRN	??_ESpherePackCallback@@UAEPAXI@Z:PROC		; SpherePackCallback::`vector deleting destructor'
EXTRN	?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z:PROC ; SpherePackFactory::RangeTest
EXTRN	?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z:PROC ; CGraphicObjectInstance::CollisionDynamicSphere
EXTRN	?CreateEffectInstance@CEffectManager@@QAEXKKPAK@Z:PROC ; CEffectManager::CreateEffectInstance
EXTRN	?SelectEffectInstance@CEffectManager@@QAEHK@Z:PROC ; CEffectManager::SelectEffectInstance
EXTRN	?DestroyEffectInstance@CEffectManager@@QAE_NK@Z:PROC ; CEffectManager::DestroyEffectInstance
EXTRN	?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z:PROC ; CEffectManager::SetEffectInstanceGlobalMatrix
EXTRN	?GetEmptyIndex@CEffectManager@@QAEHXZ:PROC	; CEffectManager::GetEmptyIndex
EXTRN	?GetTerrainHeight@CMapManager@@QAEMMM@Z:PROC	; CMapManager::GetTerrainHeight
EXTRN	?GetAttachDataReference@CFlyingData@@QAEAAUTFlyingAttachData@1@H@Z:PROC ; CFlyingData::GetAttachDataReference
EXTRN	?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z:PROC ; CFlyTrace::Create
EXTRN	?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z:PROC ; CFlyTrace::UpdateNewPosition
EXTRN	?Render@CFlyTrace@@QAEXXZ:PROC			; CFlyTrace::Render
EXTRN	?New@CFlyTrace@@SAPAV1@XZ:PROC			; CFlyTrace::New
EXTRN	?Delete@CFlyTrace@@SAXPAV1@@Z:PROC		; CFlyTrace::Delete
EXTRN	??0CFlyTarget@@QAE@XZ:PROC			; CFlyTarget::CFlyTarget
EXTRN	??1CFlyTarget@@UAE@XZ:PROC			; CFlyTarget::~CFlyTarget
EXTRN	?Clear@CFlyTarget@@QAEXXZ:PROC			; CFlyTarget::Clear
EXTRN	?IsObject@CFlyTarget@@QAE_NXZ:PROC		; CFlyTarget::IsObject
EXTRN	?IsPosition@CFlyTarget@@QAE_NXZ:PROC		; CFlyTarget::IsPosition
EXTRN	?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ:PROC ; CFlyTarget::GetFlyTargetPosition
EXTRN	?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ:PROC ; CFlyTarget::GetFlyTarget
EXTRN	??4CFlyTarget@@QAEAAV0@ABV0@@Z:PROC		; CFlyTarget::operator=
EXTRN	??_ECFlyingInstance@@UAEPAXI@Z:PROC		; CFlyingInstance::`vector deleting destructor'
EXTRN	??_E?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z:PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::`vector deleting destructor'
EXTRN	??_E?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z:PROC ; RangeTester<FCheckBackgroundDuringFlying>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_exp_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A DD 01H DUP (?) ; CSingleton<CCullingManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A DD 01H DUP (?) ; CSingleton<CEffectManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A DD 01H DUP (?) ; CSingleton<CFlyingManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CFlyingInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CFlyingInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@3f800000000000000000000000000000
CONST	SEGMENT
__xmm@3f800000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf7ff972
CONST	SEGMENT
__real@bf7ff972 DD 0bf7ff972r			; -0.9999
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7ff972
CONST	SEGMENT
__real@3f7ff972 DD 03f7ff972r			; 0.9999
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 DD FLAT:??_R0?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@@8 ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	SEGMENT
??_R2?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 DD FLAT:??_R1A@?0A@EA@?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	SEGMENT
??_R3?$RangeTester@UFCheckBackgroundDuringFlying@@@@8 DD 00H ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@@8
data$rs	SEGMENT
??_R0?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@@8 DD FLAT:??_7type_info@@6B@ ; RangeTester<FCheckBackgroundDuringFlying> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@
rdata$r	SEGMENT
??_R4?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@ DD 00H ; RangeTester<FCheckBackgroundDuringFlying>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$RangeTester@UFCheckBackgroundDuringFlying@@@@@8
	DD	FLAT:??_R3?$RangeTester@UFCheckBackgroundDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 DD FLAT:??_R0?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	SEGMENT
??_R2?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 DD FLAT:??_R1A@?0A@EA@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	SEGMENT
??_R3?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8 DD 00H ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@@8
data$rs	SEGMENT
??_R0?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@@8 DD FLAT:??_7type_info@@6B@ ; RangeTester<FCheckAnotherMonsterDuringFlying> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@
rdata$r	SEGMENT
??_R4?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@ DD 00H ; RangeTester<FCheckAnotherMonsterDuringFlying>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@@8
	DD	FLAT:??_R3?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFlyingInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlyingInstance@@8 DD FLAT:??_R0?AVCFlyingInstance@@@8 ; CFlyingInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlyingInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlyingInstance@@8
rdata$r	SEGMENT
??_R2CFlyingInstance@@8 DD FLAT:??_R1A@?0A@EA@CFlyingInstance@@8 ; CFlyingInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFlyingInstance@@8
rdata$r	SEGMENT
??_R3CFlyingInstance@@8 DD 00H				; CFlyingInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFlyingInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlyingInstance@@@8
data$rs	SEGMENT
??_R0?AVCFlyingInstance@@@8 DD FLAT:??_7type_info@@6B@	; CFlyingInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlyingInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFlyingInstance@@6B@
rdata$r	SEGMENT
??_R4CFlyingInstance@@6B@ DD 00H			; CFlyingInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlyingInstance@@@8
	DD	FLAT:??_R3CFlyingInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SpherePackCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SpherePackCallback@@8 DD FLAT:??_R0?AVSpherePackCallback@@@8 ; SpherePackCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R2SpherePackCallback@@8
rdata$r	SEGMENT
??_R2SpherePackCallback@@8 DD FLAT:??_R1A@?0A@EA@SpherePackCallback@@8 ; SpherePackCallback::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SpherePackCallback@@8
rdata$r	SEGMENT
??_R3SpherePackCallback@@8 DD 00H			; SpherePackCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSpherePackCallback@@@8
data$rs	SEGMENT
??_R0?AVSpherePackCallback@@@8 DD FLAT:??_7type_info@@6B@ ; SpherePackCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSpherePackCallback@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SpherePackCallback@@6B@
rdata$r	SEGMENT
??_R4SpherePackCallback@@6B@ DD 00H			; SpherePackCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSpherePackCallback@@@8
	DD	FLAT:??_R3SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@
CONST	SEGMENT
??_7?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@ DD FLAT:??_R4?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@ ; RangeTester<FCheckBackgroundDuringFlying>::`vftable'
	DD	FLAT:??_E?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z
	DD	FLAT:?VisibilityCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?RayTraceCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?PointTest2dCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_7?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@
CONST	SEGMENT
??_7?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@ DD FLAT:??_R4?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@ ; RangeTester<FCheckAnotherMonsterDuringFlying>::`vftable'
	DD	FLAT:??_E?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z
	DD	FLAT:?VisibilityCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?RayTraceCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?PointTest2dCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_7CFlyingInstance@@6B@
CONST	SEGMENT
??_7CFlyingInstance@@6B@ DD FLAT:??_R4CFlyingInstance@@6B@ ; CFlyingInstance::`vftable'
	DD	FLAT:??_ECFlyingInstance@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?NPOS@@3USItemPos@@B DB 01H DUP (?)
	DW	0ffffH					; NPOS
	ORG $+1
?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCFlyingInstance@@@@6B@ ; CFlyingInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7SpherePackCallback@@6B@
CONST	SEGMENT
??_7SpherePackCallback@@6B@ DD FLAT:??_R4SpherePackCallback@@6B@ ; SpherePackCallback::`vftable'
	DD	FLAT:??_ESpherePackCallback@@UAEPAXI@Z
	DD	FLAT:?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAVIActorInstance@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@ABQAVIActorInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAVIActorInstance@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@ABQAVIActorInstance@@@Z$1
__ehfuncinfo$??$?0ABQAVIActorInstance@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@ABQAVIActorInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAVIActorInstance@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@ABQAVIActorInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@_N@1@ABQAVIActorInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@_N@1@ABQAVIActorInstance@@@Z$2
__ehfuncinfo$??$_Emplace@ABQAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@_N@1@ABQAVIActorInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@_N@1@ABQAVIActorInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$ForInRange@UFCheckBackgroundDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckBackgroundDuringFlying@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$ForInRange@UFCheckBackgroundDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckBackgroundDuringFlying@@@Z$0
__ehfuncinfo$??$ForInRange@UFCheckBackgroundDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckBackgroundDuringFlying@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$ForInRange@UFCheckBackgroundDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckBackgroundDuringFlying@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@@std@@_N@1@ABQAVIActorInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@@std@@_N@1@ABQAVIActorInstance@@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@@std@@_N@1@ABQAVIActorInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@@std@@_N@1@ABQAVIActorInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$ForInRange@UFCheckAnotherMonsterDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckAnotherMonsterDuringFlying@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$ForInRange@UFCheckAnotherMonsterDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckAnotherMonsterDuringFlying@@@Z$0
__ehfuncinfo$??$ForInRange@UFCheckAnotherMonsterDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckAnotherMonsterDuringFlying@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$ForInRange@UFCheckAnotherMonsterDuringFlying@@@CCullingManager@@QAEXABVVector3d@@MPAUFCheckAnotherMonsterDuringFlying@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Update@CFlyingInstance@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$6
__ehfuncinfo$?Update@CFlyingInstance@@QAE_NXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Update@CFlyingInstance@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CFlyingInstance@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFlyingInstance@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFlyingInstance@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFlyingInstance@@QAE@XZ$1
__ehfuncinfo$??0CFlyingInstance@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFlyingInstance@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z PROC ; std::_Copy_memmove<CFlyingInstance::TAttachEffectInstance *,CFlyingInstance::TAttachEffectInstance *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z ENDP ; std::_Copy_memmove<CFlyingInstance::TAttachEffectInstance *,CFlyingInstance::TAttachEffectInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 971  :             _Al.deallocate(_Ptr, 1);
; 972  :         }
; 973  :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z PROC ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::_Find_lower_bound<IActorInstance *>, COMDAT
; _this$ = ecx

; 1595 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1596 :         const auto _Scary = _Get_scary();
; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1604 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1607 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1608 :             }
; 1609 :         }
; 1610 : 
; 1611 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1612 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z ENDP ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::_Find_lower_bound<IActorInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z PROC ; RangeTester<FCheckBackgroundDuringFlying>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 0c		 push	 12			; 0000000cH
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEPAXI@Z ENDP ; RangeTester<FCheckBackgroundDuringFlying>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
;	COMDAT ?PointTest2dCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2dCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckBackgroundDuringFlying>::PointTest2dCallback, COMDAT
; _this$ = ecx

; 50   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : #ifdef SPHERELIB_STRICT
; 52   : 		if (sphere->IS_SPHERE)
; 53   : 			puts("RangeTester::PointTest2dCallback");
; 54   : #endif
; 55   : 		if (state!=VS_OUTSIDE)

  00003	83 7d 10 02	 cmp	 DWORD PTR _state$[ebp], 2
  00007	74 35		 je	 SHORT $LN7@PointTest2

; 60   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00009	8b 45 0c	 mov	 eax, DWORD PTR _sphere$[ebp]
  0000c	56		 push	 esi
  0000d	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 296  : 		if (!p)

  00010	85 f6		 test	 esi, esi
  00012	74 29		 je	 SHORT $LN9@PointTest2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 60   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00014	57		 push	 edi
  00015	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 299  : 		if (!bHit && p->GetType() != ACTOR_OBJECT)

  00018	80 7f 1c 00	 cmp	 BYTE PTR [edi+28], 0
  0001c	75 1e		 jne	 SHORT $LN10@PointTest2
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b ce		 mov	 ecx, esi
  00022	ff 50 04	 call	 DWORD PTR [eax+4]
  00025	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  0002a	74 10		 je	 SHORT $LN10@PointTest2

; 300  : 		{
; 301  : 			if (p->CollisionDynamicSphere(s))

  0002c	57		 push	 edi
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::CollisionDynamicSphere
  00034	84 c0		 test	 al, al
  00036	74 04		 je	 SHORT $LN10@PointTest2

; 302  : 			{
; 303  : 				bHit = true;

  00038	c6 47 1c 01	 mov	 BYTE PTR [edi+28], 1
$LN10@PointTest2:
  0003c	5f		 pop	 edi
$LN9@PointTest2:
  0003d	5e		 pop	 esi
$LN7@PointTest2:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 62   : 	}

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2dCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckBackgroundDuringFlying>::PointTest2dCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
;	COMDAT ?RangeTestCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_distance$ = 12						; size = 4
_sphere$ = 16						; size = 4
_state$ = 20						; size = 4
?RangeTestCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckBackgroundDuringFlying>::RangeTestCallback, COMDAT
; _this$ = ecx

; 40   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : #ifdef SPHERELIB_STRICT
; 42   : 		if (sphere->IS_SPHERE)
; 43   : 			puts("RangeTester::RangeTestCallback");
; 44   : #endif
; 45   : 		if (state!=VS_OUTSIDE)

  00003	83 7d 14 02	 cmp	 DWORD PTR _state$[ebp], 2
  00007	74 35		 je	 SHORT $LN7@RangeTestC

; 46   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00009	8b 45 10	 mov	 eax, DWORD PTR _sphere$[ebp]
  0000c	56		 push	 esi
  0000d	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 296  : 		if (!p)

  00010	85 f6		 test	 esi, esi
  00012	74 29		 je	 SHORT $LN9@RangeTestC
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 46   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00014	57		 push	 edi
  00015	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 299  : 		if (!bHit && p->GetType() != ACTOR_OBJECT)

  00018	80 7f 1c 00	 cmp	 BYTE PTR [edi+28], 0
  0001c	75 1e		 jne	 SHORT $LN10@RangeTestC
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b ce		 mov	 ecx, esi
  00022	ff 50 04	 call	 DWORD PTR [eax+4]
  00025	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  0002a	74 10		 je	 SHORT $LN10@RangeTestC

; 300  : 		{
; 301  : 			if (p->CollisionDynamicSphere(s))

  0002c	57		 push	 edi
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::CollisionDynamicSphere
  00034	84 c0		 test	 al, al
  00036	74 04		 je	 SHORT $LN10@RangeTestC

; 302  : 			{
; 303  : 				bHit = true;

  00038	c6 47 1c 01	 mov	 BYTE PTR [edi+28], 1
$LN10@RangeTestC:
  0003c	5f		 pop	 edi
$LN9@RangeTestC:
  0003d	5e		 pop	 esi
$LN7@RangeTestC:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 47   : 	}

  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?RangeTestCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckBackgroundDuringFlying>::RangeTestCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
;	COMDAT ?VisibilityCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckBackgroundDuringFlying>::VisibilityCallback, COMDAT
; _this$ = ecx

; 37   : 	virtual void VisibilityCallback(const Frustum &f,SpherePack *sphere,ViewState state){};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckBackgroundDuringFlying>::VisibilityCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
;	COMDAT ?RayTraceCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
_sect$ = 20						; size = 4
_sphere$ = 24						; size = 4
?RayTraceCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z PROC ; RangeTester<FCheckBackgroundDuringFlying>::RayTraceCallback, COMDAT
; _this$ = ecx

; 27   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   : #ifdef SPHERELIB_STRICT
; 29   : 		if (sphere->IS_SPHERE)
; 30   : 			puts("RangeTester::RayTraceCallback");
; 31   : #endif
; 32   : 		if (dist<=0.0f || dist>=distance)

  00003	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	0f 2f c1	 comiss	 xmm0, xmm1
  0000e	73 06		 jae	 SHORT $LN3@RayTraceCa
  00010	0f 2f 4d 10	 comiss	 xmm1, DWORD PTR _distance$[ebp]
  00014	72 35		 jb	 SHORT $LN8@RayTraceCa
$LN3@RayTraceCa:

; 33   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00016	8b 45 18	 mov	 eax, DWORD PTR _sphere$[ebp]
  00019	56		 push	 esi
  0001a	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 296  : 		if (!p)

  0001d	85 f6		 test	 esi, esi
  0001f	74 29		 je	 SHORT $LN10@RayTraceCa
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 33   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00021	57		 push	 edi
  00022	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 299  : 		if (!bHit && p->GetType() != ACTOR_OBJECT)

  00025	80 7f 1c 00	 cmp	 BYTE PTR [edi+28], 0
  00029	75 1e		 jne	 SHORT $LN11@RayTraceCa
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b ce		 mov	 ecx, esi
  0002f	ff 50 04	 call	 DWORD PTR [eax+4]
  00032	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  00037	74 10		 je	 SHORT $LN11@RayTraceCa

; 300  : 		{
; 301  : 			if (p->CollisionDynamicSphere(s))

  00039	57		 push	 edi
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::CollisionDynamicSphere
  00041	84 c0		 test	 al, al
  00043	74 04		 je	 SHORT $LN11@RayTraceCa

; 302  : 			{
; 303  : 				bHit = true;

  00045	c6 47 1c 01	 mov	 BYTE PTR [edi+28], 1
$LN11@RayTraceCa:
  00049	5f		 pop	 edi
$LN10@RayTraceCa:
  0004a	5e		 pop	 esi
$LN8@RayTraceCa:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 34   : 	};

  0004b	5d		 pop	 ebp
  0004c	c2 14 00	 ret	 20			; 00000014H
?RayTraceCallback@?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ENDP ; RangeTester<FCheckBackgroundDuringFlying>::RayTraceCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
;	COMDAT ??1?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAE@XZ
_TEXT	SEGMENT
??1?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAE@XZ PROC ; RangeTester<FCheckBackgroundDuringFlying>::~RangeTester<FCheckBackgroundDuringFlying>, COMDAT
; _this$ = ecx

; 19   : 	{}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackCallback@@6B@
  00006	c3		 ret	 0
??1?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAE@XZ ENDP ; RangeTester<FCheckBackgroundDuringFlying>::~RangeTester<FCheckBackgroundDuringFlying>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 0c		 push	 12			; 0000000cH
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEPAXI@Z ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
;	COMDAT ?PointTest2dCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2dCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::PointTest2dCallback, COMDAT
; _this$ = ecx

; 50   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : #ifdef SPHERELIB_STRICT
; 52   : 		if (sphere->IS_SPHERE)
; 53   : 			puts("RangeTester::PointTest2dCallback");
; 54   : #endif
; 55   : 		if (state!=VS_OUTSIDE)

  00003	83 7d 10 02	 cmp	 DWORD PTR _state$[ebp], 2
  00007	74 3b		 je	 SHORT $LN7@PointTest2

; 60   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00009	8b 45 0c	 mov	 eax, DWORD PTR _sphere$[ebp]
  0000c	56		 push	 esi
  0000d	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 327  : 		if (!p)

  00010	85 f6		 test	 esi, esi
  00012	74 2f		 je	 SHORT $LN9@PointTest2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 60   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00014	57		 push	 edi
  00015	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 330  : 		if (!pInst && p->GetType() == ACTOR_OBJECT)

  00018	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  0001c	75 24		 jne	 SHORT $LN10@PointTest2
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b ce		 mov	 ecx, esi
  00022	ff 50 04	 call	 DWORD PTR [eax+4]
  00025	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  0002a	75 16		 jne	 SHORT $LN10@PointTest2

; 331  : 		{
; 332  : 			IActorInstance * pa = (IActorInstance*) p;
; 333  : 			if (pa != pOwner && pa->TestCollisionWithDynamicSphere(s))

  0002c	3b 77 20	 cmp	 esi, DWORD PTR [edi+32]
  0002f	74 11		 je	 SHORT $LN10@PointTest2
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b ce		 mov	 ecx, esi
  00035	57		 push	 edi
  00036	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00039	ff d0		 call	 eax
  0003b	84 c0		 test	 al, al
  0003d	74 03		 je	 SHORT $LN10@PointTest2

; 334  : 			{
; 335  : 				pInst = p;

  0003f	89 77 1c	 mov	 DWORD PTR [edi+28], esi
$LN10@PointTest2:
  00042	5f		 pop	 edi
$LN9@PointTest2:
  00043	5e		 pop	 esi
$LN7@PointTest2:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 62   : 	}

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2dCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::PointTest2dCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
;	COMDAT ?RangeTestCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_distance$ = 12						; size = 4
_sphere$ = 16						; size = 4
_state$ = 20						; size = 4
?RangeTestCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::RangeTestCallback, COMDAT
; _this$ = ecx

; 40   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : #ifdef SPHERELIB_STRICT
; 42   : 		if (sphere->IS_SPHERE)
; 43   : 			puts("RangeTester::RangeTestCallback");
; 44   : #endif
; 45   : 		if (state!=VS_OUTSIDE)

  00003	83 7d 14 02	 cmp	 DWORD PTR _state$[ebp], 2
  00007	74 3b		 je	 SHORT $LN7@RangeTestC

; 46   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00009	8b 45 10	 mov	 eax, DWORD PTR _sphere$[ebp]
  0000c	56		 push	 esi
  0000d	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 327  : 		if (!p)

  00010	85 f6		 test	 esi, esi
  00012	74 2f		 je	 SHORT $LN9@RangeTestC
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 46   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00014	57		 push	 edi
  00015	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 330  : 		if (!pInst && p->GetType() == ACTOR_OBJECT)

  00018	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  0001c	75 24		 jne	 SHORT $LN10@RangeTestC
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	8b ce		 mov	 ecx, esi
  00022	ff 50 04	 call	 DWORD PTR [eax+4]
  00025	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  0002a	75 16		 jne	 SHORT $LN10@RangeTestC

; 331  : 		{
; 332  : 			IActorInstance * pa = (IActorInstance*) p;
; 333  : 			if (pa != pOwner && pa->TestCollisionWithDynamicSphere(s))

  0002c	3b 77 20	 cmp	 esi, DWORD PTR [edi+32]
  0002f	74 11		 je	 SHORT $LN10@RangeTestC
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b ce		 mov	 ecx, esi
  00035	57		 push	 edi
  00036	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00039	ff d0		 call	 eax
  0003b	84 c0		 test	 al, al
  0003d	74 03		 je	 SHORT $LN10@RangeTestC

; 334  : 			{
; 335  : 				pInst = p;

  0003f	89 77 1c	 mov	 DWORD PTR [edi+28], esi
$LN10@RangeTestC:
  00042	5f		 pop	 edi
$LN9@RangeTestC:
  00043	5e		 pop	 esi
$LN7@RangeTestC:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 47   : 	}

  00044	5d		 pop	 ebp
  00045	c2 10 00	 ret	 16			; 00000010H
?RangeTestCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::RangeTestCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
;	COMDAT ?VisibilityCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::VisibilityCallback, COMDAT
; _this$ = ecx

; 37   : 	virtual void VisibilityCallback(const Frustum &f,SpherePack *sphere,ViewState state){};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::VisibilityCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
;	COMDAT ?RayTraceCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
_sect$ = 20						; size = 4
_sphere$ = 24						; size = 4
?RayTraceCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::RayTraceCallback, COMDAT
; _this$ = ecx

; 27   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   : #ifdef SPHERELIB_STRICT
; 29   : 		if (sphere->IS_SPHERE)
; 30   : 			puts("RangeTester::RayTraceCallback");
; 31   : #endif
; 32   : 		if (dist<=0.0f || dist>=distance)

  00003	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	0f 2f c1	 comiss	 xmm0, xmm1
  0000e	73 06		 jae	 SHORT $LN3@RayTraceCa
  00010	0f 2f 4d 10	 comiss	 xmm1, DWORD PTR _distance$[ebp]
  00014	72 3b		 jb	 SHORT $LN8@RayTraceCa
$LN3@RayTraceCa:

; 33   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00016	8b 45 18	 mov	 eax, DWORD PTR _sphere$[ebp]
  00019	56		 push	 esi
  0001a	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 327  : 		if (!p)

  0001d	85 f6		 test	 esi, esi
  0001f	74 2f		 je	 SHORT $LN10@RayTraceCa
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 33   : 			(*f)((CGraphicObjectInstance *)sphere->GetUserData());

  00021	57		 push	 edi
  00022	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 330  : 		if (!pInst && p->GetType() == ACTOR_OBJECT)

  00025	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  00029	75 24		 jne	 SHORT $LN11@RayTraceCa
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	8b ce		 mov	 ecx, esi
  0002f	ff 50 04	 call	 DWORD PTR [eax+4]
  00032	3d 24 6c a7 29	 cmp	 eax, 698838052		; 29a76c24H
  00037	75 16		 jne	 SHORT $LN11@RayTraceCa

; 331  : 		{
; 332  : 			IActorInstance * pa = (IActorInstance*) p;
; 333  : 			if (pa != pOwner && pa->TestCollisionWithDynamicSphere(s))

  00039	3b 77 20	 cmp	 esi, DWORD PTR [edi+32]
  0003c	74 11		 je	 SHORT $LN11@RayTraceCa
  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	8b ce		 mov	 ecx, esi
  00042	57		 push	 edi
  00043	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00046	ff d0		 call	 eax
  00048	84 c0		 test	 al, al
  0004a	74 03		 je	 SHORT $LN11@RayTraceCa

; 334  : 			{
; 335  : 				pInst = p;

  0004c	89 77 1c	 mov	 DWORD PTR [edi+28], esi
$LN11@RayTraceCa:
  0004f	5f		 pop	 edi
$LN10@RayTraceCa:
  00050	5e		 pop	 esi
$LN8@RayTraceCa:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 34   : 	};

  00051	5d		 pop	 ebp
  00052	c2 14 00	 ret	 20			; 00000014H
?RayTraceCallback@?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::RayTraceCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
;	COMDAT ??1?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAE@XZ
_TEXT	SEGMENT
??1?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAE@XZ PROC ; RangeTester<FCheckAnotherMonsterDuringFlying>::~RangeTester<FCheckAnotherMonsterDuringFlying>, COMDAT
; _this$ = ecx

; 19   : 	{}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackCallback@@6B@
  00006	c3		 ret	 0
??1?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAE@XZ ENDP ; RangeTester<FCheckAnotherMonsterDuringFlying>::~RangeTester<FCheckAnotherMonsterDuringFlying>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUTAttachEffectInstance@CFlyingInstance@@@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAEPAUTAttachEffectInstance@CFlyingInstance@@QAU23@ABU23@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv615 = -8						; size = 4
__Whereoff$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUTAttachEffectInstance@CFlyingInstance@@@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAEPAUTAttachEffectInstance@CFlyingInstance@@QAU23@ABU23@@Z PROC ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Emplace_reallocate<CFlyingInstance::TAttachEffectInstance const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b f1		 mov	 esi, ecx
  00012	57		 push	 edi
  00013	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  00016	8b 3e		 mov	 edi, DWORD PTR [esi]
  00018	2b d7		 sub	 edx, edi

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0001a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001d	f7 ea		 imul	 edx
  0001f	2b cf		 sub	 ecx, edi
  00021	d1 fa		 sar	 edx, 1
  00023	8b c2		 mov	 eax, edx
  00025	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00028	03 c2		 add	 eax, edx
  0002a	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00032	f7 e9		 imul	 ecx
  00034	d1 fa		 sar	 edx, 1
  00036	8b c2		 mov	 eax, edx
  00038	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003b	03 c2		 add	 eax, edx
  0003d	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00040	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00045	0f 84 3f 01 00
	00		 je	 $LN104@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  0004e	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00051	2b cf		 sub	 ecx, edi
  00053	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00058	f7 e9		 imul	 ecx

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005a	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005f	d1 fa		 sar	 edx, 1
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 12		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00072	bf fc ff ff ff	 mov	 edi, -4			; fffffffcH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	83 c4 04	 add	 esp, 4
  00080	8b d8		 mov	 ebx, eax
  00082	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00084	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00087	8b cb		 mov	 ecx, ebx
  00089	3b c3		 cmp	 eax, ebx
  0008b	0f 43 c8	 cmovae	 ecx, eax
  0008e	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00094	0f 87 f5 00 00
	00		 ja	 $LN105@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0009a	8d 3c 49	 lea	 edi, DWORD PTR [ecx+ecx*2]
  0009d	c1 e7 02	 shl	 edi, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a0	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  000a6	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a8	57		 push	 edi
  000a9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ae	83 c4 04	 add	 esp, 4
  000b1	8b d8		 mov	 ebx, eax
  000b3	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000b5	85 ff		 test	 edi, edi
  000b7	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  000b9	57		 push	 edi
  000ba	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000bf	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c2	8b d8		 mov	 ebx, eax
  000c4	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000c6	33 db		 xor	 ebx, ebx
$LN23@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000c8	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000cb	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000ce	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d4	89 4d f8	 mov	 DWORD PTR tv615[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d7	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000db	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  000df	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e2	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000e5	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000e8	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ed	3b c2		 cmp	 eax, edx
  000ef	75 04		 jne	 SHORT $LN4@Emplace_re
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f1	8b c3		 mov	 eax, ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 781  :         } else { // provide basic guarantee

  000f3	eb 17		 jmp	 SHORT $LN66@Emplace_re
$LN4@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f5	53		 push	 ebx
  000f6	50		 push	 eax
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z ; std::_Copy_memmove<CFlyingInstance::TAttachEffectInstance *,CFlyingInstance::TAttachEffectInstance *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000fd	8b 45 f8	 mov	 eax, DWORD PTR tv615[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00106	83 c0 0c	 add	 eax, 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00109	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
$LN66@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0010c	50		 push	 eax
  0010d	52		 push	 edx
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUTAttachEffectInstance@CFlyingInstance@@PAU12@@std@@YAPAUTAttachEffectInstance@CFlyingInstance@@PAU12@00@Z ; std::_Copy_memmove<CFlyingInstance::TAttachEffectInstance *,CFlyingInstance::TAttachEffectInstance *>

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00114	8b 36		 mov	 esi, DWORD PTR [esi]

; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00116	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00119	85 f6		 test	 esi, esi
  0011b	74 42		 je	 SHORT $LN86@Emplace_re

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00120	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00125	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00128	2b ce		 sub	 ecx, esi
  0012a	f7 e9		 imul	 ecx
  0012c	d1 fa		 sar	 edx, 1
  0012e	8b c2		 mov	 eax, edx
  00130	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00133	03 c2		 add	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00135	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00138	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0013b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00141	72 12		 jb	 SHORT $LN96@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00143	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00146	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00149	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014b	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0014e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00151	77 32		 ja	 SHORT $LN93@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00153	8b f2		 mov	 esi, edx
$LN96@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00155	51		 push	 ecx
  00156	56		 push	 esi
  00157	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0015c	83 c4 08	 add	 esp, 8
$LN86@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  0015f	8b 4d f4	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
  00162	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00165	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00168	8d 49 03	 lea	 ecx, DWORD PTR [ecx+3]
  0016b	89 18		 mov	 DWORD PTR [eax], ebx
  0016d	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  00170	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00173	8d 0c 1f	 lea	 ecx, DWORD PTR [edi+ebx]

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  00176	5f		 pop	 edi
  00177	5e		 pop	 esi

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  00178	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  0017b	8b 45 f8	 mov	 eax, DWORD PTR tv615[ebp]
  0017e	5b		 pop	 ebx

; 794  :     }

  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN93@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00185	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN104@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 765  :             _Xlength();

  0018a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@CAXXZ ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Xlength
$LN105@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0018f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN102@Emplace_re:
  00194	cc		 int	 3
??$_Emplace_reallocate@ABUTAttachEffectInstance@CFlyingInstance@@@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAEPAUTAttachEffectInstance@CFlyingInstance@@QAU23@ABU23@@Z ENDP ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Emplace_reallocate<CFlyingInstance::TAttachEffectInstance const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 14		 push	 20			; 00000014H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CFlyingInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A ; CFlyingInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ ; CDynamicPool<CFlyingInstance>::~CDynamicPool<CFlyingInstance>
??__F?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CFlyingInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ??__E?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CFlyingInstance::ms_kPool'', COMDAT

; 14   : CDynamicPool<CFlyingInstance> CFlyingInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CFlyingInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CFlyingInstance@@2V?$CDynamicPool@VCFlyingInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CFlyingInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z PROC	; CDynamicPool<CFlyingInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ ; CDynamicPool<CFlyingInstance>::~CDynamicPool<CFlyingInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCFlyingInstance@@@@UAEPAXI@Z ENDP	; CDynamicPool<CFlyingInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ PROC	; CDynamicPool<CFlyingInstance>::~CDynamicPool<CFlyingInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCFlyingInstance@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1756 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1756 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCFlyingInstance@@@@UAE@XZ ENDP	; CDynamicPool<CFlyingInstance>::~CDynamicPool<CFlyingInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCFlyingInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFlyingInstance@@UAEPAXI@Z PROC			; CFlyingInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFlyingInstance@@UAE@XZ ; CFlyingInstance::~CFlyingInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 bc 00 00 00	 push	 188			; 000000bcH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCFlyingInstance@@UAEPAXI@Z ENDP			; CFlyingInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEPAU?$_Tree_node@PAVIActorInstance@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEPAU?$_Tree_node@PAVIActorInstance@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEPAU?$_Tree_node@PAVIActorInstance@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::~_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >, COMDAT
; _this$ = ecx

; 1084 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 14		 push	 20			; 00000014H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	6a 14		 push	 20			; 00000014H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1091 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::~_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::~vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >, COMDAT
; _this$ = ecx

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN4@vector

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1756 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0005d	5f		 pop	 edi

; 704  :     }

  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN17@vector:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00065	cc		 int	 3
??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::~vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__SetTargetNormalizedDirection@CFlyingInstance@@IAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_q$ = -28						; size = 16
$T1 = -12						; size = 12
_f$1$ = 8						; size = 4
_f$1$ = 8						; size = 4
tv1239 = 8						; size = 4
tv1191 = 8						; size = 4
_v3NomalizedDirection$ = 8				; size = 4
?__SetTargetNormalizedDirection@CFlyingInstance@@IAEXABUD3DXVECTOR3@@@Z PROC ; CFlyingInstance::__SetTargetNormalizedDirection, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 133  : 	D3DXQUATERNION q = SafeRotationNormalizedArc(D3DXVECTOR3(0.0f,-1.0f,0.0f),v3NomalizedDirection);

  00008	ff 75 08	 push	 DWORD PTR _v3NomalizedDirection$[ebp]
  0000b	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0000e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 133  : 	D3DXQUATERNION q = SafeRotationNormalizedArc(D3DXVECTOR3(0.0f,-1.0f,0.0f),v3NomalizedDirection);

  00015	50		 push	 eax
  00016	8d 45 e4	 lea	 eax, DWORD PTR _q$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00019	c7 45 f8 00 00
	80 bf		 mov	 DWORD PTR $T1[ebp+4], -1082130432 ; bf800000H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 133  : 	D3DXQUATERNION q = SafeRotationNormalizedArc(D3DXVECTOR3(0.0f,-1.0f,0.0f),v3NomalizedDirection);

  00020	50		 push	 eax
  00021	8b f9		 mov	 edi, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 133  : 	D3DXQUATERNION q = SafeRotationNormalizedArc(D3DXVECTOR3(0.0f,-1.0f,0.0f),v3NomalizedDirection);

  0002a	e8 00 00 00 00	 call	 ?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; SafeRotationNormalizedArc
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 134  : 	D3DXQuaternionMultiply(&m_qRot,&m_qRot,&q);

  00032	8d 45 e4	 lea	 eax, DWORD PTR _q$[ebp]
  00035	8d 77 20	 lea	 esi, DWORD PTR [edi+32]
  00038	50		 push	 eax
  00039	56		 push	 esi
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00040	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00044	f3 0f 10 7f 5c	 movss	 xmm7, DWORD PTR [edi+92]
  00049	0f 28 d1	 movaps	 xmm2, xmm1
  0004c	f3 0f 10 5f 60	 movss	 xmm3, DWORD PTR [edi+96]
  00051	f3 0f 10 6f 58	 movss	 xmm5, DWORD PTR [edi+88]
  00056	f3 0f 59 d3	 mulss	 xmm2, xmm3
  0005a	0f 28 c5	 movaps	 xmm0, xmm5
  0005d	f3 0f 59 46 08	 mulss	 xmm0, DWORD PTR [esi+8]
  00062	f3 0f 59 5e 04	 mulss	 xmm3, DWORD PTR [esi+4]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00067	f3 0f 59 6e 04	 mulss	 xmm5, DWORD PTR [esi+4]
  0006c	f3 0f 5c d0	 subss	 xmm2, xmm0
  00070	f3 0f 59 cf	 mulss	 xmm1, xmm7
  00074	f3 0f 59 7e 08	 mulss	 xmm7, DWORD PTR [esi+8]
  00079	f3 0f 5c e9	 subss	 xmm5, xmm1
  0007d	f3 0f 5c fb	 subss	 xmm7, xmm3

; 1280 : 
; 1281 :     *pOut = v;

  00081	f3 0f 11 7f 4c	 movss	 DWORD PTR [edi+76], xmm7
  00086	f3 0f 11 57 50	 movss	 DWORD PTR [edi+80], xmm2
  0008b	f3 0f 11 6f 54	 movss	 DWORD PTR [edi+84], xmm5
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 113  : 	*pvout *= -2*pq->w;

  00090	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00095	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c0000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 222  :     x *= f;

  0009d	0f 28 e0	 movaps	 xmm4, xmm0

; 223  :     y *= f;

  000a0	0f 28 f0	 movaps	 xmm6, xmm0

; 224  :     z *= f;

  000a3	f3 0f 59 47 54	 mulss	 xmm0, DWORD PTR [edi+84]
  000a8	f3 0f 59 67 4c	 mulss	 xmm4, DWORD PTR [edi+76]
  000ad	f3 0f 59 77 50	 mulss	 xmm6, DWORD PTR [edi+80]
  000b2	f3 0f 11 47 54	 movss	 DWORD PTR [edi+84], xmm0
  000b7	f3 0f 11 67 4c	 movss	 DWORD PTR [edi+76], xmm4
  000bc	f3 0f 11 77 50	 movss	 DWORD PTR [edi+80], xmm6

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000c1	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  000c6	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  000cb	f3 0f 10 5e 0c	 movss	 xmm3, DWORD PTR [esi+12]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  000d0	f3 0f 10 7f 5c	 movss	 xmm7, DWORD PTR [edi+92]

; 224  :     z *= f;

  000d5	f3 0f 11 45 08	 movss	 DWORD PTR _f$1$[ebp], xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000da	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000de	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000e2	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000e6	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000ea	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  000ee	f3 0f 59 db	 mulss	 xmm3, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  000f2	f3 0f 10 47 60	 movss	 xmm0, DWORD PTR [edi+96]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000f7	f3 0f 58 d1	 addss	 xmm2, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  000fb	f3 0f 5c da	 subss	 xmm3, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  000ff	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00103	0f 28 eb	 movaps	 xmm5, xmm3
  00106	f3 0f 59 6f 58	 mulss	 xmm5, DWORD PTR [edi+88]

; 205  :     y += v.y;

  0010b	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _f$1$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00110	f3 0f 59 fb	 mulss	 xmm7, xmm3

; 182  :     z = fz;

  00114	f3 0f 58 ec	 addss	 xmm5, xmm4

; 204  :     x += v.x;

  00118	f3 0f 58 fe	 addss	 xmm7, xmm6

; 206  :     z += v.z;

  0011c	f3 0f 11 47 54	 movss	 DWORD PTR [edi+84], xmm0
  00121	f3 0f 11 45 08	 movss	 DWORD PTR tv1191[ebp], xmm0
  00126	f3 0f 11 6f 4c	 movss	 DWORD PTR [edi+76], xmm5
  0012b	f3 0f 11 7f 50	 movss	 DWORD PTR [edi+80], xmm7

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00130	f3 0f 10 5e 04	 movss	 xmm3, DWORD PTR [esi+4]
  00135	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00139	0f 28 d3	 movaps	 xmm2, xmm3
  0013c	f3 0f 59 57 5c	 mulss	 xmm2, DWORD PTR [edi+92]
  00141	0f 28 c1	 movaps	 xmm0, xmm1
  00144	f3 0f 59 47 58	 mulss	 xmm0, DWORD PTR [edi+88]
  00149	f3 0f 10 66 08	 movss	 xmm4, DWORD PTR [esi+8]
  0014e	f3 0f 58 d0	 addss	 xmm2, xmm0
  00152	0f 28 c4	 movaps	 xmm0, xmm4
  00155	f3 0f 59 47 60	 mulss	 xmm0, DWORD PTR [edi+96]
  0015a	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 115  : 	*pvout += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  0015e	f3 0f 58 d2	 addss	 xmm2, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00162	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00166	f3 0f 59 da	 mulss	 xmm3, xmm2
  0016a	f3 0f 59 e2	 mulss	 xmm4, xmm2

; 182  :     z = fz;

  0016e	f3 0f 58 cd	 addss	 xmm1, xmm5

; 204  :     x += v.x;

  00172	f3 0f 58 df	 addss	 xmm3, xmm7

; 205  :     y += v.y;

  00176	f3 0f 58 65 08	 addss	 xmm4, DWORD PTR tv1191[ebp]
  0017b	f3 0f 11 4f 4c	 movss	 DWORD PTR [edi+76], xmm1
  00180	f3 0f 11 5f 50	 movss	 DWORD PTR [edi+80], xmm3

; 206  :     z += v.z;

  00185	f3 0f 11 67 54	 movss	 DWORD PTR [edi+84], xmm4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 136  : 	Vec3TransformQuaternion(&m_v3Accel, &m_pData->m_v3Accel, &m_qRot);

  0018a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0018d	f3 0f 10 7e 08	 movss	 xmm7, DWORD PTR [esi+8]
  00192	f3 0f 10 5e 04	 movss	 xmm3, DWORD PTR [esi+4]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00197	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  0019b	f3 0f 10 68 78	 movss	 xmm5, DWORD PTR [eax+120]
  001a0	0f 28 d1	 movaps	 xmm2, xmm1
  001a3	f3 0f 59 90 80
	00 00 00	 mulss	 xmm2, DWORD PTR [eax+128]
  001ab	0f 28 c5	 movaps	 xmm0, xmm5

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  001ae	f3 0f 59 48 7c	 mulss	 xmm1, DWORD PTR [eax+124]
  001b3	f3 0f 59 c7	 mulss	 xmm0, xmm7
  001b7	f3 0f 59 78 7c	 mulss	 xmm7, DWORD PTR [eax+124]
  001bc	f3 0f 5c d0	 subss	 xmm2, xmm0
  001c0	f3 0f 59 eb	 mulss	 xmm5, xmm3
  001c4	f3 0f 59 98 80
	00 00 00	 mulss	 xmm3, DWORD PTR [eax+128]
  001cc	f3 0f 5c e9	 subss	 xmm5, xmm1
  001d0	f3 0f 5c fb	 subss	 xmm7, xmm3

; 1280 : 
; 1281 :     *pOut = v;

  001d4	f3 0f 11 7f 64	 movss	 DWORD PTR [edi+100], xmm7
  001d9	f3 0f 11 57 68	 movss	 DWORD PTR [edi+104], xmm2
  001de	f3 0f 11 6f 6c	 movss	 DWORD PTR [edi+108], xmm5
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 113  : 	*pvout *= -2*pq->w;

  001e3	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  001e8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c0000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 222  :     x *= f;

  001f0	0f 28 e0	 movaps	 xmm4, xmm0

; 223  :     y *= f;

  001f3	0f 28 f0	 movaps	 xmm6, xmm0

; 224  :     z *= f;

  001f6	f3 0f 59 47 6c	 mulss	 xmm0, DWORD PTR [edi+108]
  001fb	f3 0f 59 67 64	 mulss	 xmm4, DWORD PTR [edi+100]
  00200	f3 0f 59 77 68	 mulss	 xmm6, DWORD PTR [edi+104]
  00205	f3 0f 11 47 6c	 movss	 DWORD PTR [edi+108], xmm0
  0020a	f3 0f 11 67 64	 movss	 DWORD PTR [edi+100], xmm4
  0020f	f3 0f 11 77 68	 movss	 DWORD PTR [edi+104], xmm6

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00214	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  00219	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  0021e	f3 0f 10 5e 0c	 movss	 xmm3, DWORD PTR [esi+12]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00223	f3 0f 10 78 7c	 movss	 xmm7, DWORD PTR [eax+124]

; 224  :     z *= f;

  00228	f3 0f 11 45 08	 movss	 DWORD PTR _f$1$[ebp], xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0022d	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00231	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00235	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00239	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0023d	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00241	f3 0f 59 db	 mulss	 xmm3, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00245	f3 0f 10 80 80
	00 00 00	 movss	 xmm0, DWORD PTR [eax+128]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0024d	f3 0f 58 d1	 addss	 xmm2, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 114  : 	*pvout += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00251	f3 0f 5c da	 subss	 xmm3, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00255	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00259	0f 28 eb	 movaps	 xmm5, xmm3
  0025c	f3 0f 59 68 78	 mulss	 xmm5, DWORD PTR [eax+120]

; 205  :     y += v.y;

  00261	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _f$1$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00266	f3 0f 59 fb	 mulss	 xmm7, xmm3

; 182  :     z = fz;

  0026a	f3 0f 58 ec	 addss	 xmm5, xmm4

; 206  :     z += v.z;

  0026e	f3 0f 11 47 6c	 movss	 DWORD PTR [edi+108], xmm0
  00273	f3 0f 58 fe	 addss	 xmm7, xmm6
  00277	f3 0f 11 45 08	 movss	 DWORD PTR tv1239[ebp], xmm0
  0027c	f3 0f 11 6f 64	 movss	 DWORD PTR [edi+100], xmm5
  00281	f3 0f 11 7f 68	 movss	 DWORD PTR [edi+104], xmm7

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00286	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  0028a	f3 0f 10 5e 04	 movss	 xmm3, DWORD PTR [esi+4]
  0028f	0f 28 c1	 movaps	 xmm0, xmm1
  00292	f3 0f 59 40 78	 mulss	 xmm0, DWORD PTR [eax+120]
  00297	0f 28 d3	 movaps	 xmm2, xmm3
  0029a	f3 0f 59 50 7c	 mulss	 xmm2, DWORD PTR [eax+124]
  0029f	f3 0f 10 66 08	 movss	 xmm4, DWORD PTR [esi+8]
  002a4	f3 0f 58 d0	 addss	 xmm2, xmm0
  002a8	0f 28 c4	 movaps	 xmm0, xmm4
  002ab	f3 0f 59 80 80
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+128]
  002b3	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 115  : 	*pvout += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  002b7	f3 0f 58 d2	 addss	 xmm2, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002bb	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 182  :     z = fz;

  002bf	f3 0f 58 cd	 addss	 xmm1, xmm5

; 204  :     x += v.x;

  002c3	f3 0f 11 4f 64	 movss	 DWORD PTR [edi+100], xmm1

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002c8	f3 0f 59 da	 mulss	 xmm3, xmm2
  002cc	f3 0f 59 e2	 mulss	 xmm4, xmm2

; 204  :     x += v.x;

  002d0	f3 0f 58 df	 addss	 xmm3, xmm7

; 205  :     y += v.y;

  002d4	f3 0f 58 65 08	 addss	 xmm4, DWORD PTR tv1239[ebp]
  002d9	f3 0f 11 5f 68	 movss	 DWORD PTR [edi+104], xmm3

; 206  :     z += v.z;

  002de	f3 0f 11 67 6c	 movss	 DWORD PTR [edi+108], xmm4
  002e3	5f		 pop	 edi
  002e4	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 137  : }

  002e5	8b e5		 mov	 esp, ebp
  002e7	5d		 pop	 ebp
  002e8	c2 04 00	 ret	 4
?__SetTargetNormalizedDirection@CFlyingInstance@@IAEXABUD3DXVECTOR3@@@Z ENDP ; CFlyingInstance::__SetTargetNormalizedDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z
_TEXT	SEGMENT
_v3TargetPos$ = -28					; size = 12
_v3TargetDir$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_c_rkTarget$ = 8					; size = 4
?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z PROC ; CFlyingInstance::__SetTargetDirection, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _c_rkTarget$[ebp]

; 118  : 	D3DXVECTOR3 v3TargetPos=c_rkTarget.GetFlyTargetPosition();

  00016	e8 00 00 00 00	 call	 ?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ; CFlyTarget::GetFlyTargetPosition
  0001b	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0001f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00022	89 45 ec	 mov	 DWORD PTR _v3TargetPos$[ebp+8], eax

; 119  : 
; 120  : 	if (m_pData->m_bMaintainParallel)

  00025	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00028	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _v3TargetPos$[ebp+8]
  0002d	66 0f d6 45 e4	 movq	 QWORD PTR _v3TargetPos$[ebp], xmm0
  00032	80 78 1d 00	 cmp	 BYTE PTR [eax+29], 0
  00036	74 08		 je	 SHORT $LN2@SetTargetD

; 121  : 	{
; 122  : 		v3TargetPos.z += 50.0f;

  00038	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@42480000
$LN2@SetTargetD:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00040	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v3TargetPos$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 127  : 	D3DXVec3Normalize(&v3TargetDir, &v3TargetDir);

  00045	8d 45 f0	 lea	 eax, DWORD PTR _v3TargetDir$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00048	f3 0f 5c 46 40	 subss	 xmm0, DWORD PTR [esi+64]
  0004d	f3 0f 5c 4e 48	 subss	 xmm1, DWORD PTR [esi+72]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 127  : 	D3DXVec3Normalize(&v3TargetDir, &v3TargetDir);

  00052	50		 push	 eax
  00053	50		 push	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00054	f3 0f 11 45 f0	 movss	 DWORD PTR _v3TargetDir$[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00059	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _v3TargetPos$[ebp+4]
  0005e	f3 0f 5c 46 44	 subss	 xmm0, DWORD PTR [esi+68]

; 182  :     z = fz;

  00063	f3 0f 11 4d f8	 movss	 DWORD PTR _v3TargetDir$[ebp+8], xmm1
  00068	f3 0f 11 45 f4	 movss	 DWORD PTR _v3TargetDir$[ebp+4], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 127  : 	D3DXVec3Normalize(&v3TargetDir, &v3TargetDir);

  0006d	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 128  : 	__SetTargetNormalizedDirection(v3TargetDir);

  00072	8d 45 f0	 lea	 eax, DWORD PTR _v3TargetDir$[ebp]
  00075	8b ce		 mov	 ecx, esi
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?__SetTargetNormalizedDirection@CFlyingInstance@@IAEXABUD3DXVECTOR3@@@Z ; CFlyingInstance::__SetTargetNormalizedDirection

; 129  : }

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	33 cd		 xor	 ecx, ebp
  00082	5e		 pop	 esi
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z ENDP ; CFlyingInstance::__SetTargetDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv292 = -80						; size = 16
_q2$1 = -56						; size = 16
_q1$2 = -40						; size = 16
tv344 = -24						; size = 4
tv352 = -20						; size = 4
$T3 = -16						; size = 12
$T4 = -16						; size = 12
$T5 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pData$ = 8						; size = 4
_v3StartPosition$ = 12					; size = 4
?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z PROC ; CFlyingInstance::__SetDataPointer, COMDAT
; _this$ = ecx

; 576  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 58	 sub	 esp, 88			; 00000058H
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 578  : 	m_qRot = D3DXQUATERNION(0.0f,0.0f,0.0f,1.0f),

  00023	8b 43 0c	 mov	 eax, DWORD PTR _v3StartPosition$[ebx]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 667  :     x = fx;

  00026	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 576  : {

  0002d	56		 push	 esi
  0002e	8b f1		 mov	 esi, ecx
  00030	57		 push	 edi
  00031	8b 7b 08	 mov	 edi, DWORD PTR _pData$[ebx]

; 577  : 	m_pData = pData;

  00034	89 7e 1c	 mov	 DWORD PTR [esi+28], edi

; 578  : 	m_qRot = D3DXQUATERNION(0.0f,0.0f,0.0f,1.0f),

  00037	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  0003b	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003f	66 0f d6 46 40	 movq	 QWORD PTR [esi+64], xmm0
  00044	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00047	89 46 48	 mov	 DWORD PTR [esi+72], eax

; 579  : 	m_v3Position = (v3StartPosition);
; 580  : 	m_bAlive = (true);

  0004a	c6 46 34 01	 mov	 BYTE PTR [esi+52], 1

; 581  : 
; 582  : 	m_fStartTime = CTimer::Instance().GetCurrentSecond();

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00054	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00059	d9 5e 30	 fstp	 DWORD PTR [esi+48]

; 583  : 
; 584  : 	D3DXQuaternionRotationYawPitchRoll(&m_qRot,D3DXToRadian(pData->m_fRollAngle-90.0f),0.0f,D3DXToRadian(pData->m_fConeAngle));

  0005c	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  00061	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  00064	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0006c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0006f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00075	0f 57 c0	 xorps	 xmm0, xmm0
  00078	0f 29 45 b0	 movaps	 XMMWORD PTR tv292[ebp], xmm0
  0007c	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  00081	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42b40000
  00089	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00091	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _D3DXQuaternionRotationYawPitchRoll@16

; 585  : 	if (pData->m_bSpreading)

  000a4	80 7f 1c 00	 cmp	 BYTE PTR [edi+28], 0
  000a8	0f 84 cb 00 00
	00		 je	 $LN2@SetDataPoi

; 588  : 		D3DXQuaternionRotationAxis(&q2, &D3DXVECTOR3(0.0f,0.0f,1.0f),(frandom(-3.141592f/3,+3.141592f/3)+frandom(-3.141592f/3,+3.141592f/3))/2);

  000ae	83 ec 08	 sub	 esp, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  000b1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0

; 181  :     y = fy;

  000b8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 182  :     z = fz;

  000bf	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR $T5[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 588  : 		D3DXQuaternionRotationAxis(&q2, &D3DXVECTOR3(0.0f,0.0f,1.0f),(frandom(-3.141592f/3,+3.141592f/3)+frandom(-3.141592f/3,+3.141592f/3))/2);

  000c6	c7 44 24 04 90
	0a 86 3f	 mov	 DWORD PTR [esp+4], 1065749136 ; 3f860a90H
  000ce	c7 04 24 90 0a
	86 bf		 mov	 DWORD PTR [esp], -1081734512 ; bf860a90H
  000d5	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000da	d9 5d ec	 fstp	 DWORD PTR tv352[ebp]
  000dd	c7 44 24 04 90
	0a 86 3f	 mov	 DWORD PTR [esp+4], 1065749136 ; 3f860a90H
  000e5	c7 04 24 90 0a
	86 bf		 mov	 DWORD PTR [esp], -1081734512 ; bf860a90H
  000ec	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000f1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv352[ebp]
  000f6	8d 45 f0	 lea	 eax, DWORD PTR $T5[ebp]
  000f9	d9 5d e8	 fstp	 DWORD PTR tv344[ebp]
  000fc	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR tv344[ebp]
  00101	83 c4 04	 add	 esp, 4
  00104	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	50		 push	 eax
  00112	8d 45 c8	 lea	 eax, DWORD PTR _q2$1[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 589  : 		D3DXQuaternionRotationAxis(&q1, &D3DXVECTOR3(0.0f,-1.0f,0.0f), frandom(0,2*3.1415926535897931f));

  0011b	83 ec 08	 sub	 esp, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0011e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0

; 181  :     y = fy;

  00125	c7 45 f4 00 00
	80 bf		 mov	 DWORD PTR $T4[ebp+4], -1082130432 ; bf800000H

; 182  :     z = fz;

  0012c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 589  : 		D3DXQuaternionRotationAxis(&q1, &D3DXVECTOR3(0.0f,-1.0f,0.0f), frandom(0,2*3.1415926535897931f));

  00133	c7 44 24 04 db
	0f c9 40	 mov	 DWORD PTR [esp+4], 1086918619 ; 40c90fdbH
  0013b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00142	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00147	83 c4 04	 add	 esp, 4
  0014a	8d 45 f0	 lea	 eax, DWORD PTR $T4[ebp]
  0014d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00150	50		 push	 eax
  00151	8d 45 d8	 lea	 eax, DWORD PTR _q1$2[ebp]
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 590  : 		D3DXQuaternionMultiply(&q1,&q2,&q1);

  0015a	8d 45 d8	 lea	 eax, DWORD PTR _q1$2[ebp]
  0015d	50		 push	 eax
  0015e	8d 45 c8	 lea	 eax, DWORD PTR _q2$1[ebp]
  00161	50		 push	 eax
  00162	8d 45 d8	 lea	 eax, DWORD PTR _q1$2[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 591  : 		D3DXQuaternionMultiply(&m_qRot,&q1,&m_qRot);

  0016b	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  0016e	50		 push	 eax
  0016f	8d 4d d8	 lea	 ecx, DWORD PTR _q1$2[ebp]
  00172	51		 push	 ecx
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
$LN2@SetDataPoi:

; 593  : 	m_v3Velocity = m_v3LocalVelocity = D3DXVECTOR3(0.0f,-pData->m_fInitVel,0.0f);

  00179	f3 0f 10 47 20	 movss	 xmm0, DWORD PTR [edi+32]

; 597  : 
; 598  : 	BuildAttachInstance();

  0017e	8b ce		 mov	 ecx, esi
  00180	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00187	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR tv292[ebp]
  0018b	0f 14 c8	 unpcklps xmm1, xmm0
  0018e	66 0f d6 4e 58	 movq	 QWORD PTR [esi+88], xmm1
  00193	66 0f d6 4e 4c	 movq	 QWORD PTR [esi+76], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00198	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 593  : 	m_v3Velocity = m_v3LocalVelocity = D3DXVECTOR3(0.0f,-pData->m_fInitVel,0.0f);

  0019f	8b 45 f8	 mov	 eax, DWORD PTR $T3[ebp+8]
  001a2	89 46 60	 mov	 DWORD PTR [esi+96], eax
  001a5	89 46 54	 mov	 DWORD PTR [esi+84], eax

; 594  : 	m_v3Accel = pData->m_v3Accel;

  001a8	f3 0f 7e 47 78	 movq	 xmm0, QWORD PTR [edi+120]
  001ad	66 0f d6 46 64	 movq	 QWORD PTR [esi+100], xmm0
  001b2	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 667  :     x = fx;

  001b8	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 594  : 	m_v3Accel = pData->m_v3Accel;

  001bf	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 595  : 	m_fRemainRange = pData->m_fRange;

  001c2	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  001c5	89 46 70	 mov	 DWORD PTR [esi+112], eax

; 596  : 	m_qAttachRotation = D3DXQUATERNION(0.0f,0.0f,0.0f,1.0f);

  001c8	0f 11 86 8c 00
	00 00		 movups	 XMMWORD PTR [esi+140], xmm0

; 597  : 
; 598  : 	BuildAttachInstance();

  001cf	e8 00 00 00 00	 call	 ?BuildAttachInstance@CFlyingInstance@@QAEXXZ ; CFlyingInstance::BuildAttachInstance

; 599  : 	UpdateAttachInstance();

  001d4	8b ce		 mov	 ecx, esi
  001d6	e8 00 00 00 00	 call	 ?UpdateAttachInstance@CFlyingInstance@@QAEXXZ ; CFlyingInstance::UpdateAttachInstance

; 600  : 
; 601  : 	m_iPierceCount = pData->m_iPierceCount;

  001db	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]

; 602  : }

  001de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	5f		 pop	 edi
  001e2	89 46 38	 mov	 DWORD PTR [esi+56], eax
  001e5	33 cd		 xor	 ecx, ebp
  001e7	5e		 pop	 esi
  001e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	8b e3		 mov	 esp, ebx
  001f2	5b		 pop	 ebx
  001f3	c2 08 00	 ret	 8
?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ENDP ; CFlyingInstance::__SetDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__Initialize@CFlyingInstance@@IAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 12
_this$1$ = -4						; size = 4
?__Initialize@CFlyingInstance@@IAEXXZ PROC		; CFlyingInstance::__Initialize, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 29   : 	m_v3Accel=m_v3LocalVelocity=m_v3Velocity=m_v3Position=D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00007	56		 push	 esi
  00008	57		 push	 edi

; 27   : {

  00009	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000c	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 29   : 	m_v3Accel=m_v3LocalVelocity=m_v3Velocity=m_v3Position=D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00016	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp+8]
  00019	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0
  0001d	0f 11 81 8c 00
	00 00		 movups	 XMMWORD PTR [ecx+140], xmm0
  00024	0f 14 c0	 unpcklps xmm0, xmm0

; 30   : 
; 31   : 	m_pHandler=NULL;
; 32   : 	m_pData=NULL;
; 33   : 	m_pOwner=NULL;
; 34   : 
; 35   : 	m_bAlive=false;
; 36   : 	m_canAttack=false;
; 37   : 
; 38   : 	m_dwSkillIndex = 0;
; 39   : 
; 40   : 	m_iPierceCount=0;
; 41   : 
; 42   : 	m_fStartTime=0.0f;
; 43   : 	m_fRemainRange=0.0f;
; 44   : 
; 45   : 	m_bTargetHitted = FALSE;
; 46   : 	m_HittedObjectSet.clear();

  00027	8d b9 b4 00 00
	00		 lea	 edi, DWORD PTR [ecx+180]
  0002d	66 0f d6 41 40	 movq	 QWORD PTR [ecx+64], xmm0
  00032	66 0f d6 41 4c	 movq	 QWORD PTR [ecx+76], xmm0
  00037	66 0f d6 41 58	 movq	 QWORD PTR [ecx+88], xmm0
  0003c	66 0f d6 41 64	 movq	 QWORD PTR [ecx+100], xmm0
  00041	89 41 48	 mov	 DWORD PTR [ecx+72], eax
  00044	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  00047	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  0004a	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
  0004d	c7 81 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+168], 0
  00057	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  0005e	c7 81 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+172], 0
  00068	66 c7 41 34 00
	00		 mov	 WORD PTR [ecx+52], 0
  0006e	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
  00075	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0007c	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  00083	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0
  0008a	c7 81 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+176], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1342 :         auto _Head = _Scary->_Myhead;

  00094	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1343 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00096	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00099	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0009d	75 24		 jne	 SHORT $LN11@Initialize
  0009f	90		 npad	 1
$LL10@Initialize:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  000a0	ff 76 08	 push	 DWORD PTR [esi+8]
  000a3	8b cf		 mov	 ecx, edi
  000a5	57		 push	 edi
  000a6	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@PAU?$_Tree_node@PAVIActorInstance@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Erase_tree<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  000ab	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  000ad	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000af	6a 14		 push	 20			; 00000014H
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b7	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  000ba	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000be	74 e0		 je	 SHORT $LL10@Initialize
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN11@Initialize:

; 1344 :         _Head->_Parent  = _Head;

  000c3	89 5b 04	 mov	 DWORD PTR [ebx+4], ebx
  000c6	0f 57 c0	 xorps	 xmm0, xmm0

; 1345 :         _Head->_Left    = _Head;

  000c9	89 1b		 mov	 DWORD PTR [ebx], ebx

; 1346 :         _Head->_Right   = _Head;

  000cb	89 5b 08	 mov	 DWORD PTR [ebx+8], ebx

; 1347 :         _Scary->_Mysize = 0;

  000ce	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 48   : 	memset(m_dwSkillColor, 0, sizeof(m_dwSkillColor));

  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	0f 11 41 08	 movups	 XMMWORD PTR [ecx+8], xmm0
  000db	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  000e2	5b		 pop	 ebx

; 49   : #endif
; 50   : }

  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
?__Initialize@CFlyingInstance@@IAEXXZ ENDP		; CFlyingInstance::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__Bomb@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
_m$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?__Bomb@CFlyingInstance@@QAEXXZ PROC			; CFlyingInstance::__Bomb, COMDAT
; _this$ = ecx

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 532  : 	CEffectManager & rkEftMgr = CEffectManager::Instance();

  00011	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 533  : 	if (!m_pData->m_dwBombEffectID)

  0001a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0001d	83 78 58 00	 cmp	 DWORD PTR [eax+88], 0
  00021	0f 84 a9 00 00
	00		 je	 $LN1@Bomb

; 534  : 		return;
; 535  : 
; 536  : 	DWORD dwEmptyIndex = rkEftMgr.GetEmptyIndex();

  00027	56		 push	 esi
  00028	8b cb		 mov	 ecx, ebx
  0002a	e8 00 00 00 00	 call	 ?GetEmptyIndex@CEffectManager@@QAEHXZ ; CEffectManager::GetEmptyIndex

; 537  : #ifdef ENABLE_SKILL_COLOR_SYSTEM
; 538  : 	rkEftMgr.CreateEffectInstance(dwEmptyIndex, m_pData->m_dwBombEffectID, m_dwSkillColor);

  0002f	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00032	8b f0		 mov	 esi, eax
  00034	51		 push	 ecx
  00035	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00038	ff 71 58	 push	 DWORD PTR [ecx+88]
  0003b	8b cb		 mov	 ecx, ebx
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 ?CreateEffectInstance@CEffectManager@@QAEXKKPAK@Z ; CEffectManager::CreateEffectInstance

; 539  : #else
; 540  : 	rkEftMgr.CreateEffectInstance(dwEmptyIndex,m_pData->m_dwBombEffectID);
; 541  : #endif
; 542  : 
; 543  : 	D3DXMATRIX m;
; 544  : //	D3DXMatrixRotationQuaternion(&m,&m_qRot);
; 545  : 	D3DXMatrixIdentity(&m);
; 546  : 	m._41 = m_v3Position.x;

  00043	f3 0f 10 47 40	 movss	 xmm0, DWORD PTR [edi+64]

; 549  : 	rkEftMgr.SelectEffectInstance(dwEmptyIndex);

  00048	8b cb		 mov	 ecx, ebx
  0004a	f3 0f 11 45 ec	 movss	 DWORD PTR _m$[ebp+48], xmm0
  0004f	f3 0f 10 47 44	 movss	 xmm0, DWORD PTR [edi+68]
  00054	f3 0f 11 45 f0	 movss	 DWORD PTR _m$[ebp+52], xmm0
  00059	f3 0f 10 47 48	 movss	 xmm0, DWORD PTR [edi+72]
  0005e	56		 push	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0005f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+44], 0
  00066	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+36], 0
  0006d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+32], 0
  00074	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+28], 0
  0007b	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+24], 0
  00082	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+16], 0
  00089	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+12], 0
  00090	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+8], 0
  00097	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _m$[ebp+4], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0009e	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _m$[ebp+60], 1065353216 ; 3f800000H
  000a5	c7 45 e4 00 00
	80 3f		 mov	 DWORD PTR _m$[ebp+40], 1065353216 ; 3f800000H
  000ac	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR _m$[ebp+20], 1065353216 ; 3f800000H
  000b3	c7 45 bc 00 00
	80 3f		 mov	 DWORD PTR _m$[ebp], 1065353216 ; 3f800000H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 548  : 	m._43 = m_v3Position.z;

  000ba	f3 0f 11 45 f4	 movss	 DWORD PTR _m$[ebp+56], xmm0

; 549  : 	rkEftMgr.SelectEffectInstance(dwEmptyIndex);

  000bf	e8 00 00 00 00	 call	 ?SelectEffectInstance@CEffectManager@@QAEHK@Z ; CEffectManager::SelectEffectInstance

; 550  : 	rkEftMgr.SetEffectInstanceGlobalMatrix(m);

  000c4	8d 45 bc	 lea	 eax, DWORD PTR _m$[ebp]
  000c7	8b cb		 mov	 ecx, ebx
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z ; CEffectManager::SetEffectInstanceGlobalMatrix
  000cf	5e		 pop	 esi
$LN1@Bomb:

; 551  : }

  000d0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d3	5f		 pop	 edi
  000d4	33 cd		 xor	 ecx, ebp
  000d6	5b		 pop	 ebx
  000d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
?__Bomb@CFlyingInstance@@QAEXXZ ENDP			; CFlyingInstance::__Bomb
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__Explode@CFlyingInstance@@QAEX_N@Z
_TEXT	SEGMENT
_bBomb$ = 8						; size = 1
?__Explode@CFlyingInstance@@QAEX_N@Z PROC		; CFlyingInstance::__Explode, COMDAT
; _this$ = ecx

; 520  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 521  : 	if (!m_bAlive)

  00003	80 79 34 00	 cmp	 BYTE PTR [ecx+52], 0
  00007	74 0f		 je	 SHORT $LN3@Explode

; 522  : 		return;
; 523  : 
; 524  : 	m_bAlive = false;
; 525  : 
; 526  : 	if (bBomb)

  00009	80 7d 08 00	 cmp	 BYTE PTR _bBomb$[ebp], 0
  0000d	c6 41 34 00	 mov	 BYTE PTR [ecx+52], 0
  00011	74 05		 je	 SHORT $LN3@Explode

; 527  : 		__Bomb();

  00013	e8 00 00 00 00	 call	 ?__Bomb@CFlyingInstance@@QAEXXZ ; CFlyingInstance::__Bomb
$LN3@Explode:

; 528  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?__Explode@CFlyingInstance@@QAEX_N@Z ENDP		; CFlyingInstance::__Explode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?ClearAttachInstance@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
?ClearAttachInstance@CFlyingInstance@@QAEXXZ PROC	; CFlyingInstance::ClearAttachInstance, COMDAT
; _this$ = ecx

; 501  : {

  00000	53		 push	 ebx

; 502  : 	CEffectManager & rkEftMgr = CEffectManager::Instance();

  00001	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b b7 9c 00 00
	00		 mov	 esi, DWORD PTR [edi+156]
  00011	3b b7 a0 00 00
	00		 cmp	 esi, DWORD PTR [edi+160]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 505  : 	for(i = m_vecAttachEffectInstance.begin();i!=m_vecAttachEffectInstance.end();++i)

  00017	74 50		 je	 SHORT $LN35@ClearAttac
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL20@ClearAttac:

; 506  : 	{
; 507  : 		rkEftMgr.DestroyEffectInstance(i->dwEffectInstanceIndex);

  00020	ff 76 04	 push	 DWORD PTR [esi+4]
  00023	8b cb		 mov	 ecx, ebx
  00025	e8 00 00 00 00	 call	 ?DestroyEffectInstance@CEffectManager@@QAE_NK@Z ; CEffectManager::DestroyEffectInstance

; 508  : 
; 509  : 		if (i->pFlyTrace)

  0002a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002d	85 c0		 test	 eax, eax
  0002f	74 09		 je	 SHORT $LN5@ClearAttac

; 510  : 			CFlyTrace::Delete(i->pFlyTrace);

  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?Delete@CFlyTrace@@SAXPAV1@@Z ; CFlyTrace::Delete
  00037	83 c4 04	 add	 esp, 4
$LN5@ClearAttac:

; 511  : 
; 512  : 		i->iAttachIndex=0;

  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 513  : 		i->dwEffectInstanceIndex=0;

  00040	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 514  : 		i->pFlyTrace=NULL;

  00047	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  0004e	83 c6 0c	 add	 esi, 12			; 0000000cH

; 150  :         return _Ptr == _Right._Ptr;

  00051	3b b7 a0 00 00
	00		 cmp	 esi, DWORD PTR [edi+160]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 505  : 	for(i = m_vecAttachEffectInstance.begin();i!=m_vecAttachEffectInstance.end();++i)

  00057	75 c7		 jne	 SHORT $LL20@ClearAttac

; 515  : 	}
; 516  : 	m_vecAttachEffectInstance.clear();

  00059	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  0005f	89 87 a0 00 00
	00		 mov	 DWORD PTR [edi+160], eax
  00065	5f		 pop	 edi

; 517  : }

  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	c3		 ret	 0
$LN35@ClearAttac:

; 515  : 	}
; 516  : 	m_vecAttachEffectInstance.clear();

  00069	89 b7 a0 00 00
	00		 mov	 DWORD PTR [edi+160], esi
  0006f	5f		 pop	 edi

; 517  : }

  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	c3		 ret	 0
?ClearAttachInstance@CFlyingInstance@@QAEXXZ ENDP	; CFlyingInstance::ClearAttachInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?RenderAttachInstance@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderAttachInstance@CFlyingInstance@@QAEXXZ PROC	; CFlyingInstance::RenderAttachInstance, COMDAT
; _this$ = ecx

; 561  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00004	8b b7 9c 00 00
	00		 mov	 esi, DWORD PTR [edi+156]
  0000a	3b b7 a0 00 00
	00		 cmp	 esi, DWORD PTR [edi+160]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 563  : 	for(it = m_vecAttachEffectInstance.begin();it!=m_vecAttachEffectInstance.end();++it)

  00010	74 17		 je	 SHORT $LN3@RenderAtta
$LL20@RenderAtta:

; 564  : 	{
; 565  : 		if (it->pFlyTrace)

  00012	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00015	85 c9		 test	 ecx, ecx
  00017	74 05		 je	 SHORT $LN2@RenderAtta

; 566  : 			it->pFlyTrace->Render();

  00019	e8 00 00 00 00	 call	 ?Render@CFlyTrace@@QAEXXZ ; CFlyTrace::Render
$LN2@RenderAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  0001e	83 c6 0c	 add	 esi, 12			; 0000000cH

; 150  :         return _Ptr == _Right._Ptr;

  00021	3b b7 a0 00 00
	00		 cmp	 esi, DWORD PTR [edi+160]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 563  : 	for(it = m_vecAttachEffectInstance.begin();it!=m_vecAttachEffectInstance.end();++it)

  00027	75 e9		 jne	 SHORT $LL20@RenderAtta
$LN3@RenderAtta:
  00029	5f		 pop	 edi

; 567  : 	}
; 568  : }

  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
?RenderAttachInstance@CFlyingInstance@@QAEXXZ ENDP	; CFlyingInstance::RenderAttachInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?UpdateAttachInstance@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
tv2535 = -124						; size = 8
tv2534 = -124						; size = 8
tv2533 = -124						; size = 8
_q$ = -116						; size = 16
_rem$1$ = -100						; size = 4
tv2754 = -100						; size = 4
tv2749 = -100						; size = 4
tv2744 = -100						; size = 4
_p$3$sroa$1457$1$ = -96					; size = 4
tv2553 = -96						; size = 4
tv2548 = -96						; size = 4
_p$3$sroa$1466$1$ = -92					; size = 4
_angle$1$ = -92						; size = 4
_p$2$sroa$1507$1$ = -92					; size = 4
_p$1$sroa$1386$1$ = -92					; size = 4
tv2033 = -92						; size = 4
_dt$4 = -92						; size = 4
tv2554 = -88						; size = 4
tv2549 = -88						; size = 4
tv2537 = -88						; size = 4
_p$3$sroa$1422$1$ = -84					; size = 4
_p$2$sroa$1504$1$ = -84					; size = 4
_p$1$sroa$1477$1$ = -84					; size = 4
_rfad$1$ = -84						; size = 4
_m$5 = -80						; size = 64
$T6 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?UpdateAttachInstance@CFlyingInstance@@QAEXXZ PROC	; CFlyingInstance::UpdateAttachInstance, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx

; 197  : 	// Update Attach Rotation
; 198  : 	D3DXQUATERNION q;
; 199  : 	D3DXQuaternionRotationYawPitchRoll(&q,

  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0001a	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  0001f	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00022	51		 push	 ecx
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00029	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  0002e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00036	f3 0f 11 45 9c	 movss	 DWORD PTR tv2754[ebp], xmm0
  0003b	d8 4d 9c	 fmul	 DWORD PTR tv2754[ebp]
  0003e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00041	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  00046	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00049	51		 push	 ecx
  0004a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00050	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00055	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0005d	f3 0f 11 45 9c	 movss	 DWORD PTR tv2749[ebp], xmm0
  00062	d8 4d 9c	 fmul	 DWORD PTR tv2749[ebp]
  00065	d9 1c 24	 fstp	 DWORD PTR [esp]
  00068	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  0006d	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00070	51		 push	 ecx
  00071	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00076	8d 45 8c	 lea	 eax, DWORD PTR _q$[ebp]
  00079	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00081	f3 0f 11 45 9c	 movss	 DWORD PTR tv2744[ebp], xmm0
  00086	d8 4d 9c	 fmul	 DWORD PTR tv2744[ebp]
  00089	d9 1c 24	 fstp	 DWORD PTR [esp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _D3DXQuaternionRotationYawPitchRoll@16

; 200  : 		D3DXToRadian(m_pData->m_v3AngVel.y)*CTimer::Instance().GetElapsedSecond(),
; 201  : 		D3DXToRadian(m_pData->m_v3AngVel.x)*CTimer::Instance().GetElapsedSecond(),
; 202  : 		D3DXToRadian(m_pData->m_v3AngVel.z)*CTimer::Instance().GetElapsedSecond());
; 203  : 
; 204  : 	D3DXQuaternionMultiply(&m_qAttachRotation, &m_qAttachRotation, &q);

  00092	8d 45 8c	 lea	 eax, DWORD PTR _q$[ebp]
  00095	50		 push	 eax
  00096	8d b7 8c 00 00
	00		 lea	 esi, DWORD PTR [edi+140]
  0009c	56		 push	 esi
  0009d	56		 push	 esi
  0009e	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 205  : 	D3DXQuaternionMultiply(&q, &m_qAttachRotation, &m_qRot);

  000a3	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  000a6	50		 push	 eax
  000a7	56		 push	 esi
  000a8	8d 45 8c	 lea	 eax, DWORD PTR _q$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000b1	8b b7 9c 00 00
	00		 mov	 esi, DWORD PTR [edi+156]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 207  : 	CEffectManager & rem = CEffectManager::Instance();

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  000bc	89 45 9c	 mov	 DWORD PTR _rem$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000bf	3b b7 a0 00 00
	00		 cmp	 esi, DWORD PTR [edi+160]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 209  : 	for(it = m_vecAttachEffectInstance.begin();it!=m_vecAttachEffectInstance.end();++it)

  000c5	0f 84 66 05 00
	00		 je	 $LN3@UpdateAtta
  000cb	0f 1f 44 00 00	 npad	 5
$LL26@UpdateAtta:

; 210  : 	{
; 211  : 		CFlyingData::TFlyingAttachData & rfad = m_pData->GetAttachDataReference(it->iAttachIndex);

  000d0	ff 36		 push	 DWORD PTR [esi]
  000d2	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  000d5	e8 00 00 00 00	 call	 ?GetAttachDataReference@CFlyingData@@QAEAAUTFlyingAttachData@1@H@Z ; CFlyingData::GetAttachDataReference

; 212  : 		assert(rfad.iType == CFlyingData::FLY_ATTACH_EFFECT);
; 213  : 		rem.SelectEffectInstance(it->dwEffectInstanceIndex);

  000da	ff 76 04	 push	 DWORD PTR [esi+4]
  000dd	8b 4d 9c	 mov	 ecx, DWORD PTR _rem$1$[ebp]
  000e0	89 45 ac	 mov	 DWORD PTR _rfad$1$[ebp], eax
  000e3	e8 00 00 00 00	 call	 ?SelectEffectInstance@CEffectManager@@QAEHK@Z ; CEffectManager::SelectEffectInstance

; 214  : 		D3DXMATRIX m;
; 215  : 		switch(rfad.iFlyType)

  000e8	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	49		 dec	 ecx
  000ef	83 f9 03	 cmp	 ecx, 3
  000f2	0f 87 f0 04 00
	00		 ja	 $LN5@UpdateAtta
  000f8	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN145@UpdateAtta[ecx*4]
$LN7@UpdateAtta:

; 216  : 		{
; 217  : 			case CFlyingData::FLY_ATTACH_TYPE_LINE:
; 218  : 				D3DXMatrixRotationQuaternion(&m,&m_qRot);

  000ff	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  00102	50		 push	 eax
  00103	8d 45 b0	 lea	 eax, DWORD PTR _m$5[ebp]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 219  : 				//D3DXMatrixRotationQuaternion(&m,&q);
; 220  : 				m._41=m_v3Position.x;

  0010c	f3 0f 10 47 40	 movss	 xmm0, DWORD PTR [edi+64]
  00111	f3 0f 11 45 e0	 movss	 DWORD PTR _m$5[ebp+48], xmm0

; 221  : 				m._42=m_v3Position.y;

  00116	f3 0f 10 47 44	 movss	 xmm0, DWORD PTR [edi+68]
  0011b	f3 0f 11 45 e4	 movss	 DWORD PTR _m$5[ebp+52], xmm0

; 222  : 				m._43=m_v3Position.z;

  00120	f3 0f 10 47 48	 movss	 xmm0, DWORD PTR [edi+72]

; 223  : 				break;

  00125	e9 b9 04 00 00	 jmp	 $LN146@UpdateAtta
$LN8@UpdateAtta:

; 226  : 					D3DXVECTOR3 p(

  0012a	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  0012f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  00137	0f 5a c0	 cvtps2pd xmm0, xmm0
  0013a	f2 0f 11 45 84	 movsd	 QWORD PTR tv2535[ebp], xmm0
  0013f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 226  : 					D3DXVECTOR3 p(

  00144	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  00147	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 226  : 					D3DXVECTOR3 p(

  0014b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00152	f3 0f 59 40 38	 mulss	 xmm0, DWORD PTR [eax+56]
  00157	f3 0f 11 45 a8	 movss	 DWORD PTR tv2537[ebp], xmm0
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  0015c	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv2535[ebp]
  00161	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00166	f3 0f 10 5d 8c	 movss	 xmm3, DWORD PTR _q$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  0016b	0f 57 ff	 xorps	 xmm7, xmm7
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0016e	f3 0f 10 55 90	 movss	 xmm2, DWORD PTR _q$[ebp+4]
  00173	0f 28 cb	 movaps	 xmm1, xmm3
  00176	f3 0f 10 65 94	 movss	 xmm4, DWORD PTR _q$[ebp+8]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  0017b	f2 0f 5a f8	 cvtsd2ss xmm7, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 226  : 					D3DXVECTOR3 p(

  0017f	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00182	f3 0f 10 75 98	 movss	 xmm6, DWORD PTR _q$[ebp+12]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00187	0f 28 c2	 movaps	 xmm0, xmm2
  0018a	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0018e	0f 28 ee	 movaps	 xmm5, xmm6
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00191	f3 0f 59 cb	 mulss	 xmm1, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 226  : 					D3DXVECTOR3 p(

  00195	0f 57 3d 00 00
	00 00		 xorps	 xmm7, DWORD PTR __xmm@80000000800000008000000080000000
  0019c	f3 0f 59 78 38	 mulss	 xmm7, DWORD PTR [eax+56]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001a1	f3 0f 58 c8	 addss	 xmm1, xmm0
  001a5	f3 0f 11 55 ac	 movss	 DWORD PTR _p$1$sroa$1477$1$[ebp], xmm2

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001aa	f3 0f 10 55 a8	 movss	 xmm2, DWORD PTR tv2537[ebp]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001af	0f 28 c4	 movaps	 xmm0, xmm4
  001b2	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  001b6	f3 0f 59 f6	 mulss	 xmm6, xmm6
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001ba	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  001be	f3 0f 59 2d 00
	00 00 00	 mulss	 xmm5, DWORD PTR __real@c0000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  001c6	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$1$sroa$1477$1$[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001cb	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  001cf	f3 0f 5c f1	 subss	 xmm6, xmm1
  001d3	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  001d6	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 182  :     z = fz;

  001da	0f 28 cc	 movaps	 xmm1, xmm4

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001dd	f3 0f 58 d0	 addss	 xmm2, xmm0
  001e1	0f 28 c4	 movaps	 xmm0, xmm4
  001e4	f3 0f 59 c7	 mulss	 xmm0, xmm7
  001e8	f3 0f 58 d0	 addss	 xmm2, xmm0
  001ec	0f 57 c0	 xorps	 xmm0, xmm0

; 182  :     z = fz;

  001ef	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  001f3	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$1$sroa$1477$1$[ebp]
  001f8	f3 0f 59 c7	 mulss	 xmm0, xmm7
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  001fc	f3 0f 58 d2	 addss	 xmm2, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00200	f3 0f 5c c8	 subss	 xmm1, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00204	0f 28 c6	 movaps	 xmm0, xmm6
  00207	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2537[ebp]
  0020c	f3 0f 59 cd	 mulss	 xmm1, xmm5
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00210	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00214	0f 28 c2	 movaps	 xmm0, xmm2
  00217	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 182  :     z = fz;

  0021b	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0021f	0f 28 c4	 movaps	 xmm0, xmm4
  00222	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2537[ebp]

; 204  :     x += v.x;

  00227	f3 0f 58 4f 40	 addss	 xmm1, DWORD PTR [edi+64]
  0022c	f3 0f 11 4d a4	 movss	 DWORD PTR _p$1$sroa$1386$1$[ebp], xmm1

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00231	0f 28 cf	 movaps	 xmm1, xmm7
  00234	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00238	f3 0f 5c c8	 subss	 xmm1, xmm0

; 180  :     x = fx;

  0023c	0f 28 c6	 movaps	 xmm0, xmm6
  0023f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@00000000

; 222  :     x *= f;

  00247	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 204  :     x += v.x;

  0024b	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0024f	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$1$sroa$1477$1$[ebp]
  00254	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 204  :     x += v.x;

  00258	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0025c	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$1$sroa$1477$1$[ebp]
  00261	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2537[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 239  : 				break;

  00266	e9 1f 03 00 00	 jmp	 $LN147@UpdateAtta
$LN9@UpdateAtta:

; 243  : 					float angle = (CTimer::Instance().GetCurrentSecond() - m_fStartTime)*2*3.1415926535897931f/rfad.fPeriod;

  0026b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00271	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond

; 244  : 					D3DXVECTOR3 p(

  00276	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
  00279	d8 67 30	 fsub	 DWORD PTR [edi+48]
  0027c	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  00281	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00289	d9 5d a4	 fstp	 DWORD PTR tv2033[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  0028c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0028f	f2 0f 11 45 84	 movsd	 QWORD PTR tv2534[ebp], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 243  : 					float angle = (CTimer::Instance().GetCurrentSecond() - m_fStartTime)*2*3.1415926535897931f/rfad.fPeriod;

  00294	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv2033[ebp]
  00299	f3 0f 58 c0	 addss	 xmm0, xmm0
  0029d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  002a5	f3 0f 5e 40 3c	 divss	 xmm0, DWORD PTR [eax+60]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  002aa	0f 5a c0	 cvtps2pd xmm0, xmm0
  002ad	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  002b2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b6	f3 0f 11 45 a0	 movss	 DWORD PTR tv2548[ebp], xmm0
  002bb	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv2534[ebp]
  002c0	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 244  : 					D3DXVECTOR3 p(

  002c5	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  002c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 244  : 					D3DXVECTOR3 p(

  002cc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002d3	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
  002d8	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR tv2548[ebp]
  002dd	f3 0f 11 45 a8	 movss	 DWORD PTR tv2549[ebp], xmm0
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  002e2	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv2534[ebp]
  002e7	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  002ec	f3 0f 10 5d 8c	 movss	 xmm3, DWORD PTR _q$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  002f1	0f 57 ff	 xorps	 xmm7, xmm7
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  002f4	f3 0f 10 55 90	 movss	 xmm2, DWORD PTR _q$[ebp+4]
  002f9	0f 28 cb	 movaps	 xmm1, xmm3
  002fc	f3 0f 10 65 94	 movss	 xmm4, DWORD PTR _q$[ebp+8]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  00301	f2 0f 5a f8	 cvtsd2ss xmm7, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 244  : 					D3DXVECTOR3 p(

  00305	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00308	f3 0f 10 75 98	 movss	 xmm6, DWORD PTR _q$[ebp+12]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0030d	0f 28 c2	 movaps	 xmm0, xmm2
  00310	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00314	0f 28 ee	 movaps	 xmm5, xmm6
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 244  : 					D3DXVECTOR3 p(

  00317	0f 57 3d 00 00
	00 00		 xorps	 xmm7, DWORD PTR __xmm@80000000800000008000000080000000
  0031e	f3 0f 59 78 40	 mulss	 xmm7, DWORD PTR [eax+64]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00323	f3 0f 59 cb	 mulss	 xmm1, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 244  : 					D3DXVECTOR3 p(

  00327	f3 0f 59 7d a0	 mulss	 xmm7, DWORD PTR tv2548[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0032c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00330	f3 0f 11 55 ac	 movss	 DWORD PTR _p$2$sroa$1504$1$[ebp], xmm2

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00335	f3 0f 10 55 a8	 movss	 xmm2, DWORD PTR tv2549[ebp]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0033a	0f 28 c4	 movaps	 xmm0, xmm4
  0033d	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00341	f3 0f 59 f6	 mulss	 xmm6, xmm6
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00345	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  00349	f3 0f 59 2d 00
	00 00 00	 mulss	 xmm5, DWORD PTR __real@c0000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  00351	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$2$sroa$1504$1$[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00356	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  0035a	f3 0f 5c f1	 subss	 xmm6, xmm1
  0035e	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  00361	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 182  :     z = fz;

  00365	0f 28 cc	 movaps	 xmm1, xmm4

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00368	f3 0f 58 d0	 addss	 xmm2, xmm0
  0036c	0f 28 c4	 movaps	 xmm0, xmm4
  0036f	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00373	f3 0f 58 d0	 addss	 xmm2, xmm0
  00377	0f 57 c0	 xorps	 xmm0, xmm0

; 182  :     z = fz;

  0037a	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0037e	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$2$sroa$1504$1$[ebp]
  00383	f3 0f 59 c7	 mulss	 xmm0, xmm7
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  00387	f3 0f 58 d2	 addss	 xmm2, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0038b	f3 0f 5c c8	 subss	 xmm1, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  0038f	0f 28 c6	 movaps	 xmm0, xmm6
  00392	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2549[ebp]
  00397	f3 0f 59 cd	 mulss	 xmm1, xmm5
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0039b	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0039f	0f 28 c2	 movaps	 xmm0, xmm2
  003a2	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 182  :     z = fz;

  003a6	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  003aa	0f 28 c4	 movaps	 xmm0, xmm4
  003ad	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2549[ebp]

; 204  :     x += v.x;

  003b2	f3 0f 58 4f 40	 addss	 xmm1, DWORD PTR [edi+64]
  003b7	f3 0f 11 4d a4	 movss	 DWORD PTR _p$2$sroa$1507$1$[ebp], xmm1

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  003bc	0f 28 cf	 movaps	 xmm1, xmm7
  003bf	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  003c3	f3 0f 5c c8	 subss	 xmm1, xmm0

; 222  :     x *= f;

  003c7	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 180  :     x = fx;

  003cb	0f 28 c6	 movaps	 xmm0, xmm6
  003ce	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@00000000

; 204  :     x += v.x;

  003d6	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  003da	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$2$sroa$1504$1$[ebp]
  003df	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 204  :     x += v.x;

  003e3	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  003e7	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$2$sroa$1504$1$[ebp]
  003ec	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2549[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 258  : 				break;

  003f1	e9 94 01 00 00	 jmp	 $LN147@UpdateAtta
$LN10@UpdateAtta:

; 259  : 			case CFlyingData::FLY_ATTACH_TYPE_EXP:
; 260  : 				{
; 261  : 					float dt = CTimer::Instance().GetCurrentSecond() - m_fStartTime;

  003f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  003fc	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00401	d8 67 30	 fsub	 DWORD PTR [edi+48]

; 262  : 					float angle = dt/rfad.fPeriod;

  00404	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]

; 263  : 					D3DXVECTOR3 p(

  00407	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  0040c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00414	d9 5d a4	 fstp	 DWORD PTR _dt$4[ebp]
  00417	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _dt$4[ebp]
  0041c	f3 0f 5e 48 3c	 divss	 xmm1, DWORD PTR [eax+60]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  00421	0f 5a c0	 cvtps2pd xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 262  : 					float angle = dt/rfad.fPeriod;

  00424	f3 0f 11 4d a4	 movss	 DWORD PTR _angle$1$[ebp], xmm1
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  00429	f2 0f 11 45 84	 movsd	 QWORD PTR tv2533[ebp], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXVECTOR3 p(

  0042e	0f 28 c1	 movaps	 xmm0, xmm1
  00431	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 657  :             return (float)exp(_X);

  00438	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0043c	e8 00 00 00 00	 call	 __libm_sse2_exp_precise
  00441	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00445	f3 0f 11 45 a0	 movss	 DWORD PTR tv2553[ebp], xmm0

; 748  :             return (float)sin(_X);

  0044a	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv2533[ebp]
  0044f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXVECTOR3 p(

  00454	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  00457	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXVECTOR3 p(

  0045b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00462	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
  00467	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR tv2553[ebp]
  0046c	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _angle$1$[ebp]
  00471	f3 0f 11 45 a8	 movss	 DWORD PTR tv2554[ebp], xmm0
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  00476	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv2533[ebp]
  0047b	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00480	f3 0f 10 5d 8c	 movss	 xmm3, DWORD PTR _q$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  00485	0f 57 ff	 xorps	 xmm7, xmm7
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00488	f3 0f 10 55 90	 movss	 xmm2, DWORD PTR _q$[ebp+4]
  0048d	0f 28 cb	 movaps	 xmm1, xmm3
  00490	f3 0f 10 65 94	 movss	 xmm4, DWORD PTR _q$[ebp+8]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  00495	f2 0f 5a f8	 cvtsd2ss xmm7, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXVECTOR3 p(

  00499	8b 45 ac	 mov	 eax, DWORD PTR _rfad$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0049c	f3 0f 10 75 98	 movss	 xmm6, DWORD PTR _q$[ebp+12]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004a1	0f 28 c2	 movaps	 xmm0, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXVECTOR3 p(

  004a4	0f 57 3d 00 00
	00 00		 xorps	 xmm7, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  004ab	0f 28 ee	 movaps	 xmm5, xmm6
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXVECTOR3 p(

  004ae	f3 0f 59 78 40	 mulss	 xmm7, DWORD PTR [eax+64]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004b3	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXVECTOR3 p(

  004b7	f3 0f 59 7d a0	 mulss	 xmm7, DWORD PTR tv2553[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004bc	f3 0f 59 cb	 mulss	 xmm1, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 263  : 					D3DXVECTOR3 p(

  004c0	f3 0f 59 7d a4	 mulss	 xmm7, DWORD PTR _angle$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004c5	f3 0f 58 c8	 addss	 xmm1, xmm0
  004c9	f3 0f 11 55 ac	 movss	 DWORD PTR _p$3$sroa$1422$1$[ebp], xmm2

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  004ce	f3 0f 10 55 a8	 movss	 xmm2, DWORD PTR tv2554[ebp]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004d3	0f 28 c4	 movaps	 xmm0, xmm4
  004d6	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  004da	f3 0f 59 f6	 mulss	 xmm6, xmm6
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004de	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  004e2	f3 0f 59 2d 00
	00 00 00	 mulss	 xmm5, DWORD PTR __real@c0000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  004ea	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$3$sroa$1422$1$[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  004ef	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  004f3	f3 0f 5c f1	 subss	 xmm6, xmm1
  004f7	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  004fa	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 182  :     z = fz;

  004fe	0f 28 cc	 movaps	 xmm1, xmm4

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00501	f3 0f 58 d0	 addss	 xmm2, xmm0
  00505	0f 28 c4	 movaps	 xmm0, xmm4
  00508	f3 0f 59 c7	 mulss	 xmm0, xmm7
  0050c	f3 0f 58 d0	 addss	 xmm2, xmm0
  00510	0f 57 c0	 xorps	 xmm0, xmm0

; 182  :     z = fz;

  00513	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00517	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$3$sroa$1422$1$[ebp]
  0051c	f3 0f 59 c7	 mulss	 xmm0, xmm7
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  00520	f3 0f 58 d2	 addss	 xmm2, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00524	f3 0f 5c c8	 subss	 xmm1, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00528	0f 28 c6	 movaps	 xmm0, xmm6
  0052b	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2554[ebp]
  00530	f3 0f 59 cd	 mulss	 xmm1, xmm5
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00534	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00538	0f 28 c2	 movaps	 xmm0, xmm2
  0053b	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 182  :     z = fz;

  0053f	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00543	0f 28 c4	 movaps	 xmm0, xmm4

; 204  :     x += v.x;

  00546	f3 0f 58 4f 40	 addss	 xmm1, DWORD PTR [edi+64]
  0054b	f3 0f 11 4d a4	 movss	 DWORD PTR _p$3$sroa$1466$1$[ebp], xmm1

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00550	0f 28 cf	 movaps	 xmm1, xmm7
  00553	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00557	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2554[ebp]
  0055c	f3 0f 5c c8	 subss	 xmm1, xmm0

; 180  :     x = fx;

  00560	0f 28 c6	 movaps	 xmm0, xmm6
  00563	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@00000000

; 222  :     x *= f;

  0056b	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 204  :     x += v.x;

  0056f	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00573	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$3$sroa$1422$1$[ebp]
  00578	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 204  :     x += v.x;

  0057c	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00580	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$3$sroa$1422$1$[ebp]
  00585	f3 0f 59 45 a8	 mulss	 xmm0, DWORD PTR tv2554[ebp]
$LN147@UpdateAtta:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 279  : 		rem.SetEffectInstanceGlobalMatrix(m);

  0058a	f3 0f 58 4f 44	 addss	 xmm1, DWORD PTR [edi+68]
  0058f	f3 0f 59 f7	 mulss	 xmm6, xmm7
  00593	8d 45 8c	 lea	 eax, DWORD PTR _q$[ebp]
  00596	50		 push	 eax
  00597	f3 0f 59 e2	 mulss	 xmm4, xmm2
  0059b	8d 45 b0	 lea	 eax, DWORD PTR _m$5[ebp]
  0059e	50		 push	 eax
  0059f	f3 0f 11 4d a0	 movss	 DWORD PTR _p$3$sroa$1457$1$[ebp], xmm1
  005a4	0f 57 c9	 xorps	 xmm1, xmm1
  005a7	f3 0f 59 d9	 mulss	 xmm3, xmm1
  005ab	f3 0f 5c c3	 subss	 xmm0, xmm3
  005af	f3 0f 59 c5	 mulss	 xmm0, xmm5
  005b3	f3 0f 58 c6	 addss	 xmm0, xmm6
  005b7	f3 0f 58 c4	 addss	 xmm0, xmm4
  005bb	f3 0f 58 47 48	 addss	 xmm0, DWORD PTR [edi+72]
  005c0	f3 0f 11 45 ac	 movss	 DWORD PTR _p$3$sroa$1422$1$[ebp], xmm0
  005c5	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8
  005ca	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _p$3$sroa$1466$1$[ebp]
  005cf	f3 0f 11 45 e0	 movss	 DWORD PTR _m$5[ebp+48], xmm0
  005d4	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _p$3$sroa$1457$1$[ebp]
  005d9	f3 0f 11 45 e4	 movss	 DWORD PTR _m$5[ebp+52], xmm0
  005de	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _p$3$sroa$1422$1$[ebp]
$LN146@UpdateAtta:
  005e3	f3 0f 11 45 e8	 movss	 DWORD PTR _m$5[ebp+56], xmm0
$LN5@UpdateAtta:
  005e8	8b 4d 9c	 mov	 ecx, DWORD PTR _rem$1$[ebp]
  005eb	8d 45 b0	 lea	 eax, DWORD PTR _m$5[ebp]
  005ee	50		 push	 eax
  005ef	e8 00 00 00 00	 call	 ?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z ; CEffectManager::SetEffectInstanceGlobalMatrix

; 280  : 		if (it->pFlyTrace)

  005f4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  005f7	85 c9		 test	 ecx, ecx
  005f9	74 27		 je	 SHORT $LN2@UpdateAtta
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  005fb	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _m$5[ebp+48]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 281  : 			it->pFlyTrace->UpdateNewPosition(D3DXVECTOR3(m._41,m._42,m._43));

  00600	8d 45 f0	 lea	 eax, DWORD PTR $T6[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00603	f3 0f 11 45 f0	 movss	 DWORD PTR $T6[ebp], xmm0

; 181  :     y = fy;

  00608	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _m$5[ebp+52]
  0060d	f3 0f 11 45 f4	 movss	 DWORD PTR $T6[ebp+4], xmm0

; 182  :     z = fz;

  00612	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _m$5[ebp+56]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 281  : 			it->pFlyTrace->UpdateNewPosition(D3DXVECTOR3(m._41,m._42,m._43));

  00617	50		 push	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00618	f3 0f 11 45 f8	 movss	 DWORD PTR $T6[ebp+8], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 281  : 			it->pFlyTrace->UpdateNewPosition(D3DXVECTOR3(m._41,m._42,m._43));

  0061d	e8 00 00 00 00	 call	 ?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z ; CFlyTrace::UpdateNewPosition
$LN2@UpdateAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  00622	83 c6 0c	 add	 esi, 12			; 0000000cH

; 150  :         return _Ptr == _Right._Ptr;

  00625	3b b7 a0 00 00
	00		 cmp	 esi, DWORD PTR [edi+160]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 209  : 	for(it = m_vecAttachEffectInstance.begin();it!=m_vecAttachEffectInstance.end();++it)

  0062b	0f 85 9f fa ff
	ff		 jne	 $LL26@UpdateAtta
$LN3@UpdateAtta:

; 282  : 	}
; 283  : }

  00631	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00634	5f		 pop	 edi
  00635	33 cd		 xor	 ecx, ebp
  00637	5e		 pop	 esi
  00638	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0063d	8b e5		 mov	 esp, ebp
  0063f	5d		 pop	 ebp
  00640	c3		 ret	 0
  00641	0f 1f 00	 npad	 3
$LN145@UpdateAtta:
  00644	00 00 00 00	 DD	 $LN7@UpdateAtta
  00648	00 00 00 00	 DD	 $LN8@UpdateAtta
  0064c	00 00 00 00	 DD	 $LN9@UpdateAtta
  00650	00 00 00 00	 DD	 $LN10@UpdateAtta
?UpdateAttachInstance@CFlyingInstance@@QAEXXZ ENDP	; CFlyingInstance::UpdateAttachInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?BuildAttachInstance@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
_aei$1 = -24						; size = 12
_rem$1$ = -12						; size = 4
_dwCRC$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
?BuildAttachInstance@CFlyingInstance@@QAEXXZ PROC	; CFlyingInstance::BuildAttachInstance, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

  00008	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 69   : 	for(int i=0;i<m_pData->GetAttachDataCount();i++)

  00010	33 db		 xor	 ebx, ebx
  00012	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00015	8b 96 88 00 00
	00		 mov	 edx, DWORD PTR [esi+136]
  0001b	2b 96 84 00 00
	00		 sub	 edx, DWORD PTR [esi+132]
  00021	f7 ea		 imul	 edx
  00023	c1 fa 05	 sar	 edx, 5
  00026	8b c2		 mov	 eax, edx
  00028	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002b	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 69   : 	for(int i=0;i<m_pData->GetAttachDataCount();i++)

  0002d	85 c0		 test	 eax, eax
  0002f	0f 8e d7 00 00
	00		 jle	 $LN3@BuildAttac
  00035	57		 push	 edi
$LL4@BuildAttac:

; 70   : 	{
; 71   : 		CFlyingData::TFlyingAttachData & rfad = m_pData->GetAttachDataReference(i);

  00036	53		 push	 ebx
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?GetAttachDataReference@CFlyingData@@QAEAAUTFlyingAttachData@1@H@Z ; CFlyingData::GetAttachDataReference
  0003e	8b f0		 mov	 esi, eax

; 73   : 		switch(rfad.iType)

  00040	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00042	83 e9 01	 sub	 ecx, 1
  00045	0f 85 94 00 00
	00		 jne	 $LN35@BuildAttac
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0004b	83 7e 1c 10	 cmp	 DWORD PTR [esi+28], 16	; 00000010H

; 3888 :         return _Mypair._Myval2._Myptr();

  0004f	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 81   : 					CEffectManager & rem = CEffectManager::Instance();

  00052	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  00058	89 7d f4	 mov	 DWORD PTR _rem$1$[ebp], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  0005b	72 02		 jb	 SHORT $LN18@BuildAttac

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0005d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@BuildAttac:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 84   : 					DWORD dwCRC = GetCaseCRC32(rfad.strFilename.c_str(),rfad.strFilename.size());

  0005f	6a 00		 push	 0
  00061	ff 76 18	 push	 DWORD PTR [esi+24]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI0@Z ; GetCaseCRC32
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	89 45 f8	 mov	 DWORD PTR _dwCRC$1$[ebp], eax

; 85   : 
; 86   : 					aei.iAttachIndex = i;
; 87   : 					aei.dwEffectInstanceIndex = rem.GetEmptyIndex();

  00070	8b cf		 mov	 ecx, edi
  00072	89 5d e8	 mov	 DWORD PTR _aei$1[ebp], ebx
  00075	e8 00 00 00 00	 call	 ?GetEmptyIndex@CEffectManager@@QAEHXZ ; CEffectManager::GetEmptyIndex

; 88   : 
; 89   : 					aei.pFlyTrace = NULL;

  0007a	33 ff		 xor	 edi, edi
  0007c	89 45 ec	 mov	 DWORD PTR _aei$1[ebp+4], eax

; 90   : 					if (rfad.bHasTail)

  0007f	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  00083	89 7d f0	 mov	 DWORD PTR _aei$1[ebp+8], edi
  00086	74 15		 je	 SHORT $LN9@BuildAttac

; 91   : 					{
; 92   : 						aei.pFlyTrace = CFlyTrace::New();

  00088	e8 00 00 00 00	 call	 ?New@CFlyTrace@@SAPAV1@XZ ; CFlyTrace::New
  0008d	8b f8		 mov	 edi, eax

; 93   : 						aei.pFlyTrace->Create(rfad);

  0008f	56		 push	 esi
  00090	8b cf		 mov	 ecx, edi
  00092	89 7d f0	 mov	 DWORD PTR _aei$1[ebp+8], edi
  00095	e8 00 00 00 00	 call	 ?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z ; CFlyTrace::Create
  0009a	8b 45 ec	 mov	 eax, DWORD PTR _aei$1[ebp+4]
$LN9@BuildAttac:

; 94   : 					}
; 95   : #ifdef ENABLE_SKILL_COLOR_SYSTEM
; 96   : 				rem.CreateEffectInstance(aei.dwEffectInstanceIndex, dwCRC, m_dwSkillColor);

  0009d	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  000a0	8b 4d f4	 mov	 ecx, DWORD PTR _rem$1$[ebp]
  000a3	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  000a6	52		 push	 edx
  000a7	ff 75 f8	 push	 DWORD PTR _dwCRC$1$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?CreateEffectInstance@CEffectManager@@QAEXKKPAK@Z ; CEffectManager::CreateEffectInstance
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  000b0	8b 86 a0 00 00
	00		 mov	 eax, DWORD PTR [esi+160]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 100  : 					m_vecAttachEffectInstance.push_back(aei);

  000b6	8d 8e 9c 00 00
	00		 lea	 ecx, DWORD PTR [esi+156]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  000bc	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  000bf	74 12		 je	 SHORT $LN25@BuildAttac
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000c1	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR _aei$1[ebp]
  000c6	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  000ca	89 78 08	 mov	 DWORD PTR [eax+8], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 716  :         ++_Mylast;

  000cd	83 41 04 0c	 add	 DWORD PTR [ecx+4], 12	; 0000000cH

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000d1	eb 0f		 jmp	 SHORT $LN2@BuildAttac
$LN25@BuildAttac:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000d3	8d 55 e8	 lea	 edx, DWORD PTR _aei$1[ebp]
  000d6	52		 push	 edx
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUTAttachEffectInstance@CFlyingInstance@@@?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAEPAUTAttachEffectInstance@CFlyingInstance@@QAU23@ABU23@@Z ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::_Emplace_reallocate<CFlyingInstance::TAttachEffectInstance const &>
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 73   : 		switch(rfad.iType)

  000dd	eb 03		 jmp	 SHORT $LN2@BuildAttac
$LN35@BuildAttac:
  000df	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN2@BuildAttac:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1535 :         auto& _My_data = _Mypair._Myval2;

  000e2	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000e5	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 69   : 	for(int i=0;i<m_pData->GetAttachDataCount();i++)

  000ea	43		 inc	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000eb	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  000f1	2b 8e 84 00 00
	00		 sub	 ecx, DWORD PTR [esi+132]
  000f7	f7 e9		 imul	 ecx
  000f9	c1 fa 05	 sar	 edx, 5
  000fc	8b c2		 mov	 eax, edx
  000fe	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00101	03 c2		 add	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 69   : 	for(int i=0;i<m_pData->GetAttachDataCount();i++)

  00103	3b d8		 cmp	 ebx, eax
  00105	0f 8c 2b ff ff
	ff		 jl	 $LL4@BuildAttac
  0010b	5f		 pop	 edi
$LN3@BuildAttac:
  0010c	5e		 pop	 esi

; 101  : 				}
; 102  : 				break;
; 103  : 		}
; 104  : 	}
; 105  : }

  0010d	5b		 pop	 ebx
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
?BuildAttachInstance@CFlyingInstance@@QAEXXZ ENDP	; CFlyingInstance::BuildAttachInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?AdjustDirectionForHoming@CFlyingInstance@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_q$7$ = -68						; size = 4
_q$6$ = -68						; size = 4
_q$4$ = -64						; size = 4
_q$3$ = -64						; size = 4
_q$8$ = -60						; size = 4
_q$5$ = -60						; size = 4
_f$1$ = -56						; size = 4
_f$1$ = -56						; size = 4
_c$1$ = -52						; size = 4
tv2393 = -52						; size = 4
tv2315 = -52						; size = 4
_q$ = -48						; size = 16
__real@c0000000$1$ = -32				; size = 4
tv2345 = -32						; size = 4
_vTargetDir$ = -28					; size = 12
_vVel$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_v3TargetPosition$ = 8					; size = 4
?AdjustDirectionForHoming@CFlyingInstance@@QAEXABUD3DXVECTOR3@@@Z PROC ; CFlyingInstance::AdjustDirectionForHoming, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 48	 sub	 esp, 72			; 00000048H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 44	 mov	 DWORD PTR __$ArrayPad$[esp+72], eax
  00014	8b 45 08	 mov	 eax, DWORD PTR _v3TargetPosition$[ebp]
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	57		 push	 edi

; 150  : 	D3DXVECTOR3 vTargetDir(v3TargetPosition);

  0001b	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0001f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00022	66 0f d6 44 24
	34		 movq	 QWORD PTR _vTargetDir$[esp+80], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  00028	f3 0f 10 44 24
	34		 movss	 xmm0, DWORD PTR _vTargetDir$[esp+80]
  0002e	f3 0f 5c 46 40	 subss	 xmm0, DWORD PTR [esi+64]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 150  : 	D3DXVECTOR3 vTargetDir(v3TargetPosition);

  00033	89 44 24 3c	 mov	 DWORD PTR _vTargetDir$[esp+88], eax

; 152  : 	D3DXVec3Normalize(&vTargetDir,&vTargetDir);

  00037	8d 44 24 34	 lea	 eax, DWORD PTR _vTargetDir$[esp+80]
  0003b	50		 push	 eax
  0003c	50		 push	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  0003d	f3 0f 11 44 24
	3c		 movss	 DWORD PTR _vTargetDir$[esp+88], xmm0

; 214  :     y -= v.y;

  00043	f3 0f 10 44 24
	40		 movss	 xmm0, DWORD PTR _vTargetDir$[esp+92]
  00049	f3 0f 5c 46 44	 subss	 xmm0, DWORD PTR [esi+68]
  0004e	f3 0f 11 44 24
	40		 movss	 DWORD PTR _vTargetDir$[esp+92], xmm0

; 215  :     z -= v.z;

  00054	f3 0f 10 44 24
	44		 movss	 xmm0, DWORD PTR _vTargetDir$[esp+96]
  0005a	f3 0f 5c 46 48	 subss	 xmm0, DWORD PTR [esi+72]
  0005f	f3 0f 11 44 24
	44		 movss	 DWORD PTR _vTargetDir$[esp+96], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 152  : 	D3DXVec3Normalize(&vTargetDir,&vTargetDir);

  00065	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 153  : 	D3DXVECTOR3 vVel;
; 154  : 	D3DXVec3Normalize(&vVel, &m_v3Velocity);

  0006a	8d 7e 4c	 lea	 edi, DWORD PTR [esi+76]
  0006d	57		 push	 edi
  0006e	8d 44 24 44	 lea	 eax, DWORD PTR _vVel$[esp+84]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00078	f3 0f 10 4c 24
	40		 movss	 xmm1, DWORD PTR _vVel$[esp+80]
  0007e	f3 0f 10 54 24
	44		 movss	 xmm2, DWORD PTR _vVel$[esp+84]
  00084	f3 0f 5c 54 24
	38		 subss	 xmm2, DWORD PTR _vTargetDir$[esp+84]
  0008a	f3 0f 5c 4c 24
	34		 subss	 xmm1, DWORD PTR _vTargetDir$[esp+80]
  00090	f3 0f 10 44 24
	48		 movss	 xmm0, DWORD PTR _vVel$[esp+88]
  00096	f3 0f 5c 44 24
	3c		 subss	 xmm0, DWORD PTR _vTargetDir$[esp+88]

; 182  :     z = fz;

  0009c	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000a0	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000a4	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000a8	f3 0f 58 d1	 addss	 xmm2, xmm1
  000ac	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 156  : 	if (D3DXVec3LengthSq(&(vVel - vTargetDir)) < 0.001f)

  000b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3a83126f
  000b8	0f 2f c2	 comiss	 xmm0, xmm2
  000bb	0f 87 00 06 00
	00		 ja	 $LN1@AdjustDire

; 157  : 		return;
; 158  : 
; 159  : 	D3DXQUATERNION q = SafeRotationNormalizedArc(vVel,vTargetDir);

  000c1	8d 44 24 34	 lea	 eax, DWORD PTR _vTargetDir$[esp+80]
  000c5	50		 push	 eax
  000c6	8d 44 24 44	 lea	 eax, DWORD PTR _vVel$[esp+84]
  000ca	50		 push	 eax
  000cb	8d 44 24 28	 lea	 eax, DWORD PTR _q$[esp+88]
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; SafeRotationNormalizedArc

; 160  : 
; 161  : 	if (m_pData->m_fHomingMaxAngle > 180)

  000d5	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000db	f3 0f 10 40 60	 movss	 xmm0, DWORD PTR [eax+96]
  000e0	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@43340000
  000e7	0f 86 44 02 00
	00		 jbe	 $LN3@AdjustDire
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  000ed	f3 0f 10 4c 24
	2c		 movss	 xmm1, DWORD PTR _q$[esp+92]
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  000fb	0f 28 e9	 movaps	 xmm5, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000fe	f3 0f 10 5c 24
	20		 movss	 xmm3, DWORD PTR _q$[esp+80]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00104	0f 28 e1	 movaps	 xmm4, xmm1
  00107	f3 0f 59 e8	 mulss	 xmm5, xmm0
  0010b	f3 0f 11 44 24
	30		 movss	 DWORD PTR __real@c0000000$1$[esp+80], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00111	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR _q$[esp+84]
  00117	f3 0f 11 44 24
	10		 movss	 DWORD PTR _q$3$[esp+80], xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0011d	f3 0f 10 3f	 movss	 xmm7, DWORD PTR [edi]
  00121	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00126	f3 0f 59 e1	 mulss	 xmm4, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0012a	f3 0f 10 77 08	 movss	 xmm6, DWORD PTR [edi+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0012f	f3 0f 11 4c 24
	18		 movss	 DWORD PTR _f$1$[esp+80], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00135	0f 28 c8	 movaps	 xmm1, xmm0
  00138	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0013c	0f 28 c3	 movaps	 xmm0, xmm3
  0013f	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00143	f3 0f 11 5c 24
	14		 movss	 DWORD PTR _q$5$[esp+80], xmm3
  00149	f3 0f 10 5c 24
	28		 movss	 xmm3, DWORD PTR _q$[esp+88]
  0014f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00153	f3 0f 11 5c 24
	0c		 movss	 DWORD PTR _q$7$[esp+80], xmm3
  00159	0f 28 c3	 movaps	 xmm0, xmm3

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0015c	f3 0f 11 54 24
	1c		 movss	 DWORD PTR tv2315[esp+80], xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00162	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00166	0f 28 df	 movaps	 xmm3, xmm7
  00169	f3 0f 59 5c 24
	14		 mulss	 xmm3, DWORD PTR _q$5$[esp+80]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0016f	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00173	0f 28 c2	 movaps	 xmm0, xmm2
  00176	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR _q$3$[esp+80]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0017c	0f 28 d6	 movaps	 xmm2, xmm6
  0017f	f3 0f 59 54 24
	14		 mulss	 xmm2, DWORD PTR _q$5$[esp+80]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00185	f3 0f 58 d8	 addss	 xmm3, xmm0
  00189	0f 28 c6	 movaps	 xmm0, xmm6
  0018c	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _q$7$[esp+80]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00192	f3 0f 5c e1	 subss	 xmm4, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00196	0f 28 cf	 movaps	 xmm1, xmm7
  00199	f3 0f 59 4c 24
	10		 mulss	 xmm1, DWORD PTR _q$3$[esp+80]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0019f	f3 0f 58 d8	 addss	 xmm3, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  001a3	0f 28 c7	 movaps	 xmm0, xmm7
  001a6	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _q$7$[esp+80]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001ac	f3 0f 59 fc	 mulss	 xmm7, xmm4

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  001b0	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001b4	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR tv2315[esp+80]
  001ba	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  001be	f3 0f 58 db	 addss	 xmm3, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 222  :     x *= f;

  001c2	f3 0f 59 d5	 mulss	 xmm2, xmm5

; 204  :     x += v.x;

  001c6	f3 0f 58 d0	 addss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001ca	0f 28 c3	 movaps	 xmm0, xmm3
  001cd	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR _q$3$[esp+80]

; 204  :     x += v.x;

  001d3	f3 0f 58 d0	 addss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  001d7	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR tv2315[esp+80]
  001dd	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$5$[esp+80]
  001e3	f3 0f 5c c8	 subss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001e7	0f 28 c6	 movaps	 xmm0, xmm6

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  001ea	f3 0f 59 74 24
	10		 mulss	 xmm6, DWORD PTR _q$3$[esp+80]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001f0	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 223  :     y *= f;

  001f4	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 205  :     y += v.y;

  001f8	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001fc	0f 28 c3	 movaps	 xmm0, xmm3
  001ff	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _q$7$[esp+80]
  00205	f3 0f 59 5c 24
	14		 mulss	 xmm3, DWORD PTR _q$5$[esp+80]

; 205  :     y += v.y;

  0020b	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0020f	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR tv2315[esp+80]
  00215	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _q$7$[esp+80]
  0021b	f3 0f 5c c6	 subss	 xmm0, xmm6
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0021f	f3 0f 59 c5	 mulss	 xmm0, xmm5
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00223	f3 0f 58 c7	 addss	 xmm0, xmm7
  00227	f3 0f 58 c3	 addss	 xmm0, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0022b	f3 0f 10 5c 24
	18		 movss	 xmm3, DWORD PTR _f$1$[esp+80]
  00231	0f 28 e3	 movaps	 xmm4, xmm3

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00234	f3 0f 59 db	 mulss	 xmm3, xmm3
  00238	f3 0f 59 64 24
	30		 mulss	 xmm4, DWORD PTR __real@c0000000$1$[esp+80]

; 106  : 	*pvout = v;

  0023e	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00242	f3 0f 11 57 04	 movss	 DWORD PTR [edi+4], xmm2
  00247	f3 0f 11 4f 08	 movss	 DWORD PTR [edi+8], xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0024c	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR _q$3$[esp+80]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00252	f3 0f 10 7e 68	 movss	 xmm7, DWORD PTR [esi+104]
  00257	f3 0f 10 6e 6c	 movss	 xmm5, DWORD PTR [esi+108]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0025c	f3 0f 10 76 64	 movss	 xmm6, DWORD PTR [esi+100]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00261	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00265	f3 0f 10 44 24
	14		 movss	 xmm0, DWORD PTR _q$5$[esp+80]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 165  : 		D3DXQuaternionMultiply(&m_qRot, &q, &m_qRot);

  0026b	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0026e	f3 0f 10 54 24
	0c		 movss	 xmm2, DWORD PTR _q$7$[esp+80]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 165  : 		D3DXQuaternionMultiply(&m_qRot, &q, &m_qRot);

  00274	8d 4c 24 20	 lea	 ecx, DWORD PTR _q$[esp+80]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00278	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 165  : 		D3DXQuaternionMultiply(&m_qRot, &q, &m_qRot);

  0027c	50		 push	 eax
  0027d	51		 push	 ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0027e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00282	0f 28 c2	 movaps	 xmm0, xmm2
  00285	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00289	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0028d	0f 28 c7	 movaps	 xmm0, xmm7
  00290	f3 0f 59 44 24
	18		 mulss	 xmm0, DWORD PTR _q$3$[esp+88]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00296	f3 0f 5c d9	 subss	 xmm3, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0029a	0f 28 ce	 movaps	 xmm1, xmm6
  0029d	f3 0f 59 4c 24
	18		 mulss	 xmm1, DWORD PTR _q$3$[esp+88]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  002a3	f3 0f 11 5c 24
	20		 movss	 DWORD PTR _f$1$[esp+88], xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  002a9	0f 28 de	 movaps	 xmm3, xmm6
  002ac	f3 0f 59 5c 24
	1c		 mulss	 xmm3, DWORD PTR _q$5$[esp+88]
  002b2	f3 0f 58 d8	 addss	 xmm3, xmm0
  002b6	0f 28 c5	 movaps	 xmm0, xmm5
  002b9	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  002bd	0f 28 d5	 movaps	 xmm2, xmm5
  002c0	f3 0f 59 54 24
	1c		 mulss	 xmm2, DWORD PTR _q$5$[esp+88]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  002c6	f3 0f 58 d8	 addss	 xmm3, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  002ca	0f 28 c6	 movaps	 xmm0, xmm6
  002cd	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$7$[esp+88]
  002d3	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002d7	0f 28 c7	 movaps	 xmm0, xmm7
  002da	f3 0f 59 44 24
	20		 mulss	 xmm0, DWORD PTR _f$1$[esp+88]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  002e0	f3 0f 58 db	 addss	 xmm3, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 222  :     x *= f;

  002e4	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 204  :     x += v.x;

  002e8	f3 0f 58 d0	 addss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002ec	0f 28 c3	 movaps	 xmm0, xmm3
  002ef	f3 0f 59 44 24
	18		 mulss	 xmm0, DWORD PTR _q$3$[esp+88]

; 204  :     x += v.x;

  002f5	f3 0f 58 d0	 addss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  002f9	0f 28 c7	 movaps	 xmm0, xmm7
  002fc	f3 0f 59 44 24
	1c		 mulss	 xmm0, DWORD PTR _q$5$[esp+88]
  00302	f3 0f 59 7c 24
	14		 mulss	 xmm7, DWORD PTR _q$7$[esp+88]
  00308	f3 0f 5c c8	 subss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0030c	0f 28 c5	 movaps	 xmm0, xmm5
  0030f	f3 0f 59 44 24
	20		 mulss	 xmm0, DWORD PTR _f$1$[esp+88]

; 223  :     y *= f;

  00315	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 205  :     y += v.y;

  00319	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0031d	0f 28 c3	 movaps	 xmm0, xmm3
  00320	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$7$[esp+88]
  00326	f3 0f 59 5c 24
	1c		 mulss	 xmm3, DWORD PTR _q$5$[esp+88]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 166  : 		return;

  0032c	e9 5b 03 00 00	 jmp	 $LN113@AdjustDire
$LN3@AdjustDire:

; 167  : 	}
; 168  : 
; 169  : 	float c = cosf(D3DXToRadian(m_pData->m_fHomingMaxAngle));

  00331	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00339	f3 0f 11 44 24
	30		 movss	 DWORD PTR tv2345[esp+80], xmm0
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 647  :             return (float)cos(_X);

  0033f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00342	e8 00 00 00 00	 call	 __libm_sse2_cos_precise

; 748  :             return (float)sin(_X);

  00347	f3 0f 10 4c 24
	30		 movss	 xmm1, DWORD PTR tv2345[esp+80]

; 647  :             return (float)cos(_X);

  0034d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00351	f3 0f 11 44 24
	1c		 movss	 DWORD PTR _c$1$[esp+80], xmm0

; 748  :             return (float)sin(_X);

  00357	0f 5a c1	 cvtps2pd xmm0, xmm1
  0035a	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 172  : 	if (q.w <= -1.0f + 0.0001f)

  0035f	f3 0f 10 4c 24
	2c		 movss	 xmm1, DWORD PTR _q$[esp+92]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  00365	0f 57 db	 xorps	 xmm3, xmm3
  00368	f2 0f 5a d8	 cvtsd2ss xmm3, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 172  : 	if (q.w <= -1.0f + 0.0001f)

  0036c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7ff972
  00374	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 748  :             return (float)sin(_X);

  00377	f3 0f 11 5c 24
	14		 movss	 DWORD PTR _q$8$[esp+80], xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 172  : 	if (q.w <= -1.0f + 0.0001f)

  0037d	f3 0f 11 4c 24
	18		 movss	 DWORD PTR _f$1$[esp+80], xmm1
  00383	72 32		 jb	 SHORT $LN4@AdjustDire

; 173  : 	{
; 174  : 		q.x = 0;
; 175  : 		q.y = 0;
; 176  : 		q.z = s;
; 177  : 		q.w = c;

  00385	f3 0f 10 4c 24
	1c		 movss	 xmm1, DWORD PTR _c$1$[esp+80]
  0038b	0f 57 c0	 xorps	 xmm0, xmm0
  0038e	f3 0f 11 44 24
	20		 movss	 DWORD PTR _q$[esp+80], xmm0
  00394	f3 0f 11 44 24
	10		 movss	 DWORD PTR _q$4$[esp+80], xmm0
  0039a	f3 0f 11 44 24
	24		 movss	 DWORD PTR _q$[esp+84], xmm0
  003a0	f3 0f 11 5c 24
	28		 movss	 DWORD PTR _q$[esp+88], xmm3
  003a6	f3 0f 11 4c 24
	18		 movss	 DWORD PTR _f$1$[esp+80], xmm1
  003ac	f3 0f 11 4c 24
	2c		 movss	 DWORD PTR _q$[esp+92], xmm1

; 178  : 	}

  003b2	e9 c3 00 00 00	 jmp	 $LN114@AdjustDire
$LN4@AdjustDire:

; 179  : 	else if (q.w <= c && q.w <= 1.0f - 0.0001f)

  003b7	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR _c$1$[esp+80]
  003bd	0f 2f c1	 comiss	 xmm0, xmm1
  003c0	0f 82 96 00 00
	00		 jb	 $LN110@AdjustDire
  003c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7ff972
  003ce	0f 2f c1	 comiss	 xmm0, xmm1
  003d1	0f 82 85 00 00
	00		 jb	 $LN110@AdjustDire

; 181  : 		float factor = s / sqrtf(1.0f - q.w * q.w);

  003d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003df	f3 0f 59 c9	 mulss	 xmm1, xmm1
  003e3	f3 0f 5c c1	 subss	 xmm0, xmm1
  003e7	0f 57 c9	 xorps	 xmm1, xmm1
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 758  :             return (float)sqrt(_X);

  003ea	0f 5a c0	 cvtps2pd xmm0, xmm0
  003ed	66 0f 2e c8	 ucomisd xmm1, xmm0
  003f1	77 06		 ja	 SHORT $LN111@AdjustDire
  003f3	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  003f7	eb 05		 jmp	 SHORT $LN112@AdjustDire
$LN111@AdjustDire:
  003f9	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN112@AdjustDire:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 181  : 		float factor = s / sqrtf(1.0f - q.w * q.w);

  003fe	f3 0f 10 5c 24
	14		 movss	 xmm3, DWORD PTR _q$8$[esp+80]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 758  :             return (float)sqrt(_X);

  00404	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 185  : 		q.w = c;

  00408	f3 0f 10 4c 24
	1c		 movss	 xmm1, DWORD PTR _c$1$[esp+80]
  0040e	f3 0f 5e d8	 divss	 xmm3, xmm0
  00412	f3 0f 11 4c 24
	18		 movss	 DWORD PTR _f$1$[esp+80], xmm1
  00418	0f 28 c3	 movaps	 xmm0, xmm3
  0041b	f3 0f 11 4c 24
	2c		 movss	 DWORD PTR _q$[esp+92], xmm1
  00421	f3 0f 59 44 24
	20		 mulss	 xmm0, DWORD PTR _q$[esp+80]
  00427	f3 0f 11 44 24
	0c		 movss	 DWORD PTR _q$6$[esp+80], xmm0
  0042d	f3 0f 11 44 24
	20		 movss	 DWORD PTR _q$[esp+80], xmm0
  00433	0f 28 c3	 movaps	 xmm0, xmm3
  00436	f3 0f 59 44 24
	24		 mulss	 xmm0, DWORD PTR _q$[esp+84]
  0043c	f3 0f 59 5c 24
	28		 mulss	 xmm3, DWORD PTR _q$[esp+88]
  00442	f3 0f 11 44 24
	10		 movss	 DWORD PTR _q$4$[esp+80], xmm0
  00448	f3 0f 11 44 24
	24		 movss	 DWORD PTR _q$[esp+84], xmm0
  0044e	f3 0f 11 5c 24
	14		 movss	 DWORD PTR _q$8$[esp+80], xmm3
  00454	f3 0f 11 5c 24
	28		 movss	 DWORD PTR _q$[esp+88], xmm3
  0045a	eb 24		 jmp	 SHORT $LN6@AdjustDire
$LN110@AdjustDire:

; 179  : 	else if (q.w <= c && q.w <= 1.0f - 0.0001f)

  0045c	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR _q$[esp+84]
  00462	f3 0f 10 5c 24
	28		 movss	 xmm3, DWORD PTR _q$[esp+88]
  00468	f3 0f 11 44 24
	10		 movss	 DWORD PTR _q$4$[esp+80], xmm0
  0046e	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR _q$[esp+80]
  00474	f3 0f 11 5c 24
	14		 movss	 DWORD PTR _q$8$[esp+80], xmm3
$LN114@AdjustDire:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0047a	f3 0f 11 44 24
	0c		 movss	 DWORD PTR _q$6$[esp+80], xmm0
$LN6@AdjustDire:

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00480	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR _q$6$[esp+80]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  00486	0f 28 e1	 movaps	 xmm4, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00489	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0048d	0f 28 e9	 movaps	 xmm5, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00490	f3 0f 10 3f	 movss	 xmm7, DWORD PTR [edi]
  00494	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  00499	f3 0f 10 77 08	 movss	 xmm6, DWORD PTR [edi+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  0049e	f3 0f 59 e1	 mulss	 xmm4, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004a2	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR _q$4$[esp+80]
  004a8	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  004ac	f3 0f 59 2d 00
	00 00 00	 mulss	 xmm5, DWORD PTR __real@c0000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004b4	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  004b8	f3 0f 11 54 24
	1c		 movss	 DWORD PTR tv2393[esp+80], xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004be	0f 28 c3	 movaps	 xmm0, xmm3
  004c1	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  004c5	0f 28 df	 movaps	 xmm3, xmm7
  004c8	f3 0f 59 5c 24
	0c		 mulss	 xmm3, DWORD PTR _q$6$[esp+80]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  004ce	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  004d2	0f 28 c2	 movaps	 xmm0, xmm2
  004d5	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR _q$4$[esp+80]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  004db	0f 28 d6	 movaps	 xmm2, xmm6
  004de	f3 0f 59 54 24
	0c		 mulss	 xmm2, DWORD PTR _q$6$[esp+80]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  004e4	f3 0f 58 d8	 addss	 xmm3, xmm0
  004e8	0f 28 c6	 movaps	 xmm0, xmm6
  004eb	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$8$[esp+80]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  004f1	f3 0f 5c e1	 subss	 xmm4, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  004f5	0f 28 cf	 movaps	 xmm1, xmm7
  004f8	f3 0f 59 4c 24
	10		 mulss	 xmm1, DWORD PTR _q$4$[esp+80]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  004fe	f3 0f 58 d8	 addss	 xmm3, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00502	0f 28 c7	 movaps	 xmm0, xmm7
  00505	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$8$[esp+80]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0050b	f3 0f 59 fc	 mulss	 xmm7, xmm4

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0050f	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00513	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR tv2393[esp+80]
  00519	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  0051d	f3 0f 58 db	 addss	 xmm3, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 222  :     x *= f;

  00521	f3 0f 59 d5	 mulss	 xmm2, xmm5

; 204  :     x += v.x;

  00525	f3 0f 58 d0	 addss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00529	0f 28 c3	 movaps	 xmm0, xmm3
  0052c	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR _q$4$[esp+80]

; 204  :     x += v.x;

  00532	f3 0f 58 d0	 addss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00536	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR tv2393[esp+80]
  0053c	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _q$6$[esp+80]
  00542	f3 0f 5c c8	 subss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00546	0f 28 c6	 movaps	 xmm0, xmm6

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00549	f3 0f 59 74 24
	10		 mulss	 xmm6, DWORD PTR _q$4$[esp+80]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0054f	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 223  :     y *= f;

  00553	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 205  :     y += v.y;

  00557	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0055b	0f 28 c3	 movaps	 xmm0, xmm3
  0055e	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$8$[esp+80]
  00564	f3 0f 59 5c 24
	0c		 mulss	 xmm3, DWORD PTR _q$6$[esp+80]

; 205  :     y += v.y;

  0056a	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0056e	f3 0f 10 44 24
	1c		 movss	 xmm0, DWORD PTR tv2393[esp+80]
  00574	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$8$[esp+80]
  0057a	f3 0f 5c c6	 subss	 xmm0, xmm6
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  0057e	f3 0f 59 c5	 mulss	 xmm0, xmm5
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00582	f3 0f 58 c7	 addss	 xmm0, xmm7
  00586	f3 0f 58 c3	 addss	 xmm0, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 106  : 	*pvout = v;

  0058a	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  0058e	f3 0f 11 57 04	 movss	 DWORD PTR [edi+4], xmm2

; 103  : 	v *= -2*pq->w;

  00593	f3 0f 10 54 24
	18		 movss	 xmm2, DWORD PTR _f$1$[esp+80]

; 106  : 	*pvout = v;

  00599	f3 0f 11 4f 08	 movss	 DWORD PTR [edi+8], xmm1

; 103  : 	v *= -2*pq->w;

  0059e	0f 28 e2	 movaps	 xmm4, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  005a1	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR _q$6$[esp+80]
  005a7	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR _q$4$[esp+80]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  005ad	f3 0f 10 76 64	 movss	 xmm6, DWORD PTR [esi+100]
  005b2	f3 0f 10 7e 68	 movss	 xmm7, DWORD PTR [esi+104]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005b7	0f 28 de	 movaps	 xmm3, xmm6

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  005ba	f3 0f 10 6e 6c	 movss	 xmm5, DWORD PTR [esi+108]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 103  : 	v *= -2*pq->w;

  005bf	f3 0f 59 25 00
	00 00 00	 mulss	 xmm4, DWORD PTR __real@c0000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005c7	f3 0f 59 5c 24
	0c		 mulss	 xmm3, DWORD PTR _q$6$[esp+80]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  005cd	f3 0f 59 c0	 mulss	 xmm0, xmm0
  005d1	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  005d5	f3 0f 59 d2	 mulss	 xmm2, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  005d9	f3 0f 58 c8	 addss	 xmm1, xmm0
  005dd	f3 0f 10 44 24
	14		 movss	 xmm0, DWORD PTR _q$8$[esp+80]
  005e3	f3 0f 59 c0	 mulss	 xmm0, xmm0
  005e7	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 104  : 	v += (pq->w*pq->w - D3DXVec3LengthSq((D3DXVECTOR3*)pq))*(*pv);

  005eb	f3 0f 5c d1	 subss	 xmm2, xmm1
  005ef	f3 0f 11 54 24
	18		 movss	 DWORD PTR _f$1$[esp+80], xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005f5	0f 28 c7	 movaps	 xmm0, xmm7
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 192  : 	D3DXQuaternionMultiply(&m_qRot, &m_qRot, &q);

  005f8	8d 4c 24 20	 lea	 ecx, DWORD PTR _q$[esp+80]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005fc	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR _q$4$[esp+80]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 192  : 	D3DXQuaternionMultiply(&m_qRot, &m_qRot, &q);

  00602	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  00605	51		 push	 ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00606	0f 28 d5	 movaps	 xmm2, xmm5

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00609	0f 28 ce	 movaps	 xmm1, xmm6
  0060c	f3 0f 59 54 24
	10		 mulss	 xmm2, DWORD PTR _q$6$[esp+84]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 192  : 	D3DXQuaternionMultiply(&m_qRot, &m_qRot, &q);

  00612	50		 push	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00613	f3 0f 58 d8	 addss	 xmm3, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00617	f3 0f 59 4c 24
	18		 mulss	 xmm1, DWORD PTR _q$4$[esp+88]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0061d	0f 28 c5	 movaps	 xmm0, xmm5
  00620	f3 0f 59 44 24
	1c		 mulss	 xmm0, DWORD PTR _q$8$[esp+88]
  00626	f3 0f 58 d8	 addss	 xmm3, xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0062a	0f 28 c6	 movaps	 xmm0, xmm6
  0062d	f3 0f 59 44 24
	1c		 mulss	 xmm0, DWORD PTR _q$8$[esp+88]
  00633	f3 0f 5c d0	 subss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00637	0f 28 c7	 movaps	 xmm0, xmm7
  0063a	f3 0f 59 44 24
	20		 mulss	 xmm0, DWORD PTR _f$1$[esp+88]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 105  : 	v += 2*D3DXVec3Dot((D3DXVECTOR3*)pq,pv)*(*(D3DXVECTOR3*)pq);

  00640	f3 0f 58 db	 addss	 xmm3, xmm3
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 222  :     x *= f;

  00644	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 204  :     x += v.x;

  00648	f3 0f 58 d0	 addss	 xmm2, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0064c	0f 28 c3	 movaps	 xmm0, xmm3
  0064f	f3 0f 59 44 24
	18		 mulss	 xmm0, DWORD PTR _q$4$[esp+88]

; 204  :     x += v.x;

  00655	f3 0f 58 d0	 addss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00659	0f 28 c7	 movaps	 xmm0, xmm7
  0065c	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _q$6$[esp+88]
  00662	f3 0f 59 7c 24
	1c		 mulss	 xmm7, DWORD PTR _q$8$[esp+88]
  00668	f3 0f 5c c8	 subss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0066c	0f 28 c5	 movaps	 xmm0, xmm5
  0066f	f3 0f 59 44 24
	20		 mulss	 xmm0, DWORD PTR _f$1$[esp+88]

; 223  :     y *= f;

  00675	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 205  :     y += v.y;

  00679	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0067d	0f 28 c3	 movaps	 xmm0, xmm3
  00680	f3 0f 59 44 24
	1c		 mulss	 xmm0, DWORD PTR _q$8$[esp+88]
  00686	f3 0f 59 5c 24
	14		 mulss	 xmm3, DWORD PTR _q$6$[esp+88]
$LN113@AdjustDire:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 193  : }

  0068c	f3 0f 59 6c 24
	18		 mulss	 xmm5, DWORD PTR _q$4$[esp+88]
  00692	f3 0f 58 c8	 addss	 xmm1, xmm0
  00696	50		 push	 eax
  00697	f3 0f 59 74 24
	24		 mulss	 xmm6, DWORD PTR _f$1$[esp+92]
  0069d	f3 0f 5c fd	 subss	 xmm7, xmm5
  006a1	f3 0f 59 fc	 mulss	 xmm7, xmm4
  006a5	f3 0f 58 fe	 addss	 xmm7, xmm6
  006a9	f3 0f 58 fb	 addss	 xmm7, xmm3
  006ad	f3 0f 11 7e 64	 movss	 DWORD PTR [esi+100], xmm7
  006b2	f3 0f 11 56 68	 movss	 DWORD PTR [esi+104], xmm2
  006b7	f3 0f 11 4e 6c	 movss	 DWORD PTR [esi+108], xmm1
  006bc	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
$LN1@AdjustDire:
  006c1	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+80]
  006c5	5f		 pop	 edi
  006c6	5e		 pop	 esi
  006c7	33 cc		 xor	 ecx, esp
  006c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006ce	8b e5		 mov	 esp, ebp
  006d0	5d		 pop	 ebp
  006d1	c2 04 00	 ret	 4
?AdjustDirectionForHoming@CFlyingInstance@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CFlyingInstance::AdjustDirectionForHoming
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?Render@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
?Render@CFlyingInstance@@QAEXXZ PROC			; CFlyingInstance::Render, COMDAT
; _this$ = ecx

; 555  : 	if (!m_bAlive)

  00000	80 79 34 00	 cmp	 BYTE PTR [ecx+52], 0
  00004	0f 85 00 00 00
	00		 jne	 ?RenderAttachInstance@CFlyingInstance@@QAEXXZ ; CFlyingInstance::RenderAttachInstance

; 556  : 		return;
; 557  : 	RenderAttachInstance();
; 558  : }

  0000a	c3		 ret	 0
?Render@CFlyingInstance@@QAEXXZ ENDP			; CFlyingInstance::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\vector.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\vector.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?Update@CFlyingInstance@@QAE_NXZ
_TEXT	SEGMENT
$T2 = -160						; size = 12
_r$3 = -160						; size = 12
_rkCullingMgr$1$ = -148					; size = 4
_v3LastPosition$1$ = -144				; size = 8
$T4 = -144						; size = 8
__Loc$5 = -132						; size = 12
__Loc$6 = -132						; size = 12
_r$7 = -132						; size = 12
_v3LastPosition$ = -132					; size = 12
_v3LastPosition$2$ = -120				; size = 4
tv1683 = -120						; size = 4
tv1614 = -116						; size = 4
_pHittedInstance$8 = -116				; size = 4
_pHittedInstance$1$ = -112				; size = 4
tv1615 = -112						; size = 4
_f$1$ = -108						; size = 4
__Myhead$1$ = -108					; size = 4
tv1038 = -108						; size = 4
tv1028 = -108						; size = 4
_fGroundHeight$9 = -108					; size = 4
_fCollisionSphereRadius$1$ = -104			; size = 4
tv1863 = -104						; size = 4
_f$ = -104						; size = 4
tv167 = -104						; size = 4
_f$ = -104						; size = 4
_kCheckAnotherMonsterDuringFlying$10 = -100		; size = 36
_kCheckBackgroundDuringFlying$11 = -64			; size = 32
_vecStart$ = -32					; size = 12
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
?Update@CFlyingInstance@@QAE_NXZ PROC			; CFlyingInstance::Update, COMDAT
; _this$ = ecx

; 351  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?Update@CFlyingInstance@@QAE_NXZ
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	8b f9		 mov	 edi, ecx

; 352  : 	if (!m_bAlive)

  00043	80 7f 34 00	 cmp	 BYTE PTR [edi+52], 0
  00047	0f 84 be 01 00
	00		 je	 $LN197@Update

; 353  : 		return false;
; 354  : 
; 355  : 	if (m_pData->m_bIsHoming &&

  0004d	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00050	80 78 5c 00	 cmp	 BYTE PTR [eax+92], 0
  00054	74 44		 je	 SHORT $LN4@Update
  00056	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  0005b	f3 0f 58 40 64	 addss	 xmm0, DWORD PTR [eax+100]
  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00066	f3 0f 11 45 88	 movss	 DWORD PTR tv1683[ebp], xmm0
  0006b	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00070	d9 5d 98	 fstp	 DWORD PTR tv1863[ebp]
  00073	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR tv1863[ebp]
  00078	0f 2f 45 88	 comiss	 xmm0, DWORD PTR tv1683[ebp]
  0007c	76 1c		 jbe	 SHORT $LN4@Update

; 356  : 		m_pData->m_fHomingStartTime + m_fStartTime < CTimer::Instance().GetCurrentSecond())
; 357  : 	{
; 358  : 		if (m_FlyTarget.IsObject())

  0007e	8d 4f 74	 lea	 ecx, DWORD PTR [edi+116]
  00081	e8 00 00 00 00	 call	 ?IsObject@CFlyTarget@@QAE_NXZ ; CFlyTarget::IsObject
  00086	84 c0		 test	 al, al
  00088	74 10		 je	 SHORT $LN4@Update

; 359  : 			AdjustDirectionForHoming(m_FlyTarget.GetFlyTargetPosition());

  0008a	8d 4f 74	 lea	 ecx, DWORD PTR [edi+116]
  0008d	e8 00 00 00 00	 call	 ?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ; CFlyTarget::GetFlyTargetPosition
  00092	50		 push	 eax
  00093	8b cf		 mov	 ecx, edi
  00095	e8 00 00 00 00	 call	 ?AdjustDirectionForHoming@CFlyingInstance@@QAEXABUD3DXVECTOR3@@@Z ; CFlyingInstance::AdjustDirectionForHoming
$LN4@Update:

; 360  : 	}
; 361  : 
; 362  : 	D3DXVECTOR3 v3LastPosition = m_v3Position;

  0009a	f3 0f 7e 47 40	 movq	 xmm0, QWORD PTR [edi+64]
  0009f	8d 77 40	 lea	 esi, DWORD PTR [edi+64]
  000a2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 363  : 
; 364  : 	m_v3Velocity += m_v3Accel*CTimer::Instance().GetElapsedSecond();

  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  000ab	66 0f d6 85 70
	ff ff ff	 movq	 QWORD PTR _v3LastPosition$1$[ebp], xmm0
  000b3	66 0f d6 85 7c
	ff ff ff	 movq	 QWORD PTR _v3LastPosition$[ebp], xmm0
  000bb	89 45 88	 mov	 DWORD PTR _v3LastPosition$2$[ebp], eax
  000be	89 45 84	 mov	 DWORD PTR _v3LastPosition$[ebp+8], eax
  000c1	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  000c6	d9 5d 98	 fstp	 DWORD PTR _f$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  000c9	f3 0f 10 55 98	 movss	 xmm2, DWORD PTR _f$[ebp]
  000ce	0f 28 c2	 movaps	 xmm0, xmm2
  000d1	0f 28 ca	 movaps	 xmm1, xmm2
  000d4	f3 0f 59 47 64	 mulss	 xmm0, DWORD PTR [edi+100]
  000d9	f3 0f 59 4f 68	 mulss	 xmm1, DWORD PTR [edi+104]
  000de	f3 0f 59 57 6c	 mulss	 xmm2, DWORD PTR [edi+108]

; 204  :     x += v.x;

  000e3	f3 0f 58 47 4c	 addss	 xmm0, DWORD PTR [edi+76]

; 205  :     y += v.y;

  000e8	f3 0f 58 4f 50	 addss	 xmm1, DWORD PTR [edi+80]

; 206  :     z += v.z;

  000ed	f3 0f 58 57 54	 addss	 xmm2, DWORD PTR [edi+84]
  000f2	f3 0f 11 47 4c	 movss	 DWORD PTR [edi+76], xmm0
  000f7	f3 0f 11 4f 50	 movss	 DWORD PTR [edi+80], xmm1
  000fc	f3 0f 11 57 54	 movss	 DWORD PTR [edi+84], xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 365  : 	m_v3Velocity.z+=m_pData->m_fGravity * CTimer::Instance().GetElapsedSecond();

  00101	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00107	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  0010c	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0010f	d8 48 38	 fmul	 DWORD PTR [eax+56]
  00112	d9 5d 98	 fstp	 DWORD PTR tv167[ebp]
  00115	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR tv167[ebp]
  0011a	f3 0f 58 47 54	 addss	 xmm0, DWORD PTR [edi+84]
  0011f	f3 0f 11 47 54	 movss	 DWORD PTR [edi+84], xmm0

; 366  : 	D3DXVECTOR3 v3Movement = m_v3Velocity * CTimer::Instance().GetElapsedSecond();

  00124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0012a	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  0012f	d9 5d 98	 fstp	 DWORD PTR _f$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00132	f3 0f 10 5d 98	 movss	 xmm3, DWORD PTR _f$[ebp]
  00137	0f 28 c3	 movaps	 xmm0, xmm3
  0013a	0f 28 d3	 movaps	 xmm2, xmm3
  0013d	f3 0f 59 47 50	 mulss	 xmm0, DWORD PTR [edi+80]
  00142	f3 0f 59 57 4c	 mulss	 xmm2, DWORD PTR [edi+76]
  00147	f3 0f 59 5f 54	 mulss	 xmm3, DWORD PTR [edi+84]

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0014c	0f 28 c8	 movaps	 xmm1, xmm0
  0014f	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00153	f3 0f 11 45 90	 movss	 DWORD PTR tv1615[ebp], xmm0

; 182  :     z = fz;

  00158	0f 28 c2	 movaps	 xmm0, xmm2
  0015b	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0015f	f3 0f 11 55 8c	 movss	 DWORD PTR tv1614[ebp], xmm2
  00164	f3 0f 11 5d 94	 movss	 DWORD PTR _f$1$[ebp], xmm3

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00169	f3 0f 58 c8	 addss	 xmm1, xmm0
  0016d	0f 28 c3	 movaps	 xmm0, xmm3
  00170	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00174	f3 0f 58 c8	 addss	 xmm1, xmm0
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 758  :             return (float)sqrt(_X);

  00178	0f 5a c1	 cvtps2pd xmm0, xmm1
  0017b	0f 57 c9	 xorps	 xmm1, xmm1
  0017e	66 0f 2e c8	 ucomisd xmm1, xmm0
  00182	77 06		 ja	 SHORT $LN191@Update
  00184	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00188	eb 05		 jmp	 SHORT $LN192@Update
$LN191@Update:
  0018a	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN192@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 368  : 	float fCollisionSphereRadius = max(_fMoveDistance*2, m_pData->m_fCollisionSphereRadius);

  0018f	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 758  :             return (float)sqrt(_X);

  00192	0f 57 c9	 xorps	 xmm1, xmm1
  00195	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 372  : 	UpdateAttachInstance();

  00199	8b cf		 mov	 ecx, edi
  0019b	0f 28 c1	 movaps	 xmm0, xmm1
  0019e	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a2	f3 0f 5f 40 70	 maxss	 xmm0, DWORD PTR [eax+112]
  001a7	f3 0f 11 45 98	 movss	 DWORD PTR _fCollisionSphereRadius$1$[ebp], xmm0
  001ac	f3 0f 10 47 70	 movss	 xmm0, DWORD PTR [edi+112]
  001b1	f3 0f 5c c1	 subss	 xmm0, xmm1
  001b5	f3 0f 11 47 70	 movss	 DWORD PTR [edi+112], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  001ba	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv1614[ebp]
  001bf	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
  001c3	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 205  :     y += v.y;

  001c7	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv1615[ebp]
  001cc	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  001d1	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 206  :     z += v.z;

  001d6	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _f$1$[ebp]
  001db	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  001e0	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 372  : 	UpdateAttachInstance();

  001e5	e8 00 00 00 00	 call	 ?UpdateAttachInstance@CFlyingInstance@@QAEXXZ ; CFlyingInstance::UpdateAttachInstance
  001ea	0f 57 c0	 xorps	 xmm0, xmm0

; 373  : 
; 374  : 	if (m_fRemainRange<0)

  001ed	0f 2f 47 70	 comiss	 xmm0, DWORD PTR [edi+112]
  001f1	76 1f		 jbe	 SHORT $LN5@Update

; 375  : 	{
; 376  : 		if (m_pHandler)

  001f3	8b 8f a8 00 00
	00		 mov	 ecx, DWORD PTR [edi+168]
  001f9	85 c9		 test	 ecx, ecx
  001fb	74 05		 je	 SHORT $LN6@Update

; 377  : 			m_pHandler->OnExplodingOutOfRange();

  001fd	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ff	ff 50 14	 call	 DWORD PTR [eax+20]
$LN6@Update:

; 378  : 
; 379  : 		__Explode(false);

  00202	6a 00		 push	 0
  00204	8b cf		 mov	 ecx, edi
  00206	e8 00 00 00 00	 call	 ?__Explode@CFlyingInstance@@QAEX_N@Z ; CFlyingInstance::__Explode
$LN197@Update:

; 498  : }

  0020b	32 c0		 xor	 al, al
  0020d	e9 9c 00 00 00	 jmp	 $LN1@Update
$LN5@Update:

; 380  : 		return false;
; 381  : 	}
; 382  : 
; 383  : 	if (m_FlyTarget.IsObject())

  00212	8d 4f 74	 lea	 ecx, DWORD PTR [edi+116]
  00215	e8 00 00 00 00	 call	 ?IsObject@CFlyTarget@@QAE_NXZ ; CFlyTarget::IsObject
  0021a	84 c0		 test	 al, al
  0021c	0f 84 aa 00 00
	00		 je	 $LN7@Update

; 384  : 	{
; 385  : 		if (!m_bTargetHitted)

  00222	83 bf b0 00 00
	00 00		 cmp	 DWORD PTR [edi+176], 0
  00229	0f 85 db 00 00
	00		 jne	 $LN17@Update

; 386  : 		{
; 387  : 			if (square_distance_between_linesegment_and_point(m_v3Position,v3LastPosition,m_FlyTarget.GetFlyTargetPosition())<m_pData->m_fBombRange*m_pData->m_fBombRange)

  0022f	8d 4f 74	 lea	 ecx, DWORD PTR [edi+116]
  00232	e8 00 00 00 00	 call	 ?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ; CFlyTarget::GetFlyTargetPosition
  00237	50		 push	 eax
  00238	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _v3LastPosition$[ebp]
  0023e	50		 push	 eax
  0023f	56		 push	 esi
  00240	e8 00 00 00 00	 call	 ?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ; square_distance_between_linesegment_and_point
  00245	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00248	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024b	d9 5d 94	 fstp	 DWORD PTR tv1028[ebp]
  0024e	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  00253	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00257	0f 2f 45 94	 comiss	 xmm0, DWORD PTR tv1028[ebp]
  0025b	0f 86 a9 00 00
	00		 jbe	 $LN17@Update

; 388  : 			{
; 389  : 				m_bTargetHitted = TRUE;
; 390  : 
; 391  : 				if (m_canAttack)

  00261	80 7f 35 00	 cmp	 BYTE PTR [edi+53], 0
  00265	c7 87 b0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+176], 1
  0026f	74 13		 je	 SHORT $LN12@Update

; 392  : 				{
; 393  : 					IFlyTargetableObject* pVictim=m_FlyTarget.GetFlyTarget();

  00271	8d 4f 74	 lea	 ecx, DWORD PTR [edi+116]
  00274	e8 00 00 00 00	 call	 ?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ ; CFlyTarget::GetFlyTarget

; 394  : 					if (pVictim)

  00279	85 c0		 test	 eax, eax
  0027b	74 07		 je	 SHORT $LN12@Update

; 395  : 					{
; 396  : 						pVictim->OnShootDamage();

  0027d	8b 10		 mov	 edx, DWORD PTR [eax]
  0027f	8b c8		 mov	 ecx, eax
  00281	ff 52 08	 call	 DWORD PTR [edx+8]
$LN12@Update:

; 397  : 					}
; 398  : 				}
; 399  : 
; 400  : 				if (m_pHandler)

  00284	8b 8f a8 00 00
	00		 mov	 ecx, DWORD PTR [edi+168]
  0028a	85 c9		 test	 ecx, ecx
  0028c	74 08		 je	 SHORT $LN13@Update

; 401  : 				{
; 402  : 					m_pHandler->OnExplodingAtTarget(m_dwSkillIndex);

  0028e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00290	ff 77 3c	 push	 DWORD PTR [edi+60]
  00293	ff 50 20	 call	 DWORD PTR [eax+32]
$LN13@Update:

; 403  : 				}
; 404  : 
; 405  : 				if (m_iPierceCount)

  00296	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00299	85 c0		 test	 eax, eax
  0029b	0f 84 0e 03 00
	00		 je	 $LN29@Update

; 406  : 				{
; 407  : 					m_iPierceCount--;

  002a1	48		 dec	 eax

; 408  : 					__Bomb();

  002a2	8b cf		 mov	 ecx, edi
  002a4	89 47 38	 mov	 DWORD PTR [edi+56], eax
$LN196@Update:

; 498  : }

  002a7	e8 00 00 00 00	 call	 ?__Bomb@CFlyingInstance@@QAEXXZ ; CFlyingInstance::__Bomb
$LN28@Update:
  002ac	b0 01		 mov	 al, 1
$LN1@Update:
  002ae	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002b8	59		 pop	 ecx
  002b9	5f		 pop	 edi
  002ba	5e		 pop	 esi
  002bb	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002be	33 cd		 xor	 ecx, ebp
  002c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c5	8b e5		 mov	 esp, ebp
  002c7	5d		 pop	 ebp
  002c8	8b e3		 mov	 esp, ebx
  002ca	5b		 pop	 ebx
  002cb	c3		 ret	 0
$LN7@Update:

; 409  : 				}
; 410  : 				else
; 411  : 				{
; 412  : 					__Explode();
; 413  : 					return false;
; 414  : 				}
; 415  : 
; 416  : 				return true;
; 417  : 			}
; 418  : 		}
; 419  : 	}
; 420  : 	else if (m_FlyTarget.IsPosition())

  002cc	8d 4f 74	 lea	 ecx, DWORD PTR [edi+116]
  002cf	e8 00 00 00 00	 call	 ?IsPosition@CFlyTarget@@QAE_NXZ ; CFlyTarget::IsPosition
  002d4	84 c0		 test	 al, al
  002d6	74 32		 je	 SHORT $LN17@Update

; 421  : 	{
; 422  : 		if (square_distance_between_linesegment_and_point(m_v3Position,v3LastPosition,m_FlyTarget.GetFlyTargetPosition())<m_pData->m_fBombRange*m_pData->m_fBombRange)

  002d8	8d 4f 74	 lea	 ecx, DWORD PTR [edi+116]
  002db	e8 00 00 00 00	 call	 ?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ; CFlyTarget::GetFlyTargetPosition
  002e0	50		 push	 eax
  002e1	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _v3LastPosition$[ebp]
  002e7	50		 push	 eax
  002e8	56		 push	 esi
  002e9	e8 00 00 00 00	 call	 ?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ; square_distance_between_linesegment_and_point
  002ee	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  002f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  002f4	d9 5d 94	 fstp	 DWORD PTR tv1038[ebp]
  002f7	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  002fc	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00300	0f 2f 45 94	 comiss	 xmm0, DWORD PTR tv1038[ebp]
  00304	0f 87 a5 02 00
	00		 ja	 $LN29@Update
$LN17@Update:

; 435  : 	if (m_pData->m_bHitOnAnotherMonster)

  0030a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\vector.h

; 107  : 		x = a;

  0030d	f3 0f 7e 8d 70
	ff ff ff	 movq	 xmm1, QWORD PTR _v3LastPosition$1$[ebp]
  00315	8b 4d 88	 mov	 ecx, DWORD PTR _v3LastPosition$2$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 433  : 	CCullingManager & rkCullingMgr = CCullingManager::Instance();

  00318	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\vector.h

; 107  : 		x = a;

  0031e	66 0f d6 4d e0	 movq	 QWORD PTR _vecStart$[ebp], xmm1
  00323	89 4d e8	 mov	 DWORD PTR _vecStart$[ebp+8], ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 435  : 	if (m_pData->m_bHitOnAnotherMonster)

  00326	80 78 69 00	 cmp	 BYTE PTR [eax+105], 0
  0032a	89 95 6c ff ff
	ff		 mov	 DWORD PTR _rkCullingMgr$1$[ebp], edx
  00330	0f 84 8c 01 00
	00		 je	 $LN20@Update

; 318  : 		: pOwner(pOwner)

  00336	8b 87 ac 00 00
	00		 mov	 eax, DWORD PTR [edi+172]

; 322  : 		s.v3Position = v2;

  0033c	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  00340	89 45 bc	 mov	 DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+32], eax
  00343	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00346	89 45 a4	 mov	 DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+8], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 15   : 		: f(fn), dist(distance)

  00349	8d 45 9c	 lea	 eax, DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 320  : 		s.fRadius = 10.0f;

  0034c	c7 45 b4 00 00
	20 41		 mov	 DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+24], 1092616192 ; 41200000H

; 321  : 		s.v3LastPosition = v1;

  00353	66 0f d6 4d a8	 movq	 QWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+12], xmm1
  00358	89 4d b0	 mov	 DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+20], ecx

; 322  : 		s.v3Position = v2;

  0035b	66 0f d6 45 9c	 movq	 QWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp], xmm0

; 323  : 		pInst = 0;

  00360	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+28], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 16   : 	{}

  00367	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$7[ebp], OFFSET ??_7?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@6B@

; 15   : 		: f(fn), dist(distance)

  00371	89 45 80	 mov	 DWORD PTR _r$7[ebp+4], eax
  00374	c7 45 84 00 00
	80 bf		 mov	 DWORD PTR _r$7[ebp+8], -1082130432 ; bf800000H

; 114  : 		m_Factory->RangeTest(p, radius, &r/*this*/);

  0037b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fCollisionSphereRadius$1$[ebp]
  00380	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _r$7[ebp]
  00386	50		 push	 eax
  00387	51		 push	 ecx
  00388	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  0038b	8d 45 e0	 lea	 eax, DWORD PTR _vecStart$[ebp]
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	50		 push	 eax
  00394	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0039b	e8 00 00 00 00	 call	 ?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z ; SpherePackFactory::RangeTest
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 341  : 		return pInst!=0;

  003a0	8b 45 b8	 mov	 eax, DWORD PTR _kCheckAnotherMonsterDuringFlying$10[ebp+28]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 115  : 	}

  003a3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 341  : 		return pInst!=0;

  003aa	89 45 90	 mov	 DWORD PTR _pHittedInstance$1$[ebp], eax
  003ad	85 c0		 test	 eax, eax

; 436  : 	{
; 437  : 		FCheckAnotherMonsterDuringFlying kCheckAnotherMonsterDuringFlying(m_pOwner, v3LastPosition,m_v3Position);
; 438  : 		rkCullingMgr.ForInRange(vecStart,fCollisionSphereRadius, &kCheckAnotherMonsterDuringFlying);
; 439  : 		if (kCheckAnotherMonsterDuringFlying.IsHitted())

  003af	0f 84 0d 01 00
	00		 je	 $LN20@Update

; 440  : 		{
; 441  : 			IActorInstance * pHittedInstance = (IActorInstance*)kCheckAnotherMonsterDuringFlying.GetHittedObject();

  003b5	89 45 8c	 mov	 DWORD PTR _pHittedInstance$8[ebp], eax

; 442  : 			if (m_HittedObjectSet.end() == m_HittedObjectSet.find(pHittedInstance))

  003b8	8d b7 b4 00 00
	00		 lea	 esi, DWORD PTR [edi+180]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  003be	8d 45 8c	 lea	 eax, DWORD PTR _pHittedInstance$8[ebp]
  003c1	8b ce		 mov	 ecx, esi
  003c3	50		 push	 eax
  003c4	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR __Loc$6[ebp]
  003ca	50		 push	 eax
  003cb	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::_Find_lower_bound<IActorInstance *>

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  003d0	8b 4d 84	 mov	 ecx, DWORD PTR __Loc$6[ebp+8]
  003d3	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  003d7	75 08		 jne	 SHORT $LN67@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  003d9	8b 45 90	 mov	 eax, DWORD PTR _pHittedInstance$1$[ebp]
  003dc	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  003df	73 02		 jae	 SHORT $LN66@Update
$LN67@Update:

; 1358 :         return _Get_scary()->_Myhead;

  003e1	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN66@Update:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  003e3	8b 06		 mov	 eax, DWORD PTR [esi]
  003e5	89 45 94	 mov	 DWORD PTR __Myhead$1$[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 442  : 			if (m_HittedObjectSet.end() == m_HittedObjectSet.find(pHittedInstance))

  003e8	3b c1		 cmp	 eax, ecx
  003ea	0f 85 cf 00 00
	00		 jne	 $LN189@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  003f0	8d 45 8c	 lea	 eax, DWORD PTR _pHittedInstance$8[ebp]
  003f3	8b ce		 mov	 ecx, esi
  003f5	50		 push	 eax
  003f6	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  003fc	50		 push	 eax
  003fd	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVIActorInstance@@@?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@1@ABQAVIActorInstance@@@Z ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::_Find_lower_bound<IActorInstance *>
  00402	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00406	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00409	66 0f d6 85 7c
	ff ff ff	 movq	 QWORD PTR __Loc$5[ebp], xmm0

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00411	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00415	75 08		 jne	 SHORT $LN95@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00417	8b 4d 90	 mov	 ecx, DWORD PTR _pHittedInstance$1$[ebp]
  0041a	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0041d	73 60		 jae	 SHORT $LN165@Update
$LN95@Update:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  0041f	81 7e 04 cc cc
	cc 0c		 cmp	 DWORD PTR [esi+4], 214748364 ; 0cccccccH
  00426	0f 84 93 01 00
	00		 je	 $LN199@Update
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0042c	89 b5 70 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], esi

; 79   :         return ::operator new(_Bytes);

  00432	6a 14		 push	 20			; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00434	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0043b	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00445	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 805  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0044a	8b 4d 90	 mov	 ecx, DWORD PTR _pHittedInstance$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0044d	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 785  :     }

  00450	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 805  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00457	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0045a	8b 4d 94	 mov	 ecx, DWORD PTR __Myhead$1$[ebp]

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0045d	50		 push	 eax
  0045e	ff 75 80	 push	 DWORD PTR __Loc$5[ebp+4]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00461	89 08		 mov	 DWORD PTR [eax], ecx

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00463	ff b5 7c ff ff
	ff		 push	 DWORD PTR __Loc$5[ebp]

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00469	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0046c	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0046f	8b ce		 mov	 ecx, esi

; 809  :         this->_Ptr->_Color = _Red;

  00471	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00477	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVIActorInstance@@@std@@@std@@QAEPAU?$_Tree_node@PAVIActorInstance@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVIActorInstance@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<IActorInstance *> >::_Insert_node
  0047c	8b 4d 90	 mov	 ecx, DWORD PTR _pHittedInstance$1$[ebp]
$LN165@Update:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 446  : 				if (m_pHandler)

  0047f	8b b7 a8 00 00
	00		 mov	 esi, DWORD PTR [edi+168]
  00485	85 f6		 test	 esi, esi
  00487	74 16		 je	 SHORT $LN21@Update

; 447  : 				{
; 448  : 					m_pHandler->OnExplodingAtAnotherTarget(m_dwSkillIndex, pHittedInstance->GetVirtualID());

  00489	8b 01		 mov	 eax, DWORD PTR [ecx]
  0048b	8b 36		 mov	 esi, DWORD PTR [esi]
  0048d	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  00490	ff d0		 call	 eax
  00492	8b 8f a8 00 00
	00		 mov	 ecx, DWORD PTR [edi+168]
  00498	50		 push	 eax
  00499	ff 77 3c	 push	 DWORD PTR [edi+60]
  0049c	ff 56 1c	 call	 DWORD PTR [esi+28]
$LN21@Update:

; 449  : 				}
; 450  : 
; 451  : 				if (m_iPierceCount)

  0049f	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  004a2	8b cf		 mov	 ecx, edi
  004a4	85 c0		 test	 eax, eax
  004a6	74 09		 je	 SHORT $LN22@Update

; 452  : 				{
; 453  : 					m_iPierceCount--;

  004a8	48		 dec	 eax
  004a9	89 47 38	 mov	 DWORD PTR [edi+56], eax

; 460  : 				}
; 461  : 
; 462  : 				return true;

  004ac	e9 f6 fd ff ff	 jmp	 $LN196@Update
$LN22@Update:

; 454  : 					__Bomb();
; 455  : 				}
; 456  : 				else
; 457  : 				{
; 458  : 					__Explode();

  004b1	6a 01		 push	 1
  004b3	e8 00 00 00 00	 call	 ?__Explode@CFlyingInstance@@QAEX_N@Z ; CFlyingInstance::__Explode

; 459  : 					return false;

  004b8	32 c0		 xor	 al, al
  004ba	e9 ef fd ff ff	 jmp	 $LN1@Update
$LN189@Update:

; 442  : 			if (m_HittedObjectSet.end() == m_HittedObjectSet.find(pHittedInstance))

  004bf	8d 77 40	 lea	 esi, DWORD PTR [edi+64]
$LN20@Update:

; 463  : 			}
; 464  : 		}
; 465  : 	}
; 466  : 
; 467  : 	if (m_pData->m_bHitOnBackground)

  004c2	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  004c5	80 78 68 00	 cmp	 BYTE PTR [eax+104], 0
  004c9	0f 84 dd fd ff
	ff		 je	 $LN28@Update

; 468  : 	{
; 469  : 
; 470  : 		if (CFlyingManager::Instance().GetMapManagerPtr())

  004cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCFlyingManager@@@@0PAVCFlyingManager@@A ; CSingleton<CFlyingManager>::ms_singleton
  004d4	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  004d7	85 c9		 test	 ecx, ecx
  004d9	74 35		 je	 SHORT $LN26@Update

; 471  : 		{
; 472  : 			float fGroundHeight = CFlyingManager::Instance().GetMapManagerPtr()->GetTerrainHeight(m_v3Position.x,-m_v3Position.y);

  004db	f3 0f 10 47 44	 movss	 xmm0, DWORD PTR [edi+68]
  004e0	83 ec 08	 sub	 esp, 8
  004e3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004ea	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004f0	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  004f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f9	e8 00 00 00 00	 call	 ?GetTerrainHeight@CMapManager@@QAEMMM@Z ; CMapManager::GetTerrainHeight
  004fe	d9 5d 94	 fstp	 DWORD PTR _fGroundHeight$9[ebp]

; 473  : 			if (fGroundHeight>m_v3Position.z)

  00501	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _fGroundHeight$9[ebp]
  00506	0f 2f 47 48	 comiss	 xmm0, DWORD PTR [edi+72]
  0050a	0f 87 90 00 00
	00		 ja	 $LN195@Update
$LN26@Update:

; 290  : 		s.v3LastPosition = v1;

  00510	8b 45 88	 mov	 eax, DWORD PTR _v3LastPosition$2$[ebp]
  00513	f3 0f 7e 85 70
	ff ff ff	 movq	 xmm0, QWORD PTR _v3LastPosition$1$[ebp]
  0051b	89 45 d4	 mov	 DWORD PTR _kCheckBackgroundDuringFlying$11[ebp+20], eax

; 291  : 		s.v3Position = v2;

  0051e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00521	66 0f d6 45 cc	 movq	 QWORD PTR _kCheckBackgroundDuringFlying$11[ebp+12], xmm0
  00526	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  0052a	89 45 c8	 mov	 DWORD PTR _kCheckBackgroundDuringFlying$11[ebp+8], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 15   : 		: f(fn), dist(distance)

  0052d	8d 45 c0	 lea	 eax, DWORD PTR _kCheckBackgroundDuringFlying$11[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 289  : 		s.fRadius = 1.0f;

  00530	c7 45 d8 00 00
	80 3f		 mov	 DWORD PTR _kCheckBackgroundDuringFlying$11[ebp+24], 1065353216 ; 3f800000H

; 291  : 		s.v3Position = v2;

  00537	66 0f d6 45 c0	 movq	 QWORD PTR _kCheckBackgroundDuringFlying$11[ebp], xmm0

; 292  : 		bHit = false;

  0053c	c6 45 dc 00	 mov	 BYTE PTR _kCheckBackgroundDuringFlying$11[ebp+28], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 16   : 	{}

  00540	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$3[ebp], OFFSET ??_7?$RangeTester@UFCheckBackgroundDuringFlying@@@@6B@

; 15   : 		: f(fn), dist(distance)

  0054a	89 85 64 ff ff
	ff		 mov	 DWORD PTR _r$3[ebp+4], eax
  00550	c7 85 68 ff ff
	ff 00 00 80 bf	 mov	 DWORD PTR _r$3[ebp+8], -1082130432 ; bf800000H

; 114  : 		m_Factory->RangeTest(p, radius, &r/*this*/);

  0055a	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fCollisionSphereRadius$1$[ebp]
  0055f	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _r$3[ebp]
  00565	50		 push	 eax
  00566	51		 push	 ecx
  00567	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _rkCullingMgr$1$[ebp]
  0056d	8d 45 e0	 lea	 eax, DWORD PTR _vecStart$[ebp]
  00570	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00575	50		 push	 eax
  00576	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0057d	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00580	e8 00 00 00 00	 call	 ?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z ; SpherePackFactory::RangeTest
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 487  : 		if (kCheckBackgroundDuringFlying.IsHitted())

  00585	80 7d dc 00	 cmp	 BYTE PTR _kCheckBackgroundDuringFlying$11[ebp+28], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterlib\CullingManager.h

; 115  : 	}

  00589	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00590	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$3[ebp], OFFSET ??_7SpherePackCallback@@6B@
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 487  : 		if (kCheckBackgroundDuringFlying.IsHitted())

  0059a	0f 84 0c fd ff
	ff		 je	 $LN28@Update
$LN195@Update:

; 488  : 		{
; 489  : 			if (m_pHandler)
; 490  : 				m_pHandler->OnExplodingAtBackground();
; 491  : 
; 492  : 			__Explode();

  005a0	8b 8f a8 00 00
	00		 mov	 ecx, DWORD PTR [edi+168]
  005a6	85 c9		 test	 ecx, ecx
  005a8	74 05		 je	 SHORT $LN29@Update
  005aa	8b 01		 mov	 eax, DWORD PTR [ecx]
  005ac	ff 50 18	 call	 DWORD PTR [eax+24]
$LN29@Update:

; 498  : }

  005af	6a 01		 push	 1
  005b1	8b cf		 mov	 ecx, edi
  005b3	e8 00 00 00 00	 call	 ?__Explode@CFlyingInstance@@QAEX_N@Z ; CFlyingInstance::__Explode
  005b8	32 c0		 xor	 al, al
  005ba	e9 ef fc ff ff	 jmp	 $LN1@Update
$LN199@Update:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

  005bf	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN193@Update:
  005c4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _r$7[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$RangeTester@UFCheckAnotherMonsterDuringFlying@@@@UAE@XZ ; RangeTester<FCheckAnotherMonsterDuringFlying>::~RangeTester<FCheckAnotherMonsterDuringFlying>
__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$3:
  0000b	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVIActorInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<IActorInstance *,void *> > >
__unwindfunclet$?Update@CFlyingInstance@@QAE_NXZ$6:
  00016	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _r$3[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$RangeTester@UFCheckBackgroundDuringFlying@@@@UAE@XZ ; RangeTester<FCheckBackgroundDuringFlying>::~RangeTester<FCheckBackgroundDuringFlying>
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$?Update@CFlyingInstance@@QAE_NXZ:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Update@CFlyingInstance@@QAE_NXZ
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Update@CFlyingInstance@@QAE_NXZ ENDP			; CFlyingInstance::Update
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?Create@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@ABVCFlyTarget@@_N@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_c_rv3StartPos$ = 12					; size = 4
_c_rkTarget$ = 16					; size = 4
_canAttack$ = 20					; size = 1
?Create@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@ABVCFlyTarget@@_N@Z PROC ; CFlyingInstance::Create, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 109  : 	m_FlyTarget = c_rkTarget;

  00005	ff 75 10	 push	 DWORD PTR _c_rkTarget$[ebp]
  00008	8b f9		 mov	 edi, ecx
  0000a	8d 77 74	 lea	 esi, DWORD PTR [edi+116]
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ??4CFlyTarget@@QAEAAV0@ABV0@@Z ; CFlyTarget::operator=

; 110  : 	m_canAttack = canAttack;
; 111  : 
; 112  : 	__SetDataPointer(pData, c_rv3StartPos);

  00014	ff 75 0c	 push	 DWORD PTR _c_rv3StartPos$[ebp]
  00017	8a 45 14	 mov	 al, BYTE PTR _canAttack$[ebp]
  0001a	8b cf		 mov	 ecx, edi
  0001c	ff 75 08	 push	 DWORD PTR _pData$[ebp]
  0001f	88 47 35	 mov	 BYTE PTR [edi+53], al
  00022	e8 00 00 00 00	 call	 ?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ; CFlyingInstance::__SetDataPointer

; 113  : 	__SetTargetDirection(m_FlyTarget);

  00027	56		 push	 esi
  00028	8b cf		 mov	 ecx, edi
  0002a	e8 00 00 00 00	 call	 ?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z ; CFlyingInstance::__SetTargetDirection
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 114  : }

  00031	5d		 pop	 ebp
  00032	c2 10 00	 ret	 16			; 00000010H
?Create@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@ABVCFlyTarget@@_N@Z ENDP ; CFlyingInstance::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?Destroy@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CFlyingInstance@@QAEXXZ PROC			; CFlyingInstance::Destroy, COMDAT
; _this$ = ecx

; 58   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 59   : 	m_FlyTarget.Clear();

  00003	8d 4e 74	 lea	 ecx, DWORD PTR [esi+116]
  00006	e8 00 00 00 00	 call	 ?Clear@CFlyTarget@@QAEXXZ ; CFlyTarget::Clear

; 60   : 
; 61   : 	ClearAttachInstance();

  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?ClearAttachInstance@CFlyingInstance@@QAEXXZ ; CFlyingInstance::ClearAttachInstance

; 62   : 
; 63   : 	__Initialize();

  00012	8b ce		 mov	 ecx, esi
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ?__Initialize@CFlyingInstance@@IAEXXZ ; CFlyingInstance::__Initialize
?Destroy@CFlyingInstance@@QAEXXZ ENDP			; CFlyingInstance::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ??1CFlyingInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CFlyingInstance@@UAE@XZ PROC				; CFlyingInstance::~CFlyingInstance, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CFlyingInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlyingInstance@@6B@

; 23   : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CFlyingInstance@@QAEXXZ ; CFlyingInstance::Destroy

; 24   : }

  00030	8d 8e b4 00 00
	00		 lea	 ecx, DWORD PTR [esi+180]
  00036	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tset_traits@PAVIActorInstance@@U?$less@PAVIActorInstance@@@std@@V?$allocator@PAVIActorInstance@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >::~_Tree<std::_Tset_traits<IActorInstance *,std::less<IActorInstance *>,std::allocator<IActorInstance *>,0> >
  0003b	8d 8e 9c 00 00
	00		 lea	 ecx, DWORD PTR [esi+156]
  00041	e8 00 00 00 00	 call	 ??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::~vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >
  00046	8d 4e 74	 lea	 ecx, DWORD PTR [esi+116]
  00049	e8 00 00 00 00	 call	 ??1CFlyTarget@@UAE@XZ	; CFlyTarget::~CFlyTarget
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
  0005e	cc		 int	 3
  0005f	cc		 int	 3
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CFlyingInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CFlyingInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CFlyingInstance@@UAE@XZ ENDP				; CFlyingInstance::~CFlyingInstance
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ??0CFlyingInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFlyingInstance@@QAE@XZ PROC				; CFlyingInstance::CFlyingInstance, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CFlyingInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	8d 4f 74	 lea	 ecx, DWORD PTR [edi+116]
  0002f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CFlyingInstance@@6B@
  00035	e8 00 00 00 00	 call	 ??0CFlyTarget@@QAE@XZ	; CFlyTarget::CFlyTarget
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00041	c7 87 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+156], 0
  0004b	c7 87 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+160], 0
  00055	c7 87 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+164], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 17   : {

  0005f	8d b7 b4 00 00
	00		 lea	 esi, DWORD PTR [edi+180]
  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00069	6a 14		 push	 20			; 00000014H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 17   : {

  0006b	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0006e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00074	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0007b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00080	83 c4 04	 add	 esp, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 18   : 	__Initialize();

  00083	8b cf		 mov	 ecx, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00085	89 00		 mov	 DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00087	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0008a	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

  0008d	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00093	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp

; 18   : 	__Initialize();

  00095	e8 00 00 00 00	 call	 ?__Initialize@CFlyingInstance@@IAEXXZ ; CFlyingInstance::__Initialize

; 19   : }

  0009a	8b c7		 mov	 eax, edi
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFlyingInstance@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 74	 add	 ecx, 116		; 00000074H
  00006	e9 00 00 00 00	 jmp	 ??1CFlyTarget@@UAE@XZ	; CFlyTarget::~CFlyTarget
__unwindfunclet$??0CFlyingInstance@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  00014	e9 00 00 00 00	 jmp	 ??1?$vector@UTAttachEffectInstance@CFlyingInstance@@V?$allocator@UTAttachEffectInstance@CFlyingInstance@@@std@@@std@@QAE@XZ ; std::vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >::~vector<CFlyingInstance::TAttachEffectInstance,std::allocator<CFlyingInstance::TAttachEffectInstance> >
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
__ehhandler$??0CFlyingInstance@@QAE@XZ:
  0001e	90		 npad	 1
  0001f	90		 npad	 1
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CFlyingInstance@@QAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CFlyingInstance@@QAE@XZ ENDP				; CFlyingInstance::CFlyingInstance
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?SetFlyTarget@CFlyingInstance@@QAEXABVCFlyTarget@@@Z
_TEXT	SEGMENT
_cr_Target$ = 8						; size = 4
?SetFlyTarget@CFlyingInstance@@QAEXABVCFlyTarget@@@Z PROC ; CFlyingInstance::SetFlyTarget, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 141  : 	//m_pFlyTarget = pTarget;
; 142  : 	m_FlyTarget = cr_Target;

  00005	ff 75 08	 push	 DWORD PTR _cr_Target$[ebp]
  00008	8b f9		 mov	 edi, ecx
  0000a	8d 77 74	 lea	 esi, DWORD PTR [edi+116]
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ??4CFlyTarget@@QAEAAV0@ABV0@@Z ; CFlyTarget::operator=

; 143  : 	//SetStartTargetPosition(m_FlyTarget.GetFlyTargetPosition());
; 144  : 
; 145  : 	__SetTargetDirection(m_FlyTarget);

  00014	56		 push	 esi
  00015	8b cf		 mov	 ecx, edi
  00017	e8 00 00 00 00	 call	 ?__SetTargetDirection@CFlyingInstance@@IAEXABVCFlyTarget@@@Z ; CFlyingInstance::__SetTargetDirection
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 146  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?SetFlyTarget@CFlyingInstance@@QAEXABVCFlyTarget@@@Z ENDP ; CFlyingInstance::SetFlyTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?SetDataPointer@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_v3StartPosition$ = 12					; size = 4
?SetDataPointer@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z PROC ; CFlyingInstance::SetDataPointer, COMDAT
; _this$ = ecx

; 571  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : }

  00003	5d		 pop	 ebp

; 572  : 	__SetDataPointer(pData, v3StartPosition);

  00004	e9 00 00 00 00	 jmp	 ?__SetDataPointer@CFlyingInstance@@IAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ; CFlyingInstance::__SetDataPointer
?SetDataPointer@CFlyingInstance@@QAEXPAVCFlyingData@@ABUD3DXVECTOR3@@@Z ENDP ; CFlyingInstance::SetDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?Clear@CFlyingInstance@@QAEXXZ
_TEXT	SEGMENT
?Clear@CFlyingInstance@@QAEXXZ PROC			; CFlyingInstance::Clear, COMDAT
; _this$ = ecx

; 54   : 	Destroy();

  00000	e9 00 00 00 00	 jmp	 ?Destroy@CFlyingInstance@@QAEXXZ ; CFlyingInstance::Destroy
?Clear@CFlyingInstance@@QAEXXZ ENDP			; CFlyingInstance::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSpherePackCallback@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSpherePackCallback@@UAEPAXI@Z PROC			; SpherePackCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GSpherePackCallback@@UAEPAXI@Z ENDP			; SpherePackCallback::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
;	COMDAT ?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_searchpos$ = 8						; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::PointTest2dCallback, COMDAT
; _this$ = ecx

; 79   : 	{};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::PointTest2dCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
;	COMDAT ?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_searchpos$ = 8						; size = 4
_distance$ = 12						; size = 4
_sphere$ = 16						; size = 4
_state$ = 20						; size = 4
?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::RangeTestCallback, COMDAT
; _this$ = ecx

; 74   : 	{};

  00000	c2 10 00	 ret	 16			; 00000010H
?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::RangeTestCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
;	COMDAT ?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
_sect$ = 20						; size = 4
_sphere$ = 24						; size = 4
?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z PROC ; SpherePackCallback::RayTraceCallback, COMDAT
; _this$ = ecx

; 68   : 	{};

  00000	c2 14 00	 ret	 20			; 00000014H
?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ENDP ; SpherePackCallback::RayTraceCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
;	COMDAT ?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::VisibilityCallback, COMDAT
; _this$ = ecx

; 61   : 	{};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::VisibilityCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\SphereLib\spherepack.h
;	COMDAT ??1SpherePackCallback@@UAE@XZ
_TEXT	SEGMENT
??1SpherePackCallback@@UAE@XZ PROC			; SpherePackCallback::~SpherePackCallback, COMDAT
; _this$ = ecx

; 56   : 	virtual ~SpherePackCallback() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackCallback@@6B@
  00006	c3		 ret	 0
??1SpherePackCallback@@UAE@XZ ENDP			; SpherePackCallback::~SpherePackCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
;	COMDAT ?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z
_TEXT	SEGMENT
tv1064 = -8						; size = 4
_l$1$ = -4						; size = 4
tv1053 = 8						; size = 4
_p1$ = 8						; size = 4
tv1122 = 12						; size = 4
tv1106 = 12						; size = 4
tv1083 = 12						; size = 4
tv1051 = 12						; size = 4
_p2$ = 12						; size = 4
_x$ = 16						; size = 4
?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z PROC ; square_distance_between_linesegment_and_point, COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00006	8b 45 08	 mov	 eax, DWORD PTR _p1$[ebp]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _p2$[ebp]
  0000c	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00010	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00015	f3 0f 10 31	 movss	 xmm6, DWORD PTR [ecx]
  00019	f3 0f 10 69 04	 movss	 xmm5, DWORD PTR [ecx+4]
  0001e	f3 0f 5c f3	 subss	 xmm6, xmm3
  00022	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00027	f3 0f 5c ea	 subss	 xmm5, xmm2
  0002b	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  00030	0f 28 e0	 movaps	 xmm4, xmm0
  00033	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00036	f3 0f 5c e1	 subss	 xmm4, xmm1
  0003a	f3 0f 11 45 f8	 movss	 DWORD PTR tv1064[ebp], xmm0

; 182  :     z = fz;

  0003f	0f 28 c6	 movaps	 xmm0, xmm6

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00042	f3 0f 11 75 08	 movss	 DWORD PTR tv1053[ebp], xmm6

; 182  :     z = fz;

  00047	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0004b	0f 28 fd	 movaps	 xmm7, xmm5
  0004e	f3 0f 59 fd	 mulss	 xmm7, xmm5

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00052	f3 0f 11 65 0c	 movss	 DWORD PTR tv1051[ebp], xmm4

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00057	f3 0f 58 f8	 addss	 xmm7, xmm0
  0005b	0f 28 c4	 movaps	 xmm0, xmm4
  0005e	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00062	f3 0f 10 60 04	 movss	 xmm4, DWORD PTR [eax+4]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00067	f3 0f 58 f8	 addss	 xmm7, xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0006b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv1053[ebp]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00070	f3 0f 11 7d fc	 movss	 DWORD PTR _l$1$[ebp], xmm7

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00075	f3 0f 10 38	 movss	 xmm7, DWORD PTR [eax]
  00079	0f 28 f7	 movaps	 xmm6, xmm7
  0007c	f3 0f 5c f3	 subss	 xmm6, xmm3
  00080	0f 28 dc	 movaps	 xmm3, xmm4
  00083	f3 0f 5c da	 subss	 xmm3, xmm2
  00087	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0008c	f3 0f 5c d1	 subss	 xmm2, xmm1

; 182  :     z = fz;

  00090	0f 28 cd	 movaps	 xmm1, xmm5

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00093	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 182  :     z = fz;

  00097	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0009b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0009f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR tv1051[ebp]
  000a4	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000a8	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 84   : 	if (d<=0.0f)

  000af	0f 2f c1	 comiss	 xmm0, xmm1
  000b2	72 20		 jb	 SHORT $LN2@square_dis
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000b4	f3 0f 59 db	 mulss	 xmm3, xmm3

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000b8	f3 0f 59 f6	 mulss	 xmm6, xmm6
  000bc	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000c0	f3 0f 58 de	 addss	 xmm3, xmm6
  000c4	f3 0f 58 da	 addss	 xmm3, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 86   : 		return D3DXVec3LengthSq(&(x-p1));

  000c8	f3 0f 11 5d 0c	 movss	 DWORD PTR tv1122[ebp], xmm3
  000cd	d9 45 0c	 fld	 DWORD PTR tv1122[ebp]

; 96   : 	}
; 97   : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
$LN2@square_dis:

; 87   : 	}
; 88   : 	else if (d>=l)

  000d4	0f 2f 4d fc	 comiss	 xmm1, DWORD PTR _l$1$[ebp]
  000d8	72 33		 jb	 SHORT $LN4@square_dis
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000da	f3 0f 5c 61 04	 subss	 xmm4, DWORD PTR [ecx+4]
  000df	f3 0f 5c 39	 subss	 xmm7, DWORD PTR [ecx]
  000e3	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000e8	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR tv1064[ebp]

; 182  :     z = fz;

  000ed	f3 0f 59 e4	 mulss	 xmm4, xmm4

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000f1	f3 0f 59 ff	 mulss	 xmm7, xmm7
  000f5	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000f9	f3 0f 58 e7	 addss	 xmm4, xmm7
  000fd	f3 0f 58 e0	 addss	 xmm4, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 90   : 		return D3DXVec3LengthSq(&(x-p2));

  00101	f3 0f 11 65 0c	 movss	 DWORD PTR tv1106[ebp], xmm4
  00106	d9 45 0c	 fld	 DWORD PTR tv1106[ebp]

; 96   : 	}
; 97   : }

  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
$LN4@square_dis:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0010d	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR tv1051[ebp]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00112	0f 28 c5	 movaps	 xmm0, xmm5
  00115	f3 0f 10 7d 08	 movss	 xmm7, DWORD PTR tv1053[ebp]

; 182  :     z = fz;

  0011a	0f 28 cc	 movaps	 xmm1, xmm4

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0011d	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 182  :     z = fz;

  00121	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00125	f3 0f 59 e6	 mulss	 xmm4, xmm6
  00129	f3 0f 5c c8	 subss	 xmm1, xmm0
  0012d	f3 0f 59 ee	 mulss	 xmm5, xmm6
  00131	0f 28 c7	 movaps	 xmm0, xmm7

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00134	f3 0f 59 fb	 mulss	 xmm7, xmm3
  00138	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0013c	f3 0f 5c ef	 subss	 xmm5, xmm7

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00140	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00144	f3 0f 5c c4	 subss	 xmm0, xmm4

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00148	f3 0f 59 ed	 mulss	 xmm5, xmm5

; 1281 :     *pOut = v;

  0014c	f3 0f 59 c0	 mulss	 xmm0, xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00150	f3 0f 58 c1	 addss	 xmm0, xmm1
  00154	f3 0f 58 c5	 addss	 xmm0, xmm5
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 95   : 		return D3DXVec3LengthSq(D3DXVec3Cross(&c,&(x-p1),&(p2-p1)))/l;

  00158	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _l$1$[ebp]
  0015d	f3 0f 11 45 0c	 movss	 DWORD PTR tv1083[ebp], xmm0
  00162	d9 45 0c	 fld	 DWORD PTR tv1083[ebp]

; 96   : 	}
; 97   : }

  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ENDP ; square_distance_between_linesegment_and_point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h
;	COMDAT ?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
tv555 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vFrom$ = 12						; size = 4
_vTo$ = 16						; size = 4
?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z PROC ; SafeRotationNormalizedArc, COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 290  :     return x == v.x && y == v.y && z == v.z;

  0000a	8b 75 0c	 mov	 esi, DWORD PTR _vFrom$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 48   : {

  0000d	57		 push	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 290  :     return x == v.x && y == v.y && z == v.z;

  0000e	8b 7d 10	 mov	 edi, DWORD PTR _vTo$[ebp]
  00011	f3 0f 10 1e	 movss	 xmm3, DWORD PTR [esi]
  00015	f3 0f 10 17	 movss	 xmm2, DWORD PTR [edi]
  00019	0f 2e da	 ucomiss xmm3, xmm2
  0001c	f3 0f 11 54 24
	0c		 movss	 DWORD PTR tv555[esp+16], xmm2
  00022	9f		 lahf
  00023	f6 c4 44	 test	 ah, 68			; 00000044H
  00026	7a 42		 jp	 SHORT $LN2@SafeRotati
  00028	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0002d	0f 2e 47 04	 ucomiss xmm0, DWORD PTR [edi+4]
  00031	9f		 lahf
  00032	f6 c4 44	 test	 ah, 68			; 00000044H
  00035	7a 33		 jp	 SHORT $LN2@SafeRotati
  00037	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0003c	0f 2e 47 08	 ucomiss xmm0, DWORD PTR [edi+8]
  00040	9f		 lahf
  00041	f6 c4 44	 test	 ah, 68			; 00000044H
  00044	7a 24		 jp	 SHORT $LN2@SafeRotati

; 667  :     x = fx;

  00046	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 668  :     y = fy;

  0004f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 669  :     z = fz;

  00056	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 670  :     w = fw;

  0005d	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 59   : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN2@SafeRotati:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  0006a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00072	0f 28 c2	 movaps	 xmm0, xmm2
  00075	f3 0f 10 77 04	 movss	 xmm6, DWORD PTR [edi+4]
  0007a	0f 57 c1	 xorps	 xmm0, xmm1
  0007d	f3 0f 10 7f 08	 movss	 xmm7, DWORD PTR [edi+8]
  00082	0f 28 e6	 movaps	 xmm4, xmm6

; 290  :     return x == v.x && y == v.y && z == v.z;

  00085	0f 2e d8	 ucomiss xmm3, xmm0

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00088	0f 28 ef	 movaps	 xmm5, xmm7
  0008b	0f 57 e1	 xorps	 xmm4, xmm1
  0008e	0f 57 e9	 xorps	 xmm5, xmm1

; 290  :     return x == v.x && y == v.y && z == v.z;

  00091	9f		 lahf
  00092	f6 c4 44	 test	 ah, 68			; 00000044H
  00095	7a 40		 jp	 SHORT $LN3@SafeRotati
  00097	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0009c	0f 2e c4	 ucomiss xmm0, xmm4
  0009f	9f		 lahf
  000a0	f6 c4 44	 test	 ah, 68			; 00000044H
  000a3	7a 32		 jp	 SHORT $LN3@SafeRotati
  000a5	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000aa	0f 2e c5	 ucomiss xmm0, xmm5
  000ad	9f		 lahf
  000ae	f6 c4 44	 test	 ah, 68			; 00000044H
  000b1	7a 24		 jp	 SHORT $LN3@SafeRotati

; 667  :     x = fx;

  000b3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 668  :     y = fy;

  000bc	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 669  :     z = fz;

  000c3	c7 40 08 00 00
	80 3f		 mov	 DWORD PTR [eax+8], 1065353216 ; 3f800000H

; 670  :     w = fw;

  000ca	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 59   : }

  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN3@SafeRotati:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000d7	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  000dc	0f 28 c2	 movaps	 xmm0, xmm2
  000df	f3 0f 59 ce	 mulss	 xmm1, xmm6
  000e3	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000e7	f3 0f 58 c8	 addss	 xmm1, xmm0
  000eb	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000f0	f3 0f 59 c7	 mulss	 xmm0, xmm7
  000f4	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 56   : 	float s = sqrtf((1+d)*2);

  000f8	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00100	f3 0f 58 c9	 addss	 xmm1, xmm1
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 758  :             return (float)sqrt(_X);

  00104	0f 5a c1	 cvtps2pd xmm0, xmm1
  00107	0f 57 c9	 xorps	 xmm1, xmm1
  0010a	66 0f 2e c8	 ucomisd xmm1, xmm0
  0010e	77 06		 ja	 SHORT $LN31@SafeRotati
  00110	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00114	eb 05		 jmp	 SHORT $LN32@SafeRotati
$LN31@SafeRotati:
  00116	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN32@SafeRotati:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0011b	f3 0f 10 66 04	 movss	 xmm4, DWORD PTR [esi+4]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 758  :             return (float)sqrt(_X);

  00120	0f 57 d2	 xorps	 xmm2, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00123	f3 0f 10 5e 08	 movss	 xmm3, DWORD PTR [esi+8]
  00128	0f 28 cc	 movaps	 xmm1, xmm4
  0012b	f3 0f 10 77 08	 movss	 xmm6, DWORD PTR [edi+8]
  00130	f3 0f 10 6f 04	 movss	 xmm5, DWORD PTR [edi+4]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00135	f3 0f 59 64 24
	0c		 mulss	 xmm4, DWORD PTR tv555[esp+16]

; 667  :     x = fx;

  0013b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h

; 758  :             return (float)sqrt(_X);

  0013e	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 59   : }

  00142	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00143	0f 28 c3	 movaps	 xmm0, xmm3
  00146	f3 0f 59 ce	 mulss	 xmm1, xmm6

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0014a	f3 0f 59 5c 24
	08		 mulss	 xmm3, DWORD PTR tv555[esp+12]
  00150	f3 0f 59 36	 mulss	 xmm6, DWORD PTR [esi]
  00154	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00158	f3 0f 59 2e	 mulss	 xmm5, DWORD PTR [esi]
  0015c	f3 0f 5c de	 subss	 xmm3, xmm6
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 59   : }

  00160	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00161	f3 0f 5c c8	 subss	 xmm1, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00165	f3 0f 5c ec	 subss	 xmm5, xmm4

; 667  :     x = fx;

  00169	f3 0f 5e da	 divss	 xmm3, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 56   : 	float s = sqrtf((1+d)*2);

  0016d	f3 0f 5e ca	 divss	 xmm1, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 668  :     y = fy;

  00171	f3 0f 5e ea	 divss	 xmm5, xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 58   : 	return D3DXQUATERNION(c.x/s,c.y/s,c.z/s,s*0.5f);

  00175	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 667  :     x = fx;

  0017d	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 668  :     y = fy;

  00181	f3 0f 11 58 04	 movss	 DWORD PTR [eax+4], xmm3

; 669  :     z = fz;

  00186	f3 0f 11 68 08	 movss	 DWORD PTR [eax+8], xmm5

; 670  :     w = fw;

  0018b	f3 0f 11 50 0c	 movss	 DWORD PTR [eax+12], xmm2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\GrpMath.h

; 59   : }

  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c3		 ret	 0
?SafeRotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ENDP ; SafeRotationNormalizedArc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 416  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
