; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30151.0 

	TITLE	C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\Distribute\FlyingData.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCFlyingData@@@@6B@		; CDynamicPool<CFlyingData>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCFlyingData@@@@UAEPAXI@Z	; CDynamicPool<CFlyingData>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCFlyingData@@@@6B@		; CDynamicPool<CFlyingData>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCFlyingData@@@@@8	; CDynamicPool<CFlyingData> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCFlyingData@@@@8		; CDynamicPool<CFlyingData>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCFlyingData@@@@8		; CDynamicPool<CFlyingData>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCFlyingData@@@@8	; CDynamicPool<CFlyingData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPool@VCFlyingData@@@@UAEPAXI@Z:PROC ; CDynamicPool<CFlyingData>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCFlyingData@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCFlyingData@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCFlyingData@@@@@8 ; CDynamicPool<CFlyingData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCFlyingData@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCFlyingData@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCFlyingData@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCFlyingData@@@@8 ; CDynamicPool<CFlyingData>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCFlyingData@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCFlyingData@@@@8 DD 00H		; CDynamicPool<CFlyingData>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCFlyingData@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCFlyingData@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCFlyingData@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CFlyingData> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCFlyingData@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCFlyingData@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCFlyingData@@@@6B@ DD 00H		; CDynamicPool<CFlyingData>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCFlyingData@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCFlyingData@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCFlyingData@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCFlyingData@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCFlyingData@@@@6B@ ; CDynamicPool<CFlyingData>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCFlyingData@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??1CGotoChild@CTextFileLoader@@QAE@XZ		; CTextFileLoader::CGotoChild::~CGotoChild
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1TFlyingAttachData@CFlyingData@@QAE@XZ	; CFlyingData::TFlyingAttachData::~TFlyingAttachData
PUBLIC	??0CFlyingData@@QAE@XZ				; CFlyingData::CFlyingData
PUBLIC	??1CFlyingData@@UAE@XZ				; CFlyingData::~CFlyingData
PUBLIC	?Destroy@CFlyingData@@QAEXXZ			; CFlyingData::Destroy
PUBLIC	?LoadScriptFile@CFlyingData@@QAE_NPBD@Z		; CFlyingData::LoadScriptFile
PUBLIC	?SaveScriptFile@CFlyingData@@QAE_NPBD@Z		; CFlyingData::SaveScriptFile
PUBLIC	?SetBombEffect@CFlyingData@@QAEXPBD@Z		; CFlyingData::SetBombEffect
PUBLIC	?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z ; CFlyingData::AttachFlyEffect
PUBLIC	?GetAttachDataReference@CFlyingData@@QAEAAUTFlyingAttachData@1@H@Z ; CFlyingData::GetAttachDataReference
PUBLIC	?DuplicateAttach@CFlyingData@@QAEXH@Z		; CFlyingData::DuplicateAttach
PUBLIC	?RemoveAttach@CFlyingData@@QAEXH@Z		; CFlyingData::RemoveAttach
PUBLIC	?RemoveAllAttach@CFlyingData@@QAEXXZ		; CFlyingData::RemoveAllAttach
PUBLIC	?__Initialize@CFlyingData@@IAEXXZ		; CFlyingData::__Initialize
PUBLIC	?deallocate@?$allocator@UTFlyingAttachData@CFlyingData@@@std@@QAEXQAUTFlyingAttachData@CFlyingData@@I@Z ; std::allocator<CFlyingData::TFlyingAttachData>::deallocate
PUBLIC	??1?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAE@XZ ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::~vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >
PUBLIC	?_Destroy@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@AAEXPAUTFlyingAttachData@CFlyingData@@0@Z ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Destroy
PUBLIC	?_Xlength@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@CAXXZ ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Xlength
PUBLIC	??_GCFlyingData@@UAEPAXI@Z			; CFlyingData::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCFlyingData@@@@UAE@XZ	; CDynamicPool<CFlyingData>::~CDynamicPool<CFlyingData>
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$construct@UTFlyingAttachData@CFlyingData@@ABU12@@?$_Default_allocator_traits@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@SAXAAV?$allocator@UTFlyingAttachData@CFlyingData@@@1@QAUTFlyingAttachData@CFlyingData@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CFlyingData::TFlyingAttachData> >::construct<CFlyingData::TFlyingAttachData,CFlyingData::TFlyingAttachData const &>
PUBLIC	??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Emplace_reallocate<CFlyingData::TFlyingAttachData const &>
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
PUBLIC	??$_Destroy_range@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAXPAUTFlyingAttachData@CFlyingData@@QAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyingData::TFlyingAttachData> >
PUBLIC	??$_Uninitialized_move@PAUTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAPAUTFlyingAttachData@CFlyingData@@QAU12@0PAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ; std::_Uninitialized_move<CFlyingData::TFlyingAttachData *,std::allocator<CFlyingData::TFlyingAttachData> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
PUBLIC	?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A ; CFlyingData::ms_kPool
PUBLIC	??_7CFlyingData@@6B@				; CFlyingData::`vftable'
PUBLIC	??_C@_0O@NBBBNDDO@spreadingflag@		; `string'
PUBLIC	??_C@_0BF@IJDOJCHL@maintainparallelflag@	; `string'
PUBLIC	??_C@_0BA@HEDAMPDI@initialvelocity@		; `string'
PUBLIC	??_C@_09KDIMMAIL@coneangle@			; `string'
PUBLIC	??_C@_09LMFNGIPD@rollangle@			; `string'
PUBLIC	??_C@_0BA@LAOKBKDJ@angularvelocity@		; `string'
PUBLIC	??_C@_07GFBFDLBM@gravity@			; `string'
PUBLIC	??_C@_0BA@KECLBPOM@hitonbackground@		; `string'
PUBLIC	??_C@_0BE@CFEKODPK@hitonanothermonster@		; `string'
PUBLIC	??_C@_0M@CFHBGHLK@piercecount@			; `string'
PUBLIC	??_C@_09HBCJNFFH@bombrange@			; `string'
PUBLIC	??_C@_0L@JPKFDMHA@bombeffect@			; `string'
PUBLIC	??_C@_0L@PGFICFIL@homingflag@			; `string'
PUBLIC	??_C@_0BA@BAKAIINA@homingstarttime@		; `string'
PUBLIC	??_C@_0P@MGJJCPHI@homingmaxangle@		; `string'
PUBLIC	??_C@_05CCGOGOBM@range@				; `string'
PUBLIC	??_C@_0N@OKFAMOHD@acceleration@			; `string'
PUBLIC	??_C@_0L@NFEBBADL@attachdata@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type@				; `string'
PUBLIC	??_C@_07LKHMKNJJ@flytype@			; `string'
PUBLIC	??_C@_0L@BMGMFMHI@attachfile@			; `string'
PUBLIC	??_C@_08MNMLIJJL@tailflag@			; `string'
PUBLIC	??_C@_09JBANPIDH@tailcolor@			; `string'
PUBLIC	??_C@_0L@PJCCBNOK@taillength@			; `string'
PUBLIC	??_C@_08HAFAEPEI@tailsize@			; `string'
PUBLIC	??_C@_0O@DNCKGFAO@tailshaperect@		; `string'
PUBLIC	??_C@_04FBAPEKPH@roll@				; `string'
PUBLIC	??_C@_08LHFODBFO@distance@			; `string'
PUBLIC	??_C@_06FBOEEHNL@period@			; `string'
PUBLIC	??_C@_09EHCGJNBI@amplitude@			; `string'
PUBLIC	??_C@_0CM@NJMDEMJE@CFlyingData?3?3LoadScriptFile?5Wro@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0BM@EKJFFBKN@SpreadingFlag?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BM@NGIIEBBO@MaintainParallelFlag?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BM@HFDPOBJA@InitialVelocity?5?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BM@GGIANCOJ@ConeAngle?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BM@OAKALGPC@RollAngle?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0CC@LMNGANIH@AngularVelocity?5?5?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CF@ ; `string'
PUBLIC	??_C@_0BM@GMCHDOFC@Gravity?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BM@MIBEIPGM@HitOnBackground?5?5?5?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BM@DIMAIAMO@HitOnAnotherMonster?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BM@KJEBPHJO@PierceCount?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BM@BLFFPBNI@CollisionSphereRadius?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BM@PKMAPKGM@BombRange?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BO@BNDAHANN@BombEffect?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BM@BPPBPLIE@HomingFlag?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BM@DFAFEFEK@HomingStartTime?5?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BM@DJOJIKLN@HomingMaxAngle?5?5?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BM@JPLBDGMP@Range?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0CC@KJGNOCOO@Acceleration?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CF@ ; `string'
PUBLIC	??_C@_0BC@HICIMFMI@Group?5AttachData?6@		; `string'
PUBLIC	??_C@_02KCPFEJNG@?$HL?6@			; `string'
PUBLIC	??_C@_0BC@FDNPIKOA@Type?5?5?5?5?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BC@BLGHHPCB@FlyType?5?5?5?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BE@KGOGOAGA@AttachFile?5?5?5?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BC@OICNGABA@TailFlag?5?5?5?5?5?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BD@GDEIOKGL@TailColor?5?5?5?5?5?$CFud?6@	; `string'
PUBLIC	??_C@_0BC@BJCKHMFB@TailLength?5?5?5?5?$CFf?6@	; `string'
PUBLIC	??_C@_0BC@DBHBKFFP@TailSize?5?5?5?5?5?5?$CFf?6@	; `string'
PUBLIC	??_C@_0BC@GIAPEHPE@TailShapeRect?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BC@NJDFDGEH@Roll?5?5?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BC@MGMHDAIP@Distance?5?5?5?5?5?5?$CFf?6@	; `string'
PUBLIC	??_C@_0BC@HBPGEMBJ@Period?5?5?5?5?5?5?5?5?$CFf?6@ ; `string'
PUBLIC	??_C@_0BC@BECPBEGP@Amplitude?5?5?5?5?5?$CFf?6@	; `string'
PUBLIC	??_C@_02KGHIDFGE@?$HN?6@			; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CFlyingData@@6B@				; CFlyingData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlyingData@@@8				; CFlyingData `RTTI Type Descriptor'
PUBLIC	??_R3CFlyingData@@8				; CFlyingData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlyingData@@8				; CFlyingData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlyingData@@8			; CFlyingData::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetOnlyPathName@@YAPBDPBD@Z:PROC		; GetOnlyPathName
EXTRN	?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; GetLocalFileName
EXTRN	?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; StringPath
EXTRN	?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; StringPath
EXTRN	?IsGlobalFileName@@YA_NPBD@Z:PROC		; IsGlobalFileName
EXTRN	?GetCaseCRC32@@YAKPBDI0@Z:PROC			; GetCaseCRC32
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ:PROC		; PrintfTabs
EXTRN	??0CTextFileLoader@@QAE@XZ:PROC			; CTextFileLoader::CTextFileLoader
EXTRN	??1CTextFileLoader@@UAE@XZ:PROC			; CTextFileLoader::~CTextFileLoader
EXTRN	?Load@CTextFileLoader@@QAE_NPBD@Z:PROC		; CTextFileLoader::Load
EXTRN	?GetFileName@CTextFileLoader@@QAEPBDXZ:PROC	; CTextFileLoader::GetFileName
EXTRN	?SetTop@CTextFileLoader@@QAEXXZ:PROC		; CTextFileLoader::SetTop
EXTRN	?GetChildNodeCount@CTextFileLoader@@QAEKXZ:PROC	; CTextFileLoader::GetChildNodeCount
EXTRN	?SetChildNode@CTextFileLoader@@QAEHK@Z:PROC	; CTextFileLoader::SetChildNode
EXTRN	?SetParentNode@CTextFileLoader@@QAEHXZ:PROC	; CTextFileLoader::SetParentNode
EXTRN	?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CTextFileLoader::GetCurrentNodeName
EXTRN	?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z:PROC ; CTextFileLoader::GetTokenInteger
EXTRN	?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z:PROC ; CTextFileLoader::GetTokenDoubleWord
EXTRN	?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z:PROC ; CTextFileLoader::GetTokenFloat
EXTRN	?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z:PROC ; CTextFileLoader::GetTokenVector3
EXTRN	?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z:PROC ; CTextFileLoader::GetTokenString
EXTRN	?RegisterEffect@CEffectManager@@QAEHPBD_N10@Z:PROC ; CEffectManager::RegisterEffect
EXTRN	?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N0@Z:PROC ; CEffectManager::RegisterEffect2
EXTRN	??_ECFlyingData@@UAEPAXI@Z:PROC			; CFlyingData::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A DD 01H DUP (?) ; CSingleton<CEffectManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CFlyingData@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CFlyingData@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CFlyingData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlyingData@@8 DD FLAT:??_R0?AVCFlyingData@@@8 ; CFlyingData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlyingData@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlyingData@@8
rdata$r	SEGMENT
??_R2CFlyingData@@8 DD FLAT:??_R1A@?0A@EA@CFlyingData@@8 ; CFlyingData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFlyingData@@8
rdata$r	SEGMENT
??_R3CFlyingData@@8 DD 00H				; CFlyingData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFlyingData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlyingData@@@8
data$rs	SEGMENT
??_R0?AVCFlyingData@@@8 DD FLAT:??_7type_info@@6B@	; CFlyingData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlyingData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFlyingData@@6B@
rdata$r	SEGMENT
??_R4CFlyingData@@6B@ DD 00H				; CFlyingData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlyingData@@@8
	DD	FLAT:??_R3CFlyingData@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KGHIDFGE@?$HN?6@
CONST	SEGMENT
??_C@_02KGHIDFGE@?$HN?6@ DB '}', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BECPBEGP@Amplitude?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BC@BECPBEGP@Amplitude?5?5?5?5?5?$CFf?6@ DB 'Amplitude     %f', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HBPGEMBJ@Period?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BC@HBPGEMBJ@Period?5?5?5?5?5?5?5?5?$CFf?6@ DB 'Period        %f', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MGMHDAIP@Distance?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BC@MGMHDAIP@Distance?5?5?5?5?5?5?$CFf?6@ DB 'Distance      %f', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NJDFDGEH@Roll?5?5?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BC@NJDFDGEH@Roll?5?5?5?5?5?5?5?5?5?5?$CFf?6@ DB 'Roll          %f', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GIAPEHPE@TailShapeRect?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@GIAPEHPE@TailShapeRect?5?$CFd?6@ DB 'TailShapeRect %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DBHBKFFP@TailSize?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BC@DBHBKFFP@TailSize?5?5?5?5?5?5?$CFf?6@ DB 'TailSize      %f', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJCKHMFB@TailLength?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BC@BJCKHMFB@TailLength?5?5?5?5?$CFf?6@ DB 'TailLength    %f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GDEIOKGL@TailColor?5?5?5?5?5?$CFud?6@
CONST	SEGMENT
??_C@_0BD@GDEIOKGL@TailColor?5?5?5?5?5?$CFud?6@ DB 'TailColor     %ud', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OICNGABA@TailFlag?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@OICNGABA@TailFlag?5?5?5?5?5?5?$CFd?6@ DB 'TailFlag      %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KGOGOAGA@AttachFile?5?5?5?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BE@KGOGOAGA@AttachFile?5?5?5?5?$CC?$CFs?$CC?6@ DB 'AttachFile    "'
	DB	'%s"', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BLGHHPCB@FlyType?5?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@BLGHHPCB@FlyType?5?5?5?5?5?5?5?$CFd?6@ DB 'FlyType       %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FDNPIKOA@Type?5?5?5?5?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@FDNPIKOA@Type?5?5?5?5?5?5?5?5?5?5?$CFd?6@ DB 'Type          %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCPFEJNG@?$HL?6@
CONST	SEGMENT
??_C@_02KCPFEJNG@?$HL?6@ DB '{', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HICIMFMI@Group?5AttachData?6@
CONST	SEGMENT
??_C@_0BC@HICIMFMI@Group?5AttachData?6@ DB 'Group AttachData', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KJGNOCOO@Acceleration?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CF@
CONST	SEGMENT
??_C@_0CC@KJGNOCOO@Acceleration?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CF@ DB 'A'
	DB	'cceleration            %f %f %f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JPLBDGMP@Range?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BM@JPLBDGMP@Range?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ DB 'R'
	DB	'ange                   %f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DJOJIKLN@HomingMaxAngle?5?5?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BM@DJOJIKLN@HomingMaxAngle?5?5?5?5?5?5?5?5?5?5?$CFf?6@ DB 'HomingM'
	DB	'axAngle          %f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DFAFEFEK@HomingStartTime?5?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BM@DFAFEFEK@HomingStartTime?5?5?5?5?5?5?5?5?5?$CFf?6@ DB 'HomingSt'
	DB	'artTime         %f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BPPBPLIE@HomingFlag?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BM@BPPBPLIE@HomingFlag?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@ DB 'Hom'
	DB	'ingFlag              %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BNDAHANN@BombEffect?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BO@BNDAHANN@BombEffect?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@ DB 'B'
	DB	'ombEffect              "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PKMAPKGM@BombRange?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BM@PKMAPKGM@BombRange?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ DB 'Bo'
	DB	'mbRange               %f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BLFFPBNI@CollisionSphereRadius?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BM@BLFFPBNI@CollisionSphereRadius?5?5?5?$CFf?6@ DB 'CollisionSpher'
	DB	'eRadius   %f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KJEBPHJO@PierceCount?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BM@KJEBPHJO@PierceCount?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@ DB 'Pier'
	DB	'ceCount             %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DIMAIAMO@HitOnAnotherMonster?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BM@DIMAIAMO@HitOnAnotherMonster?5?5?5?5?5?$CFd?6@ DB 'HitOnAnother'
	DB	'Monster     %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MIBEIPGM@HitOnBackground?5?5?5?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BM@MIBEIPGM@HitOnBackground?5?5?5?5?5?5?5?5?5?$CFd?6@ DB 'HitOnBac'
	DB	'kground         %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GMCHDOFC@Gravity?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BM@GMCHDOFC@Gravity?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ DB 'G'
	DB	'ravity                 %f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LMNGANIH@AngularVelocity?5?5?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CF@
CONST	SEGMENT
??_C@_0CC@LMNGANIH@AngularVelocity?5?5?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CF@ DB 'A'
	DB	'ngularVelocity         %f %f %f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OAKALGPC@RollAngle?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BM@OAKALGPC@RollAngle?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ DB 'Ro'
	DB	'llAngle               %f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GGIANCOJ@ConeAngle?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BM@GGIANCOJ@ConeAngle?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@ DB 'Co'
	DB	'neAngle               %f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HFDPOBJA@InitialVelocity?5?5?5?5?5?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_0BM@HFDPOBJA@InitialVelocity?5?5?5?5?5?5?5?5?5?$CFf?6@ DB 'InitialV'
	DB	'elocity         %f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NGIIEBBO@MaintainParallelFlag?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BM@NGIIEBBO@MaintainParallelFlag?5?5?5?5?$CFd?6@ DB 'MaintainParal'
	DB	'lelFlag    %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EKJFFBKN@SpreadingFlag?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BM@EKJFFBKN@SpreadingFlag?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@ DB 'Spread'
	DB	'ingFlag           %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NJMDEMJE@CFlyingData?3?3LoadScriptFile?5Wro@
CONST	SEGMENT
??_C@_0CM@NJMDEMJE@CFlyingData?3?3LoadScriptFile?5Wro@ DB 'CFlyingData::L'
	DB	'oadScriptFile Wrong Data : %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EHCGJNBI@amplitude@
CONST	SEGMENT
??_C@_09EHCGJNBI@amplitude@ DB 'amplitude', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBOEEHNL@period@
CONST	SEGMENT
??_C@_06FBOEEHNL@period@ DB 'period', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHFODBFO@distance@
CONST	SEGMENT
??_C@_08LHFODBFO@distance@ DB 'distance', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FBAPEKPH@roll@
CONST	SEGMENT
??_C@_04FBAPEKPH@roll@ DB 'roll', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DNCKGFAO@tailshaperect@
CONST	SEGMENT
??_C@_0O@DNCKGFAO@tailshaperect@ DB 'tailshaperect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HAFAEPEI@tailsize@
CONST	SEGMENT
??_C@_08HAFAEPEI@tailsize@ DB 'tailsize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PJCCBNOK@taillength@
CONST	SEGMENT
??_C@_0L@PJCCBNOK@taillength@ DB 'taillength', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JBANPIDH@tailcolor@
CONST	SEGMENT
??_C@_09JBANPIDH@tailcolor@ DB 'tailcolor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MNMLIJJL@tailflag@
CONST	SEGMENT
??_C@_08MNMLIJJL@tailflag@ DB 'tailflag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMGMFMHI@attachfile@
CONST	SEGMENT
??_C@_0L@BMGMFMHI@attachfile@ DB 'attachfile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LKHMKNJJ@flytype@
CONST	SEGMENT
??_C@_07LKHMKNJJ@flytype@ DB 'flytype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type@ DB 'type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NFEBBADL@attachdata@
CONST	SEGMENT
??_C@_0L@NFEBBADL@attachdata@ DB 'attachdata', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OKFAMOHD@acceleration@
CONST	SEGMENT
??_C@_0N@OKFAMOHD@acceleration@ DB 'acceleration', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCGOGOBM@range@
CONST	SEGMENT
??_C@_05CCGOGOBM@range@ DB 'range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MGJJCPHI@homingmaxangle@
CONST	SEGMENT
??_C@_0P@MGJJCPHI@homingmaxangle@ DB 'homingmaxangle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BAKAIINA@homingstarttime@
CONST	SEGMENT
??_C@_0BA@BAKAIINA@homingstarttime@ DB 'homingstarttime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PGFICFIL@homingflag@
CONST	SEGMENT
??_C@_0L@PGFICFIL@homingflag@ DB 'homingflag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JPKFDMHA@bombeffect@
CONST	SEGMENT
??_C@_0L@JPKFDMHA@bombeffect@ DB 'bombeffect', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HBCJNFFH@bombrange@
CONST	SEGMENT
??_C@_09HBCJNFFH@bombrange@ DB 'bombrange', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFHBGHLK@piercecount@
CONST	SEGMENT
??_C@_0M@CFHBGHLK@piercecount@ DB 'piercecount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CFEKODPK@hitonanothermonster@
CONST	SEGMENT
??_C@_0BE@CFEKODPK@hitonanothermonster@ DB 'hitonanothermonster', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KECLBPOM@hitonbackground@
CONST	SEGMENT
??_C@_0BA@KECLBPOM@hitonbackground@ DB 'hitonbackground', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GFBFDLBM@gravity@
CONST	SEGMENT
??_C@_07GFBFDLBM@gravity@ DB 'gravity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LAOKBKDJ@angularvelocity@
CONST	SEGMENT
??_C@_0BA@LAOKBKDJ@angularvelocity@ DB 'angularvelocity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LMFNGIPD@rollangle@
CONST	SEGMENT
??_C@_09LMFNGIPD@rollangle@ DB 'rollangle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KDIMMAIL@coneangle@
CONST	SEGMENT
??_C@_09KDIMMAIL@coneangle@ DB 'coneangle', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HEDAMPDI@initialvelocity@
CONST	SEGMENT
??_C@_0BA@HEDAMPDI@initialvelocity@ DB 'initialvelocity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IJDOJCHL@maintainparallelflag@
CONST	SEGMENT
??_C@_0BF@IJDOJCHL@maintainparallelflag@ DB 'maintainparallelflag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NBBBNDDO@spreadingflag@
CONST	SEGMENT
??_C@_0O@NBBBNDDO@spreadingflag@ DB 'spreadingflag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CFlyingData@@6B@
CONST	SEGMENT
??_7CFlyingData@@6B@ DD FLAT:??_R4CFlyingData@@6B@	; CFlyingData::`vftable'
	DD	FLAT:??_ECFlyingData@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A DD FLAT:??_7?$CDynamicPool@VCFlyingData@@@@6B@ ; CFlyingData::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z$0
__ehfuncinfo$?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SaveScriptFile@CFlyingData@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveScriptFile@CFlyingData@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SaveScriptFile@CFlyingData@@QAE_NPBD@Z$1
__ehfuncinfo$?SaveScriptFile@CFlyingData@@QAE_NPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SaveScriptFile@CFlyingData@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z DD 019930522H
	DD	023H
	DD	FLAT:__unwindtable$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$9
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$10
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$11
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$12
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$14
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$15
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$16
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$17
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$18
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$19
	DD	012H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$20
	DD	013H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$21
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$22
	DD	00H
	DD	FLAT:___std_terminate
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$23
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$24
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$26
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$27
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$28
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$29
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$30
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$31
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$32
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$33
	DD	014H
	DD	FLAT:__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$34
	DD	00H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CFlyingData@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFlyingData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFlyingData@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFlyingData@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CFlyingData@@QAE@XZ$2
__ehfuncinfo$??0CFlyingData@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CFlyingData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGotoChild@CTextFileLoader@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAPAUTFlyingAttachData@CFlyingData@@QAU12@0PAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAPAUTFlyingAttachData@CFlyingData@@QAU12@0PAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z PROC ; std::_Uninitialized_move<CFlyingData::TFlyingAttachData *,std::allocator<CFlyingData::TFlyingAttachData> >, COMDAT

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b c3		 cmp	 eax, ebx
  00010	0f 84 9d 00 00
	00		 je	 $LN3@Uninitiali

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00016	57		 push	 edi
  00017	8b fe		 mov	 edi, esi
  00019	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  0001c	8d 48 1c	 lea	 ecx, DWORD PTR [eax+28]
  0001f	2b f8		 sub	 edi, eax
$LL4@Uninitiali:
  00021	8b 41 e4	 mov	 eax, DWORD PTR [ecx-28]

; 1621 :         ++_Last;

  00024	8d 49 44	 lea	 ecx, DWORD PTR [ecx+68]
  00027	89 06		 mov	 DWORD PTR [esi], eax
  00029	8d 52 44	 lea	 edx, DWORD PTR [edx+68]
  0002c	8b 41 a4	 mov	 eax, DWORD PTR [ecx-92]
  0002f	83 c6 44	 add	 esi, 68			; 00000044H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00032	c7 42 bc 00 00
	00 00		 mov	 DWORD PTR [edx-68], 0

; 2322 :     size_type _Mysize = 0; // current length of string

  00039	c7 42 cc 00 00
	00 00		 mov	 DWORD PTR [edx-52], 0

; 2323 :     size_type _Myres  = 0; // current storage reserved for string

  00040	c7 44 0f bc 00
	00 00 00	 mov	 DWORD PTR [edi+ecx-68], 0
  00048	89 42 b8	 mov	 DWORD PTR [edx-72], eax

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0004b	0f 10 41 a8	 movups	 xmm0, XMMWORD PTR [ecx-88]
  0004f	0f 11 42 bc	 movups	 XMMWORD PTR [edx-68], xmm0
  00053	f3 0f 7e 41 b8	 movq	 xmm0, QWORD PTR [ecx-72]
  00058	66 0f d6 42 cc	 movq	 QWORD PTR [edx-52], xmm0

; 4562 :         _My_data._Mysize = 0;

  0005d	c7 41 b8 00 00
	00 00		 mov	 DWORD PTR [ecx-72], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00064	c7 41 bc 0f 00
	00 00		 mov	 DWORD PTR [ecx-68], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006b	c6 41 a8 00	 mov	 BYTE PTR [ecx-88], 0
  0006f	0f b6 41 c0	 movzx	 eax, BYTE PTR [ecx-64]
  00073	88 42 d4	 mov	 BYTE PTR [edx-44], al
  00076	8b 41 c4	 mov	 eax, DWORD PTR [ecx-60]
  00079	89 42 d8	 mov	 DWORD PTR [edx-40], eax
  0007c	8b 41 c8	 mov	 eax, DWORD PTR [ecx-56]
  0007f	89 42 dc	 mov	 DWORD PTR [edx-36], eax
  00082	8b 41 cc	 mov	 eax, DWORD PTR [ecx-52]
  00085	89 42 e0	 mov	 DWORD PTR [edx-32], eax
  00088	0f b6 41 d0	 movzx	 eax, BYTE PTR [ecx-48]
  0008c	88 42 e4	 mov	 BYTE PTR [edx-28], al
  0008f	8b 41 d4	 mov	 eax, DWORD PTR [ecx-44]
  00092	89 42 e8	 mov	 DWORD PTR [edx-24], eax
  00095	8b 41 d8	 mov	 eax, DWORD PTR [ecx-40]
  00098	89 42 ec	 mov	 DWORD PTR [edx-20], eax
  0009b	8b 41 dc	 mov	 eax, DWORD PTR [ecx-36]
  0009e	89 42 f0	 mov	 DWORD PTR [edx-16], eax
  000a1	8b 41 e0	 mov	 eax, DWORD PTR [ecx-32]
  000a4	89 42 f4	 mov	 DWORD PTR [edx-12], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  000a7	8d 41 e4	 lea	 eax, DWORD PTR [ecx-28]
  000aa	3b c3		 cmp	 eax, ebx
  000ac	0f 85 6f ff ff
	ff		 jne	 $LL4@Uninitiali
  000b2	5f		 pop	 edi
$LN3@Uninitiali:

; 1615 :         _Destroy_range(_First, _Last, _Al);

  000b3	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  000b6	56		 push	 esi
  000b7	56		 push	 esi
  000b8	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAXPAUTFlyingAttachData@CFlyingData@@QAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyingData::TFlyingAttachData> >
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();

  000c0	8b c6		 mov	 eax, esi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx

; 1722 : }

  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
??$_Uninitialized_move@PAUTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAPAUTFlyingAttachData@CFlyingData@@QAU12@0PAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ENDP ; std::_Uninitialized_move<CFlyingData::TFlyingAttachData *,std::allocator<CFlyingData::TFlyingAttachData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 272  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAXPAUTFlyingAttachData@CFlyingData@@QAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAXPAUTFlyingAttachData@CFlyingData@@QAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CFlyingData::TFlyingAttachData> >, COMDAT

; 900  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 904  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 4d		 je	 SHORT $LN49@Destroy_ra
  0000f	83 c6 1c	 add	 esi, 28			; 0000001cH
$LL4@Destroy_ra:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00017	72 28		 jb	 SHORT $LN26@Destroy_ra
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0001c	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00023	72 12		 jb	 SHORT $LN36@Destroy_ra

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00025	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00028	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00030	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00033	77 2b		 ja	 SHORT $LN33@Destroy_ra

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00035	8b c2		 mov	 eax, edx
$LN36@Destroy_ra:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00037	51		 push	 ecx
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN26@Destroy_ra:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00041	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00048	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004e	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 904  :         for (; _First != _Last; ++_First) {

  00052	83 c6 44	 add	 esi, 68			; 00000044H
  00055	8d 46 e4	 lea	 eax, DWORD PTR [esi-28]
  00058	3b c7		 cmp	 eax, edi
  0005a	75 b6		 jne	 SHORT $LL4@Destroy_ra
$LN49@Destroy_ra:
  0005c	5f		 pop	 edi

; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

  0005d	5e		 pop	 esi
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN33@Destroy_ra:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN50@Destroy_ra:
  00065	cc		 int	 3
??$_Destroy_range@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAXPAUTFlyingAttachData@CFlyingData@@QAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CFlyingData::TFlyingAttachData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete, COMDAT

; 224  : 			::operator delete(pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 132  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00011	3b f3		 cmp	 esi, ebx
  00013	74 14		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 224  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\algorithm

; 232  :     for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL20@CDynamicPo
  00026	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
$LN19@CDynamicPo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 162  : 			m_kVct_pkFree.clear();

  00029	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00032	85 c0		 test	 eax, eax
  00034	74 41		 je	 SHORT $LN27@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00036	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00039	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN43@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 6d		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b c2		 mov	 eax, edx
$LN43@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00069	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1756 :             _Myend   = nullptr;

  00070	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN27@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00077	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 41		 je	 SHORT $LN52@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0007e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00081	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00086	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008c	72 12		 jb	 SHORT $LN68@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00091	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00094	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	83 c0 fc	 add	 eax, -4			; fffffffcH
  00099	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009c	77 25		 ja	 SHORT $LN65@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009e	8b c2		 mov	 eax, edx
$LN68@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  000a7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ae	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  000b1	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1756 :             _Myend   = nullptr;

  000b8	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000bf	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 142  : 		}

  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
$LN65@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@CDynamicPo:
  000c8	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
__Oldsize$1$ = -36					; size = 4
tv464 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
tv475 = -28						; size = 4
__Constructed_last$ = -28				; size = 4
$T2 = -24						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z PROC ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Emplace_reallocate<CFlyingData::TFlyingAttachData const &>, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d d8	 mov	 DWORD PTR _this$[ebp], ebx

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00032	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00037	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003d	2b d7		 sub	 edx, edi
  0003f	f7 ea		 imul	 edx
  00041	2b cf		 sub	 ecx, edi
  00043	c1 fa 05	 sar	 edx, 5
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  00055	f7 e9		 imul	 ecx
  00057	c1 fa 05	 sar	 edx, 5
  0005a	8b c2		 mov	 eax, edx
  0005c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005f	03 c2		 add	 eax, edx
  00061	89 45 dc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  00064	3d c3 c3 c3 03	 cmp	 eax, 63161283		; 03c3c3c3H
  00069	0f 84 a2 01 00
	00		 je	 $LN68@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  00072	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00075	2b cf		 sub	 ecx, edi
  00077	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0007c	f7 e9		 imul	 ecx

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0007e	b8 c3 c3 c3 03	 mov	 eax, 63161283		; 03c3c3c3H

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00083	c1 fa 05	 sar	 edx, 5
  00086	8b ca		 mov	 ecx, edx
  00088	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008b	03 ca		 add	 ecx, edx

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008d	8b d1		 mov	 edx, ecx
  0008f	d1 ea		 shr	 edx, 1
  00091	2b c2		 sub	 eax, edx
  00093	3b c8		 cmp	 ecx, eax
  00095	76 19		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00097	be cc ff ff ff	 mov	 esi, -52		; ffffffccH
  0009c	c7 45 ec c3 c3
	c3 03		 mov	 DWORD PTR __Newcapacity$[ebp], 63161283 ; 03c3c3c3H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a9	83 c4 04	 add	 esp, 4
  000ac	8b f8		 mov	 edi, eax
  000ae	eb 57		 jmp	 SHORT $LN66@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b0	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000b3	8b ce		 mov	 ecx, esi
  000b5	3b c6		 cmp	 eax, esi
  000b7	0f 43 c8	 cmovae	 ecx, eax
  000ba	89 4d e4	 mov	 DWORD PTR tv475[ebp], ecx
  000bd	81 f9 c3 c3 c3
	03		 cmp	 ecx, 63161283		; 03c3c3c3H
  000c3	0f 87 4d 01 00
	00		 ja	 $LN69@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000c9	8b f1		 mov	 esi, ecx
  000cb	89 4d ec	 mov	 DWORD PTR __Newcapacity$[ebp], ecx
  000ce	c1 e6 04	 shl	 esi, 4
  000d1	03 f1		 add	 esi, ecx
  000d3	c1 e6 02	 shl	 esi, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d6	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  000dc	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000de	56		 push	 esi
  000df	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000e4	83 c4 04	 add	 esp, 4
  000e7	8b f8		 mov	 edi, eax
  000e9	eb 1c		 jmp	 SHORT $LN66@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000eb	85 f6		 test	 esi, esi
  000ed	74 13		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  000ef	56		 push	 esi
  000f0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000f5	8b f8		 mov	 edi, eax

; 79   :         return ::operator new(_Bytes);

  000f7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000fa	8b 45 e4	 mov	 eax, DWORD PTR tv475[ebp]
  000fd	89 45 ec	 mov	 DWORD PTR __Newcapacity$[ebp], eax
  00100	eb 05		 jmp	 SHORT $LN66@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00102	33 ff		 xor	 edi, edi
  00104	89 4d ec	 mov	 DWORD PTR __Newcapacity$[ebp], ecx
$LN66@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 772  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00107	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 773  :         pointer _Constructed_first      = _Constructed_last;
; 774  : 
; 775  :         _TRY_BEGIN
; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0010a	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  0010d	c1 e0 04	 shl	 eax, 4
  00110	03 45 e0	 add	 eax, DWORD PTR __Whereoff$1$[ebp]
  00113	89 7d e8	 mov	 DWORD PTR $T2[ebp], edi
  00116	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0011d	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  00120	51		 push	 ecx
  00121	8d 41 44	 lea	 eax, DWORD PTR [ecx+68]
  00124	89 4d e0	 mov	 DWORD PTR tv464[ebp], ecx
  00127	53		 push	 ebx
  00128	89 45 e4	 mov	 DWORD PTR __Constructed_last$[ebp], eax
  0012b	e8 00 00 00 00	 call	 ??$construct@UTFlyingAttachData@CFlyingData@@ABU12@@?$_Default_allocator_traits@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@SAXAAV?$allocator@UTFlyingAttachData@CFlyingData@@@1@QAUTFlyingAttachData@CFlyingData@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CFlyingData::TFlyingAttachData> >::construct<CFlyingData::TFlyingAttachData,CFlyingData::TFlyingAttachData const &>

; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00130	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00133	83 c4 0c	 add	 esp, 12			; 0000000cH
  00136	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00139	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0013b	3b d0		 cmp	 edx, eax
  0013d	75 04		 jne	 SHORT $LN4@Emplace_re

; 1651 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0013f	8b d7		 mov	 edx, edi

; 780  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 781  :         } else { // provide basic guarantee

  00141	eb 15		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1646 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00143	53		 push	 ebx
  00144	57		 push	 edi
  00145	52		 push	 edx
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAPAUTFlyingAttachData@CFlyingData@@QAU12@0PAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ; std::_Uninitialized_move<CFlyingData::TFlyingAttachData *,std::allocator<CFlyingData::TFlyingAttachData> >
  0014c	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0014f	83 c4 10	 add	 esp, 16			; 00000010H
  00152	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00155	8b 55 e4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
$LN5@Emplace_re:

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00158	53		 push	 ebx
  00159	52		 push	 edx
  0015a	50		 push	 eax
  0015b	51		 push	 ecx
  0015c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAPAUTFlyingAttachData@CFlyingData@@QAU12@0PAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ; std::_Uninitialized_move<CFlyingData::TFlyingAttachData *,std::allocator<CFlyingData::TFlyingAttachData> >

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00161	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00163	83 c4 10	 add	 esp, 16			; 00000010H

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00166	85 c9		 test	 ecx, ecx
  00168	74 53		 je	 SHORT $LN47@Emplace_re

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  0016a	53		 push	 ebx
  0016b	ff 73 04	 push	 DWORD PTR [ebx+4]
  0016e	51		 push	 ecx
  0016f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAXPAUTFlyingAttachData@CFlyingData@@QAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyingData::TFlyingAttachData> >

; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00174	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00177	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0017c	2b 0b		 sub	 ecx, DWORD PTR [ebx]

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00181	f7 e9		 imul	 ecx
  00183	c1 fa 05	 sar	 edx, 5
  00186	8b c2		 mov	 eax, edx
  00188	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018b	03 c2		 add	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018d	8b c8		 mov	 ecx, eax
  0018f	c1 e1 04	 shl	 ecx, 4
  00192	03 c8		 add	 ecx, eax

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00194	8b 03		 mov	 eax, DWORD PTR [ebx]

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00196	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00199	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0019f	72 12		 jb	 SHORT $LN57@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001a1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001a4	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a7	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a9	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ac	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001af	77 6a		 ja	 SHORT $LN54@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001b1	8b c2		 mov	 eax, edx
$LN57@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001b3	51		 push	 ecx
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001ba	83 c4 08	 add	 esp, 8
$LN47@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  001bd	8b 45 dc	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  001c0	40		 inc	 eax
  001c1	89 3b		 mov	 DWORD PTR [ebx], edi
  001c3	8b c8		 mov	 ecx, eax
  001c5	c1 e1 04	 shl	 ecx, 4
  001c8	03 c8		 add	 ecx, eax

; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;

  001ca	8b 45 e0	 mov	 eax, DWORD PTR tv464[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  001cd	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  001d0	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  001d3	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  001d6	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 794  :     }

  001d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e3	59		 pop	 ecx
  001e4	5f		 pop	 edi
  001e5	5e		 pop	 esi
  001e6	5b		 pop	 ebx
  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z$0:

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);

  001ed	8b 45 e4	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001f0	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001f3	50		 push	 eax
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@AAEXPAUTFlyingAttachData@CFlyingData@@0@Z ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Destroy

; 788  :         _Al.deallocate(_Newvec, _Newcapacity);

  001fa	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  001fd	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00200	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  00203	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UTFlyingAttachData@CFlyingData@@@std@@QAEXQAUTFlyingAttachData@CFlyingData@@I@Z ; std::allocator<CFlyingData::TFlyingAttachData>::deallocate

; 789  :         _RERAISE;

  00208	6a 00		 push	 0
  0020a	6a 00		 push	 0
  0020c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN68@Emplace_re:

; 765  :             _Xlength();

  00211	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@CAXXZ ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Xlength
$LN69@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00216	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN54@Emplace_re:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0021b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN65@Emplace_re:
  00220	cc		 int	 3
  00221	cc		 int	 3
  00222	cc		 int	 3
  00223	cc		 int	 3
  00224	cc		 int	 3
  00225	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z ENDP ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Emplace_reallocate<CFlyingData::TFlyingAttachData const &>
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$construct@UTFlyingAttachData@CFlyingData@@ABU12@@?$_Default_allocator_traits@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@SAXAAV?$allocator@UTFlyingAttachData@CFlyingData@@@1@QAUTFlyingAttachData@CFlyingData@@ABU34@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
$T1 = 12						; size = 4
__Ptr$ = 12						; size = 4
__Right_size$1$ = 16					; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UTFlyingAttachData@CFlyingData@@ABU12@@?$_Default_allocator_traits@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@SAXAAV?$allocator@UTFlyingAttachData@CFlyingData@@@1@QAUTFlyingAttachData@CFlyingData@@ABU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<CFlyingData::TFlyingAttachData> >::construct<CFlyingData::TFlyingAttachData,CFlyingData::TFlyingAttachData const &>, COMDAT

; 674  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 10	 mov	 ebx, DWORD PTR _<_Args_0>$[ebp]
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  0000b	57		 push	 edi
  0000c	8b 03		 mov	 eax, DWORD PTR [ebx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2886 :         auto& _Right_data             = _Right._Mypair._Myval2;

  0000e	8d 7b 08	 lea	 edi, DWORD PTR [ebx+8]
  00011	89 06		 mov	 DWORD PTR [esi], eax
  00013	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00016	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00019	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2322 :     size_type _Mysize = 0; // current length of string

  00020	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 2323 :     size_type _Myres  = 0; // current storage reserved for string

  00027	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 2286 :         return _BUF_SIZE <= _Myres;

  0002e	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2887 :         const size_type _Right_size   = _Right_data._Mysize;

  00032	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00035	89 45 10	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2273 :         if (_Large_string_engaged()) {

  00038	72 02		 jb	 SHORT $LN20@construct

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0003a	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN20@construct:

; 2894 :         const bool _Stay_small = _Right_size < _BUF_SIZE;

  0003c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 2895 : #endif // __cpp_lib_constexpr_string
; 2896 : 
; 2897 :         // NOTE: even if _Right is in large mode, we only go into large mode ourselves if the actual size of _Right
; 2898 :         // requires it
; 2899 :         if (_Stay_small) { // stay small, don't allocate

  0003f	73 0e		 jae	 SHORT $LN17@construct

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00041	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2902 :             _My_data._Myres  = _BUF_SIZE - 1;

  00044	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00049	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2903 :             return;

  0004d	eb 4d		 jmp	 SHORT $LN16@construct
$LN17@construct:

; 2904 :         }
; 2905 : 
; 2906 :         auto& _Al                     = _Getal();
; 2907 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0004f	83 c8 0f	 or	 eax, 15			; 0000000fH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00052	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00057	3b c1		 cmp	 eax, ecx
  00059	0f 47 c1	 cmova	 eax, ecx
  0005c	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2908 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0005f	40		 inc	 eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00065	72 0d		 jb	 SHORT $LN31@construct

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006d	83 c4 04	 add	 esp, 4
  00070	8b c8		 mov	 ecx, eax
  00072	eb 13		 jmp	 SHORT $LN30@construct
$LN31@construct:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00074	85 c0		 test	 eax, eax
  00076	74 0d		 je	 SHORT $LN32@construct

; 79   :         return ::operator new(_Bytes);

  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007e	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00081	8b c8		 mov	 ecx, eax
  00083	eb 02		 jmp	 SHORT $LN30@construct
$LN32@construct:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00085	33 c9		 xor	 ecx, ecx
$LN30@construct:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2916 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00087	8b 45 10	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0008a	40		 inc	 eax
  0008b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008e	50		 push	 eax
  0008f	57		 push	 edi
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 _memcpy
  00096	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@construct:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 683  :     }

  0009c	8b 4d 10	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  0009f	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
  000a2	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  000a5	0f b6 43 20	 movzx	 eax, BYTE PTR [ebx+32]
  000a9	88 46 20	 mov	 BYTE PTR [esi+32], al
  000ac	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  000af	89 46 24	 mov	 DWORD PTR [esi+36], eax
  000b2	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  000b5	89 46 28	 mov	 DWORD PTR [esi+40], eax
  000b8	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000bb	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  000be	0f b6 43 30	 movzx	 eax, BYTE PTR [ebx+48]
  000c2	88 46 30	 mov	 BYTE PTR [esi+48], al
  000c5	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  000c8	89 46 34	 mov	 DWORD PTR [esi+52], eax
  000cb	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  000ce	89 46 38	 mov	 DWORD PTR [esi+56], eax
  000d1	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]
  000d4	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  000d7	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  000da	5f		 pop	 edi
  000db	89 46 40	 mov	 DWORD PTR [esi+64], eax
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
??$construct@UTFlyingAttachData@CFlyingData@@ABU12@@?$_Default_allocator_traits@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@SAXAAV?$allocator@UTFlyingAttachData@CFlyingData@@@1@QAUTFlyingAttachData@CFlyingData@@ABU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CFlyingData::TFlyingAttachData> >::construct<CFlyingData::TFlyingAttachData,CFlyingData::TFlyingAttachData const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z
_TEXT	SEGMENT
__Right_size$1$ = -8					; size = 4
__New_size$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4664 :     _In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00008	8b 75 0c	 mov	 esi, DWORD PTR __Left$[ebp]

; 4664 :     _In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  0000b	57		 push	 edi

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0000f	90		 npad	 1
$LL47@operator:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL47@operator
  00017	2b f1		 sub	 esi, ecx

; 4665 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 4666 :     const auto _Left_size  = _Convert_size<_Size_type>(_Traits::length(_Left));
; 4667 :     const auto _Right_size = _Right.size();
; 4668 :     if (_Right.max_size() - _Right_size < _Left_size) {

  00019	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0001e	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00021	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00024	2b c2		 sub	 eax, edx
  00026	89 55 f8	 mov	 DWORD PTR __Right_size$1$[ebp], edx
  00029	3b c6		 cmp	 eax, esi
  0002b	0f 82 bf 00 00
	00		 jb	 $LN50@operator

; 2286 :         return _BUF_SIZE <= _Myres;

  00031	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  00035	72 05		 jb	 SHORT $LN11@operator

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00037	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00039	89 4d 10	 mov	 DWORD PTR __Right$[ebp], ecx
$LN11@operator:

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0003c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2601 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  0003f	03 d6		 add	 edx, esi

; 2602 :         size_type _New_capacity = _BUF_SIZE - 1;

  00041	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00046	89 55 fc	 mov	 DWORD PTR __New_size$1$[ebp], edx

; 2603 :         auto& _My_data          = _Mypair._Myval2;
; 2604 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  00049	8b d8		 mov	 ebx, eax

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0004b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2322 :     size_type _Mysize = 0; // current length of string

  00051	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 2323 :     size_type _Myres  = 0; // current storage reserved for string

  00058	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2604 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  0005f	3b d7		 cmp	 edx, edi

; 2605 :         auto&& _Alproxy         = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2606 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data); // throws
; 2607 : 
; 2608 : #ifdef __cpp_lib_constexpr_string
; 2609 :         const bool _Activate_large_mode = _New_capacity < _New_size || _STD is_constant_evaluated();
; 2610 : #else // ^^^ __cpp_lib_constexpr_string / !__cpp_lib_constexpr_string vvv
; 2611 :         const bool _Activate_large_mode = _New_capacity < _New_size;
; 2612 : #endif // __cpp_lib_constexpr_string
; 2613 : 
; 2614 :         if (_Activate_large_mode) {

  00061	76 5a		 jbe	 SHORT $LN16@operator

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00063	8b fa		 mov	 edi, edx
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 0a		 jbe	 SHORT $LN29@operator

; 4456 :             return _Max;

  00070	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00075	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  00078	eb 15		 jmp	 SHORT $LN46@operator
$LN29@operator:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  0007a	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0007f	3b f9		 cmp	 edi, ecx
  00081	0f 42 f9	 cmovb	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2618 :             const pointer _Fancyptr         = _Getal().allocate(_New_capacity + 1); // throws

  00084	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00087	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008d	72 13		 jb	 SHORT $LN37@operator
$LN46@operator:

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00095	8b 55 fc	 mov	 edx, DWORD PTR __New_size$1$[ebp]
  00098	8b d8		 mov	 ebx, eax
  0009a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009d	83 c4 04	 add	 esp, 4
  000a0	eb 19		 jmp	 SHORT $LN36@operator
$LN37@operator:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000a2	85 c9		 test	 ecx, ecx
  000a4	74 13		 je	 SHORT $LN38@operator

; 79   :         return ::operator new(_Bytes);

  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000ac	8b 55 fc	 mov	 edx, DWORD PTR __New_size$1$[ebp]
  000af	8b d8		 mov	 ebx, eax
  000b1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 79   :         return ::operator new(_Bytes);

  000b4	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b7	eb 02		 jmp	 SHORT $LN36@operator
$LN38@operator:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b9	33 db		 xor	 ebx, ebx
$LN36@operator:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2620 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  000bb	89 18		 mov	 DWORD PTR [eax], ebx
$LN16@operator:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bd	56		 push	 esi
  000be	ff 75 0c	 push	 DWORD PTR __Left$[ebp]

; 2629 :         _My_data._Mysize = _New_size;

  000c1	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c4	53		 push	 ebx

; 2630 :         _My_data._Myres  = _New_capacity;

  000c5	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c8	e8 00 00 00 00	 call	 _memcpy
  000cd	ff 75 f8	 push	 DWORD PTR __Right_size$1$[ebp]

; 2632 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  000d0	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d3	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 _memcpy

; 2633 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000dc	8b 45 fc	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	83 c4 18	 add	 esp, 24			; 00000018H

; 4670 :     }
; 4671 : 
; 4672 :     return {_String_constructor_concat_tag{}, _Right, _Left, _Left_size, _Right.c_str(), _Right_size};

  000e2	5f		 pop	 edi

; 2633 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000e3	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0

; 4670 :     }
; 4671 : 
; 4672 :     return {_String_constructor_concat_tag{}, _Right, _Left, _Left_size, _Right.c_str(), _Right_size};

  000e7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx

; 4673 : }

  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
$LN50@operator:

; 4669 :         _Xlen_string();

  000f0	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN48@operator:
  000f5	cc		 int	 3
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CFlyingData::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A ; CFlyingData::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCFlyingData@@@@UAE@XZ ; CDynamicPool<CFlyingData>::~CDynamicPool<CFlyingData>
??__F?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CFlyingData::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ??__E?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CFlyingData::ms_kPool'', COMDAT

; 6    : CDynamicPool<CFlyingData> CFlyingData::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CFlyingData::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CFlyingData@@2V?$CDynamicPool@VCFlyingData@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CFlyingData::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCFlyingData@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCFlyingData@@@@UAEPAXI@Z PROC	; CDynamicPool<CFlyingData>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCFlyingData@@@@UAE@XZ ; CDynamicPool<CFlyingData>::~CDynamicPool<CFlyingData>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCFlyingData@@@@UAEPAXI@Z ENDP	; CDynamicPool<CFlyingData>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCFlyingData@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCFlyingData@@@@UAE@XZ PROC		; CDynamicPool<CFlyingData>::~CDynamicPool<CFlyingData>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCFlyingData@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1756 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1756 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCFlyingData@@@@UAE@XZ ENDP		; CDynamicPool<CFlyingData>::~CDynamicPool<CFlyingData>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCFlyingData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFlyingData@@UAEPAXI@Z PROC				; CFlyingData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFlyingData@@UAE@XZ	; CFlyingData::~CFlyingData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 90 00 00 00	 push	 144			; 00000090H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCFlyingData@@UAEPAXI@Z ENDP				; CFlyingData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@CAXXZ PROC ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@CAXXZ ENDP ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Destroy@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@AAEXPAUTFlyingAttachData@CFlyingData@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@AAEXPAUTFlyingAttachData@CFlyingData@@0@Z PROC ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Destroy, COMDAT
; _this$ = ecx

; 1665 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1666 :         // destroy [_First, _Last) using allocator
; 1667 :         _Destroy_range(_First, _Last, _Getal());

  00003	51		 push	 ecx
  00004	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00007	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAXPAUTFlyingAttachData@CFlyingData@@QAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyingData::TFlyingAttachData> >
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1668 :     }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Destroy@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@AAEXPAUTFlyingAttachData@CFlyingData@@0@Z ENDP ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??1?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAE@XZ PROC ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::~vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >, COMDAT
; _this$ = ecx

; 698  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 69		 je	 SHORT $LN4@vector

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  00009	57		 push	 edi
  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAXPAUTFlyingAttachData@CFlyingData@@QAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyingData::TFlyingAttachData> >

; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	c1 fa 05	 sar	 edx, 5
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b c8		 mov	 ecx, eax
  00031	c1 e1 04	 shl	 ecx, 4
  00034	03 c8		 add	 ecx, eax
  00036	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00039	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003f	72 12		 jb	 SHORT $LN22@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00041	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00044	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00047	2b fa		 sub	 edi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00049	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  0004c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004f	77 23		 ja	 SHORT $LN19@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00051	8b fa		 mov	 edi, edx
$LN22@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005a	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0005d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1755 :             _Mylast  = nullptr;

  00063	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1756 :             _Myend   = nullptr;

  0006a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00071	5f		 pop	 edi
$LN4@vector:
  00072	5e		 pop	 esi

; 704  :     }

  00073	c3		 ret	 0
$LN19@vector:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00074	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@vector:
  00079	cc		 int	 3
??1?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::~vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@UTFlyingAttachData@CFlyingData@@@std@@QAEXQAUTFlyingAttachData@CFlyingData@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UTFlyingAttachData@CFlyingData@@@std@@QAEXQAUTFlyingAttachData@CFlyingData@@I@Z PROC ; std::allocator<CFlyingData::TFlyingAttachData>::deallocate, COMDAT
; _this$ = ecx

; 795  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 796  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	c1 e1 04	 shl	 ecx, 4
  0000c	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0000f	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 12		 jb	 SHORT $LN15@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	77 10		 ja	 SHORT $LN12@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002a	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8

; 798  :     }

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
$LN12@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003f	cc		 int	 3
?deallocate@?$allocator@UTFlyingAttachData@CFlyingData@@@std@@QAEXQAUTFlyingAttachData@CFlyingData@@I@Z ENDP ; std::allocator<CFlyingData::TFlyingAttachData>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?__Initialize@CFlyingData@@IAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
?__Initialize@CFlyingData@@IAEXXZ PROC			; CFlyingData::__Initialize, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 15   : 	m_v3AngVel = D3DXVECTOR3(0.0f,0.0f,0.0f);

  00010	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp+8]
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	0f 14 c1	 unpcklps xmm0, xmm1
  00019	66 0f d6 41 2c	 movq	 QWORD PTR [ecx+44], xmm0

; 21   : 	m_v3Accel = D3DXVECTOR3(0,0,0.0f);// gravity direction :-z

  0001e	0f 14 c9	 unpcklps xmm1, xmm1
  00021	89 41 34	 mov	 DWORD PTR [ecx+52], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 21   : 	m_v3Accel = D3DXVECTOR3(0,0,0.0f);// gravity direction :-z

  0002b	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  0002e	66 0f d6 49 78	 movq	 QWORD PTR [ecx+120], xmm1

; 22   : 	m_fHomingMaxAngle = 3.0f;
; 23   : 	m_fHomingStartTime = 0.0f;
; 24   : 	m_fGravity = 0;
; 25   : 	m_bSpreading = false;
; 26   : 	m_bMaintainParallel = false;
; 27   : 
; 28   : 	m_bHitOnBackground = false;
; 29   : 	m_bHitOnAnotherMonster = false;
; 30   : 	m_iPierceCount = 0;
; 31   : 	m_fCollisionSphereRadius = 0.0f;
; 32   : 
; 33   : 	m_fBombRange = 10.0f;
; 34   : 	SetBombEffect("");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00038	c6 41 5c 00	 mov	 BYTE PTR [ecx+92], 0
  0003c	c7 41 20 00 00
	48 43		 mov	 DWORD PTR [ecx+32], 1128792064 ; 43480000H
  00043	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  0004a	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00051	c7 41 74 00 00
	fa 43		 mov	 DWORD PTR [ecx+116], 1140457472 ; 43fa0000H
  00058	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax
  0005e	c7 41 60 00 00
	40 40		 mov	 DWORD PTR [ecx+96], 1077936128 ; 40400000H
  00065	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], 0
  0006c	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  00073	66 c7 41 1c 00
	00		 mov	 WORD PTR [ecx+28], 0
  00079	66 c7 41 68 00
	00		 mov	 WORD PTR [ecx+104], 0
  0007f	c7 41 6c 00 00
	00 00		 mov	 DWORD PTR [ecx+108], 0
  00086	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0
  0008d	c7 41 3c 00 00
	20 41		 mov	 DWORD PTR [ecx+60], 1092616192 ; 41200000H
  00094	e8 00 00 00 00	 call	 ?SetBombEffect@CFlyingData@@QAEXPBD@Z ; CFlyingData::SetBombEffect

; 35   : }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?__Initialize@CFlyingData@@IAEXXZ ENDP			; CFlyingData::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?RemoveAllAttach@CFlyingData@@QAEXXZ
_TEXT	SEGMENT
?RemoveAllAttach@CFlyingData@@QAEXXZ PROC		; CFlyingData::RemoveAllAttach, COMDAT
; _this$ = ecx

; 115  : {

  00000	56		 push	 esi

; 116  : 	m_AttachDataVector.clear();

  00001	8d b1 84 00 00
	00		 lea	 esi, DWORD PTR [ecx+132]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  00007	56		 push	 esi
  00008	ff 76 04	 push	 DWORD PTR [esi+4]
  0000b	ff 36		 push	 DWORD PTR [esi]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAXPAUTFlyingAttachData@CFlyingData@@QAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyingData::TFlyingAttachData> >

; 1443 :         _Mylast = _Myfirst;

  00012	8b 06		 mov	 eax, DWORD PTR [esi]

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1443 :         _Mylast = _Myfirst;

  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 117  : }

  0001b	c3		 ret	 0
?RemoveAllAttach@CFlyingData@@QAEXXZ ENDP		; CFlyingData::RemoveAllAttach
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?RemoveAttach@CFlyingData@@QAEXH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?RemoveAttach@CFlyingData@@QAEXH@Z PROC			; CFlyingData::RemoveAttach, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

  00004	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00007	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  0000d	c1 e2 04	 shl	 edx, 4
  00010	03 55 08	 add	 edx, DWORD PTR _iIndex$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 109  : {

  00013	53		 push	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1406 :         _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);

  00014	8b 99 88 00 00
	00		 mov	 ebx, DWORD PTR [ecx+136]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 109  : {

  0001a	56		 push	 esi
  0001b	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 119  :         _Ptr += _Off;

  0001c	8d 3c 90	 lea	 edi, DWORD PTR [eax+edx*4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 109  : {

  0001f	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1406 :         _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);

  00022	8d 77 44	 lea	 esi, DWORD PTR [edi+68]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 4320 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00025	3b f3		 cmp	 esi, ebx
  00027	74 6a		 je	 SHORT $LN72@RemoveAtta
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL20@RemoveAtta:
  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00035	89 07		 mov	 DWORD PTR [edi], eax
  00037	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0003d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00046	0f b6 46 20	 movzx	 eax, BYTE PTR [esi+32]
  0004a	8d 7f 44	 lea	 edi, DWORD PTR [edi+68]
  0004d	88 47 dc	 mov	 BYTE PTR [edi-36], al
  00050	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00053	89 47 e0	 mov	 DWORD PTR [edi-32], eax
  00056	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00059	89 47 e4	 mov	 DWORD PTR [edi-28], eax
  0005c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0005f	89 47 e8	 mov	 DWORD PTR [edi-24], eax
  00062	0f b6 46 30	 movzx	 eax, BYTE PTR [esi+48]
  00066	88 47 ec	 mov	 BYTE PTR [edi-20], al
  00069	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0006c	89 47 f0	 mov	 DWORD PTR [edi-16], eax
  0006f	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00072	89 47 f4	 mov	 DWORD PTR [edi-12], eax
  00075	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00078	89 47 f8	 mov	 DWORD PTR [edi-8], eax
  0007b	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0007e	83 c6 44	 add	 esi, 68			; 00000044H
  00081	89 47 fc	 mov	 DWORD PTR [edi-4], eax
  00084	3b f3		 cmp	 esi, ebx
  00086	75 a8		 jne	 SHORT $LL20@RemoveAtta
  00088	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  0008b	8b 9e 88 00 00
	00		 mov	 ebx, DWORD PTR [esi+136]
  00091	eb 02		 jmp	 SHORT $LN19@RemoveAtta
$LN72@RemoveAtta:
  00093	8b f1		 mov	 esi, ecx
$LN19@RemoveAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00095	8b 4b d8	 mov	 ecx, DWORD PTR [ebx-40]
  00098	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0009b	72 28		 jb	 SHORT $LN44@RemoveAtta
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009d	8b 43 c4	 mov	 eax, DWORD PTR [ebx-60]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000a0	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a7	72 12		 jb	 SHORT $LN54@RemoveAtta

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a9	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ac	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000af	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b7	77 2e		 ja	 SHORT $LN51@RemoveAtta

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000b9	8b c2		 mov	 eax, edx
$LN54@RemoveAtta:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000bb	51		 push	 ecx
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c2	83 c4 08	 add	 esp, 8
$LN44@RemoveAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  000c5	c7 43 d4 00 00
	00 00		 mov	 DWORD PTR [ebx-44], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000cc	c7 43 d8 0f 00
	00 00		 mov	 DWORD PTR [ebx-40], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000d3	c6 43 c4 00	 mov	 BYTE PTR [ebx-60], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1408 :         --_Mylast;

  000d7	83 86 88 00 00
	00 bc		 add	 DWORD PTR [esi+136], -68 ; ffffffbcH
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 112  : }

  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 04 00	 ret	 4
$LN51@RemoveAtta:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN73@RemoveAtta:
  000ec	cc		 int	 3
?RemoveAttach@CFlyingData@@QAEXH@Z ENDP			; CFlyingData::RemoveAttach
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?DuplicateAttach@CFlyingData@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?DuplicateAttach@CFlyingData@@QAEXH@Z PROC		; CFlyingData::DuplicateAttach, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00003	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 120  : {

  00009	56		 push	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  0000a	8d b1 84 00 00
	00		 lea	 esi, DWORD PTR [ecx+132]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00013	c1 e1 04	 shl	 ecx, 4
  00016	03 4d 08	 add	 ecx, DWORD PTR _iIndex$[ebp]
  00019	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]

; 730  :         if (_Mylast != _My_data._Myend) {

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	51		 push	 ecx
  00020	50		 push	 eax
  00021	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00024	74 12		 je	 SHORT $LN8@DuplicateA

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ??$construct@UTFlyingAttachData@CFlyingData@@ABU12@@?$_Default_allocator_traits@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@SAXAAV?$allocator@UTFlyingAttachData@CFlyingData@@@1@QAUTFlyingAttachData@CFlyingData@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CFlyingData::TFlyingAttachData> >::construct<CFlyingData::TFlyingAttachData,CFlyingData::TFlyingAttachData const &>
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  0002f	83 46 04 44	 add	 DWORD PTR [esi+4], 68	; 00000044H
  00033	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 123  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN8@DuplicateA:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Emplace_reallocate<CFlyingData::TFlyingAttachData const &>
  0003f	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 123  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?DuplicateAttach@CFlyingData@@QAEXH@Z ENDP		; CFlyingData::DuplicateAttach
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?GetAttachDataReference@CFlyingData@@QAEAAUTFlyingAttachData@1@H@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetAttachDataReference@CFlyingData@@QAEAAUTFlyingAttachData@1@H@Z PROC ; CFlyingData::GetAttachDataReference, COMDAT
; _this$ = ecx

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1556 :         return _My_data._Myfirst[_Pos];

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  0000c	c1 e2 04	 shl	 edx, 4
  0000f	03 55 08	 add	 edx, DWORD PTR _iIndex$[ebp]
  00012	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 72   : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?GetAttachDataReference@CFlyingData@@QAEAAUTFlyingAttachData@1@H@Z ENDP ; CFlyingData::GetAttachDataReference
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z
_TEXT	SEGMENT
_fad$ = -84						; size = 68
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iType$ = 8						; size = 4
_strFilename$ = 12					; size = 4
_fRoll$ = 16						; size = 4
_fArg1$ = 20						; size = 4
_fArg2$ = 24						; size = 4
?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z PROC ; CFlyingData::AttachFlyEffect, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 7d 0c	 mov	 edi, DWORD PTR _strFilename$[ebp]

; 77   : 	memset(&fad,0, sizeof(fad));

  00030	6a 44		 push	 68			; 00000044H
  00032	8d 45 ac	 lea	 eax, DWORD PTR _fad$[ebp]
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	6a 00		 push	 0
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _memset

; 79   : 	fad.iFlyType = iType;

  00044	8b 75 08	 mov	 esi, DWORD PTR _iType$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  00047	8d 45 b4	 lea	 eax, DWORD PTR _fad$[ebp+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 77   : 	memset(&fad,0, sizeof(fad));

  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 78   : 	fad.iType = FLY_ATTACH_EFFECT;

  0004d	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _fad$[ebp], 1

; 79   : 	fad.iFlyType = iType;

  00054	89 75 b0	 mov	 DWORD PTR _fad$[ebp+4], esi

; 80   : 	fad.fPeriod = 1.0f;

  00057	c7 45 e8 00 00
	80 3f		 mov	 DWORD PTR _fad$[ebp+60], 1065353216 ; 3f800000H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3043 :         if (this != _STD addressof(_Right)) {

  0005e	3b c7		 cmp	 eax, edi
  00060	74 16		 je	 SHORT $LN29@AttachFlyE

; 2286 :         return _BUF_SIZE <= _Myres;

  00062	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00066	8b c7		 mov	 eax, edi

; 2273 :         if (_Large_string_engaged()) {

  00068	72 02		 jb	 SHORT $LN34@AttachFlyE

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0006a	8b 07		 mov	 eax, DWORD PTR [edi]
$LN34@AttachFlyE:

; 3001 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0006c	ff 77 10	 push	 DWORD PTR [edi+16]
  0006f	8d 4d b4	 lea	 ecx, DWORD PTR _fad$[ebp+8]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN29@AttachFlyE:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 82   : 	fad.fRoll = fRoll;

  00078	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fRoll$[ebp]
  0007d	f3 0f 11 45 e0	 movss	 DWORD PTR _fad$[ebp+52], xmm0

; 83   : 	fad.dwTailColor = 0xffffffff;

  00082	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _fad$[ebp+36], -1

; 84   : 	fad.fTailLength = 1.0f;

  00089	c7 45 d4 00 00
	80 3f		 mov	 DWORD PTR _fad$[ebp+40], 1065353216 ; 3f800000H

; 85   : 	fad.fTailSize = 10.0f;

  00090	c7 45 d8 00 00
	20 41		 mov	 DWORD PTR _fad$[ebp+44], 1092616192 ; 41200000H

; 86   : 
; 87   : 	switch(iType)

  00097	83 ee 02	 sub	 esi, 2
  0009a	74 20		 je	 SHORT $LN4@AttachFlyE
  0009c	83 ee 01	 sub	 esi, 1
  0009f	74 05		 je	 SHORT $LN5@AttachFlyE
  000a1	83 ee 01	 sub	 esi, 1
  000a4	75 20		 jne	 SHORT $LN7@AttachFlyE
$LN5@AttachFlyE:

; 91   : 		break;
; 92   : 	case FLY_ATTACH_TYPE_SINE:
; 93   : 	case FLY_ATTACH_TYPE_EXP:
; 94   : 		fad.fPeriod=fArg1;

  000a6	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fArg1$[ebp]
  000ab	f3 0f 11 45 e8	 movss	 DWORD PTR _fad$[ebp+60], xmm0

; 95   : 		fad.fAmplitude=fArg2;

  000b0	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fArg2$[ebp]
  000b5	f3 0f 11 45 ec	 movss	 DWORD PTR _fad$[ebp+64], xmm0

; 96   : 		break;

  000ba	eb 0a		 jmp	 SHORT $LN7@AttachFlyE
$LN4@AttachFlyE:

; 88   : 	{
; 89   : 	case FLY_ATTACH_TYPE_MULTI_LINE:
; 90   : 		fad.fDistance = fArg1;

  000bc	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fArg1$[ebp]
  000c1	f3 0f 11 45 e4	 movss	 DWORD PTR _fad$[ebp+56], xmm0
$LN7@AttachFlyE:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  000c6	8b 83 88 00 00
	00		 mov	 eax, DWORD PTR [ebx+136]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 104  : 	m_AttachDataVector.push_back(fad);

  000cc	8d b3 84 00 00
	00		 lea	 esi, DWORD PTR [ebx+132]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  000d2	8d 4d ac	 lea	 ecx, DWORD PTR _fad$[ebp]
  000d5	51		 push	 ecx
  000d6	50		 push	 eax
  000d7	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  000da	74 0f		 je	 SHORT $LN41@AttachFlyE

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 ??$construct@UTFlyingAttachData@CFlyingData@@ABU12@@?$_Default_allocator_traits@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@SAXAAV?$allocator@UTFlyingAttachData@CFlyingData@@@1@QAUTFlyingAttachData@CFlyingData@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CFlyingData::TFlyingAttachData> >::construct<CFlyingData::TFlyingAttachData,CFlyingData::TFlyingAttachData const &>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  000e5	83 46 04 44	 add	 DWORD PTR [esi+4], 68	; 00000044H

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000e9	eb 07		 jmp	 SHORT $LN81@AttachFlyE
$LN41@AttachFlyE:

; 732  :         }
; 733  : 
; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000eb	8b ce		 mov	 ecx, esi
  000ed	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Emplace_reallocate<CFlyingData::TFlyingAttachData const &>
$LN81@AttachFlyE:

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f2	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000f5	b8 79 78 78 78	 mov	 eax, 2021161081		; 78787879H
  000fa	2b 0e		 sub	 ecx, DWORD PTR [esi]
  000fc	f7 e9		 imul	 ecx
  000fe	c1 fa 05	 sar	 edx, 5
  00101	8b f2		 mov	 esi, edx
  00103	c1 ee 1f	 shr	 esi, 31			; 0000001fH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 105  : 	return m_AttachDataVector.size()-1;

  00106	03 f2		 add	 esi, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00108	8b 55 c8	 mov	 edx, DWORD PTR _fad$[ebp+28]
  0010b	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0010e	72 28		 jb	 SHORT $LN62@AttachFlyE
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00110	8b 4d b4	 mov	 ecx, DWORD PTR _fad$[ebp+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00113	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00114	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00116	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0011c	72 10		 jb	 SHORT $LN72@AttachFlyE

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011e	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00121	83 c2 23	 add	 edx, 35			; 00000023H
  00124	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00126	83 c0 fc	 add	 eax, -4			; fffffffcH
  00129	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012c	77 2b		 ja	 SHORT $LN83@AttachFlyE
$LN72@AttachFlyE:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0012e	52		 push	 edx
  0012f	51		 push	 ecx
  00130	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00135	83 c4 08	 add	 esp, 8
$LN62@AttachFlyE:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 105  : 	return m_AttachDataVector.size()-1;

  00138	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]

; 106  : }

  0013b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00145	59		 pop	 ecx
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014c	33 cd		 xor	 ecx, ebp
  0014e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c2 14 00	 ret	 20			; 00000014H
$LN83@AttachFlyE:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00159	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN80@AttachFlyE:
  0015e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR _fad$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1TFlyingAttachData@CFlyingData@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AttachFlyEffect@CFlyingData@@QAEKHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MMM@Z ENDP ; CFlyingData::AttachFlyEffect
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?SetBombEffect@CFlyingData@@QAEXPBD@Z
_TEXT	SEGMENT
_szEffectName$ = 8					; size = 4
?SetBombEffect@CFlyingData@@QAEXPBD@Z PROC		; CFlyingData::SetBombEffect, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _szEffectName$[ebp]
  0000a	8b d1		 mov	 edx, ecx
  0000c	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  0000f	90		 npad	 1
$LL30@SetBombEff:
  00010	8a 02		 mov	 al, BYTE PTR [edx]
  00012	42		 inc	 edx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL30@SetBombEff
  00017	2b d6		 sub	 edx, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 51   : 	m_strBombEffectName = szEffectName;

  00019	8d 77 40	 lea	 esi, DWORD PTR [edi+64]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001c	52		 push	 edx
  0001d	51		 push	 ecx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3985 :         return size() == 0;

  00025	83 7f 50 00	 cmp	 DWORD PTR [edi+80], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 52   : 	if (m_strBombEffectName.empty())

  00029	75 0d		 jne	 SHORT $LN2@SetBombEff

; 61   : 	}
; 62   : 	else
; 63   : 	{
; 64   : 		m_dwBombEffectID = 0;
; 65   : 	}
; 66   : 
; 67   : }

  0002b	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN2@SetBombEff:

; 53   : 	{
; 54   : 		m_dwBombEffectID = 0;
; 55   : 		return;
; 56   : 	}
; 57   : 	StringPath(m_strBombEffectName);

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
  0003e	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  00041	8b c6		 mov	 eax, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  00043	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  00047	72 02		 jb	 SHORT $LN29@SetBombEff

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
$LN29@SetBombEff:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 58   : 	if (CEffectManager::Instance().RegisterEffect(m_strBombEffectName.c_str()),true)

  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	6a 00		 push	 0
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?RegisterEffect@CEffectManager@@QAEHPBD_N10@Z ; CEffectManager::RegisterEffect
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  00061	72 02		 jb	 SHORT $LN24@SetBombEff

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00063	8b 36		 mov	 esi, DWORD PTR [esi]
$LN24@SetBombEff:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 60   : 		m_dwBombEffectID = GetCaseCRC32(m_strBombEffectName.c_str(),m_strBombEffectName.size());

  00065	6a 00		 push	 0
  00067	ff 77 50	 push	 DWORD PTR [edi+80]
  0006a	56		 push	 esi
  0006b	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI0@Z ; GetCaseCRC32
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 61   : 	}
; 62   : 	else
; 63   : 	{
; 64   : 		m_dwBombEffectID = 0;
; 65   : 	}
; 66   : 
; 67   : }

  00073	89 47 58	 mov	 DWORD PTR [edi+88], eax
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
?SetBombEffect@CFlyingData@@QAEXPBD@Z ENDP		; CFlyingData::SetBombEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?SaveScriptFile@CFlyingData@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -68					; size = 4
_strGlobalPathName$ = -64				; size = 24
_strLocalFileName$ = -40				; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFilename$ = 8					; size = 4
?SaveScriptFile@CFlyingData@@QAE_NPBD@Z PROC		; CFlyingData::SaveScriptFile, COMDAT
; _this$ = ecx

; 286  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SaveScriptFile@CFlyingData@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d bc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00030	8b 75 08	 mov	 esi, DWORD PTR _c_szFilename$[ebp]

; 287  : 	FILE* fp = fopen(c_szFilename,"w");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _fopen
  0003e	8b d8		 mov	 ebx, eax
  00040	83 c4 08	 add	 esp, 8

; 288  : 	if (!fp) return false;

  00043	85 db		 test	 ebx, ebx
  00045	75 07		 jne	 SHORT $LN5@SaveScript
  00047	32 c0		 xor	 al, al
  00049	e9 d2 04 00 00	 jmp	 $LN1@SaveScript
$LN5@SaveScript:

; 289  : 
; 290  : 	PrintfTabs(fp, 0, "SpreadingFlag           %d\n", m_bSpreading?1:0);

  0004e	33 c0		 xor	 eax, eax
  00050	38 47 1c	 cmp	 BYTE PTR [edi+28], al
  00053	0f 95 c0	 setne	 al
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EKJFFBKN@SpreadingFlag?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@
  0005c	6a 00		 push	 0
  0005e	53		 push	 ebx
  0005f	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 291  : 	PrintfTabs(fp, 0, "MaintainParallelFlag    %d\n", m_bMaintainParallel?1:0);

  00064	33 c0		 xor	 eax, eax
  00066	38 47 1d	 cmp	 BYTE PTR [edi+29], al
  00069	0f 95 c0	 setne	 al
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NGIIEBBO@MaintainParallelFlag?5?5?5?5?$CFd?6@
  00072	6a 00		 push	 0
  00074	53		 push	 ebx
  00075	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  0007a	f3 0f 10 47 20	 movss	 xmm0, DWORD PTR [edi+32]

; 292  : 
; 293  : 	PrintfTabs(fp, 0, "InitialVelocity         %f\n", m_fInitVel);

  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	0f 5a c0	 cvtps2pd xmm0, xmm0
  00085	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HFDPOBJA@InitialVelocity?5?5?5?5?5?5?5?5?5?$CFf?6@
  0008f	6a 00		 push	 0
  00091	53		 push	 ebx
  00092	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00097	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]

; 294  : 	PrintfTabs(fp, 0, "ConeAngle               %f\n", m_fConeAngle);

  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GGIANCOJ@ConeAngle?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
  000ac	6a 00		 push	 0
  000ae	53		 push	 ebx
  000af	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  000b4	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]

; 295  : 	PrintfTabs(fp, 0, "RollAngle               %f\n", m_fRollAngle);

  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	0f 5a c0	 cvtps2pd xmm0, xmm0
  000bf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OAKALGPC@RollAngle?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
  000c9	6a 00		 push	 0
  000cb	53		 push	 ebx
  000cc	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  000d1	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]

; 296  : 	PrintfTabs(fp, 0, "AngularVelocity         %f %f %f\n", m_v3AngVel.x, m_v3AngVel.y, m_v3AngVel.z);

  000d6	0f 5a c0	 cvtps2pd xmm0, xmm0
  000d9	51		 push	 ecx
  000da	f2 0f 11 44 24
	10		 movsd	 QWORD PTR [esp+16], xmm0
  000e0	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  000e5	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e8	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  000ee	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  000f3	0f 5a c0	 cvtps2pd xmm0, xmm0
  000f6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LMNGANIH@AngularVelocity?5?5?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CF@
  00100	6a 00		 push	 0
  00102	53		 push	 ebx
  00103	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00108	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]

; 297  : 	PrintfTabs(fp, 0, "Gravity                 %f\n", m_fGravity);

  0010d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00110	0f 5a c0	 cvtps2pd xmm0, xmm0
  00113	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@GMCHDOFC@Gravity?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
  0011d	6a 00		 push	 0
  0011f	53		 push	 ebx
  00120	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 298  : 
; 299  : 	PrintfTabs(fp, 0, "HitOnBackground         %d\n",m_bHitOnBackground?1:0);

  00125	33 c0		 xor	 eax, eax
  00127	38 47 68	 cmp	 BYTE PTR [edi+104], al
  0012a	0f 95 c0	 setne	 al
  0012d	50		 push	 eax
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MIBEIPGM@HitOnBackground?5?5?5?5?5?5?5?5?5?$CFd?6@
  00133	6a 00		 push	 0
  00135	53		 push	 ebx
  00136	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 300  : 	PrintfTabs(fp, 0, "HitOnAnotherMonster     %d\n",m_bHitOnAnotherMonster?1:0);

  0013b	33 c0		 xor	 eax, eax
  0013d	38 47 69	 cmp	 BYTE PTR [edi+105], al
  00140	0f 95 c0	 setne	 al
  00143	50		 push	 eax
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DIMAIAMO@HitOnAnotherMonster?5?5?5?5?5?$CFd?6@
  00149	6a 00		 push	 0
  0014b	53		 push	 ebx
  0014c	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 301  : 	PrintfTabs(fp, 0, "PierceCount             %d\n",m_iPierceCount);

  00151	ff 77 6c	 push	 DWORD PTR [edi+108]
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@KJEBPHJO@PierceCount?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@
  00159	6a 00		 push	 0
  0015b	53		 push	 ebx
  0015c	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00161	f3 0f 10 47 70	 movss	 xmm0, DWORD PTR [edi+112]
  00166	83 c4 44	 add	 esp, 68			; 00000044H

; 302  : 	PrintfTabs(fp, 0, "CollisionSphereRadius   %f\n",m_fCollisionSphereRadius);

  00169	0f 5a c0	 cvtps2pd xmm0, xmm0
  0016c	83 ec 08	 sub	 esp, 8
  0016f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BLFFPBNI@CollisionSphereRadius?5?5?5?$CFf?6@
  00179	6a 00		 push	 0
  0017b	53		 push	 ebx
  0017c	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00181	f3 0f 10 47 3c	 movss	 xmm0, DWORD PTR [edi+60]

; 304  : 	PrintfTabs(fp, 0, "BombRange               %f\n", m_fBombRange);

  00186	83 c4 0c	 add	 esp, 12			; 0000000cH
  00189	0f 5a c0	 cvtps2pd xmm0, xmm0
  0018c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00191	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PKMAPKGM@BombRange?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
  00196	6a 00		 push	 0
  00198	53		 push	 ebx
  00199	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0019e	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _strGlobalPathName$[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 304  : 	PrintfTabs(fp, 0, "BombRange               %f\n", m_fBombRange);

  001a5	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  001a8	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strGlobalPathName$[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  001af	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strGlobalPathName$[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001b6	c6 45 c0 00	 mov	 BYTE PTR _strGlobalPathName$[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 307  : 	StringPath(GetOnlyPathName(c_szFilename), strGlobalPathName);

  001ba	8d 45 c0	 lea	 eax, DWORD PTR _strGlobalPathName$[ebp]
  001bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001c4	50		 push	 eax
  001c5	56		 push	 esi
  001c6	e8 00 00 00 00	 call	 ?GetOnlyPathName@@YAPBDPBD@Z ; GetOnlyPathName
  001cb	83 c4 04	 add	 esp, 4
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  001d4	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 307  : 	StringPath(GetOnlyPathName(c_szFilename), strGlobalPathName);

  001db	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  001de	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  001e5	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001ec	c6 45 d8 00	 mov	 BYTE PTR _strLocalFileName$[ebp], 0

; 2286 :         return _BUF_SIZE <= _Myres;

  001f0	83 7f 54 10	 cmp	 DWORD PTR [edi+84], 16	; 00000010H

; 3888 :         return _Mypair._Myval2._Myptr();

  001f4	8d 77 40	 lea	 esi, DWORD PTR [edi+64]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 309  : 	std::string strLocalFileName;

  001f7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  001fb	8b ce		 mov	 ecx, esi

; 2273 :         if (_Large_string_engaged()) {

  001fd	72 02		 jb	 SHORT $LN182@SaveScript

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  001ff	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN182@SaveScript:

; 2286 :         return _BUF_SIZE <= _Myres;

  00201	83 7d d4 10	 cmp	 DWORD PTR _strGlobalPathName$[ebp+20], 16 ; 00000010H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 310  : 	if (GetLocalFileName(strGlobalPathName.c_str(), m_strBombEffectName.c_str(), &strLocalFileName))

  00205	8d 55 d8	 lea	 edx, DWORD PTR _strLocalFileName$[ebp]
  00208	52		 push	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  00209	8d 45 c0	 lea	 eax, DWORD PTR _strGlobalPathName$[ebp]

; 2273 :         if (_Large_string_engaged()) {

  0020c	0f 43 45 c0	 cmovae	 eax, DWORD PTR _strGlobalPathName$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 310  : 	if (GetLocalFileName(strGlobalPathName.c_str(), m_strBombEffectName.c_str(), &strLocalFileName))

  00210	51		 push	 ecx
  00211	50		 push	 eax
  00212	e8 00 00 00 00	 call	 ?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetLocalFileName
  00217	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021a	84 c0		 test	 al, al
  0021c	74 0d		 je	 SHORT $LN6@SaveScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0021e	83 7d ec 10	 cmp	 DWORD PTR _strLocalFileName$[ebp+20], 16 ; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00222	8d 75 d8	 lea	 esi, DWORD PTR _strLocalFileName$[ebp]

; 2273 :         if (_Large_string_engaged()) {

  00225	0f 43 75 d8	 cmovae	 esi, DWORD PTR _strLocalFileName$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 311  : 		PrintfTabs(fp, 0, "BombEffect              \"%s\"\n", strLocalFileName.c_str());

  00229	eb 08		 jmp	 SHORT $LN64@SaveScript
$LN6@SaveScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0022b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  0022f	72 02		 jb	 SHORT $LN64@SaveScript

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00231	8b 36		 mov	 esi, DWORD PTR [esi]
$LN64@SaveScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 315  : 	PrintfTabs(fp, 0, "HomingFlag              %d\n", m_bIsHoming?1:0);

  00233	56		 push	 esi
  00234	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BNDAHANN@BombEffect?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CC?$CFs?$CC?6@
  00239	6a 00		 push	 0
  0023b	53		 push	 ebx
  0023c	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00241	33 c0		 xor	 eax, eax
  00243	38 47 5c	 cmp	 BYTE PTR [edi+92], al
  00246	0f 95 c0	 setne	 al
  00249	50		 push	 eax
  0024a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BPPBPLIE@HomingFlag?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFd?6@
  0024f	6a 00		 push	 0
  00251	53		 push	 ebx
  00252	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00257	f3 0f 10 47 64	 movss	 xmm0, DWORD PTR [edi+100]

; 316  : 	PrintfTabs(fp, 0, "HomingStartTime         %f\n", m_fHomingStartTime);

  0025c	83 c4 18	 add	 esp, 24			; 00000018H
  0025f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00262	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00267	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DFAFEFEK@HomingStartTime?5?5?5?5?5?5?5?5?5?$CFf?6@
  0026c	6a 00		 push	 0
  0026e	53		 push	 ebx
  0026f	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00274	f3 0f 10 47 60	 movss	 xmm0, DWORD PTR [edi+96]

; 317  : 	PrintfTabs(fp, 0, "HomingMaxAngle          %f\n", m_fHomingMaxAngle);

  00279	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0027f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00284	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DJOJIKLN@HomingMaxAngle?5?5?5?5?5?5?5?5?5?5?$CFf?6@
  00289	6a 00		 push	 0
  0028b	53		 push	 ebx
  0028c	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00291	f3 0f 10 47 74	 movss	 xmm0, DWORD PTR [edi+116]

; 318  : 	PrintfTabs(fp, 0, "Range                   %f\n", m_fRange);

  00296	83 c4 0c	 add	 esp, 12			; 0000000cH
  00299	0f 5a c0	 cvtps2pd xmm0, xmm0
  0029c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JPLBDGMP@Range?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?6@
  002a6	6a 00		 push	 0
  002a8	53		 push	 ebx
  002a9	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  002ae	f3 0f 10 87 80
	00 00 00	 movss	 xmm0, DWORD PTR [edi+128]

; 319  : 	PrintfTabs(fp, 0, "Acceleration            %f %f %f\n", m_v3Accel.x, m_v3Accel.y, m_v3Accel.z);

  002b6	0f 5a c0	 cvtps2pd xmm0, xmm0
  002b9	51		 push	 ecx
  002ba	f2 0f 11 44 24
	10		 movsd	 QWORD PTR [esp+16], xmm0
  002c0	f3 0f 10 47 7c	 movss	 xmm0, DWORD PTR [edi+124]
  002c5	0f 5a c0	 cvtps2pd xmm0, xmm0
  002c8	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  002ce	f3 0f 10 47 78	 movss	 xmm0, DWORD PTR [edi+120]
  002d3	0f 5a c0	 cvtps2pd xmm0, xmm0
  002d6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002db	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@KJGNOCOO@Acceleration?5?5?5?5?5?5?5?5?5?5?5?5?$CFf?5?$CFf?5?$CF@
  002e0	6a 00		 push	 0
  002e2	53		 push	 ebx
  002e3	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  002e8	8b b7 84 00 00
	00		 mov	 esi, DWORD PTR [edi+132]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 319  : 	PrintfTabs(fp, 0, "Acceleration            %f %f %f\n", m_v3Accel.x, m_v3Accel.y, m_v3Accel.z);

  002ee	83 c4 24	 add	 esp, 36			; 00000024H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  002f1	3b b7 88 00 00
	00		 cmp	 esi, DWORD PTR [edi+136]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 322  : 	for(it = m_AttachDataVector.begin();it!=m_AttachDataVector.end();++it)

  002f7	0f 84 a6 01 00
	00		 je	 $LN3@SaveScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  002fd	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
$LL81@SaveScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 324  : 		PrintfTabs(fp, 0, "Group AttachData\n");

  00300	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HICIMFMI@Group?5AttachData?6@
  00305	6a 00		 push	 0
  00307	53		 push	 ebx
  00308	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 325  : 		PrintfTabs(fp, 0, "{\n");

  0030d	68 00 00 00 00	 push	 OFFSET ??_C@_02KCPFEJNG@?$HL?6@
  00312	6a 00		 push	 0
  00314	53		 push	 ebx
  00315	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 326  : 		PrintfTabs(fp, 1, "Type          %d\n", it->iType);

  0031a	ff 36		 push	 DWORD PTR [esi]
  0031c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FDNPIKOA@Type?5?5?5?5?5?5?5?5?5?5?$CFd?6@
  00321	6a 01		 push	 1
  00323	53		 push	 ebx
  00324	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 327  : 		PrintfTabs(fp, 1, "FlyType       %d\n", it->iFlyType);

  00329	ff 77 fc	 push	 DWORD PTR [edi-4]
  0032c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BLGHHPCB@FlyType?5?5?5?5?5?5?5?$CFd?6@
  00331	6a 01		 push	 1
  00333	53		 push	 ebx
  00334	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00339	83 c4 38	 add	 esp, 56			; 00000038H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  0033c	8b cf		 mov	 ecx, edi

; 2286 :         return _BUF_SIZE <= _Myres;

  0033e	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  00342	72 02		 jb	 SHORT $LN184@SaveScript

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00344	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN184@SaveScript:

; 2286 :         return _BUF_SIZE <= _Myres;

  00346	83 7d d4 10	 cmp	 DWORD PTR _strGlobalPathName$[ebp+20], 16 ; 00000010H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 328  : 		if (GetLocalFileName(strGlobalPathName.c_str(), it->strFilename.c_str(), &strLocalFileName))

  0034a	8d 55 d8	 lea	 edx, DWORD PTR _strLocalFileName$[ebp]
  0034d	52		 push	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  0034e	8d 45 c0	 lea	 eax, DWORD PTR _strGlobalPathName$[ebp]

; 2273 :         if (_Large_string_engaged()) {

  00351	0f 43 45 c0	 cmovae	 eax, DWORD PTR _strGlobalPathName$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 328  : 		if (GetLocalFileName(strGlobalPathName.c_str(), it->strFilename.c_str(), &strLocalFileName))

  00355	51		 push	 ecx
  00356	50		 push	 eax
  00357	e8 00 00 00 00	 call	 ?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetLocalFileName
  0035c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0035f	84 c0		 test	 al, al
  00361	74 0d		 je	 SHORT $LN8@SaveScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00363	83 7d ec 10	 cmp	 DWORD PTR _strLocalFileName$[ebp+20], 16 ; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00367	8d 45 d8	 lea	 eax, DWORD PTR _strLocalFileName$[ebp]

; 2273 :         if (_Large_string_engaged()) {

  0036a	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strLocalFileName$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 329  : 			PrintfTabs(fp, 1, "AttachFile    \"%s\"\n", strLocalFileName.c_str());

  0036e	eb 0a		 jmp	 SHORT $LN183@SaveScript
$LN8@SaveScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00370	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00374	8b c7		 mov	 eax, edi

; 2273 :         if (_Large_string_engaged()) {

  00376	72 02		 jb	 SHORT $LN183@SaveScript

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00378	8b 07		 mov	 eax, DWORD PTR [edi]
$LN183@SaveScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 334  : 		PrintfTabs(fp, 1, "TailFlag      %d\n", it->bHasTail?1:0);

  0037a	50		 push	 eax
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KGOGOAGA@AttachFile?5?5?5?5?$CC?$CFs?$CC?6@
  00380	6a 01		 push	 1
  00382	53		 push	 ebx
  00383	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00388	33 c0		 xor	 eax, eax
  0038a	38 47 18	 cmp	 BYTE PTR [edi+24], al
  0038d	0f 95 c0	 setne	 al
  00390	50		 push	 eax
  00391	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OICNGABA@TailFlag?5?5?5?5?5?5?$CFd?6@
  00396	6a 01		 push	 1
  00398	53		 push	 ebx
  00399	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  0039e	83 c4 20	 add	 esp, 32			; 00000020H

; 335  : 		if (it->bHasTail)

  003a1	80 7f 18 00	 cmp	 BYTE PTR [edi+24], 0
  003a5	74 63		 je	 SHORT $LN10@SaveScript

; 336  : 		{
; 337  : 			PrintfTabs(fp, 1, "TailColor     %ud\n", it->dwTailColor);

  003a7	ff 77 1c	 push	 DWORD PTR [edi+28]
  003aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GDEIOKGL@TailColor?5?5?5?5?5?$CFud?6@
  003af	6a 01		 push	 1
  003b1	53		 push	 ebx
  003b2	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  003b7	f3 0f 10 47 20	 movss	 xmm0, DWORD PTR [edi+32]

; 338  : 			PrintfTabs(fp, 1, "TailLength    %f\n", it->fTailLength);

  003bc	83 c4 08	 add	 esp, 8
  003bf	0f 5a c0	 cvtps2pd xmm0, xmm0
  003c2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BJCKHMFB@TailLength?5?5?5?5?$CFf?6@
  003cc	6a 01		 push	 1
  003ce	53		 push	 ebx
  003cf	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  003d4	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]

; 339  : 			PrintfTabs(fp, 1, "TailSize      %f\n", it->fTailSize);

  003d9	83 c4 0c	 add	 esp, 12			; 0000000cH
  003dc	0f 5a c0	 cvtps2pd xmm0, xmm0
  003df	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DBHBKFFP@TailSize?5?5?5?5?5?5?$CFf?6@
  003e9	6a 01		 push	 1
  003eb	53		 push	 ebx
  003ec	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 340  : 			PrintfTabs(fp, 1, "TailShapeRect %d\n", it->bRectShape?1:0);

  003f1	33 c0		 xor	 eax, eax
  003f3	38 47 28	 cmp	 BYTE PTR [edi+40], al
  003f6	0f 95 c0	 setne	 al
  003f9	50		 push	 eax
  003fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GIAPEHPE@TailShapeRect?5?$CFd?6@
  003ff	6a 01		 push	 1
  00401	53		 push	 ebx
  00402	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00407	83 c4 24	 add	 esp, 36			; 00000024H
$LN10@SaveScript:

; 341  : 		}
; 342  : 
; 343  : 		PrintfTabs(fp, 1, "Roll          %f\n",it->fRoll );

  0040a	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  0040f	83 ec 08	 sub	 esp, 8
  00412	0f 5a c0	 cvtps2pd xmm0, xmm0
  00415	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0041a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NJDFDGEH@Roll?5?5?5?5?5?5?5?5?5?5?$CFf?6@
  0041f	6a 01		 push	 1
  00421	53		 push	 ebx
  00422	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00427	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]

; 344  : 		PrintfTabs(fp, 1, "Distance      %f\n",it->fDistance );

  0042c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0042f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00432	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00437	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MGMHDAIP@Distance?5?5?5?5?5?5?$CFf?6@
  0043c	6a 01		 push	 1
  0043e	53		 push	 ebx
  0043f	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00444	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]

; 345  : 		PrintfTabs(fp, 1, "Period        %f\n",it->fPeriod );

  00449	83 c4 0c	 add	 esp, 12			; 0000000cH
  0044c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0044f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00454	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HBPGEMBJ@Period?5?5?5?5?5?5?5?5?$CFf?6@
  00459	6a 01		 push	 1
  0045b	53		 push	 ebx
  0045c	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
  00461	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]

; 346  : 		PrintfTabs(fp, 1, "Amplitude     %f\n",it->fAmplitude );

  00466	83 c4 0c	 add	 esp, 12			; 0000000cH
  00469	0f 5a c0	 cvtps2pd xmm0, xmm0
  0046c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00471	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BECPBEGP@Amplitude?5?5?5?5?5?$CFf?6@
  00476	6a 01		 push	 1
  00478	53		 push	 ebx
  00479	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs

; 348  : 		PrintfTabs(fp, 0, "}\n");

  0047e	68 00 00 00 00	 push	 OFFSET ??_C@_02KGHIDFGE@?$HN?6@
  00483	6a 00		 push	 0
  00485	53		 push	 ebx
  00486	e8 00 00 00 00	 call	 ?PrintfTabs@@YAXPAU_iobuf@@HPBDZZ ; PrintfTabs
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 150  :         return _Ptr == _Right._Ptr;

  0048b	8b 45 bc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]

; 74   :         ++_Ptr;

  0048e	83 c6 44	 add	 esi, 68			; 00000044H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 348  : 		PrintfTabs(fp, 0, "}\n");

  00491	83 c4 20	 add	 esp, 32			; 00000020H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  00494	83 c7 44	 add	 edi, 68			; 00000044H

; 150  :         return _Ptr == _Right._Ptr;

  00497	3b b0 88 00 00
	00		 cmp	 esi, DWORD PTR [eax+136]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 322  : 	for(it = m_AttachDataVector.begin();it!=m_AttachDataVector.end();++it)

  0049d	0f 85 5d fe ff
	ff		 jne	 $LL81@SaveScript
$LN3@SaveScript:

; 351  : 	fclose(fp);

  004a3	53		 push	 ebx
  004a4	e8 00 00 00 00	 call	 _fclose
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  004a9	8b 55 ec	 mov	 edx, DWORD PTR _strLocalFileName$[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 351  : 	fclose(fp);

  004ac	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  004af	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004b2	72 28		 jb	 SHORT $LN132@SaveScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004b4	8b 4d d8	 mov	 ecx, DWORD PTR _strLocalFileName$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004b7	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004b8	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004ba	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  004c0	72 10		 jb	 SHORT $LN142@SaveScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004c2	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  004c5	83 c2 23	 add	 edx, 35			; 00000023H
  004c8	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004ca	83 c0 fc	 add	 eax, -4			; fffffffcH
  004cd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004d0	77 6c		 ja	 SHORT $LN167@SaveScript
$LN142@SaveScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  004d2	52		 push	 edx
  004d3	51		 push	 ecx
  004d4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004d9	83 c4 08	 add	 esp, 8
$LN132@SaveScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  004dc	8b 55 d4	 mov	 edx, DWORD PTR _strGlobalPathName$[ebp+20]

; 4599 :             _Mypair._Myval2._Mysize = 0;

  004df	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  004e6	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp+20], 15 ; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  004ed	c6 45 d8 00	 mov	 BYTE PTR _strLocalFileName$[ebp], 0

; 2286 :         return _BUF_SIZE <= _Myres;

  004f1	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004f4	72 28		 jb	 SHORT $LN160@SaveScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004f6	8b 4d c0	 mov	 ecx, DWORD PTR _strGlobalPathName$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  004f9	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004fa	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004fc	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00502	72 10		 jb	 SHORT $LN170@SaveScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00504	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00507	83 c2 23	 add	 edx, 35			; 00000023H
  0050a	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0050c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0050f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00512	77 2a		 ja	 SHORT $LN167@SaveScript
$LN170@SaveScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00514	52		 push	 edx
  00515	51		 push	 ecx
  00516	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0051b	83 c4 08	 add	 esp, 8
$LN160@SaveScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 352  : 	return true;

  0051e	b0 01		 mov	 al, 1
$LN1@SaveScript:

; 353  : }

  00520	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00523	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0052a	59		 pop	 ecx
  0052b	5f		 pop	 edi
  0052c	5e		 pop	 esi
  0052d	5b		 pop	 ebx
  0052e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00531	33 cd		 xor	 ecx, ebp
  00533	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00538	8b e5		 mov	 esp, ebp
  0053a	5d		 pop	 ebp
  0053b	c2 04 00	 ret	 4
$LN167@SaveScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0053e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN186@SaveScript:
  00543	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SaveScriptFile@CFlyingData@@QAE_NPBD@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _strGlobalPathName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveScriptFile@CFlyingData@@QAE_NPBD@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR _strLocalFileName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?SaveScriptFile@CFlyingData@@QAE_NPBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SaveScriptFile@CFlyingData@@QAE_NPBD@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SaveScriptFile@CFlyingData@@QAE_NPBD@Z ENDP		; CFlyingData::SaveScriptFile
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\TextFileLoader.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\TextFileLoader.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\TextFileLoader.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?LoadScriptFile@CFlyingData@@QAE_NPBD@Z
_TEXT	SEGMENT
_GotoChild$2 = -308					; size = 4
_this$1$ = -304						; size = 4
_this$1$ = -300						; size = 4
_temp$ = -296						; size = 4
$T3 = -289						; size = 1
$T4 = -289						; size = 1
$T5 = -289						; size = 1
$T6 = -289						; size = 1
$T7 = -289						; size = 1
$T8 = -289						; size = 1
$T9 = -289						; size = 1
$T10 = -289						; size = 1
$T11 = -289						; size = 1
$T12 = -289						; size = 1
$T13 = -289						; size = 1
$T14 = -289						; size = 1
$T15 = -289						; size = 1
_TextFileLoader$ = -288					; size = 128
_fad$16 = -160						; size = 68
$T17 = -88						; size = 24
$T18 = -88						; size = 24
$T19 = -88						; size = 24
$T20 = -88						; size = 24
$T21 = -88						; size = 24
$T22 = -88						; size = 24
$T23 = -88						; size = 24
$T24 = -88						; size = 24
$T25 = -88						; size = 24
$T26 = -88						; size = 24
$T27 = -88						; size = 24
$T28 = -88						; size = 24
$T29 = -88						; size = 24
$T30 = -88						; size = 24
$T31 = -88						; size = 24
$T32 = -88						; size = 24
$T33 = -76						; size = 12
tv8274 = -64						; size = 16
_strNodeName$34 = -64					; size = 24
$T35 = -64						; size = 24
$T36 = -64						; size = 24
$T37 = -64						; size = 24
$T38 = -64						; size = 24
$T39 = -64						; size = 24
$T40 = -64						; size = 24
$T41 = -64						; size = 24
$T42 = -64						; size = 24
$T43 = -64						; size = 24
$T44 = -64						; size = 24
$T45 = -64						; size = 24
$T46 = -64						; size = 24
$T47 = -64						; size = 24
$T48 = -64						; size = 24
$T49 = -64						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFilename$ = 8					; size = 4
?LoadScriptFile@CFlyingData@@QAE_NPBD@Z PROC		; CFlyingData::LoadScriptFile, COMDAT
; _this$ = ecx

; 126  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx

; 127  : 	NANOBEGIN

  00047	eb		 DB	 -21			; ffffffebH
  00048	03		 DB	 3
  00049	d6		 DB	 -42			; ffffffd6H
  0004a	d7		 DB	 -41			; ffffffd7H
  0004b	01		 DB	 1
  0004c	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  00052	e8 00 00 00 00	 call	 ?Destroy@CFlyingData@@QAEXXZ ; CFlyingData::Destroy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00057	8b 73 08	 mov	 esi, DWORD PTR _c_szFilename$[ebx]
  0005a	8b d6		 mov	 edx, esi
  0005c	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  0005f	90		 npad	 1
$LL1958@LoadScript:
  00060	8a 02		 mov	 al, BYTE PTR [edx]
  00062	42		 inc	 edx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL1958@LoadScript
  00067	2b d7		 sub	 edx, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 130  : 	m_strFilename = c_szFilename;

  00069	8b bd d4 fe ff
	ff		 mov	 edi, DWORD PTR _this$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006f	52		 push	 edx
  00070	56		 push	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 130  : 	m_strFilename = c_szFilename;

  00071	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00074	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 130  : 	m_strFilename = c_szFilename;

  00077	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007d	8b ce		 mov	 ecx, esi
  0007f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 131  : 	StringPath(m_strFilename);

  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 ?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
  0008a	83 c4 04	 add	 esp, 4

; 132  : 	CTextFileLoader TextFileLoader;

  0008d	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00093	e8 00 00 00 00	 call	 ??0CTextFileLoader@@QAE@XZ ; CTextFileLoader::CTextFileLoader
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00098	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0009c	8b c6		 mov	 eax, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 132  : 	CTextFileLoader TextFileLoader;

  0009e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  000a5	72 02		 jb	 SHORT $LN83@LoadScript

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  000a7	8b 06		 mov	 eax, DWORD PTR [esi]
$LN83@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 133  : 	if (!TextFileLoader.Load(m_strFilename.c_str()))

  000a9	50		 push	 eax
  000aa	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  000b0	e8 00 00 00 00	 call	 ?Load@CTextFileLoader@@QAE_NPBD@Z ; CTextFileLoader::Load
  000b5	84 c0		 test	 al, al
  000b7	0f 84 f9 12 00
	00		 je	 $LN72@LoadScript

; 134  : 		return false;
; 135  : 
; 136  : 	TextFileLoader.SetTop();

  000bd	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  000c3	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000c8	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@NBBBNDDO@spreadingflag@+8
  000cd	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0O@NBBBNDDO@spreadingflag@
  000d5	89 45 c8	 mov	 DWORD PTR $T49[ebp+8], eax
  000d8	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0O@NBBBNDDO@spreadingflag@+12

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  000dd	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T49[ebp+20], 15 ; 0000000fH

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  000e4	c7 45 d0 0d 00
	00 00		 mov	 DWORD PTR $T49[ebp+16], 13 ; 0000000dH

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000eb	66 0f d6 45 c0	 movq	 QWORD PTR $T49[ebp], xmm0
  000f0	88 45 cc	 mov	 BYTE PTR $T49[ebp+12], al

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  000f3	c6 45 cd 00	 mov	 BYTE PTR $T49[ebp+13], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 139  : 	if (!TextFileLoader.GetTokenInteger("spreadingflag",&temp))

  000f7	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  000fd	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00101	50		 push	 eax
  00102	8d 45 c0	 lea	 eax, DWORD PTR $T49[ebp]
  00105	50		 push	 eax
  00106	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0010c	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00111	8b 55 d4	 mov	 edx, DWORD PTR $T49[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 139  : 	if (!TextFileLoader.GetTokenInteger("spreadingflag",&temp))

  00114	85 c0		 test	 eax, eax
  00116	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0011a	0f 94 c0	 sete	 al
  0011d	88 85 df fe ff
	ff		 mov	 BYTE PTR $T15[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00123	83 fa 10	 cmp	 edx, 16			; 00000010H
  00126	72 32		 jb	 SHORT $LN172@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00128	8b 4d c0	 mov	 ecx, DWORD PTR $T49[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0012b	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012c	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0012e	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00134	72 14		 jb	 SHORT $LN182@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00136	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00139	83 c2 23	 add	 edx, 35			; 00000023H
  0013c	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00141	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00144	0f 87 a4 12 00
	00		 ja	 $LN1374@LoadScript
$LN182@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0014a	52		 push	 edx
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00151	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T15[ebp]
  00157	83 c4 08	 add	 esp, 8
$LN172@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 139  : 	if (!TextFileLoader.GetTokenInteger("spreadingflag",&temp))

  0015a	84 c0		 test	 al, al
  0015c	74 04		 je	 SHORT $LN6@LoadScript

; 140  : 	{
; 141  : 		m_bSpreading = false;

  0015e	32 c0		 xor	 al, al

; 142  : 	}

  00160	eb 0a		 jmp	 SHORT $LN7@LoadScript
$LN6@LoadScript:

; 143  : 	else
; 144  : 	{
; 145  : 		m_bSpreading = temp?true:false;

  00162	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _temp$[ebp], 0
  00169	0f 95 c0	 setne	 al
$LN7@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0016c	88 47 1c	 mov	 BYTE PTR [edi+28], al

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0016f	8d 4d c0	 lea	 ecx, DWORD PTR $T48[ebp]
  00172	6a 14		 push	 20			; 00000014H

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00174	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T48[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IJDOJCHL@maintainparallelflag@

; 4562 :         _My_data._Mysize = 0;

  00180	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T48[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00187	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T48[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0018e	c6 45 c0 00	 mov	 BYTE PTR $T48[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00192	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 148  : 	if (!TextFileLoader.GetTokenInteger("maintainparallelflag", &temp))

  00197	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  0019d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001a1	50		 push	 eax
  001a2	8d 45 c0	 lea	 eax, DWORD PTR $T48[ebp]
  001a5	50		 push	 eax
  001a6	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  001ac	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001b1	8b 55 d4	 mov	 edx, DWORD PTR $T48[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 148  : 	if (!TextFileLoader.GetTokenInteger("maintainparallelflag", &temp))

  001b4	85 c0		 test	 eax, eax
  001b6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001ba	0f 94 c0	 sete	 al
  001bd	88 85 df fe ff
	ff		 mov	 BYTE PTR $T14[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001c3	83 fa 10	 cmp	 edx, 16			; 00000010H
  001c6	72 32		 jb	 SHORT $LN215@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c8	8b 4d c0	 mov	 ecx, DWORD PTR $T48[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001cb	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001cc	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001ce	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  001d4	72 14		 jb	 SHORT $LN225@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001d6	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  001d9	83 c2 23	 add	 edx, 35			; 00000023H
  001dc	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001de	83 c0 fc	 add	 eax, -4			; fffffffcH
  001e1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001e4	0f 87 09 12 00
	00		 ja	 $LN1968@LoadScript
$LN225@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001ea	52		 push	 edx
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001f1	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T14[ebp]
  001f7	83 c4 08	 add	 esp, 8
$LN215@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 148  : 	if (!TextFileLoader.GetTokenInteger("maintainparallelflag", &temp))

  001fa	84 c0		 test	 al, al
  001fc	74 04		 je	 SHORT $LN8@LoadScript

; 149  : 	{
; 150  : 		m_bMaintainParallel = false;

  001fe	32 c0		 xor	 al, al

; 151  : 	}

  00200	eb 0a		 jmp	 SHORT $LN9@LoadScript
$LN8@LoadScript:

; 152  : 	else
; 153  : 	{
; 154  : 		m_bMaintainParallel = temp?true:false;

  00202	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _temp$[ebp], 0
  00209	0f 95 c0	 setne	 al
$LN9@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0020c	88 47 1d	 mov	 BYTE PTR [edi+29], al

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0020f	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@HEDAMPDI@initialvelocity@+8
  00214	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@HEDAMPDI@initialvelocity@
  0021c	89 45 c8	 mov	 DWORD PTR $T47[ebp+8], eax
  0021f	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@HEDAMPDI@initialvelocity@+12
  00225	66 89 45 cc	 mov	 WORD PTR $T47[ebp+12], ax
  00229	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@HEDAMPDI@initialvelocity@+14

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0022e	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T47[ebp+20], 15 ; 0000000fH

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00235	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T47[ebp+16], 15 ; 0000000fH

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0023c	66 0f d6 45 c0	 movq	 QWORD PTR $T47[ebp], xmm0
  00241	88 45 ce	 mov	 BYTE PTR $T47[ebp+14], al

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00244	c6 45 cf 00	 mov	 BYTE PTR $T47[ebp+15], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 157  : 	if (!TextFileLoader.GetTokenFloat("initialvelocity",&m_fInitVel))

  00248	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  0024b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0024f	50		 push	 eax
  00250	8d 45 c0	 lea	 eax, DWORD PTR $T47[ebp]
  00253	50		 push	 eax
  00254	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0025a	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0025f	8b 55 d4	 mov	 edx, DWORD PTR $T47[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 157  : 	if (!TextFileLoader.GetTokenFloat("initialvelocity",&m_fInitVel))

  00262	85 c0		 test	 eax, eax
  00264	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00268	0f 94 c0	 sete	 al
  0026b	88 85 df fe ff
	ff		 mov	 BYTE PTR $T13[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00271	83 fa 10	 cmp	 edx, 16			; 00000010H
  00274	72 32		 jb	 SHORT $LN314@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00276	8b 4d c0	 mov	 ecx, DWORD PTR $T47[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00279	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0027a	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0027c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00282	72 14		 jb	 SHORT $LN324@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00284	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00287	83 c2 23	 add	 edx, 35			; 00000023H
  0028a	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0028c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0028f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00292	0f 87 60 11 00
	00		 ja	 $LN1969@LoadScript
$LN324@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00298	52		 push	 edx
  00299	51		 push	 ecx
  0029a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0029f	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T13[ebp]
  002a5	83 c4 08	 add	 esp, 8
$LN314@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 157  : 	if (!TextFileLoader.GetTokenFloat("initialvelocity",&m_fInitVel))

  002a8	84 c0		 test	 al, al
  002aa	0f 85 06 11 00
	00		 jne	 $LN72@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002b0	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_09KDIMMAIL@coneangle@
  002b8	a0 08 00 00 00	 mov	 al, BYTE PTR ??_C@_09KDIMMAIL@coneangle@+8

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  002bd	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T46[ebp+20], 15 ; 0000000fH

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  002c4	c7 45 d0 09 00
	00 00		 mov	 DWORD PTR $T46[ebp+16], 9

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002cb	66 0f d6 45 c0	 movq	 QWORD PTR $T46[ebp], xmm0
  002d0	88 45 c8	 mov	 BYTE PTR $T46[ebp+8], al

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  002d3	c6 45 c9 00	 mov	 BYTE PTR $T46[ebp+9], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 162  : 	TextFileLoader.GetTokenFloat("coneangle", &m_fConeAngle);

  002d7	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  002da	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002de	50		 push	 eax
  002df	8d 45 c0	 lea	 eax, DWORD PTR $T46[ebp]
  002e2	50		 push	 eax
  002e3	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  002e9	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002ee	8b 55 d4	 mov	 edx, DWORD PTR $T46[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 162  : 	TextFileLoader.GetTokenFloat("coneangle", &m_fConeAngle);

  002f1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002f5	83 fa 10	 cmp	 edx, 16			; 00000010H
  002f8	72 2c		 jb	 SHORT $LN413@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002fa	8b 4d c0	 mov	 ecx, DWORD PTR $T46[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  002fd	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002fe	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00300	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00306	72 14		 jb	 SHORT $LN423@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00308	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0030b	83 c2 23	 add	 edx, 35			; 00000023H
  0030e	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00310	83 c0 fc	 add	 eax, -4			; fffffffcH
  00313	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00316	0f 87 e1 10 00
	00		 ja	 $LN1970@LoadScript
$LN423@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0031c	52		 push	 edx
  0031d	51		 push	 ecx
  0031e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00323	83 c4 08	 add	 esp, 8
$LN413@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00326	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_09LMFNGIPD@rollangle@
  0032e	a0 08 00 00 00	 mov	 al, BYTE PTR ??_C@_09LMFNGIPD@rollangle@+8

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00333	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T45[ebp+20], 15 ; 0000000fH

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  0033a	c7 45 d0 09 00
	00 00		 mov	 DWORD PTR $T45[ebp+16], 9

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00341	66 0f d6 45 c0	 movq	 QWORD PTR $T45[ebp], xmm0
  00346	88 45 c8	 mov	 BYTE PTR $T45[ebp+8], al

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00349	c6 45 c9 00	 mov	 BYTE PTR $T45[ebp+9], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 166  : 	TextFileLoader.GetTokenFloat("rollangle", &m_fRollAngle);

  0034d	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00350	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00354	50		 push	 eax
  00355	8d 45 c0	 lea	 eax, DWORD PTR $T45[ebp]
  00358	50		 push	 eax
  00359	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0035f	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00364	8b 55 d4	 mov	 edx, DWORD PTR $T45[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 166  : 	TextFileLoader.GetTokenFloat("rollangle", &m_fRollAngle);

  00367	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0036b	83 fa 10	 cmp	 edx, 16			; 00000010H
  0036e	72 2c		 jb	 SHORT $LN512@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00370	8b 4d c0	 mov	 ecx, DWORD PTR $T45[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00373	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00374	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00376	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0037c	72 14		 jb	 SHORT $LN522@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0037e	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00381	83 c2 23	 add	 edx, 35			; 00000023H
  00384	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00386	83 c0 fc	 add	 eax, -4			; fffffffcH
  00389	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0038c	0f 87 70 10 00
	00		 ja	 $LN1971@LoadScript
$LN522@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00392	52		 push	 edx
  00393	51		 push	 ecx
  00394	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00399	83 c4 08	 add	 esp, 8
$LN512@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0039c	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@LAOKBKDJ@angularvelocity@+8
  003a1	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@LAOKBKDJ@angularvelocity@
  003a9	89 45 c8	 mov	 DWORD PTR $T44[ebp+8], eax
  003ac	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@LAOKBKDJ@angularvelocity@+12
  003b2	66 89 45 cc	 mov	 WORD PTR $T44[ebp+12], ax
  003b6	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@LAOKBKDJ@angularvelocity@+14

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  003bb	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T44[ebp+20], 15 ; 0000000fH

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  003c2	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T44[ebp+16], 15 ; 0000000fH

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  003c9	66 0f d6 45 c0	 movq	 QWORD PTR $T44[ebp], xmm0
  003ce	88 45 ce	 mov	 BYTE PTR $T44[ebp+14], al

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  003d1	c6 45 cf 00	 mov	 BYTE PTR $T44[ebp+15], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 170  : 	TextFileLoader.GetTokenVector3("angularvelocity",&m_v3AngVel);

  003d5	8d 47 2c	 lea	 eax, DWORD PTR [edi+44]
  003d8	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  003dc	50		 push	 eax
  003dd	8d 45 c0	 lea	 eax, DWORD PTR $T44[ebp]
  003e0	50		 push	 eax
  003e1	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  003e7	e8 00 00 00 00	 call	 ?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenVector3
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  003ec	8b 55 d4	 mov	 edx, DWORD PTR $T44[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 170  : 	TextFileLoader.GetTokenVector3("angularvelocity",&m_v3AngVel);

  003ef	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  003f3	83 fa 10	 cmp	 edx, 16			; 00000010H
  003f6	72 2c		 jb	 SHORT $LN611@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003f8	8b 4d c0	 mov	 ecx, DWORD PTR $T44[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  003fb	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003fc	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003fe	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00404	72 14		 jb	 SHORT $LN621@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00406	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00409	83 c2 23	 add	 edx, 35			; 00000023H
  0040c	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0040e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00411	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00414	0f 87 ed 0f 00
	00		 ja	 $LN1972@LoadScript
$LN621@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0041a	52		 push	 edx
  0041b	51		 push	 ecx
  0041c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00421	83 c4 08	 add	 esp, 8
$LN611@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00424	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07GFBFDLBM@gravity@
  00429	89 45 c0	 mov	 DWORD PTR $T43[ebp], eax
  0042c	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_07GFBFDLBM@gravity@+4
  00432	66 89 45 c4	 mov	 WORD PTR $T43[ebp+4], ax
  00436	a0 06 00 00 00	 mov	 al, BYTE PTR ??_C@_07GFBFDLBM@gravity@+6

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0043b	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T43[ebp+20], 15 ; 0000000fH

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00442	c7 45 d0 07 00
	00 00		 mov	 DWORD PTR $T43[ebp+16], 7

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00449	88 45 c6	 mov	 BYTE PTR $T43[ebp+6], al

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0044c	c6 45 c7 00	 mov	 BYTE PTR $T43[ebp+7], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 174  : 	TextFileLoader.GetTokenFloat("gravity",&m_fGravity);

  00450	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00453	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00457	50		 push	 eax
  00458	8d 45 c0	 lea	 eax, DWORD PTR $T43[ebp]
  0045b	50		 push	 eax
  0045c	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00462	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00467	8b 55 d4	 mov	 edx, DWORD PTR $T43[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 174  : 	TextFileLoader.GetTokenFloat("gravity",&m_fGravity);

  0046a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0046e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00471	72 2c		 jb	 SHORT $LN710@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00473	8b 4d c0	 mov	 ecx, DWORD PTR $T43[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00476	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00477	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00479	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0047f	72 14		 jb	 SHORT $LN720@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00481	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00484	83 c2 23	 add	 edx, 35			; 00000023H
  00487	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00489	83 c0 fc	 add	 eax, -4			; fffffffcH
  0048c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0048f	0f 87 77 0f 00
	00		 ja	 $LN1973@LoadScript
$LN720@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00495	52		 push	 edx
  00496	51		 push	 ecx
  00497	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0049c	83 c4 08	 add	 esp, 8
$LN710@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0049f	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BA@KECLBPOM@hitonbackground@+8
  004a4	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BA@KECLBPOM@hitonbackground@
  004ac	89 45 c8	 mov	 DWORD PTR $T42[ebp+8], eax
  004af	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BA@KECLBPOM@hitonbackground@+12
  004b5	66 89 45 cc	 mov	 WORD PTR $T42[ebp+12], ax
  004b9	a0 0e 00 00 00	 mov	 al, BYTE PTR ??_C@_0BA@KECLBPOM@hitonbackground@+14

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  004be	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T42[ebp+20], 15 ; 0000000fH

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  004c5	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T42[ebp+16], 15 ; 0000000fH

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  004cc	66 0f d6 45 c0	 movq	 QWORD PTR $T42[ebp], xmm0
  004d1	88 45 ce	 mov	 BYTE PTR $T42[ebp+14], al

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  004d4	c6 45 cf 00	 mov	 BYTE PTR $T42[ebp+15], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 178  : 	if (TextFileLoader.GetTokenInteger("hitonbackground",&temp))

  004d8	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  004de	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  004e2	50		 push	 eax
  004e3	8d 45 c0	 lea	 eax, DWORD PTR $T42[ebp]
  004e6	50		 push	 eax
  004e7	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  004ed	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004f2	8b 55 d4	 mov	 edx, DWORD PTR $T42[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 178  : 	if (TextFileLoader.GetTokenInteger("hitonbackground",&temp))

  004f5	8b f0		 mov	 esi, eax
  004f7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  004fb	83 fa 10	 cmp	 edx, 16			; 00000010H
  004fe	72 2c		 jb	 SHORT $LN809@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00500	8b 4d c0	 mov	 ecx, DWORD PTR $T42[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00503	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00504	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00506	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0050c	72 14		 jb	 SHORT $LN819@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0050e	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00511	83 c2 23	 add	 edx, 35			; 00000023H
  00514	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00516	83 c0 fc	 add	 eax, -4			; fffffffcH
  00519	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0051c	0f 87 ef 0e 00
	00		 ja	 $LN1974@LoadScript
$LN819@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00522	52		 push	 edx
  00523	51		 push	 ecx
  00524	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00529	83 c4 08	 add	 esp, 8
$LN809@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 178  : 	if (TextFileLoader.GetTokenInteger("hitonbackground",&temp))

  0052c	85 f6		 test	 esi, esi
  0052e	74 0c		 je	 SHORT $LN11@LoadScript

; 179  : 		m_bHitOnBackground = temp?true:false;

  00530	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _temp$[ebp], 0
  00537	0f 95 c0	 setne	 al
  0053a	eb 02		 jmp	 SHORT $LN12@LoadScript
$LN11@LoadScript:

; 180  : 	else
; 181  : 		m_bHitOnBackground = false;

  0053c	32 c0		 xor	 al, al
$LN12@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0053e	88 47 68	 mov	 BYTE PTR [edi+104], al

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00541	8d 4d c0	 lea	 ecx, DWORD PTR $T41[ebp]
  00544	6a 13		 push	 19			; 00000013H

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00546	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T41[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0054d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CFEKODPK@hitonanothermonster@

; 4562 :         _My_data._Mysize = 0;

  00552	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T41[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00559	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T41[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00560	c6 45 c0 00	 mov	 BYTE PTR $T41[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00564	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 183  : 	if (TextFileLoader.GetTokenInteger("hitonanothermonster",&temp))

  00569	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  0056f	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00573	50		 push	 eax
  00574	8d 45 c0	 lea	 eax, DWORD PTR $T41[ebp]
  00577	50		 push	 eax
  00578	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0057e	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00583	8b 55 d4	 mov	 edx, DWORD PTR $T41[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 183  : 	if (TextFileLoader.GetTokenInteger("hitonanothermonster",&temp))

  00586	8b f0		 mov	 esi, eax
  00588	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0058c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0058f	72 2c		 jb	 SHORT $LN852@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00591	8b 4d c0	 mov	 ecx, DWORD PTR $T41[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00594	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00595	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00597	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0059d	72 14		 jb	 SHORT $LN862@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0059f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  005a2	83 c2 23	 add	 edx, 35			; 00000023H
  005a5	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005a7	83 c0 fc	 add	 eax, -4			; fffffffcH
  005aa	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005ad	0f 87 63 0e 00
	00		 ja	 $LN1975@LoadScript
$LN862@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  005b3	52		 push	 edx
  005b4	51		 push	 ecx
  005b5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005ba	83 c4 08	 add	 esp, 8
$LN852@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 183  : 	if (TextFileLoader.GetTokenInteger("hitonanothermonster",&temp))

  005bd	85 f6		 test	 esi, esi
  005bf	74 0c		 je	 SHORT $LN13@LoadScript

; 184  : 		m_bHitOnAnotherMonster = temp?true:false;

  005c1	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _temp$[ebp], 0
  005c8	0f 95 c0	 setne	 al
  005cb	eb 02		 jmp	 SHORT $LN14@LoadScript
$LN13@LoadScript:

; 185  : 	else
; 186  : 		m_bHitOnAnotherMonster = false;

  005cd	32 c0		 xor	 al, al
$LN14@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  005cf	88 47 69	 mov	 BYTE PTR [edi+105], al

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  005d2	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_0M@CFHBGHLK@piercecount@+8
  005d8	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0M@CFHBGHLK@piercecount@
  005e0	66 89 45 c8	 mov	 WORD PTR $T40[ebp+8], ax
  005e4	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0M@CFHBGHLK@piercecount@+10

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  005e9	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T40[ebp+20], 15 ; 0000000fH

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  005f0	c7 45 d0 0b 00
	00 00		 mov	 DWORD PTR $T40[ebp+16], 11 ; 0000000bH

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  005f7	66 0f d6 45 c0	 movq	 QWORD PTR $T40[ebp], xmm0
  005fc	88 45 ca	 mov	 BYTE PTR $T40[ebp+10], al

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  005ff	c6 45 cb 00	 mov	 BYTE PTR $T40[ebp+11], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 188  : 	if (!TextFileLoader.GetTokenInteger("piercecount",&m_iPierceCount))

  00603	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
  00606	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  0060a	56		 push	 esi
  0060b	8d 45 c0	 lea	 eax, DWORD PTR $T40[ebp]
  0060e	50		 push	 eax
  0060f	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00615	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0061a	8b 55 d4	 mov	 edx, DWORD PTR $T40[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 188  : 	if (!TextFileLoader.GetTokenInteger("piercecount",&m_iPierceCount))

  0061d	85 c0		 test	 eax, eax
  0061f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00623	0f 94 c0	 sete	 al
  00626	88 85 df fe ff
	ff		 mov	 BYTE PTR $T12[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0062c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0062f	72 32		 jb	 SHORT $LN951@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00631	8b 4d c0	 mov	 ecx, DWORD PTR $T40[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00634	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00635	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00637	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0063d	72 14		 jb	 SHORT $LN961@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0063f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00642	83 c2 23	 add	 edx, 35			; 00000023H
  00645	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00647	83 c0 fc	 add	 eax, -4			; fffffffcH
  0064a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0064d	0f 87 c8 0d 00
	00		 ja	 $LN1976@LoadScript
$LN961@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00653	52		 push	 edx
  00654	51		 push	 ecx
  00655	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0065a	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T12[ebp]
  00660	83 c4 08	 add	 esp, 8
$LN951@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 188  : 	if (!TextFileLoader.GetTokenInteger("piercecount",&m_iPierceCount))

  00663	84 c0		 test	 al, al
  00665	74 06		 je	 SHORT $LN15@LoadScript

; 189  : 		m_iPierceCount = 0;

  00667	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN15@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0066d	6a 09		 push	 9

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0066f	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T39[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00676	8d 4d c0	 lea	 ecx, DWORD PTR $T39[ebp]
  00679	68 00 00 00 00	 push	 OFFSET ??_C@_09HBCJNFFH@bombrange@

; 4562 :         _My_data._Mysize = 0;

  0067e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T39[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00685	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T39[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0068c	c6 45 c0 00	 mov	 BYTE PTR $T39[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00690	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 194  : 	TextFileLoader.GetTokenFloat("bombrange",&m_fBombRange);

  00695	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  00698	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  0069c	50		 push	 eax
  0069d	8d 45 c0	 lea	 eax, DWORD PTR $T39[ebp]
  006a0	50		 push	 eax
  006a1	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  006a7	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  006ac	8b 55 d4	 mov	 edx, DWORD PTR $T39[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 194  : 	TextFileLoader.GetTokenFloat("bombrange",&m_fBombRange);

  006af	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  006b3	83 fa 10	 cmp	 edx, 16			; 00000010H
  006b6	72 2c		 jb	 SHORT $LN994@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006b8	8b 4d c0	 mov	 ecx, DWORD PTR $T39[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  006bb	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006bc	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  006be	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  006c4	72 14		 jb	 SHORT $LN1004@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  006c6	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  006c9	83 c2 23	 add	 edx, 35			; 00000023H
  006cc	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  006ce	83 c0 fc	 add	 eax, -4			; fffffffcH
  006d1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  006d4	0f 87 46 0d 00
	00		 ja	 $LN1977@LoadScript
$LN1004@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  006da	52		 push	 edx
  006db	51		 push	 ecx
  006dc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006e1	83 c4 08	 add	 esp, 8
$LN994@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  006e4	6a 0a		 push	 10			; 0000000aH

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  006e6	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T38[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  006ed	8d 4d c0	 lea	 ecx, DWORD PTR $T38[ebp]
  006f0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JPKFDMHA@bombeffect@

; 4562 :         _My_data._Mysize = 0;

  006f5	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T38[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  006fc	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T38[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00703	c6 45 c0 00	 mov	 BYTE PTR $T38[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00707	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 198  : 	if (!TextFileLoader.GetTokenString("bombeffect",&m_strBombEffectName))

  0070c	8d 77 40	 lea	 esi, DWORD PTR [edi+64]
  0070f	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00713	56		 push	 esi
  00714	8d 45 c0	 lea	 eax, DWORD PTR $T38[ebp]
  00717	50		 push	 eax
  00718	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0071e	e8 00 00 00 00	 call	 ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00723	8b 55 d4	 mov	 edx, DWORD PTR $T38[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 198  : 	if (!TextFileLoader.GetTokenString("bombeffect",&m_strBombEffectName))

  00726	85 c0		 test	 eax, eax
  00728	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0072c	0f 94 c0	 sete	 al
  0072f	88 85 df fe ff
	ff		 mov	 BYTE PTR $T11[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00735	83 fa 10	 cmp	 edx, 16			; 00000010H
  00738	72 32		 jb	 SHORT $LN1037@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0073a	8b 4d c0	 mov	 ecx, DWORD PTR $T38[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0073d	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0073e	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00740	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00746	72 14		 jb	 SHORT $LN1047@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00748	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0074b	83 c2 23	 add	 edx, 35			; 00000023H
  0074e	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00750	83 c0 fc	 add	 eax, -4			; fffffffcH
  00753	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00756	0f 87 c9 0c 00
	00		 ja	 $LN1978@LoadScript
$LN1047@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0075c	52		 push	 edx
  0075d	51		 push	 ecx
  0075e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00763	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T11[ebp]
  00769	83 c4 08	 add	 esp, 8
$LN1037@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 198  : 	if (!TextFileLoader.GetTokenString("bombeffect",&m_strBombEffectName))

  0076c	84 c0		 test	 al, al
  0076e	74 10		 je	 SHORT $LN16@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00770	6a 00		 push	 0
  00772	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00777	8b ce		 mov	 ecx, esi
  00779	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 201  : 	}

  0077e	eb 6b		 jmp	 SHORT $LN18@LoadScript
$LN16@LoadScript:

; 202  : 	else if (!m_strBombEffectName.empty())

  00780	83 7f 50 00	 cmp	 DWORD PTR [edi+80], 0
  00784	74 65		 je	 SHORT $LN18@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00786	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0078a	8b c6		 mov	 eax, esi
  0078c	72 02		 jb	 SHORT $LN1956@LoadScript

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0078e	8b 06		 mov	 eax, DWORD PTR [esi]
$LN1956@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 204  : 		if (!IsGlobalFileName(m_strBombEffectName.c_str()))

  00790	50		 push	 eax
  00791	e8 00 00 00 00	 call	 ?IsGlobalFileName@@YA_NPBD@Z ; IsGlobalFileName
  00796	83 c4 04	 add	 esp, 4
  00799	84 c0		 test	 al, al
  0079b	75 32		 jne	 SHORT $LN19@LoadScript

; 205  : 			m_strBombEffectName = GetOnlyPathName(TextFileLoader.GetFileName()) + m_strBombEffectName;

  0079d	56		 push	 esi
  0079e	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  007a4	e8 00 00 00 00	 call	 ?GetFileName@CTextFileLoader@@QAEPBDXZ ; CTextFileLoader::GetFileName
  007a9	50		 push	 eax
  007aa	e8 00 00 00 00	 call	 ?GetOnlyPathName@@YAPBDPBD@Z ; GetOnlyPathName
  007af	83 c4 04	 add	 esp, 4
  007b2	50		 push	 eax
  007b3	8d 45 c0	 lea	 eax, DWORD PTR $T37[ebp]
  007b6	50		 push	 eax
  007b7	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  007bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  007bf	8b ce		 mov	 ecx, esi
  007c1	50		 push	 eax
  007c2	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  007c7	8d 4d c0	 lea	 ecx, DWORD PTR $T37[ebp]
  007ca	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN19@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  007cf	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  007d3	72 02		 jb	 SHORT $LN1070@LoadScript

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  007d5	8b 36		 mov	 esi, DWORD PTR [esi]
$LN1070@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 206  : 		CEffectManager::Instance().RegisterEffect2(m_strBombEffectName.c_str(),&m_dwBombEffectID);

  007d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  007dd	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  007e0	6a 00		 push	 0
  007e2	6a 00		 push	 0
  007e4	50		 push	 eax
  007e5	56		 push	 esi
  007e6	e8 00 00 00 00	 call	 ?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N0@Z ; CEffectManager::RegisterEffect2
$LN18@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  007eb	6a 0a		 push	 10			; 0000000aH

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  007ed	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T36[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  007f4	8d 4d c0	 lea	 ecx, DWORD PTR $T36[ebp]
  007f7	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PGFICFIL@homingflag@

; 4562 :         _My_data._Mysize = 0;

  007fc	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00803	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T36[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0080a	c6 45 c0 00	 mov	 BYTE PTR $T36[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0080e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 209  : 	if (!TextFileLoader.GetTokenInteger("homingflag", &temp))

  00813	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  00819	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0081d	50		 push	 eax
  0081e	8d 45 c0	 lea	 eax, DWORD PTR $T36[ebp]
  00821	50		 push	 eax
  00822	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00828	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0082d	8b 55 d4	 mov	 edx, DWORD PTR $T36[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 209  : 	if (!TextFileLoader.GetTokenInteger("homingflag", &temp))

  00830	85 c0		 test	 eax, eax
  00832	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00836	0f 94 c0	 sete	 al
  00839	88 85 df fe ff
	ff		 mov	 BYTE PTR $T10[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0083f	83 fa 10	 cmp	 edx, 16			; 00000010H
  00842	72 32		 jb	 SHORT $LN1102@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00844	8b 4d c0	 mov	 ecx, DWORD PTR $T36[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00847	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00848	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0084a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00850	72 14		 jb	 SHORT $LN1112@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00852	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00855	83 c2 23	 add	 edx, 35			; 00000023H
  00858	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0085a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0085d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00860	0f 87 c4 0b 00
	00		 ja	 $LN1979@LoadScript
$LN1112@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00866	52		 push	 edx
  00867	51		 push	 ecx
  00868	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0086d	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T10[ebp]
  00873	83 c4 08	 add	 esp, 8
$LN1102@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 209  : 	if (!TextFileLoader.GetTokenInteger("homingflag", &temp))

  00876	84 c0		 test	 al, al
  00878	74 04		 je	 SHORT $LN20@LoadScript

; 210  : 		m_bIsHoming = false;

  0087a	32 c0		 xor	 al, al
  0087c	eb 0a		 jmp	 SHORT $LN21@LoadScript
$LN20@LoadScript:

; 211  : 	else
; 212  : 		m_bIsHoming = temp?true:false;

  0087e	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _temp$[ebp], 0
  00885	0f 95 c0	 setne	 al
$LN21@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00888	88 47 5c	 mov	 BYTE PTR [edi+92], al

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0088b	8d 4d c0	 lea	 ecx, DWORD PTR $T35[ebp]
  0088e	6a 0f		 push	 15			; 0000000fH

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00890	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T35[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00897	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BAKAIINA@homingstarttime@

; 4562 :         _My_data._Mysize = 0;

  0089c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T35[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  008a3	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T35[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  008aa	c6 45 c0 00	 mov	 BYTE PTR $T35[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  008ae	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 214  : 	if (!TextFileLoader.GetTokenFloat("homingstarttime",&m_fHomingStartTime))

  008b3	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  008b6	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  008ba	56		 push	 esi
  008bb	8d 45 c0	 lea	 eax, DWORD PTR $T35[ebp]
  008be	50		 push	 eax
  008bf	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  008c5	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  008ca	8b 55 d4	 mov	 edx, DWORD PTR $T35[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 214  : 	if (!TextFileLoader.GetTokenFloat("homingstarttime",&m_fHomingStartTime))

  008cd	85 c0		 test	 eax, eax
  008cf	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  008d3	0f 94 c0	 sete	 al
  008d6	88 85 df fe ff
	ff		 mov	 BYTE PTR $T9[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  008dc	83 fa 10	 cmp	 edx, 16			; 00000010H
  008df	72 32		 jb	 SHORT $LN1145@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008e1	8b 4d c0	 mov	 ecx, DWORD PTR $T35[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  008e4	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008e5	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  008e7	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  008ed	72 14		 jb	 SHORT $LN1155@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  008ef	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  008f2	83 c2 23	 add	 edx, 35			; 00000023H
  008f5	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  008f7	83 c0 fc	 add	 eax, -4			; fffffffcH
  008fa	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  008fd	0f 87 2c 0b 00
	00		 ja	 $LN1980@LoadScript
$LN1155@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00903	52		 push	 edx
  00904	51		 push	 ecx
  00905	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0090a	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T9[ebp]
  00910	83 c4 08	 add	 esp, 8
$LN1145@LoadScript:
  00913	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 214  : 	if (!TextFileLoader.GetTokenFloat("homingstarttime",&m_fHomingStartTime))

  00916	0f 29 45 c0	 movaps	 XMMWORD PTR tv8274[ebp], xmm0
  0091a	84 c0		 test	 al, al
  0091c	74 06		 je	 SHORT $LN22@LoadScript

; 215  : 		m_fHomingStartTime = 0.0f;

  0091e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN22@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00924	6a 0e		 push	 14			; 0000000eH

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00926	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T32[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0092d	8d 4d a8	 lea	 ecx, DWORD PTR $T32[ebp]
  00930	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MGJJCPHI@homingmaxangle@

; 4562 :         _My_data._Mysize = 0;

  00935	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T32[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0093c	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T32[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00943	c6 45 a8 00	 mov	 BYTE PTR $T32[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00947	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 217  : 	if (!TextFileLoader.GetTokenFloat("homingmaxangle",&m_fHomingMaxAngle))

  0094c	8d 77 60	 lea	 esi, DWORD PTR [edi+96]
  0094f	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00953	56		 push	 esi
  00954	8d 45 a8	 lea	 eax, DWORD PTR $T32[ebp]
  00957	50		 push	 eax
  00958	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0095e	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00963	8b 55 bc	 mov	 edx, DWORD PTR $T32[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 217  : 	if (!TextFileLoader.GetTokenFloat("homingmaxangle",&m_fHomingMaxAngle))

  00966	85 c0		 test	 eax, eax
  00968	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0096c	0f 94 c0	 sete	 al
  0096f	88 85 df fe ff
	ff		 mov	 BYTE PTR $T8[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00975	83 fa 10	 cmp	 edx, 16			; 00000010H
  00978	72 32		 jb	 SHORT $LN1188@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0097a	8b 4d a8	 mov	 ecx, DWORD PTR $T32[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0097d	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0097e	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00980	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00986	72 14		 jb	 SHORT $LN1198@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00988	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0098b	83 c2 23	 add	 edx, 35			; 00000023H
  0098e	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00990	83 c0 fc	 add	 eax, -4			; fffffffcH
  00993	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00996	0f 87 98 0a 00
	00		 ja	 $LN1981@LoadScript
$LN1198@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0099c	52		 push	 edx
  0099d	51		 push	 ecx
  0099e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  009a3	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T8[ebp]
  009a9	83 c4 08	 add	 esp, 8
$LN1188@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 217  : 	if (!TextFileLoader.GetTokenFloat("homingmaxangle",&m_fHomingMaxAngle))

  009ac	84 c0		 test	 al, al
  009ae	74 06		 je	 SHORT $LN23@LoadScript

; 218  : 		m_fHomingMaxAngle = 0.0f;

  009b0	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN23@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  009b6	6a 05		 push	 5

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  009b8	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T31[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  009bf	8d 4d a8	 lea	 ecx, DWORD PTR $T31[ebp]
  009c2	68 00 00 00 00	 push	 OFFSET ??_C@_05CCGOGOBM@range@

; 4562 :         _My_data._Mysize = 0;

  009c7	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T31[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  009ce	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T31[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  009d5	c6 45 a8 00	 mov	 BYTE PTR $T31[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  009d9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 220  : 	if (!TextFileLoader.GetTokenFloat("range",&m_fRange))

  009de	8d 47 74	 lea	 eax, DWORD PTR [edi+116]
  009e1	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  009e5	50		 push	 eax
  009e6	8d 45 a8	 lea	 eax, DWORD PTR $T31[ebp]
  009e9	50		 push	 eax
  009ea	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  009f0	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  009f5	8b 55 bc	 mov	 edx, DWORD PTR $T31[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 220  : 	if (!TextFileLoader.GetTokenFloat("range",&m_fRange))

  009f8	85 c0		 test	 eax, eax
  009fa	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  009fe	0f 94 c0	 sete	 al
  00a01	88 85 df fe ff
	ff		 mov	 BYTE PTR $T7[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00a07	83 fa 10	 cmp	 edx, 16			; 00000010H
  00a0a	72 32		 jb	 SHORT $LN1231@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a0c	8b 4d a8	 mov	 ecx, DWORD PTR $T31[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00a0f	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a10	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00a12	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00a18	72 14		 jb	 SHORT $LN1241@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00a1a	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00a1d	83 c2 23	 add	 edx, 35			; 00000023H
  00a20	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00a22	83 c0 fc	 add	 eax, -4			; fffffffcH
  00a25	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00a28	0f 87 0b 0a 00
	00		 ja	 $LN1982@LoadScript
$LN1241@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a2e	52		 push	 edx
  00a2f	51		 push	 ecx
  00a30	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a35	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T7[ebp]
  00a3b	83 c4 08	 add	 esp, 8
$LN1231@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 220  : 	if (!TextFileLoader.GetTokenFloat("range",&m_fRange))

  00a3e	84 c0		 test	 al, al
  00a40	0f 85 70 09 00
	00		 jne	 $LN72@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00a46	6a 0c		 push	 12			; 0000000cH

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00a48	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T30[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00a4f	8d 4d a8	 lea	 ecx, DWORD PTR $T30[ebp]
  00a52	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OKFAMOHD@acceleration@

; 4562 :         _My_data._Mysize = 0;

  00a57	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T30[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00a5e	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T30[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00a65	88 45 a8	 mov	 BYTE PTR $T30[ebp], al

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00a68	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 223  : 	if (!TextFileLoader.GetTokenVector3("acceleration",&m_v3Accel))

  00a6d	8d 77 78	 lea	 esi, DWORD PTR [edi+120]
  00a70	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00a74	56		 push	 esi
  00a75	8d 45 a8	 lea	 eax, DWORD PTR $T30[ebp]
  00a78	50		 push	 eax
  00a79	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00a7f	e8 00 00 00 00	 call	 ?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenVector3
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00a84	8b 55 bc	 mov	 edx, DWORD PTR $T30[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 223  : 	if (!TextFileLoader.GetTokenVector3("acceleration",&m_v3Accel))

  00a87	85 c0		 test	 eax, eax
  00a89	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00a8d	0f 94 c0	 sete	 al
  00a90	88 85 df fe ff
	ff		 mov	 BYTE PTR $T6[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00a96	83 fa 10	 cmp	 edx, 16			; 00000010H
  00a99	72 32		 jb	 SHORT $LN1274@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a9b	8b 4d a8	 mov	 ecx, DWORD PTR $T30[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00a9e	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a9f	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00aa1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00aa7	72 14		 jb	 SHORT $LN1284@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00aa9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00aac	83 c2 23	 add	 edx, 35			; 00000023H
  00aaf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00ab1	83 c0 fc	 add	 eax, -4			; fffffffcH
  00ab4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00ab7	0f 87 81 09 00
	00		 ja	 $LN1983@LoadScript
$LN1284@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00abd	52		 push	 edx
  00abe	51		 push	 ecx
  00abf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00ac4	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T6[ebp]
  00aca	83 c4 08	 add	 esp, 8
$LN1274@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 223  : 	if (!TextFileLoader.GetTokenVector3("acceleration",&m_v3Accel))

  00acd	84 c0		 test	 al, al
  00acf	74 18		 je	 SHORT $LN25@LoadScript

; 224  : 		m_v3Accel = D3DXVECTOR3(0.0f,0.0f,0.0f);

  00ad1	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR tv8274[ebp]
  00ad5	0f 14 c0	 unpcklps xmm0, xmm0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00ad8	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T33[ebp+8], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 224  : 		m_v3Accel = D3DXVECTOR3(0.0f,0.0f,0.0f);

  00adf	8b 45 bc	 mov	 eax, DWORD PTR $T33[ebp+8]
  00ae2	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00ae6	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN25@LoadScript:

; 227  : 	for(i=0;i<TextFileLoader.GetChildNodeCount();i++)

  00ae9	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00aef	33 ff		 xor	 edi, edi
  00af1	e8 00 00 00 00	 call	 ?GetChildNodeCount@CTextFileLoader@@QAEKXZ ; CTextFileLoader::GetChildNodeCount
  00af6	85 c0		 test	 eax, eax
  00af8	0f 84 aa 08 00
	00		 je	 $LN1957@LoadScript
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\TextFileLoader.h

; 49   : 			CGotoChild(CTextFileLoader * pOwner, DWORD dwIndex) : m_pOwner(pOwner)

  00afe	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _TextFileLoader$[ebp]
  00b04	89 85 cc fe ff
	ff		 mov	 DWORD PTR _GotoChild$2[ebp], eax
  00b0a	66 0f 1f 44 00
	00		 npad	 6
$LL4@LoadScript:

; 50   : 			{
; 51   : 				m_pOwner->SetChildNode(dwIndex);

  00b10	57		 push	 edi
  00b11	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00b17	e8 00 00 00 00	 call	 ?SetChildNode@CTextFileLoader@@QAEHK@Z ; CTextFileLoader::SetChildNode
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00b1c	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _strNodeName$34[ebp], 0

; 4562 :         _My_data._Mysize = 0;

  00b23	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strNodeName$34[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00b2a	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strNodeName$34[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00b31	c6 45 c0 00	 mov	 BYTE PTR _strNodeName$34[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 233  : 		TextFileLoader.GetCurrentNodeName(&strNodeName);

  00b35	8d 45 c0	 lea	 eax, DWORD PTR _strNodeName$34[ebp]
  00b38	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  00b3c	50		 push	 eax
  00b3d	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00b43	e8 00 00 00 00	 call	 ?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::GetCurrentNodeName
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00b48	83 7d d4 10	 cmp	 DWORD PTR _strNodeName$34[ebp+20], 16 ; 00000010H
  00b4c	8d 4d c0	 lea	 ecx, DWORD PTR _strNodeName$34[ebp]
  00b4f	0f 43 4d c0	 cmovae	 ecx, DWORD PTR _strNodeName$34[ebp]

; 571  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00b53	83 7d d0 0a	 cmp	 DWORD PTR _strNodeName$34[ebp+16], 10 ; 0000000aH
  00b57	75 4f		 jne	 SHORT $LN1319@LoadScript

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  00b59	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@NFEBBADL@attachdata@
  00b5e	be 06 00 00 00	 mov	 esi, 6
$LL1961@LoadScript:
  00b63	8b 01		 mov	 eax, DWORD PTR [ecx]
  00b65	3b 02		 cmp	 eax, DWORD PTR [edx]
  00b67	75 0b		 jne	 SHORT $LN1960@LoadScript
  00b69	83 c1 04	 add	 ecx, 4
  00b6c	83 c2 04	 add	 edx, 4
  00b6f	83 ee 04	 sub	 esi, 4
  00b72	73 ef		 jae	 SHORT $LL1961@LoadScript
$LN1960@LoadScript:
  00b74	8a 01		 mov	 al, BYTE PTR [ecx]
  00b76	3a 02		 cmp	 al, BYTE PTR [edx]
  00b78	75 21		 jne	 SHORT $LN1962@LoadScript
  00b7a	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00b7d	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00b80	75 19		 jne	 SHORT $LN1962@LoadScript
  00b82	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00b85	74 10		 je	 SHORT $LN1959@LoadScript
  00b87	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00b8a	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  00b8d	75 0c		 jne	 SHORT $LN1962@LoadScript
  00b8f	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00b92	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00b95	75 04		 jne	 SHORT $LN1962@LoadScript
$LN1959@LoadScript:
  00b97	33 c0		 xor	 eax, eax
  00b99	eb 05		 jmp	 SHORT $LN1963@LoadScript
$LN1962@LoadScript:
  00b9b	1b c0		 sbb	 eax, eax
  00b9d	83 c8 01	 or	 eax, 1
$LN1963@LoadScript:

; 571  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00ba0	85 c0		 test	 eax, eax
  00ba2	75 04		 jne	 SHORT $LN1319@LoadScript
  00ba4	b0 01		 mov	 al, 1
  00ba6	eb 02		 jmp	 SHORT $LN1320@LoadScript
$LN1319@LoadScript:
  00ba8	32 c0		 xor	 al, al
$LN1320@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 235  : 		if (strNodeName=="attachdata")

  00baa	84 c0		 test	 al, al
  00bac	0f 84 67 07 00
	00		 je	 $LN26@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00bb2	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fad$16[ebp+8], 0

; 4562 :         _My_data._Mysize = 0;

  00bbc	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fad$16[ebp+24], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00bc6	c7 85 7c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR _fad$16[ebp+28], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00bd0	c6 85 68 ff ff
	ff 00		 mov	 BYTE PTR _fad$16[ebp+8], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00bd7	6a 04		 push	 4

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00bd9	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T29[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00be0	8d 4d a8	 lea	 ecx, DWORD PTR $T29[ebp]
  00be3	68 00 00 00 00	 push	 OFFSET ??_C@_04GPMDFGEJ@type@
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 237  : 			TFlyingAttachData fad;

  00be8	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00bec	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T29[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00bf3	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T29[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00bfa	c6 45 a8 00	 mov	 BYTE PTR $T29[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00bfe	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 239  : 			if (!TextFileLoader.GetTokenInteger("type",&fad.iType))

  00c03	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _fad$16[ebp]
  00c09	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  00c0d	50		 push	 eax
  00c0e	8d 45 a8	 lea	 eax, DWORD PTR $T29[ebp]
  00c11	50		 push	 eax
  00c12	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00c18	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00c1d	8b 55 bc	 mov	 edx, DWORD PTR $T29[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 239  : 			if (!TextFileLoader.GetTokenInteger("type",&fad.iType))

  00c20	85 c0		 test	 eax, eax
  00c22	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  00c26	0f 94 c0	 sete	 al
  00c29	88 85 df fe ff
	ff		 mov	 BYTE PTR $T5[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00c2f	83 fa 10	 cmp	 edx, 16			; 00000010H
  00c32	72 32		 jb	 SHORT $LN1367@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c34	8b 4d a8	 mov	 ecx, DWORD PTR $T29[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00c37	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c38	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00c3a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00c40	72 14		 jb	 SHORT $LN1377@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00c42	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00c45	83 c2 23	 add	 edx, 35			; 00000023H
  00c48	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00c4a	83 c0 fc	 add	 eax, -4			; fffffffcH
  00c4d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00c50	0f 87 98 07 00
	00		 ja	 $LN1374@LoadScript
$LN1377@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00c56	52		 push	 edx
  00c57	51		 push	 ecx
  00c58	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00c5d	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T5[ebp]
  00c63	83 c4 08	 add	 esp, 8
$LN1367@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 239  : 			if (!TextFileLoader.GetTokenInteger("type",&fad.iType))

  00c66	84 c0		 test	 al, al
  00c68	74 5e		 je	 SHORT $LN28@LoadScript

; 240  : 				continue;

  00c6a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _fad$16[ebp]
  00c70	e8 00 00 00 00	 call	 ??1TFlyingAttachData@CFlyingData@@QAE@XZ
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00c75	8b 55 d4	 mov	 edx, DWORD PTR _strNodeName$34[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 240  : 				continue;

  00c78	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00c7c	83 fa 10	 cmp	 edx, 16			; 00000010H
  00c7f	72 2c		 jb	 SHORT $LN1394@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c81	8b 4d c0	 mov	 ecx, DWORD PTR _strNodeName$34[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00c84	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00c85	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00c87	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00c8d	72 14		 jb	 SHORT $LN1404@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00c8f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00c92	83 c2 23	 add	 edx, 35			; 00000023H
  00c95	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00c97	83 c0 fc	 add	 eax, -4			; fffffffcH
  00c9a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00c9d	0f 87 4b 07 00
	00		 ja	 $LN1374@LoadScript
$LN1404@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00ca3	52		 push	 edx
  00ca4	51		 push	 ecx
  00ca5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00caa	83 c4 08	 add	 esp, 8
$LN1394@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00cad	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strNodeName$34[ebp+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00cb4	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strNodeName$34[ebp+20], 15 ; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00cbb	c6 45 c0 00	 mov	 BYTE PTR _strNodeName$34[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\TextFileLoader.h

; 54   : 			{

  00cbf	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 240  : 				continue;

  00cc3	e9 bd 06 00 00	 jmp	 $LN1966@LoadScript
$LN28@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00cc8	6a 07		 push	 7

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00cca	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T28[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00cd1	8d 4d a8	 lea	 ecx, DWORD PTR $T28[ebp]
  00cd4	68 00 00 00 00	 push	 OFFSET ??_C@_07LKHMKNJJ@flytype@

; 4562 :         _My_data._Mysize = 0;

  00cd9	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T28[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00ce0	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T28[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00ce7	c6 45 a8 00	 mov	 BYTE PTR $T28[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00ceb	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 241  : 			TextFileLoader.GetTokenInteger("flytype",&fad.iFlyType);

  00cf0	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _fad$16[ebp+4]
  00cf6	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  00cfa	50		 push	 eax
  00cfb	8d 45 a8	 lea	 eax, DWORD PTR $T28[ebp]
  00cfe	50		 push	 eax
  00cff	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00d05	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00d0a	8b 55 bc	 mov	 edx, DWORD PTR $T28[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 241  : 			TextFileLoader.GetTokenInteger("flytype",&fad.iFlyType);

  00d0d	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00d11	83 fa 10	 cmp	 edx, 16			; 00000010H
  00d14	72 2c		 jb	 SHORT $LN1440@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00d16	8b 4d a8	 mov	 ecx, DWORD PTR $T28[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00d19	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00d1a	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00d1c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00d22	72 14		 jb	 SHORT $LN1450@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00d24	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00d27	83 c2 23	 add	 edx, 35			; 00000023H
  00d2a	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00d2c	83 c0 fc	 add	 eax, -4			; fffffffcH
  00d2f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00d32	0f 87 b6 06 00
	00		 ja	 $LN1374@LoadScript
$LN1450@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00d38	52		 push	 edx
  00d39	51		 push	 ecx
  00d3a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00d3f	83 c4 08	 add	 esp, 8
$LN1440@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00d42	6a 0a		 push	 10			; 0000000aH

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00d44	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T27[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00d4b	8d 4d a8	 lea	 ecx, DWORD PTR $T27[ebp]
  00d4e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BMGMFMHI@attachfile@

; 4562 :         _My_data._Mysize = 0;

  00d53	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T27[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00d5a	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T27[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00d61	c6 45 a8 00	 mov	 BYTE PTR $T27[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00d65	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 242  : 			if (!TextFileLoader.GetTokenString("attachfile",&fad.strFilename))

  00d6a	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _fad$16[ebp+8]
  00d70	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  00d74	50		 push	 eax
  00d75	8d 45 a8	 lea	 eax, DWORD PTR $T27[ebp]
  00d78	50		 push	 eax
  00d79	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00d7f	e8 00 00 00 00	 call	 ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00d84	8b 55 bc	 mov	 edx, DWORD PTR $T27[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 242  : 			if (!TextFileLoader.GetTokenString("attachfile",&fad.strFilename))

  00d87	85 c0		 test	 eax, eax
  00d89	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  00d8d	0f 94 c0	 sete	 al
  00d90	88 85 df fe ff
	ff		 mov	 BYTE PTR $T4[ebp], al
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00d96	83 fa 10	 cmp	 edx, 16			; 00000010H
  00d99	72 32		 jb	 SHORT $LN1483@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00d9b	8b 4d a8	 mov	 ecx, DWORD PTR $T27[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00d9e	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00d9f	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00da1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00da7	72 14		 jb	 SHORT $LN1493@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00da9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00dac	83 c2 23	 add	 edx, 35			; 00000023H
  00daf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00db1	83 c0 fc	 add	 eax, -4			; fffffffcH
  00db4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00db7	0f 87 31 06 00
	00		 ja	 $LN1374@LoadScript
$LN1493@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00dbd	52		 push	 edx
  00dbe	51		 push	 ecx
  00dbf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00dc4	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  00dca	83 c4 08	 add	 esp, 8
$LN1483@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 242  : 			if (!TextFileLoader.GetTokenString("attachfile",&fad.strFilename))

  00dcd	84 c0		 test	 al, al
  00dcf	74 17		 je	 SHORT $LN29@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00dd1	6a 00		 push	 0
  00dd3	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00dd8	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _fad$16[ebp+8]
  00dde	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 245  : 			}

  00de3	e9 90 00 00 00	 jmp	 $LN31@LoadScript
$LN29@LoadScript:

; 246  : 			else if (!fad.strFilename.empty())

  00de8	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _fad$16[ebp+24], 0
  00def	0f 84 83 00 00
	00		 je	 $LN31@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00df5	83 bd 7c ff ff
	ff 10		 cmp	 DWORD PTR _fad$16[ebp+28], 16 ; 00000010H
  00dfc	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _fad$16[ebp+8]
  00e02	0f 43 85 68 ff
	ff ff		 cmovae	 eax, DWORD PTR _fad$16[ebp+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 248  : 				if (!IsGlobalFileName(fad.strFilename.c_str()))

  00e09	50		 push	 eax
  00e0a	e8 00 00 00 00	 call	 ?IsGlobalFileName@@YA_NPBD@Z ; IsGlobalFileName
  00e0f	83 c4 04	 add	 esp, 4
  00e12	84 c0		 test	 al, al
  00e14	75 3c		 jne	 SHORT $LN32@LoadScript

; 249  : 					fad.strFilename = GetOnlyPathName(TextFileLoader.GetFileName()) + fad.strFilename;

  00e16	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _fad$16[ebp+8]
  00e1c	50		 push	 eax
  00e1d	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00e23	e8 00 00 00 00	 call	 ?GetFileName@CTextFileLoader@@QAEPBDXZ ; CTextFileLoader::GetFileName
  00e28	50		 push	 eax
  00e29	e8 00 00 00 00	 call	 ?GetOnlyPathName@@YAPBDPBD@Z ; GetOnlyPathName
  00e2e	83 c4 04	 add	 esp, 4
  00e31	50		 push	 eax
  00e32	8d 45 a8	 lea	 eax, DWORD PTR $T26[ebp]
  00e35	50		 push	 eax
  00e36	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00e3b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e3e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _fad$16[ebp+8]
  00e44	50		 push	 eax
  00e45	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00e4a	8d 4d a8	 lea	 ecx, DWORD PTR $T26[ebp]
  00e4d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN32@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00e52	83 bd 7c ff ff
	ff 10		 cmp	 DWORD PTR _fad$16[ebp+28], 16 ; 00000010H
  00e59	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _fad$16[ebp+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 250  : 				CEffectManager::Instance().RegisterEffect(fad.strFilename.c_str());

  00e5f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00e65	0f 43 85 68 ff
	ff ff		 cmovae	 eax, DWORD PTR _fad$16[ebp+8]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 250  : 				CEffectManager::Instance().RegisterEffect(fad.strFilename.c_str());

  00e6c	6a 00		 push	 0
  00e6e	6a 00		 push	 0
  00e70	6a 00		 push	 0
  00e72	50		 push	 eax
  00e73	e8 00 00 00 00	 call	 ?RegisterEffect@CEffectManager@@QAEHPBD_N10@Z ; CEffectManager::RegisterEffect
$LN31@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00e78	6a 08		 push	 8

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00e7a	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T25[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00e81	8d 4d a8	 lea	 ecx, DWORD PTR $T25[ebp]
  00e84	68 00 00 00 00	 push	 OFFSET ??_C@_08MNMLIJJL@tailflag@

; 4562 :         _My_data._Mysize = 0;

  00e89	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T25[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00e90	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T25[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00e97	c6 45 a8 00	 mov	 BYTE PTR $T25[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00e9b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 253  : 			TextFileLoader.GetTokenInteger("tailflag",&temp);

  00ea0	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  00ea6	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  00eaa	50		 push	 eax
  00eab	8d 45 a8	 lea	 eax, DWORD PTR $T25[ebp]
  00eae	50		 push	 eax
  00eaf	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00eb5	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00eba	8b 55 bc	 mov	 edx, DWORD PTR $T25[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 253  : 			TextFileLoader.GetTokenInteger("tailflag",&temp);

  00ebd	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00ec1	83 fa 10	 cmp	 edx, 16			; 00000010H
  00ec4	72 2c		 jb	 SHORT $LN1548@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00ec6	8b 4d a8	 mov	 ecx, DWORD PTR $T25[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00ec9	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00eca	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00ecc	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00ed2	72 14		 jb	 SHORT $LN1558@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00ed4	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00ed7	83 c2 23	 add	 edx, 35			; 00000023H
  00eda	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00edc	83 c0 fc	 add	 eax, -4			; fffffffcH
  00edf	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00ee2	0f 87 06 05 00
	00		 ja	 $LN1374@LoadScript
$LN1558@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00ee8	52		 push	 edx
  00ee9	51		 push	 ecx
  00eea	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00eef	83 c4 08	 add	 esp, 8
$LN1548@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 254  : 			if (temp)

  00ef2	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _temp$[ebp], 0
  00ef9	0f 84 f0 01 00
	00		 je	 $LN33@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00eff	6a 09		 push	 9

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00f01	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T24[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f08	8d 4d a8	 lea	 ecx, DWORD PTR $T24[ebp]
  00f0b	68 00 00 00 00	 push	 OFFSET ??_C@_09JBANPIDH@tailcolor@
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 256  : 				fad.bHasTail = true;

  00f10	c6 45 80 01	 mov	 BYTE PTR _fad$16[ebp+32], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00f14	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T24[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00f1b	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T24[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00f22	c6 45 a8 00	 mov	 BYTE PTR $T24[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f26	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 257  : 				TextFileLoader.GetTokenDoubleWord("tailcolor",&fad.dwTailColor);

  00f2b	8d 45 84	 lea	 eax, DWORD PTR _fad$16[ebp+36]
  00f2e	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  00f32	50		 push	 eax
  00f33	8d 45 a8	 lea	 eax, DWORD PTR $T24[ebp]
  00f36	50		 push	 eax
  00f37	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00f3d	e8 00 00 00 00	 call	 ?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z ; CTextFileLoader::GetTokenDoubleWord
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00f42	8b 55 bc	 mov	 edx, DWORD PTR $T24[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 257  : 				TextFileLoader.GetTokenDoubleWord("tailcolor",&fad.dwTailColor);

  00f45	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00f49	83 fa 10	 cmp	 edx, 16			; 00000010H
  00f4c	72 2c		 jb	 SHORT $LN1591@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00f4e	8b 4d a8	 mov	 ecx, DWORD PTR $T24[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00f51	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00f52	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00f54	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00f5a	72 14		 jb	 SHORT $LN1601@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00f5c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00f5f	83 c2 23	 add	 edx, 35			; 00000023H
  00f62	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00f64	83 c0 fc	 add	 eax, -4			; fffffffcH
  00f67	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00f6a	0f 87 7e 04 00
	00		 ja	 $LN1374@LoadScript
$LN1601@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00f70	52		 push	 edx
  00f71	51		 push	 ecx
  00f72	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00f77	83 c4 08	 add	 esp, 8
$LN1591@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f7a	6a 0a		 push	 10			; 0000000aH

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00f7c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T23[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f83	8d 4d a8	 lea	 ecx, DWORD PTR $T23[ebp]
  00f86	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PJCCBNOK@taillength@

; 4562 :         _My_data._Mysize = 0;

  00f8b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T23[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00f92	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T23[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00f99	c6 45 a8 00	 mov	 BYTE PTR $T23[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00f9d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 258  : 				TextFileLoader.GetTokenFloat("taillength",&fad.fTailLength);

  00fa2	8d 45 88	 lea	 eax, DWORD PTR _fad$16[ebp+40]
  00fa5	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  00fa9	50		 push	 eax
  00faa	8d 45 a8	 lea	 eax, DWORD PTR $T23[ebp]
  00fad	50		 push	 eax
  00fae	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00fb4	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00fb9	8b 55 bc	 mov	 edx, DWORD PTR $T23[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 258  : 				TextFileLoader.GetTokenFloat("taillength",&fad.fTailLength);

  00fbc	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00fc0	83 fa 10	 cmp	 edx, 16			; 00000010H
  00fc3	72 2c		 jb	 SHORT $LN1634@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00fc5	8b 4d a8	 mov	 ecx, DWORD PTR $T23[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00fc8	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00fc9	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00fcb	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00fd1	72 14		 jb	 SHORT $LN1644@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00fd3	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00fd6	83 c2 23	 add	 edx, 35			; 00000023H
  00fd9	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00fdb	83 c0 fc	 add	 eax, -4			; fffffffcH
  00fde	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00fe1	0f 87 07 04 00
	00		 ja	 $LN1374@LoadScript
$LN1644@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00fe7	52		 push	 edx
  00fe8	51		 push	 ecx
  00fe9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00fee	83 c4 08	 add	 esp, 8
$LN1634@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00ff1	6a 08		 push	 8

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00ff3	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T22[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00ffa	8d 4d a8	 lea	 ecx, DWORD PTR $T22[ebp]
  00ffd	68 00 00 00 00	 push	 OFFSET ??_C@_08HAFAEPEI@tailsize@

; 4562 :         _My_data._Mysize = 0;

  01002	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T22[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  01009	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T22[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  01010	c6 45 a8 00	 mov	 BYTE PTR $T22[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01014	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 259  : 				TextFileLoader.GetTokenFloat("tailsize",&fad.fTailSize);

  01019	8d 45 8c	 lea	 eax, DWORD PTR _fad$16[ebp+44]
  0101c	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  01020	50		 push	 eax
  01021	8d 45 a8	 lea	 eax, DWORD PTR $T22[ebp]
  01024	50		 push	 eax
  01025	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0102b	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  01030	8b 55 bc	 mov	 edx, DWORD PTR $T22[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 259  : 				TextFileLoader.GetTokenFloat("tailsize",&fad.fTailSize);

  01033	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  01037	83 fa 10	 cmp	 edx, 16			; 00000010H
  0103a	72 2c		 jb	 SHORT $LN1677@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0103c	8b 4d a8	 mov	 ecx, DWORD PTR $T22[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0103f	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01040	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  01042	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  01048	72 14		 jb	 SHORT $LN1687@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0104a	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0104d	83 c2 23	 add	 edx, 35			; 00000023H
  01050	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  01052	83 c0 fc	 add	 eax, -4			; fffffffcH
  01055	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  01058	0f 87 90 03 00
	00		 ja	 $LN1374@LoadScript
$LN1687@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0105e	52		 push	 edx
  0105f	51		 push	 ecx
  01060	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  01065	83 c4 08	 add	 esp, 8
$LN1677@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01068	6a 0d		 push	 13			; 0000000dH

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0106a	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T21[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01071	8d 4d a8	 lea	 ecx, DWORD PTR $T21[ebp]
  01074	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DNCKGFAO@tailshaperect@

; 4562 :         _My_data._Mysize = 0;

  01079	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  01080	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T21[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  01087	c6 45 a8 00	 mov	 BYTE PTR $T21[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0108b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 260  : 				TextFileLoader.GetTokenInteger("tailshaperect",&temp);

  01090	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  01096	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  0109a	50		 push	 eax
  0109b	8d 45 a8	 lea	 eax, DWORD PTR $T21[ebp]
  0109e	50		 push	 eax
  0109f	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  010a5	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  010aa	8b 55 bc	 mov	 edx, DWORD PTR $T21[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 260  : 				TextFileLoader.GetTokenInteger("tailshaperect",&temp);

  010ad	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  010b1	83 fa 10	 cmp	 edx, 16			; 00000010H
  010b4	72 2c		 jb	 SHORT $LN1720@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  010b6	8b 4d a8	 mov	 ecx, DWORD PTR $T21[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  010b9	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  010ba	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  010bc	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  010c2	72 14		 jb	 SHORT $LN1730@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  010c4	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  010c7	83 c2 23	 add	 edx, 35			; 00000023H
  010ca	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  010cc	83 c0 fc	 add	 eax, -4			; fffffffcH
  010cf	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  010d2	0f 87 16 03 00
	00		 ja	 $LN1374@LoadScript
$LN1730@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  010d8	52		 push	 edx
  010d9	51		 push	 ecx
  010da	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  010df	83 c4 08	 add	 esp, 8
$LN1720@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 261  : 				fad.bRectShape = temp?true:false;

  010e2	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _temp$[ebp], 0
  010e9	0f 95 45 90	 setne	 BYTE PTR _fad$16[ebp+48]

; 262  : 			}

  010ed	eb 04		 jmp	 SHORT $LN34@LoadScript
$LN33@LoadScript:

; 263  : 			else
; 264  : 			{
; 265  : 				fad.bHasTail = false;

  010ef	c6 45 80 00	 mov	 BYTE PTR _fad$16[ebp+32], 0
$LN34@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  010f3	6a 04		 push	 4

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  010f5	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T20[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  010fc	8d 4d a8	 lea	 ecx, DWORD PTR $T20[ebp]
  010ff	68 00 00 00 00	 push	 OFFSET ??_C@_04FBAPEKPH@roll@

; 4562 :         _My_data._Mysize = 0;

  01104	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0110b	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T20[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  01112	c6 45 a8 00	 mov	 BYTE PTR $T20[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01116	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 268  : 			TextFileLoader.GetTokenFloat("roll",&fad.fRoll);

  0111b	8d 45 94	 lea	 eax, DWORD PTR _fad$16[ebp+52]
  0111e	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  01122	50		 push	 eax
  01123	8d 45 a8	 lea	 eax, DWORD PTR $T20[ebp]
  01126	50		 push	 eax
  01127	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0112d	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  01132	8b 55 bc	 mov	 edx, DWORD PTR $T20[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 268  : 			TextFileLoader.GetTokenFloat("roll",&fad.fRoll);

  01135	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  01139	83 fa 10	 cmp	 edx, 16			; 00000010H
  0113c	72 2c		 jb	 SHORT $LN1763@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0113e	8b 4d a8	 mov	 ecx, DWORD PTR $T20[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  01141	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01142	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  01144	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0114a	72 14		 jb	 SHORT $LN1773@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0114c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0114f	83 c2 23	 add	 edx, 35			; 00000023H
  01152	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  01154	83 c0 fc	 add	 eax, -4			; fffffffcH
  01157	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0115a	0f 87 8e 02 00
	00		 ja	 $LN1374@LoadScript
$LN1773@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  01160	52		 push	 edx
  01161	51		 push	 ecx
  01162	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  01167	83 c4 08	 add	 esp, 8
$LN1763@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0116a	6a 08		 push	 8

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0116c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T19[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01173	8d 4d a8	 lea	 ecx, DWORD PTR $T19[ebp]
  01176	68 00 00 00 00	 push	 OFFSET ??_C@_08LHFODBFO@distance@

; 4562 :         _My_data._Mysize = 0;

  0117b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T19[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  01182	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T19[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  01189	c6 45 a8 00	 mov	 BYTE PTR $T19[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0118d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 269  : 			TextFileLoader.GetTokenFloat("distance",&fad.fDistance);

  01192	8d 45 98	 lea	 eax, DWORD PTR _fad$16[ebp+56]
  01195	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  01199	50		 push	 eax
  0119a	8d 45 a8	 lea	 eax, DWORD PTR $T19[ebp]
  0119d	50		 push	 eax
  0119e	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  011a4	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  011a9	8b 55 bc	 mov	 edx, DWORD PTR $T19[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 269  : 			TextFileLoader.GetTokenFloat("distance",&fad.fDistance);

  011ac	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  011b0	83 fa 10	 cmp	 edx, 16			; 00000010H
  011b3	72 2c		 jb	 SHORT $LN1806@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  011b5	8b 4d a8	 mov	 ecx, DWORD PTR $T19[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  011b8	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  011b9	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  011bb	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  011c1	72 14		 jb	 SHORT $LN1816@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  011c3	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  011c6	83 c2 23	 add	 edx, 35			; 00000023H
  011c9	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  011cb	83 c0 fc	 add	 eax, -4			; fffffffcH
  011ce	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  011d1	0f 87 17 02 00
	00		 ja	 $LN1374@LoadScript
$LN1816@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  011d7	52		 push	 edx
  011d8	51		 push	 ecx
  011d9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  011de	83 c4 08	 add	 esp, 8
$LN1806@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  011e1	6a 06		 push	 6

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  011e3	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T18[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  011ea	8d 4d a8	 lea	 ecx, DWORD PTR $T18[ebp]
  011ed	68 00 00 00 00	 push	 OFFSET ??_C@_06FBOEEHNL@period@

; 4562 :         _My_data._Mysize = 0;

  011f2	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T18[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  011f9	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T18[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  01200	c6 45 a8 00	 mov	 BYTE PTR $T18[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01204	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 270  : 			TextFileLoader.GetTokenFloat("period",&fad.fPeriod);

  01209	8d 45 9c	 lea	 eax, DWORD PTR _fad$16[ebp+60]
  0120c	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
  01210	50		 push	 eax
  01211	8d 45 a8	 lea	 eax, DWORD PTR $T18[ebp]
  01214	50		 push	 eax
  01215	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0121b	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  01220	8b 55 bc	 mov	 edx, DWORD PTR $T18[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 270  : 			TextFileLoader.GetTokenFloat("period",&fad.fPeriod);

  01223	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  01227	83 fa 10	 cmp	 edx, 16			; 00000010H
  0122a	72 2c		 jb	 SHORT $LN1849@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0122c	8b 4d a8	 mov	 ecx, DWORD PTR $T18[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0122f	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01230	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  01232	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  01238	72 14		 jb	 SHORT $LN1859@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0123a	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0123d	83 c2 23	 add	 edx, 35			; 00000023H
  01240	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  01242	83 c0 fc	 add	 eax, -4			; fffffffcH
  01245	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  01248	0f 87 a0 01 00
	00		 ja	 $LN1374@LoadScript
$LN1859@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0124e	52		 push	 edx
  0124f	51		 push	 ecx
  01250	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  01255	83 c4 08	 add	 esp, 8
$LN1849@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01258	6a 09		 push	 9

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0125a	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T17[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  01261	8d 4d a8	 lea	 ecx, DWORD PTR $T17[ebp]
  01264	68 00 00 00 00	 push	 OFFSET ??_C@_09EHCGJNBI@amplitude@

; 4562 :         _My_data._Mysize = 0;

  01269	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T17[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  01270	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T17[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  01277	c6 45 a8 00	 mov	 BYTE PTR $T17[ebp], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0127b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 271  : 			TextFileLoader.GetTokenFloat("amplitude",&fad.fAmplitude);

  01280	8d 45 a0	 lea	 eax, DWORD PTR _fad$16[ebp+64]
  01283	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  01287	50		 push	 eax
  01288	8d 45 a8	 lea	 eax, DWORD PTR $T17[ebp]
  0128b	50		 push	 eax
  0128c	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  01292	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  01297	8b 55 bc	 mov	 edx, DWORD PTR $T17[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 271  : 			TextFileLoader.GetTokenFloat("amplitude",&fad.fAmplitude);

  0129a	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0129e	83 fa 10	 cmp	 edx, 16			; 00000010H
  012a1	72 2c		 jb	 SHORT $LN1892@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  012a3	8b 4d a8	 mov	 ecx, DWORD PTR $T17[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  012a6	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  012a7	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  012a9	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  012af	72 14		 jb	 SHORT $LN1902@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  012b1	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  012b4	83 c2 23	 add	 edx, 35			; 00000023H
  012b7	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  012b9	83 c0 fc	 add	 eax, -4			; fffffffcH
  012bc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  012bf	0f 87 29 01 00
	00		 ja	 $LN1374@LoadScript
$LN1902@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  012c5	52		 push	 edx
  012c6	51		 push	 ecx
  012c7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  012cc	83 c4 08	 add	 esp, 8
$LN1892@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 273  : 			m_AttachDataVector.push_back(fad);

  012cf	8b b5 d4 fe ff
	ff		 mov	 esi, DWORD PTR _this$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  012d5	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _fad$16[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 273  : 			m_AttachDataVector.push_back(fad);

  012db	81 c6 84 00 00
	00		 add	 esi, 132		; 00000084H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  012e1	51		 push	 ecx
  012e2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  012e5	50		 push	 eax
  012e6	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  012e9	74 1a		 je	 SHORT $LN1910@LoadScript

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  012eb	56		 push	 esi
  012ec	e8 00 00 00 00	 call	 ??$construct@UTFlyingAttachData@CFlyingData@@ABU12@@?$_Default_allocator_traits@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@SAXAAV?$allocator@UTFlyingAttachData@CFlyingData@@@1@QAUTFlyingAttachData@CFlyingData@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<CFlyingData::TFlyingAttachData> >::construct<CFlyingData::TFlyingAttachData,CFlyingData::TFlyingAttachData const &>

; 714  :         _Orphan_range(_Mylast, _Mylast);
; 715  :         _Ty& _Result = *_Mylast;
; 716  :         ++_Mylast;

  012f1	83 46 04 44	 add	 DWORD PTR [esi+4], 68	; 00000044H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 274  : 		}

  012f5	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _fad$16[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 713  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  012fb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 274  : 		}

  012fe	e8 00 00 00 00	 call	 ??1TFlyingAttachData@CFlyingData@@QAE@XZ
  01303	eb 32		 jmp	 SHORT $LN27@LoadScript
$LN1910@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  01305	8b ce		 mov	 ecx, esi
  01307	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUTFlyingAttachData@CFlyingData@@@?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAEPAUTFlyingAttachData@CFlyingData@@QAU23@ABU23@@Z ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::_Emplace_reallocate<CFlyingData::TFlyingAttachData const &>
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 274  : 		}

  0130c	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _fad$16[ebp]
  01312	e8 00 00 00 00	 call	 ??1TFlyingAttachData@CFlyingData@@QAE@XZ
  01317	eb 1e		 jmp	 SHORT $LN27@LoadScript
$LN26@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  01319	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  0131f	8b c1		 mov	 eax, ecx

; 2273 :         if (_Large_string_engaged()) {

  01321	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  01325	72 02		 jb	 SHORT $LN1917@LoadScript

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  01327	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN1917@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 277  : 			TraceError("CFlyingData::LoadScriptFile Wrong Data : %s", m_strFilename.c_str());

  01329	50		 push	 eax
  0132a	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@NJMDEMJE@CFlyingData?3?3LoadScriptFile?5Wro@
  0132f	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  01334	83 c4 08	 add	 esp, 8
$LN27@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  01337	8b 55 d4	 mov	 edx, DWORD PTR _strNodeName$34[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 279  : 	}

  0133a	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0133e	83 fa 10	 cmp	 edx, 16			; 00000010H
  01341	72 2c		 jb	 SHORT $LN1933@LoadScript
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01343	8b 4d c0	 mov	 ecx, DWORD PTR _strNodeName$34[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  01346	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  01347	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  01349	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0134f	72 14		 jb	 SHORT $LN1943@LoadScript

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  01351	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  01354	83 c2 23	 add	 edx, 35			; 00000023H
  01357	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  01359	83 c0 fc	 add	 eax, -4			; fffffffcH
  0135c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0135f	0f 87 89 00 00
	00		 ja	 $LN1374@LoadScript
$LN1943@LoadScript:

; 255  :         ::operator delete(_Ptr, _Bytes);

  01365	52		 push	 edx
  01366	51		 push	 ecx
  01367	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0136c	83 c4 08	 add	 esp, 8
$LN1933@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0136f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strNodeName$34[ebp+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  01376	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strNodeName$34[ebp+20], 15 ; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0137d	c6 45 c0 00	 mov	 BYTE PTR _strNodeName$34[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\TextFileLoader.h

; 54   : 			{

  01381	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
$LN1966@LoadScript:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 227  : 	for(i=0;i<TextFileLoader.GetChildNodeCount();i++)

  01385	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  0138b	e8 00 00 00 00	 call	 ?SetParentNode@CTextFileLoader@@QAEHXZ ; CTextFileLoader::SetParentNode
  01390	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  01396	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0139a	47		 inc	 edi
  0139b	e8 00 00 00 00	 call	 ?GetChildNodeCount@CTextFileLoader@@QAEKXZ ; CTextFileLoader::GetChildNodeCount
  013a0	3b f8		 cmp	 edi, eax
  013a2	0f 82 68 f7 ff
	ff		 jb	 $LL4@LoadScript
$LN1957@LoadScript:

; 280  : 
; 281  : 	NANOEND

  013a8	eb		 DB	 -21			; ffffffebH
  013a9	03		 DB	 3
  013aa	d6		 DB	 -42			; ffffffd6H
  013ab	d7		 DB	 -41			; ffffffd7H
  013ac	00		 DB	 0
  013ad	c6 85 df fe ff
	ff 01		 mov	 BYTE PTR $T3[ebp], 1
  013b4	eb 07		 jmp	 SHORT $LN73@LoadScript
$LN72@LoadScript:
  013b6	c6 85 df fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
$LN73@LoadScript:
  013bd	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  013c3	e8 00 00 00 00	 call	 ??1CTextFileLoader@@UAE@XZ ; CTextFileLoader::~CTextFileLoader
  013c8	8a 85 df fe ff
	ff		 mov	 al, BYTE PTR $T3[ebp]

; 283  : }

  013ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  013d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  013d8	59		 pop	 ecx
  013d9	5f		 pop	 edi
  013da	5e		 pop	 esi
  013db	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  013de	33 cd		 xor	 ecx, ebp
  013e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  013e5	8b e5		 mov	 esp, ebp
  013e7	5d		 pop	 ebp
  013e8	8b e3		 mov	 esp, ebx
  013ea	5b		 pop	 ebx
  013eb	c2 04 00	 ret	 4
$LN1374@LoadScript:
  013ee	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1968@LoadScript:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  013f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1969@LoadScript:
  013f8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1970@LoadScript:
  013fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1971@LoadScript:
  01402	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1972@LoadScript:
  01407	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1973@LoadScript:
  0140c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1974@LoadScript:
  01411	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1975@LoadScript:
  01416	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1976@LoadScript:
  0141b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1977@LoadScript:
  01420	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1978@LoadScript:
  01425	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1979@LoadScript:
  0142a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1980@LoadScript:
  0142f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1981@LoadScript:
  01434	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1982@LoadScript:
  01439	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1983@LoadScript:
  0143e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1965@LoadScript:
  01443	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$0:
  00000	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _TextFileLoader$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CTextFileLoader@@UAE@XZ ; CTextFileLoader::~CTextFileLoader
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$1:
  0000b	8d 4d c0	 lea	 ecx, DWORD PTR $T49[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$2:
  00013	8d 4d c0	 lea	 ecx, DWORD PTR $T48[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$3:
  0001b	8d 4d c0	 lea	 ecx, DWORD PTR $T47[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$4:
  00023	8d 4d c0	 lea	 ecx, DWORD PTR $T46[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$5:
  0002b	8d 4d c0	 lea	 ecx, DWORD PTR $T45[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$6:
  00033	8d 4d c0	 lea	 ecx, DWORD PTR $T44[ebp]
  00036	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$7:
  0003b	8d 4d c0	 lea	 ecx, DWORD PTR $T43[ebp]
  0003e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$8:
  00043	8d 4d c0	 lea	 ecx, DWORD PTR $T42[ebp]
  00046	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$9:
  0004b	8d 4d c0	 lea	 ecx, DWORD PTR $T41[ebp]
  0004e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$10:
  00053	8d 4d c0	 lea	 ecx, DWORD PTR $T40[ebp]
  00056	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$11:
  0005b	8d 4d c0	 lea	 ecx, DWORD PTR $T39[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$12:
  00063	8d 4d c0	 lea	 ecx, DWORD PTR $T38[ebp]
  00066	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$14:
  0006b	8d 4d c0	 lea	 ecx, DWORD PTR $T36[ebp]
  0006e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$15:
  00073	8d 4d c0	 lea	 ecx, DWORD PTR $T35[ebp]
  00076	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$16:
  0007b	8d 4d a8	 lea	 ecx, DWORD PTR $T32[ebp]
  0007e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$17:
  00083	8d 4d a8	 lea	 ecx, DWORD PTR $T31[ebp]
  00086	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$18:
  0008b	8d 4d a8	 lea	 ecx, DWORD PTR $T30[ebp]
  0008e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$19:
  00093	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _GotoChild$2[ebp]
  00099	e9 00 00 00 00	 jmp	 ??1CGotoChild@CTextFileLoader@@QAE@XZ ; CTextFileLoader::CGotoChild::~CGotoChild
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$20:
  0009e	8d 4d c0	 lea	 ecx, DWORD PTR _strNodeName$34[ebp]
  000a1	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$21:
  000a6	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _fad$16[ebp]
  000ac	e9 00 00 00 00	 jmp	 ??1TFlyingAttachData@CFlyingData@@QAE@XZ
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$22:
  000b1	8d 4d a8	 lea	 ecx, DWORD PTR $T29[ebp]
  000b4	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$23:
  000b9	8d 4d a8	 lea	 ecx, DWORD PTR $T28[ebp]
  000bc	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$24:
  000c1	8d 4d a8	 lea	 ecx, DWORD PTR $T27[ebp]
  000c4	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$26:
  000c9	8d 4d a8	 lea	 ecx, DWORD PTR $T25[ebp]
  000cc	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$27:
  000d1	8d 4d a8	 lea	 ecx, DWORD PTR $T24[ebp]
  000d4	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$28:
  000d9	8d 4d a8	 lea	 ecx, DWORD PTR $T23[ebp]
  000dc	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$29:
  000e1	8d 4d a8	 lea	 ecx, DWORD PTR $T22[ebp]
  000e4	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$30:
  000e9	8d 4d a8	 lea	 ecx, DWORD PTR $T21[ebp]
  000ec	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$31:
  000f1	8d 4d a8	 lea	 ecx, DWORD PTR $T20[ebp]
  000f4	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$32:
  000f9	8d 4d a8	 lea	 ecx, DWORD PTR $T19[ebp]
  000fc	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$33:
  00101	8d 4d a8	 lea	 ecx, DWORD PTR $T18[ebp]
  00104	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z$34:
  00109	8d 4d a8	 lea	 ecx, DWORD PTR $T17[ebp]
  0010c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00111	cc		 int	 3
  00112	cc		 int	 3
  00113	cc		 int	 3
  00114	cc		 int	 3
  00115	cc		 int	 3
__ehhandler$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z:
  00116	90		 npad	 1
  00117	90		 npad	 1
  00118	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0011c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0011f	8b 8a cc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-308]
  00125	33 c8		 xor	 ecx, eax
  00127	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0012f	33 c8		 xor	 ecx, eax
  00131	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00136	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadScriptFile@CFlyingData@@QAE_NPBD@Z
  0013b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadScriptFile@CFlyingData@@QAE_NPBD@Z ENDP		; CFlyingData::LoadScriptFile
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?Destroy@CFlyingData@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CFlyingData@@QAEXXZ PROC			; CFlyingData::Destroy, COMDAT
; _this$ = ecx

; 38   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 39   : 	m_AttachDataVector.clear();

  00004	8d b7 84 00 00
	00		 lea	 esi, DWORD PTR [edi+132]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@YAXPAUTFlyingAttachData@CFlyingData@@QAU12@AAV?$allocator@UTFlyingAttachData@CFlyingData@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyingData::TFlyingAttachData> >

; 1443 :         _Mylast = _Myfirst;

  00015	8b 06		 mov	 eax, DWORD PTR [esi]

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 41   : 	__Initialize();

  0001a	8b cf		 mov	 ecx, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1443 :         _Mylast = _Myfirst;

  0001c	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 41   : 	__Initialize();

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	e9 00 00 00 00	 jmp	 ?__Initialize@CFlyingData@@IAEXXZ ; CFlyingData::__Initialize
?Destroy@CFlyingData@@QAEXXZ ENDP			; CFlyingData::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ??1CFlyingData@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CFlyingData@@UAE@XZ PROC				; CFlyingData::~CFlyingData, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CFlyingData@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlyingData@@6B@

; 46   : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CFlyingData@@QAEXXZ ; CFlyingData::Destroy

; 47   : }

  00030	8d 8e 84 00 00
	00		 lea	 ecx, DWORD PTR [esi+132]
  00036	e8 00 00 00 00	 call	 ??1?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAE@XZ ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::~vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0003b	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0003e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00041	72 28		 jb	 SHORT $LN15@CFlyingDat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00043	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00046	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00047	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004d	72 12		 jb	 SHORT $LN25@CFlyingDat

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00052	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00055	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00057	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005d	77 70		 ja	 SHORT $LN50@CFlyingDat

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0005f	8b c2		 mov	 eax, edx
$LN25@CFlyingDat:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00061	51		 push	 ecx
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00068	83 c4 08	 add	 esp, 8
$LN15@CFlyingDat:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0006b	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00072	c7 46 54 0f 00
	00 00		 mov	 DWORD PTR [esi+84], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00079	c6 46 40 00	 mov	 BYTE PTR [esi+64], 0

; 2286 :         return _BUF_SIZE <= _Myres;

  0007d	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00080	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00083	72 28		 jb	 SHORT $LN43@CFlyingDat
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00088	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00089	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008f	72 12		 jb	 SHORT $LN53@CFlyingDat

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00091	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00094	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00097	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00099	83 c0 fc	 add	 eax, -4			; fffffffcH
  0009c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009f	77 2e		 ja	 SHORT $LN50@CFlyingDat

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a1	8b c2		 mov	 eax, edx
$LN53@CFlyingDat:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a3	51		 push	 ecx
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000aa	83 c4 08	 add	 esp, 8
$LN43@CFlyingDat:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  000ad	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000b4	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000bb	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 47   : }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5e		 pop	 esi
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
$LN50@CFlyingDat:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN59@CFlyingDat:
  000d4	cc		 int	 3
  000d5	cc		 int	 3
  000d6	cc		 int	 3
  000d7	cc		 int	 3
  000d8	cc		 int	 3
  000d9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CFlyingData@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CFlyingData@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CFlyingData@@UAE@XZ ENDP				; CFlyingData::~CFlyingData
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ??0CFlyingData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFlyingData@@QAE@XZ PROC				; CFlyingData::CFlyingData, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CFlyingData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlyingData@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0002f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 4562 :         _My_data._Mysize = 0;

  00036	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0003d	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00044	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00048	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 9    : {

  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00056	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0005d	c7 46 54 0f 00
	00 00		 mov	 DWORD PTR [esi+84], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00064	c6 46 40 00	 mov	 BYTE PTR [esi+64], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00068	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  00072	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  0007c	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp

; 9    : {

  00086	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 10   : 	__Initialize();

  0008a	e8 00 00 00 00	 call	 ?__Initialize@CFlyingData@@IAEXXZ ; CFlyingData::__Initialize

; 11   : }

  0008f	8b c6		 mov	 eax, esi
  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFlyingData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CFlyingData@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 40	 add	 ecx, 64			; 00000040H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CFlyingData@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0001f	e9 00 00 00 00	 jmp	 ??1?$vector@UTFlyingAttachData@CFlyingData@@V?$allocator@UTFlyingAttachData@CFlyingData@@@std@@@std@@QAE@XZ ; std::vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >::~vector<CFlyingData::TFlyingAttachData,std::allocator<CFlyingData::TFlyingAttachData> >
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
  00027	cc		 int	 3
  00028	cc		 int	 3
__ehhandler$??0CFlyingData@@QAE@XZ:
  00029	90		 npad	 1
  0002a	90		 npad	 1
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CFlyingData@@QAE@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CFlyingData@@QAE@XZ ENDP				; CFlyingData::CFlyingData
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1TFlyingAttachData@CFlyingData@@QAE@XZ
_TEXT	SEGMENT
??1TFlyingAttachData@CFlyingData@@QAE@XZ PROC		; CFlyingData::TFlyingAttachData::~TFlyingAttachData, COMDAT
; _this$ = ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@TFlyingAtt
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000e	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN25@TFlyingAtt

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 20		 ja	 SHORT $LN22@TFlyingAtt

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN25@TFlyingAtt:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@TFlyingAtt:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00033	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0003a	c7 46 1c 0f 00
	00 00		 mov	 DWORD PTR [esi+28], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00041	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  00045	5e		 pop	 esi
  00046	c3		 ret	 0
$LN22@TFlyingAtt:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00047	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN31@TFlyingAtt:
  0004c	cc		 int	 3
??1TFlyingAttachData@CFlyingData@@QAE@XZ ENDP		; CFlyingData::TFlyingAttachData::~TFlyingAttachData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterLib\TextFileLoader.h
;	COMDAT ??1CGotoChild@CTextFileLoader@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGotoChild@CTextFileLoader@@QAE@XZ PROC		; CTextFileLoader::CGotoChild::~CGotoChild, COMDAT
; _this$ = ecx

; 54   : 			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGotoChild@CTextFileLoader@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 55   : 				m_pOwner->SetParentNode();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	e8 00 00 00 00	 call	 ?SetParentNode@CTextFileLoader@@QAEHXZ ; CTextFileLoader::SetParentNode

; 56   : 			}

  00029	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0002c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00033	59		 pop	 ecx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
  0003c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGotoChild@CTextFileLoader@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGotoChild@CTextFileLoader@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGotoChild@CTextFileLoader@@QAE@XZ ENDP		; CTextFileLoader::CGotoChild::~CGotoChild
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3210 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3211 :         // assign [_Ptr, _Ptr + _Count)
; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2263 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3213 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3215 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3225 :             },
; 3226 :             _Ptr);
; 3227 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4474 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4456 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4460 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 79   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3220 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3225 :             },
; 3226 :             _Ptr);
; 3227 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4475 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2968 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2286 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 2976 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2815 :         noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2816 :         if (this != _STD addressof(_Right)) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 61		 je	 SHORT $LN43@operator

; 2286 :         return _BUF_SIZE <= _Myres;

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00014	72 27		 jb	 SHORT $LN15@operator
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00018	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00019	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001f	72 12		 jb	 SHORT $LN25@operator

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00021	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00024	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00027	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00029	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002f	77 46		 ja	 SHORT $LN22@operator

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00031	8b c2		 mov	 eax, edx
$LN25@operator:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00033	51		 push	 ecx
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
$LN15@operator:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0003d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00044	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004b	c6 06 00	 mov	 BYTE PTR [esi], 0

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0004e	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00051	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00054	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00059	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4562 :         _My_data._Mysize = 0;

  0005e	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00065	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006c	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN43@operator:

; 2817 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});
; 2818 :         }
; 2819 : 
; 2820 :         return *this;

  0006f	5f		 pop	 edi
  00070	8b c6		 mov	 eax, esi
  00072	5e		 pop	 esi

; 2821 :     }

  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
$LN22@operator:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00077	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN45@operator:
  0007c	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2340 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\GameLib\FlyingData.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
