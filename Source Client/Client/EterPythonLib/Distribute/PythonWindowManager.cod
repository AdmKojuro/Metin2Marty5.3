; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30151.0 

	TITLE	C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\Distribute\PythonWindowManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_bShowOverInWindowName@@3HA			; g_bShowOverInWindowName
_BSS	SEGMENT
?g_bShowOverInWindowName@@3HA DD 01H DUP (?)		; g_bShowOverInWindowName
_BSS	ENDS
CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??1?$CSingleton@VCWindowManager@UI@@@@UAE@XZ	; CSingleton<UI::CWindowManager>::~CSingleton<UI::CWindowManager>
PUBLIC	??_G?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z ; CSingleton<UI::CWindowManager>::`scalar deleting destructor'
PUBLIC	??0CWindowManager@UI@@QAE@XZ			; UI::CWindowManager::CWindowManager
PUBLIC	??1CWindowManager@UI@@UAE@XZ			; UI::CWindowManager::~CWindowManager
PUBLIC	?Destroy@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::Destroy
PUBLIC	?GetAspect@CWindowManager@UI@@QAEMXZ		; UI::CWindowManager::GetAspect
PUBLIC	?SetScreenSize@CWindowManager@UI@@QAEXJJ@Z	; UI::CWindowManager::SetScreenSize
PUBLIC	?SetResolution@CWindowManager@UI@@QAEXHH@Z	; UI::CWindowManager::SetResolution
PUBLIC	?SetMouseHandler@CWindowManager@UI@@QAEXPAU_object@@@Z ; UI::CWindowManager::SetMouseHandler
PUBLIC	?GetMousePosition@CWindowManager@UI@@QAEXAAJ0@Z	; UI::CWindowManager::GetMousePosition
PUBLIC	?IsDragging@CWindowManager@UI@@QAEHXZ		; UI::CWindowManager::IsDragging
PUBLIC	?SetParent@CWindowManager@UI@@QAEXPAVCWindow@2@0@Z ; UI::CWindowManager::SetParent
PUBLIC	?SetPickAlways@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::SetPickAlways
PUBLIC	?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterWindow
PUBLIC	?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z ; UI::CWindowManager::RegisterTypeWindow
PUBLIC	?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterSlotWindow
PUBLIC	?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterGridSlotWindow
PUBLIC	?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterTextLine
PUBLIC	?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterMarkBox
PUBLIC	?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterImageBox
PUBLIC	?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterExpandedImageBox
PUBLIC	?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterAniImageBox
PUBLIC	?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterButton
PUBLIC	?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterRadioButton
PUBLIC	?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterToggleButton
PUBLIC	?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterDragButton
PUBLIC	?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterBox
PUBLIC	?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterRenderTarget
PUBLIC	?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterBar
PUBLIC	?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterLine
PUBLIC	?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterBar3D
PUBLIC	?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterNumberLine
PUBLIC	?DestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::DestroyWindow
PUBLIC	?NotifyDestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::NotifyDestroyWindow
PUBLIC	?IsAttaching@CWindowManager@UI@@QAEHXZ		; UI::CWindowManager::IsAttaching
PUBLIC	?GetAttachingType@CWindowManager@UI@@QAEKXZ	; UI::CWindowManager::GetAttachingType
PUBLIC	?GetAttachingIndex@CWindowManager@UI@@QAEKXZ	; UI::CWindowManager::GetAttachingIndex
PUBLIC	?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingSlotNumber
PUBLIC	?GetAttachingRealSlotNumber@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingRealSlotNumber
PUBLIC	?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z ; UI::CWindowManager::GetAttachingIconSize
PUBLIC	?AttachIcon@CWindowManager@UI@@QAEXKKKEE@Z	; UI::CWindowManager::AttachIcon
PUBLIC	?DeattachIcon@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::DeattachIcon
PUBLIC	?SetAttachingFlag@CWindowManager@UI@@QAEXH@Z	; UI::CWindowManager::SetAttachingFlag
PUBLIC	?SetAttachingRealSlotNumber@CWindowManager@UI@@QAEXK@Z ; UI::CWindowManager::SetAttachingRealSlotNumber
PUBLIC	?OnceIgnoreMouseLeftButtonUpEvent@CWindowManager@UI@@QAEXXZ ; UI::CWindowManager::OnceIgnoreMouseLeftButtonUpEvent
PUBLIC	?LockWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::LockWindow
PUBLIC	?UnlockWindow@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::UnlockWindow
PUBLIC	?ActivateWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::ActivateWindow
PUBLIC	?DeactivateWindow@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::DeactivateWindow
PUBLIC	?GetActivateWindow@CWindowManager@UI@@QAEPAVCWindow@2@XZ ; UI::CWindowManager::GetActivateWindow
PUBLIC	?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z	; UI::CWindowManager::SetTop
PUBLIC	?SetTopUIWindow@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::SetTopUIWindow
PUBLIC	?ResetCapture@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::ResetCapture
PUBLIC	?Update@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::Update
PUBLIC	?Render@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::Render
PUBLIC	?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z	; UI::CWindowManager::RunMouseMove
PUBLIC	?RunMouseLeftButtonDown@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseLeftButtonDown
PUBLIC	?RunMouseLeftButtonUp@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseLeftButtonUp
PUBLIC	?RunMouseLeftButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseLeftButtonDoubleClick
PUBLIC	?RunMouseRightButtonDown@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseRightButtonDown
PUBLIC	?RunMouseRightButtonUp@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseRightButtonUp
PUBLIC	?RunMouseRightButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseRightButtonDoubleClick
PUBLIC	?RunMouseMiddleButtonDown@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseMiddleButtonDown
PUBLIC	?RunMouseMiddleButtonUp@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseMiddleButtonUp
PUBLIC	?RunMouseWheelEvent@CWindowManager@UI@@QAE_NJ@Z	; UI::CWindowManager::RunMouseWheelEvent
PUBLIC	?RunMouseWheelScroll@CWindowManager@UI@@QAE_NJJF@Z ; UI::CWindowManager::RunMouseWheelScroll
PUBLIC	?RunIMEUpdate@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::RunIMEUpdate
PUBLIC	?RunIMETabEvent@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunIMETabEvent
PUBLIC	?RunIMEReturnEvent@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunIMEReturnEvent
PUBLIC	?RunIMEKeyDown@CWindowManager@UI@@QAEXH@Z	; UI::CWindowManager::RunIMEKeyDown
PUBLIC	?RunChangeCodePage@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunChangeCodePage
PUBLIC	?RunOpenCandidate@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunOpenCandidate
PUBLIC	?RunCloseCandidate@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunCloseCandidate
PUBLIC	?RunOpenReading@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunOpenReading
PUBLIC	?RunCloseReading@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunCloseReading
PUBLIC	?RunKeyDown@CWindowManager@UI@@QAEXH@Z		; UI::CWindowManager::RunKeyDown
PUBLIC	?RunKeyUp@CWindowManager@UI@@QAEXH@Z		; UI::CWindowManager::RunKeyUp
PUBLIC	?RunPressEscapeKey@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunPressEscapeKey
PUBLIC	?RunPressExitKey@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunPressExitKey
PUBLIC	?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z	; UI::CWindowManager::SetMousePosition
PUBLIC	?__PickWindow@CWindowManager@UI@@AAEPAVCWindow@2@JJ@Z ; UI::CWindowManager::__PickWindow
PUBLIC	?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z ; UI::CWindowManager::__NewWindow
PUBLIC	?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ ; UI::CWindowManager::__ClearReserveDeleteWindowList
PUBLIC	??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
PUBLIC	?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back
PUBLIC	?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove
PUBLIC	??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::~_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Insert_node
PUBLIC	??1?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE@XZ ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::~map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Insert_node
PUBLIC	??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
PUBLIC	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >
PUBLIC	??_GCWindowManager@UI@@UAEPAXI@Z		; UI::CWindowManager::`scalar deleting destructor'
PUBLIC	?BuildEmptyTuple@UI@@YAPAU_object@@XZ		; UI::BuildEmptyTuple
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?OnChangePosition@CWindow@UI@@UAEXXZ		; UI::CWindow::OnChangePosition
PUBLIC	?SetColor@CWindow@UI@@UAEXK@Z			; UI::CWindow::SetColor
PUBLIC	??1CLayer@UI@@UAE@XZ				; UI::CLayer::~CLayer
PUBLIC	?IsWindow@CLayer@UI@@UAEHXZ			; UI::CLayer::IsWindow
PUBLIC	??_GCLayer@UI@@UAEPAXI@Z			; UI::CLayer::`scalar deleting destructor'
PUBLIC	??1?$_Tree@V?$_Tset_traits@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >::~_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++
PUBLIC	??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::insert<std::pair<int,UI::CWindow *>,0>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<UI::CWindow *> >::_Erase_tree<std::allocator<std::_Tree_node<UI::CWindow *,void *> > >
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
PUBLIC	??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCWindowManager@UI@@@@6B@	; CSingleton<UI::CWindowManager>::`vftable'
PUBLIC	??_7CWindowManager@UI@@6B@			; UI::CWindowManager::`vftable'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CSingleton@VCWindowManager@UI@@@@6B@	; CSingleton<UI::CWindowManager>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CSingleton@VCWindowManager@UI@@@@@8	; CSingleton<UI::CWindowManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCWindowManager@UI@@@@8	; CSingleton<UI::CWindowManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCWindowManager@UI@@@@8	; CSingleton<UI::CWindowManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCWindowManager@UI@@@@8 ; CSingleton<UI::CWindowManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CLayer@UI@@6B@				; UI::CLayer::`vftable'
PUBLIC	?gs_kSet_pkWnd@UI@@3V?$set@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@@std@@A ; UI::gs_kSet_pkWnd
PUBLIC	??_C@_04NBFCGMPH@root@				; `string'
PUBLIC	??_C@_04FOKBGDA@GAME@				; `string'
PUBLIC	??_C@_09CHAIFIBB@UI_BOTTOM@			; `string'
PUBLIC	??_C@_02ELHCDOPK@UI@				; `string'
PUBLIC	??_C@_08MLMBKENF@TOP_MOST@			; `string'
PUBLIC	??_C@_07PCOOAIOD@CURTAIN@			; `string'
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ@			; `string'
PUBLIC	??_C@_0P@KLAFPINF@DeattachObject@		; `string'
PUBLIC	??_C@_0BI@MLGEFGCP@?5OverInWindowName?5?$FL?$CFs?$FN?6@ ; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_R4CWindowManager@UI@@6B@			; UI::CWindowManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWindowManager@UI@@@8			; UI::CWindowManager `RTTI Type Descriptor'
PUBLIC	??_R3CWindowManager@UI@@8			; UI::CWindowManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWindowManager@UI@@8			; UI::CWindowManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWindowManager@UI@@8		; UI::CWindowManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLayer@UI@@6B@				; UI::CLayer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLayer@UI@@@8				; UI::CLayer `RTTI Type Descriptor'
PUBLIC	??_R3CLayer@UI@@8				; UI::CLayer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLayer@UI@@8				; UI::CLayer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLayer@UI@@8			; UI::CLayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CWindow@UI@@8			; UI::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWindow@UI@@@8				; UI::CWindow `RTTI Type Descriptor'
PUBLIC	??_R3CWindow@UI@@8				; UI::CWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWindow@UI@@8				; UI::CWindow::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	__imp__Py_BuildValue:PROC
EXTRN	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z:PROC ; PyCallClassMemberFunc
EXTRN	??_E?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z:PROC ; CSingleton<UI::CWindowManager>::`vector deleting destructor'
EXTRN	??_ECWindowManager@UI@@UAEPAXI@Z:PROC		; UI::CWindowManager::`vector deleting destructor'
EXTRN	??0CWindow@UI@@QAE@PAU_object@@@Z:PROC		; UI::CWindow::CWindow
EXTRN	??1CWindow@UI@@UAE@XZ:PROC			; UI::CWindow::~CWindow
EXTRN	?AddChild@CWindow@UI@@QAEXPAV12@@Z:PROC		; UI::CWindow::AddChild
EXTRN	?Clear@CWindow@UI@@QAEXXZ:PROC			; UI::CWindow::Clear
EXTRN	?Update@CWindow@UI@@QAEXXZ:PROC			; UI::CWindow::Update
EXTRN	?Render@CWindow@UI@@QAEXXZ:PROC			; UI::CWindow::Render
EXTRN	?SetName@CWindow@UI@@QAEXPBD@Z:PROC		; UI::CWindow::SetName
EXTRN	?SetSize@CWindow@UI@@QAEXJJ@Z:PROC		; UI::CWindow::SetSize
EXTRN	?SetPosition@CWindow@UI@@QAEXJJ@Z:PROC		; UI::CWindow::SetPosition
EXTRN	?GetPosition@CWindow@UI@@QAEXPAJ0@Z:PROC	; UI::CWindow::GetPosition
EXTRN	?Show@CWindow@UI@@QAEXXZ:PROC			; UI::CWindow::Show
EXTRN	?IsRendering@CWindow@UI@@QAE_NXZ:PROC		; UI::CWindow::IsRendering
EXTRN	?GetRoot@CWindow@UI@@QAEPAV12@XZ:PROC		; UI::CWindow::GetRoot
EXTRN	?GetParent@CWindow@UI@@QAEPAV12@XZ:PROC		; UI::CWindow::GetParent
EXTRN	?DeleteChild@CWindow@UI@@QAEXPAV12@@Z:PROC	; UI::CWindow::DeleteChild
EXTRN	?SetTop@CWindow@UI@@QAEXPAV12@@Z:PROC		; UI::CWindow::SetTop
EXTRN	?IsIn@CWindow@UI@@QAE_NJJ@Z:PROC		; UI::CWindow::IsIn
EXTRN	?PickWindow@CWindow@UI@@QAEPAV12@JJ@Z:PROC	; UI::CWindow::PickWindow
EXTRN	?PickTopWindow@CWindow@UI@@QAEPAV12@JJ@Z:PROC	; UI::CWindow::PickTopWindow
EXTRN	?OnRender@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnRender
EXTRN	?OnUpdate@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnUpdate
EXTRN	?OnSetFocus@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnSetFocus
EXTRN	?OnKillFocus@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnKillFocus
EXTRN	?OnMouseDrag@CWindow@UI@@UAEXJJ@Z:PROC		; UI::CWindow::OnMouseDrag
EXTRN	?OnMouseOverIn@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnMouseOverIn
EXTRN	?OnMouseOverOut@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnMouseOverOut
EXTRN	?OnMouseOver@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnMouseOver
EXTRN	?OnDrop@CWindow@UI@@UAEXXZ:PROC			; UI::CWindow::OnDrop
EXTRN	?OnTop@CWindow@UI@@UAEXXZ:PROC			; UI::CWindow::OnTop
EXTRN	?OnIMEUpdate@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnIMEUpdate
EXTRN	?OnMoveWindow@CWindow@UI@@UAEXJJ@Z:PROC		; UI::CWindow::OnMoveWindow
EXTRN	?RunIMETabEvent@CWindow@UI@@QAEHXZ:PROC		; UI::CWindow::RunIMETabEvent
EXTRN	?RunIMEReturnEvent@CWindow@UI@@QAEHXZ:PROC	; UI::CWindow::RunIMEReturnEvent
EXTRN	?RunKeyDownEvent@CWindow@UI@@QAEPAV12@H@Z:PROC	; UI::CWindow::RunKeyDownEvent
EXTRN	?RunKeyUpEvent@CWindow@UI@@QAEHH@Z:PROC		; UI::CWindow::RunKeyUpEvent
EXTRN	?RunPressEscapeKeyEvent@CWindow@UI@@QAEHXZ:PROC	; UI::CWindow::RunPressEscapeKeyEvent
EXTRN	?RunPressExitKeyEvent@CWindow@UI@@QAEHXZ:PROC	; UI::CWindow::RunPressExitKeyEvent
EXTRN	?OnIMETabEvent@CWindow@UI@@UAEHXZ:PROC		; UI::CWindow::OnIMETabEvent
EXTRN	?OnIMEReturnEvent@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnIMEReturnEvent
EXTRN	?OnIMEKeyDownEvent@CWindow@UI@@UAEHH@Z:PROC	; UI::CWindow::OnIMEKeyDownEvent
EXTRN	?OnIMEChangeCodePage@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnIMEChangeCodePage
EXTRN	?OnIMEOpenCandidateListEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEOpenCandidateListEvent
EXTRN	?OnIMECloseCandidateListEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMECloseCandidateListEvent
EXTRN	?OnIMEOpenReadingWndEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEOpenReadingWndEvent
EXTRN	?OnIMECloseReadingWndEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMECloseReadingWndEvent
EXTRN	?OnMouseLeftButtonDown@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseLeftButtonDown
EXTRN	?OnMouseLeftButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseLeftButtonUp
EXTRN	?OnMouseLeftButtonDoubleClick@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseLeftButtonDoubleClick
EXTRN	?OnMouseRightButtonDown@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseRightButtonDown
EXTRN	?OnMouseRightButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseRightButtonUp
EXTRN	?OnMouseRightButtonDoubleClick@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseRightButtonDoubleClick
EXTRN	?OnMouseMiddleButtonDown@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseMiddleButtonDown
EXTRN	?OnMouseMiddleButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseMiddleButtonUp
EXTRN	?RunMouseWheelEvent@CWindow@UI@@UAEHJ@Z:PROC	; UI::CWindow::RunMouseWheelEvent
EXTRN	?OnMouseWheelScroll@CWindow@UI@@UAEHF@Z:PROC	; UI::CWindow::OnMouseWheelScroll
EXTRN	?SetScrollable@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::SetScrollable
EXTRN	?OnKeyDown@CWindow@UI@@UAEHH@Z:PROC		; UI::CWindow::OnKeyDown
EXTRN	?OnKeyUp@CWindow@UI@@UAEHH@Z:PROC		; UI::CWindow::OnKeyUp
EXTRN	?OnPressEscapeKey@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnPressEscapeKey
EXTRN	?OnPressExitKey@CWindow@UI@@UAEHXZ:PROC		; UI::CWindow::OnPressExitKey
EXTRN	?OnIsType@CWindow@UI@@UAEHK@Z:PROC		; UI::CWindow::OnIsType
EXTRN	??_ECLayer@UI@@UAEPAXI@Z:PROC			; UI::CLayer::`vector deleting destructor'
EXTRN	??0CRenderTarget@UI@@QAE@PAU_object@@@Z:PROC	; UI::CRenderTarget::CRenderTarget
EXTRN	??0CBox@UI@@QAE@PAU_object@@@Z:PROC		; UI::CBox::CBox
EXTRN	??0CBar@UI@@QAE@PAU_object@@@Z:PROC		; UI::CBar::CBar
EXTRN	??0CLine@UI@@QAE@PAU_object@@@Z:PROC		; UI::CLine::CLine
EXTRN	??0CBar3D@UI@@QAE@PAU_object@@@Z:PROC		; UI::CBar3D::CBar3D
EXTRN	??0CTextLine@UI@@QAE@PAU_object@@@Z:PROC	; UI::CTextLine::CTextLine
EXTRN	??0CNumberLine@UI@@QAE@PAU_object@@@Z:PROC	; UI::CNumberLine::CNumberLine
EXTRN	??0CImageBox@UI@@QAE@PAU_object@@@Z:PROC	; UI::CImageBox::CImageBox
EXTRN	??0CMarkBox@UI@@QAE@PAU_object@@@Z:PROC		; UI::CMarkBox::CMarkBox
EXTRN	??0CExpandedImageBox@UI@@QAE@PAU_object@@@Z:PROC ; UI::CExpandedImageBox::CExpandedImageBox
EXTRN	??0CAniImageBox@UI@@QAE@PAU_object@@@Z:PROC	; UI::CAniImageBox::CAniImageBox
EXTRN	??0CButton@UI@@QAE@PAU_object@@@Z:PROC		; UI::CButton::CButton
EXTRN	??0CRadioButton@UI@@QAE@PAU_object@@@Z:PROC	; UI::CRadioButton::CRadioButton
EXTRN	??0CToggleButton@UI@@QAE@PAU_object@@@Z:PROC	; UI::CToggleButton::CToggleButton
EXTRN	??0CDragButton@UI@@QAE@PAU_object@@@Z:PROC	; UI::CDragButton::CDragButton
EXTRN	??0CSlotWindow@UI@@QAE@PAU_object@@@Z:PROC	; UI::CSlotWindow::CSlotWindow
EXTRN	??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z:PROC	; UI::CGridSlotWindow::CGridSlotWindow
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A DD 01H DUP (?) ; CSingleton<UI::CWindowManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?gs_poEmptyTuple@UI@@3PAU_object@@A DD 01H DUP (?)	; UI::gs_poEmptyTuple
?gs_kSet_pkWnd@UI@@3V?$set@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@@std@@A DQ 01H DUP (?) ; UI::gs_kSet_pkWnd
_BSS	ENDS
;	COMDAT ?$TSS0@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA
_BSS	SEGMENT
?$TSS0@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA DD 01H DUP (?) ; `UI::CWindowManager::RunMouseMove'::`15'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
?gs_kSet_pkWnd$initializer$@UI@@3P6AXXZA DD FLAT:??__Egs_kSet_pkWnd@UI@@YAXXZ ; UI::gs_kSet_pkWnd$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R2CWindow@UI@@8
rdata$r	SEGMENT
??_R2CWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CWindow@UI@@8	; UI::CWindow::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWindow@UI@@8
rdata$r	SEGMENT
??_R3CWindow@UI@@8 DD 00H				; UI::CWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWindow@UI@@@8
data$rs	SEGMENT
??_R0?AVCWindow@UI@@@8 DD FLAT:??_7type_info@@6B@	; UI::CWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWindow@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWindow@UI@@8 DD FLAT:??_R0?AVCWindow@UI@@@8 ; UI::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLayer@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLayer@UI@@8 DD FLAT:??_R0?AVCLayer@UI@@@8 ; UI::CLayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLayer@UI@@8
rdata$r	ENDS
;	COMDAT ??_R2CLayer@UI@@8
rdata$r	SEGMENT
??_R2CLayer@UI@@8 DD FLAT:??_R1A@?0A@EA@CLayer@UI@@8	; UI::CLayer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R3CLayer@UI@@8
rdata$r	SEGMENT
??_R3CLayer@UI@@8 DD 00H				; UI::CLayer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CLayer@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLayer@UI@@@8
data$rs	SEGMENT
??_R0?AVCLayer@UI@@@8 DD FLAT:??_7type_info@@6B@	; UI::CLayer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLayer@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLayer@UI@@6B@
rdata$r	SEGMENT
??_R4CLayer@UI@@6B@ DD 00H				; UI::CLayer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLayer@UI@@@8
	DD	FLAT:??_R3CLayer@UI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWindowManager@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWindowManager@UI@@8 DD FLAT:??_R0?AVCWindowManager@UI@@@8 ; UI::CWindowManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWindowManager@UI@@8
rdata$r	ENDS
;	COMDAT ??_R2CWindowManager@UI@@8
rdata$r	SEGMENT
??_R2CWindowManager@UI@@8 DD FLAT:??_R1A@?0A@EA@CWindowManager@UI@@8 ; UI::CWindowManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CWindowManager@UI@@8
rdata$r	SEGMENT
??_R3CWindowManager@UI@@8 DD 00H			; UI::CWindowManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CWindowManager@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWindowManager@UI@@@8
data$rs	SEGMENT
??_R0?AVCWindowManager@UI@@@8 DD FLAT:??_7type_info@@6B@ ; UI::CWindowManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWindowManager@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CWindowManager@UI@@6B@
rdata$r	SEGMENT
??_R4CWindowManager@UI@@6B@ DD 00H			; UI::CWindowManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWindowManager@UI@@@8
	DD	FLAT:??_R3CWindowManager@UI@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MLGEFGCP@?5OverInWindowName?5?$FL?$CFs?$FN?6@
CONST	SEGMENT
??_C@_0BI@MLGEFGCP@?5OverInWindowName?5?$FL?$CFs?$FN?6@ DB ' OverInWindow'
	DB	'Name [%s]', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
_DATA	SEGMENT
?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 014H DUP (?)
	DD	0fH					; `UI::CWindowManager::RunMouseMove'::`15'::strPickWindowName
_DATA	ENDS
;	COMDAT ??_C@_0P@KLAFPINF@DeattachObject@
CONST	SEGMENT
??_C@_0P@KLAFPINF@DeattachObject@ DB 'DeattachObject', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ@ DB '()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PCOOAIOD@CURTAIN@
CONST	SEGMENT
??_C@_07PCOOAIOD@CURTAIN@ DB 'CURTAIN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLMBKENF@TOP_MOST@
CONST	SEGMENT
??_C@_08MLMBKENF@TOP_MOST@ DB 'TOP_MOST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ELHCDOPK@UI@
CONST	SEGMENT
??_C@_02ELHCDOPK@UI@ DB 'UI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHAIFIBB@UI_BOTTOM@
CONST	SEGMENT
??_C@_09CHAIFIBB@UI_BOTTOM@ DB 'UI_BOTTOM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FOKBGDA@GAME@
CONST	SEGMENT
??_C@_04FOKBGDA@GAME@ DB 'GAME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBFCGMPH@root@
CONST	SEGMENT
??_C@_04NBFCGMPH@root@ DB 'root', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CLayer@UI@@6B@
CONST	SEGMENT
??_7CLayer@UI@@6B@ DD FLAT:??_R4CLayer@UI@@6B@		; UI::CLayer::`vftable'
	DD	FLAT:??_ECLayer@UI@@UAEPAXI@Z
	DD	FLAT:?OnRender@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnUpdate@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnChangePosition@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnSetFocus@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnKillFocus@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseDrag@CWindow@UI@@UAEXJJ@Z
	DD	FLAT:?OnMouseOverIn@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseOverOut@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseOver@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnDrop@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnTop@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnIMEUpdate@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMoveWindow@CWindow@UI@@UAEXJJ@Z
	DD	FLAT:?OnIMETabEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEReturnEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEKeyDownEvent@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnIMEChangeCodePage@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEOpenCandidateListEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMECloseCandidateListEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEOpenReadingWndEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMECloseReadingWndEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseLeftButtonDown@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseLeftButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseLeftButtonDoubleClick@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseRightButtonDown@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseRightButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseRightButtonDoubleClick@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseMiddleButtonDown@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseMiddleButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?RunMouseWheelEvent@CWindow@UI@@UAEHJ@Z
	DD	FLAT:?OnMouseWheelScroll@CWindow@UI@@UAEHF@Z
	DD	FLAT:?SetScrollable@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnKeyDown@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnKeyUp@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnPressEscapeKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnPressExitKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?SetColor@CWindow@UI@@UAEXK@Z
	DD	FLAT:?OnIsType@CWindow@UI@@UAEHK@Z
	DD	FLAT:?IsWindow@CLayer@UI@@UAEHXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCWindowManager@UI@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCWindowManager@UI@@@@@8 ; CSingleton<UI::CWindowManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCWindowManager@UI@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCWindowManager@UI@@@@8 ; CSingleton<UI::CWindowManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCWindowManager@UI@@@@8 DD 00H	; CSingleton<UI::CWindowManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCWindowManager@UI@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCWindowManager@UI@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<UI::CWindowManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCWindowManager@UI@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CSingleton@VCWindowManager@UI@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCWindowManager@UI@@@@6B@ DD 00H	; CSingleton<UI::CWindowManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCWindowManager@UI@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7CWindowManager@UI@@6B@
CONST	SEGMENT
??_7CWindowManager@UI@@6B@ DD FLAT:??_R4CWindowManager@UI@@6B@ ; UI::CWindowManager::`vftable'
	DD	FLAT:??_ECWindowManager@UI@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCWindowManager@UI@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCWindowManager@UI@@@@6B@ DD FLAT:??_R4?$CSingleton@VCWindowManager@UI@@@@6B@ ; CSingleton<UI::CWindowManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$0
__ehfuncinfo$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAVCWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@1@ABQAVCWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAVCWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@1@ABQAVCWindow@UI@@@Z$0
__ehfuncinfo$??$?0ABQAVCWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@1@ABQAVCWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAVCWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@1@ABQAVCWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z$2
__ehfuncinfo$??$emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$1
__ehfuncinfo$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAVCWindow@UI@@@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAVCWindow@UI@@PAX@1@QAU21@ABQAVCWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAVCWindow@UI@@@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAVCWindow@UI@@PAX@1@QAU21@ABQAVCWindow@UI@@@Z$1
__ehfuncinfo$??$_Emplace@ABQAVCWindow@UI@@@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAVCWindow@UI@@PAX@1@QAU21@ABQAVCWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAVCWindow@UI@@@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAVCWindow@UI@@PAX@1@QAU21@ABQAVCWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z$2
__ehfuncinfo$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$1
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z$1
__ehfuncinfo$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z DD 019930522H
	DD	011H
	DD	FLAT:__unwindtable$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$16
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunKeyDown@CWindowManager@UI@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunKeyDown@CWindowManager@UI@@QAEXH@Z$2
__ehfuncinfo$?RunKeyDown@CWindowManager@UI@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunKeyDown@CWindowManager@UI@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ$0
__ehfuncinfo$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z$0
__ehfuncinfo$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z$0
__ehfuncinfo$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CWindowManager@UI@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CWindowManager@UI@@QAE@XZ DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$??0CWindowManager@UI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CWindowManager@UI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$8
	DD	07H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$9
	DD	07H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$19
	DD	0aH
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$18
	DD	07H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$30
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4808 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2272 :         const value_type* _Result = _Bx._Buf;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b d0		 mov	 edx, eax

; 2286 :         return _BUF_SIZE <= _Myres;

  00008	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  0000c	72 02		 jb	 SHORT $LN6@operator

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
$LN6@operator:

; 2272 :         const value_type* _Result = _Bx._Buf;

  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 2286 :         return _BUF_SIZE <= _Myres;

  00016	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  0001a	72 02		 jb	 SHORT $LN11@operator

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]
$LN11@operator:

; 4380 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0001e	ff 70 10	 push	 DWORD PTR [eax+16]
  00021	52		 push	 edx
  00022	ff 71 10	 push	 DWORD PTR [ecx+16]
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 4809 :     return _Left.compare(_Right) < 0;

  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	5e		 pop	 esi

; 4810 : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 971  :             _Al.deallocate(_Ptr, 1);
; 972  :         }
; 973  :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 971  :             _Al.deallocate(_Ptr, 1);
; 972  :         }
; 973  :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>, COMDAT
; _this$ = ecx

; 1595 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1596 :         const auto _Scary = _Get_scary();
; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1600 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	7d 07		 jge	 SHORT $LN4@Find_lower

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1604 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1607 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1608 :             }
; 1609 :         }
; 1610 : 
; 1611 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1612 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 971  :             _Al.deallocate(_Ptr, 1);
; 972  :         }
; 973  :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1595 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1596 :         const auto _Scary = _Get_scary();
; 1597 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN12@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1601 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1602 :                 _Result._Location._Child = _Tree_child::_Right;
; 1603 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1604 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1605 :                 _Result._Location._Child = _Tree_child::_Left;
; 1606 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1607 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1598 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1599 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower

; 1608 :             }
; 1609 :         }
; 1610 : 
; 1611 :         return _Result;

  00050	5b		 pop	 ebx
$LN12@Find_lower:

; 1612 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<UI::CWindow *> >::_Erase_tree<std::allocator<std::_Tree_node<UI::CWindow *,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<UI::CWindow *> >::_Erase_tree<std::allocator<std::_Tree_node<UI::CWindow *,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 14		 push	 20			; 00000014H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<UI::CWindow *> >::_Erase_tree<std::allocator<std::_Tree_node<UI::CWindow *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 746  :         }
; 747  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN73@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00027	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0002a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0002d	72 28		 jb	 SHORT $LN29@Erase_tree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00032	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN39@Erase_tree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN36@Erase_tree

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN39@Erase_tree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN29@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0005a	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00061	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00068	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN75@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN75@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN73@Erase_tree:
  00081	5f		 pop	 edi

; 747  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN36@Erase_tree:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
_TEXT	SEGMENT
__Loc$3 = -36						; size = 12
$T4 = -24						; size = 12
$T5 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z PROC ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::insert<std::pair<int,UI::CWindow *>,0>, COMDAT
; _this$ = ecx

; 162  :     pair<iterator, bool> insert(_Valty&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T4[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 0b		 jne	 SHORT $LN6@insert
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004e	7c 04		 jl	 SHORT $LN6@insert
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00050	32 d2		 xor	 dl, dl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1008 :                 return {_Loc._Bound, false};

  00052	eb 51		 jmp	 SHORT $LN85@insert
$LN6@insert:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0005b	74 64		 je	 SHORT $LN103@insert

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T5[ebp], edi

; 79   :         return ::operator new(_Bytes);

  00062	6a 18		 push	 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 242  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  0007c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0007f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00082	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00085	8b cf		 mov	 ecx, edi
  00087	50		 push	 eax
  00088	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp+4]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0008b	89 30		 mov	 DWORD PTR [eax], esi

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008d	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp]

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00090	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00093	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 809  :         this->_Ptr->_Color = _Red;

  00096	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Insert_node
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000a1	8b c8		 mov	 ecx, eax
  000a3	b2 01		 mov	 dl, 1
$LN85@insert:
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx
  000aa	88 50 04	 mov	 BYTE PTR [eax+4], dl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map

; 164  :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN103@insert:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

  000c1	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN101@insert:
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z ENDP ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::insert<std::pair<int,UI::CWindow *>,0>
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??__FstrPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@YAXXZ
text$yd	SEGMENT
??__FstrPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@YAXXZ PROC ; `UI::CWindowManager::RunMouseMove'::`15'::`dynamic atexit destructor for 'strPickWindowName'', COMDAT

; 2286 :         return _BUF_SIZE <= _Myres;

  00000	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 2f		 jb	 SHORT $LN15@dynamic
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN25@dynamic

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0001f	83 c2 23	 add	 edx, 35			; 00000023H
  00022	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN25@dynamic:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	52		 push	 edx
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00055	c3		 ret	 0
??__FstrPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@YAXXZ ENDP ; `UI::CWindowManager::RunMouseMove'::`15'::`dynamic atexit destructor for 'strPickWindowName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 50   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 63   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 63   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>, COMDAT
; _this$ = ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN15@pair
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN25@pair

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN22@pair

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN25@pair:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN15@pair:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi
  00044	c3		 ret	 0
$LN22@pair:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN31@pair:
  0004a	cc		 int	 3
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_kSet_pkWnd@UI@@YAXXZ
text$yd	SEGMENT
??__Fgs_kSet_pkWnd@UI@@YAXXZ PROC			; UI::`dynamic atexit destructor for 'gs_kSet_pkWnd'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_kSet_pkWnd@UI@@3V?$set@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@@std@@A ; UI::gs_kSet_pkWnd
  00005	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tset_traits@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >::~_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >
??__Fgs_kSet_pkWnd@UI@@YAXXZ ENDP			; UI::`dynamic atexit destructor for 'gs_kSet_pkWnd''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ??__Egs_kSet_pkWnd@UI@@YAXXZ
text$di	SEGMENT
??__Egs_kSet_pkWnd@UI@@YAXXZ PROC			; UI::`dynamic initializer for 'gs_kSet_pkWnd'', COMDAT
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00000	6a 14		 push	 20			; 00000014H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 21   : 	std::set<CWindow*> gs_kSet_pkWnd;

  00007	68 00 00 00 00	 push	 OFFSET ??__Fgs_kSet_pkWnd@UI@@YAXXZ ; UI::`dynamic atexit destructor for 'gs_kSet_pkWnd''
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000c	89 00		 mov	 DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00011	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

  00014	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?gs_kSet_pkWnd@UI@@3V?$set@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@@std@@A, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 21   : 	std::set<CWindow*> gs_kSet_pkWnd;

  0001f	e8 00 00 00 00	 call	 _atexit
  00024	83 c4 08	 add	 esp, 8
  00027	c3		 ret	 0
??__Egs_kSet_pkWnd@UI@@YAXXZ ENDP			; UI::`dynamic initializer for 'gs_kSet_pkWnd''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tset_traits@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >::~_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >, COMDAT
; _this$ = ecx

; 1084 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<UI::CWindow *> >::_Erase_tree<std::allocator<std::_Tree_node<UI::CWindow *,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 14		 push	 20			; 00000014H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	6a 14		 push	 20			; 00000014H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1091 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tset_traits@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >::~_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
;	COMDAT ??_GCLayer@UI@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLayer@UI@@UAEPAXI@Z PROC				; UI::CLayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 			virtual ~CLayer() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLayer@UI@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CWindow@UI@@UAE@XZ	; UI::CWindow::~CWindow
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 0b		 je	 SHORT $LN7@scalar
  00017	6a 7c		 push	 124			; 0000007cH
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCLayer@UI@@UAEPAXI@Z ENDP				; UI::CLayer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
;	COMDAT ?IsWindow@CLayer@UI@@UAEHXZ
_TEXT	SEGMENT
?IsWindow@CLayer@UI@@UAEHXZ PROC			; UI::CLayer::IsWindow, COMDAT
; _this$ = ecx

; 207  : 			BOOL IsWindow() { return FALSE; }

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?IsWindow@CLayer@UI@@UAEHXZ ENDP			; UI::CLayer::IsWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
;	COMDAT ??1CLayer@UI@@UAE@XZ
_TEXT	SEGMENT
??1CLayer@UI@@UAE@XZ PROC				; UI::CLayer::~CLayer, COMDAT
; _this$ = ecx

; 205  : 			virtual ~CLayer() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CLayer@UI@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1CWindow@UI@@UAE@XZ	; UI::CWindow::~CWindow
??1CLayer@UI@@UAE@XZ ENDP				; UI::CLayer::~CLayer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
;	COMDAT ?SetColor@CWindow@UI@@UAEXK@Z
_TEXT	SEGMENT
_dwColor$ = 8						; size = 4
?SetColor@CWindow@UI@@UAEXK@Z PROC			; UI::CWindow::SetColor, COMDAT
; _this$ = ecx

; 161  : 			virtual void	SetColor(DWORD dwColor){}

  00000	c2 04 00	 ret	 4
?SetColor@CWindow@UI@@UAEXK@Z ENDP			; UI::CWindow::SetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
;	COMDAT ?OnChangePosition@CWindow@UI@@UAEXXZ
_TEXT	SEGMENT
?OnChangePosition@CWindow@UI@@UAEXXZ PROC		; UI::CWindow::OnChangePosition, COMDAT
; _this$ = ecx

; 104  : 			virtual void	OnChangePosition(){}

  00000	c2 00 00	 ret	 0
?OnChangePosition@CWindow@UI@@UAEXXZ ENDP		; UI::CWindow::OnChangePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 576  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 576  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00006	53		 push	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Right_size$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 576  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000a	56		 push	 esi

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 576  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000e	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Left_size$[ebp]
  00012	3b df		 cmp	 ebx, edi
  00014	8b cf		 mov	 ecx, edi
  00016	0f 42 cb	 cmovb	 ecx, ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 384  :         return _CSTD memcmp(_First1, _First2, _Count);

  00019	83 e9 04	 sub	 ecx, 4
  0001c	72 13		 jb	 SHORT $LN12@Traits_com
  0001e	66 90		 npad	 2
$LL13@Traits_com:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN11@Traits_com
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL13@Traits_com
$LN12@Traits_com:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 34		 je	 SHORT $LN10@Traits_com
$LN11@Traits_com:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN14@Traits_com
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 29		 je	 SHORT $LN10@Traits_com
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN14@Traits_com
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1c		 je	 SHORT $LN10@Traits_com
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN14@Traits_com
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 0f		 je	 SHORT $LN10@Traits_com
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 07		 je	 SHORT $LN10@Traits_com
$LN14@Traits_com:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	eb 02		 jmp	 SHORT $LN15@Traits_com
$LN10@Traits_com:
  0006a	33 c0		 xor	 eax, eax
$LN15@Traits_com:

; 577  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 578  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));
; 579  : 
; 580  :     if (_Ans != 0) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 10		 jne	 SHORT $LN4@Traits_com

; 581  :         return _Ans;
; 582  :     }
; 583  : 
; 584  :     if (_Left_size < _Right_size) {

  00070	3b df		 cmp	 ebx, edi
  00072	76 08		 jbe	 SHORT $LN16@Traits_com

; 589  :         return 1;
; 590  :     }
; 591  : 
; 592  :     return 0;
; 593  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c8 ff	 or	 eax, -1
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN16@Traits_com:

; 585  :         return -1;
; 586  :     }
; 587  : 
; 588  :     if (_Left_size > _Right_size) {

  0007c	1b c0		 sbb	 eax, eax
  0007e	f7 d8		 neg	 eax
$LN4@Traits_com:

; 589  :         return 1;
; 590  :     }
; 591  : 
; 592  :     return 0;
; 593  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?BuildEmptyTuple@UI@@YAPAU_object@@XZ
_TEXT	SEGMENT
?BuildEmptyTuple@UI@@YAPAU_object@@XZ PROC		; UI::BuildEmptyTuple, COMDAT

; 17   : 		Py_INCREF(gs_poEmptyTuple);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gs_poEmptyTuple@UI@@3PAU_object@@A
  00005	ff 00		 inc	 DWORD PTR [eax]

; 18   : 		return gs_poEmptyTuple;
; 19   : 	}

  00007	c3		 ret	 0
?BuildEmptyTuple@UI@@YAPAU_object@@XZ ENDP		; UI::BuildEmptyTuple
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCWindowManager@UI@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWindowManager@UI@@UAEPAXI@Z PROC			; UI::CWindowManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CWindowManager@UI@@UAE@XZ ; UI::CWindowManager::~CWindowManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 a4 00 00 00	 push	 164			; 000000a4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCWindowManager@UI@@UAEPAXI@Z ENDP			; UI::CWindowManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >, COMDAT
; _this$ = ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 2c		 push	 44			; 0000002cH
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map
;	COMDAT ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Loc$3 = -36						; size = 12
$T4 = -24						; size = 8
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[], COMDAT
; _this$ = ecx

; 151  :     mapped_type& operator[](key_type&& _Keyval) { // find element matching _Keyval or insert value-initialized value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 174  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0002a	8b 7d 08	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0002d	8d 45 dc	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00030	57		 push	 edi
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00037	8b 75 e4	 mov	 esi, DWORD PTR __Loc$3[ebp+8]
  0003a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0003e	75 15		 jne	 SHORT $LN4@operator
  00040	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00043	50		 push	 eax
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0004a	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004d	84 c0		 test	 al, al
  0004f	0f 84 8a 00 00
	00		 je	 $LN3@operator
$LN4@operator:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  00058	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  0005f	0f 84 90 00 00
	00		 je	 $LN165@operator
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map

; 182  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00065	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00067	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax

; 79   :         return ::operator new(_Bytes);

  0006a	6a 2c		 push	 44			; 0000002cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00073	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map

; 188  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00082	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00085	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 2322 :     size_type _Mysize = 0; // current length of string

  0008c	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2323 :     size_type _Myres  = 0; // current storage reserved for string

  00093	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0009a	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map

; 188  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009d	50		 push	 eax
  0009e	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a1	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  000a5	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map

; 188  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000aa	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ad	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0

; 4562 :         _My_data._Mysize = 0;

  000b2	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  000b9	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c0	c6 07 00	 mov	 BYTE PTR [edi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 263  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  000c3	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000ca	89 30		 mov	 DWORD PTR [eax], esi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000cc	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000cf	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 809  :         this->_Ptr->_Color = _Red;

  000d2	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\map

; 188  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000d8	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Insert_node
  000dd	8b f0		 mov	 esi, eax
$LN3@operator:

; 152  :         return _Try_emplace(_STD move(_Keyval)).first->_Myval.second;

  000df	8d 46 28	 lea	 eax, DWORD PTR [esi+40]

; 153  :     }

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 04 00	 ret	 4
$LN165@operator:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

  000f5	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN163@operator:
  000fa	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE@XZ PROC ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::~map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::~_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >
??1?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::~map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :         ++_Mysize;
; 646  :         const auto _Head  = _Myhead;
; 647  :         _Newnode->_Parent = _Loc._Parent;

  00006	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	ff 40 04	 inc	 DWORD PTR [eax+4]
  00013	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00016	89 4d f8	 mov	 DWORD PTR __Head$1$[ebp], ecx
  00019	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  0001c	3b d1		 cmp	 edx, ecx
  0001e	75 12		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 650  :             _Head->_Parent   = _Newnode;

  00022	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 651  :             _Head->_Right    = _Newnode;

  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 652  :             _Newnode->_Color = _Black; // the root is black

  00028	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 711  :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 653  :             return _Newnode;
; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00032	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00036	75 0d		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  00038	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003e	75 0d		 jne	 SHORT $LN9@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00040	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  00043	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  00045	89 02		 mov	 DWORD PTR [edx], eax

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00047	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00049	75 02		 jne	 SHORT $LN9@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004d	8b d0		 mov	 edx, eax
  0004f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00052	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00056	0f 85 99 01 00
	00		 jne	 $LN3@Insert_nod
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	57		 push	 edi
  0005f	90		 npad	 1
$LL2@Insert_nod:

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00063	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00066	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00069	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	3b c8		 cmp	 ecx, eax
  00070	0f 85 ba 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00079	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0007d	0f 84 b3 00 00
	00		 je	 $LN53@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;
; 676  :                     _Parent_sibling->_Color          = _Black;
; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 679  :                 } else { // parent's sibling has red and black children
; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  00083	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00086	3b d6		 cmp	 edx, esi
  00088	75 47		 jne	 SHORT $LN51@Insert_nod

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 681  :                         _Pnode = _Pnode->_Parent;

  0008c	8b d1		 mov	 edx, ecx

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0008e	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00097	75 03		 jne	 SHORT $LN20@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00099	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN20@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0009c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000a9	75 0b		 jne	 SHORT $LN21@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  000ab	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000ae	8b fb		 mov	 edi, ebx
  000b0	89 16		 mov	 DWORD PTR [esi], edx
  000b2	89 33		 mov	 DWORD PTR [ebx], esi
  000b4	eb 1d		 jmp	 SHORT $LN49@Insert_nod
$LN21@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000b6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b8	3b 10		 cmp	 edx, DWORD PTR [eax]
  000ba	75 0a		 jne	 SHORT $LN23@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  000bc	89 30		 mov	 DWORD PTR [eax], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000be	8b fb		 mov	 edi, ebx
  000c0	89 16		 mov	 DWORD PTR [esi], edx
  000c2	89 33		 mov	 DWORD PTR [ebx], esi
  000c4	eb 0d		 jmp	 SHORT $LN49@Insert_nod
$LN23@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  000c6	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  000c9	8b fb		 mov	 edi, ebx
  000cb	89 16		 mov	 DWORD PTR [esi], edx
  000cd	89 33		 mov	 DWORD PTR [ebx], esi
  000cf	eb 02		 jmp	 SHORT $LN49@Insert_nod
$LN51@Insert_nod:
  000d1	8b f1		 mov	 esi, ecx
$LN49@Insert_nod:

; 682  :                         _Lrotate(_Pnode);
; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000d3	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000dc	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000e0	8b 07		 mov	 eax, DWORD PTR [edi]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000e5	8b 31		 mov	 esi, DWORD PTR [ecx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	89 01		 mov	 DWORD PTR [ecx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  000ec	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ef	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f3	75 03		 jne	 SHORT $LN27@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  000f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN27@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  000f8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000fb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00106	75 0b		 jne	 SHORT $LN28@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0010b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0010e	e9 cc 00 00 00	 jmp	 $LN52@Insert_nod
$LN28@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00119	75 0b		 jne	 SHORT $LN30@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0011b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0011e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00121	e9 b9 00 00 00	 jmp	 $LN52@Insert_nod
$LN30@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00126	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00128	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  0012b	e9 af 00 00 00	 jmp	 $LN52@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00130	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00134	75 1b		 jne	 SHORT $LN15@Insert_nod
$LN53@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00136	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  0013a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0013e	8b 07		 mov	 eax, DWORD PTR [edi]
  00140	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00143	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  00147	8b 07		 mov	 eax, DWORD PTR [edi]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	e9 91 00 00 00	 jmp	 $LN46@Insert_nod
$LN15@Insert_nod:

; 692  :                     _Pnode->_Parent->_Color          = _Black;
; 693  :                     _Parent_sibling->_Color          = _Black;
; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 696  :                 } else { // parent's sibling has red and black children
; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	3b d0		 cmp	 edx, eax
  00155	75 3e		 jne	 SHORT $LN39@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  00157	8b d1		 mov	 edx, ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00159	8b c8		 mov	 ecx, eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  0015b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  00160	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	75 03		 jne	 SHORT $LN34@Insert_nod

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00169	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN34@Insert_nod:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0016c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00174	8b 00		 mov	 eax, DWORD PTR [eax]
  00176	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00179	75 05		 jne	 SHORT $LN35@Insert_nod

; 491  :             _Myhead->_Parent = _Pnode;

  0017b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017e	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
  00182	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00185	75 05		 jne	 SHORT $LN37@Insert_nod

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00187	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  0018a	eb 02		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0018c	89 08		 mov	 DWORD PTR [eax], ecx
$LN38@Insert_nod:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0018e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 499  :         _Wherenode->_Parent = _Pnode;

  00191	8b fb		 mov	 edi, ebx
  00193	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN39@Insert_nod:

; 699  :                         _Rrotate(_Pnode);
; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  00195	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00199	8b 07		 mov	 eax, DWORD PTR [edi]
  0019b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001a2	8b 07		 mov	 eax, DWORD PTR [edi]
  001a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  001a7	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  001af	8b 06		 mov	 eax, DWORD PTR [esi]
  001b1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001b5	75 03		 jne	 SHORT $LN41@Insert_nod

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  001b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN41@Insert_nod:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  001ba	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001bd	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001c3	8b 00		 mov	 eax, DWORD PTR [eax]
  001c5	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001c8	75 05		 jne	 SHORT $LN42@Insert_nod

; 469  :             _Myhead->_Parent = _Pnode;

  001ca	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001cd	eb 0e		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001cf	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001d4	75 04		 jne	 SHORT $LN44@Insert_nod

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  001d6	89 30		 mov	 DWORD PTR [eax], esi

; 472  :         } else {

  001d8	eb 03		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  001da	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN45@Insert_nod:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  001dd	89 0e		 mov	 DWORD PTR [esi], ecx
$LN52@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001df	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN46@Insert_nod:
  001e2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001e5	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001e9	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_nod
  001ef	8b 4d f8	 mov	 ecx, DWORD PTR __Head$1$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }
; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001fc	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]

; 711  :     }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1186 = -8						; size = 4
tv1182 = -8						; size = 4
tv1149 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Extract, COMDAT
; _this$ = ecx

; 502  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 503  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 504  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++

; 505  : 
; 506  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 507  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 508  :         _Nodeptr _Pnode = _Erasednode;
; 509  : 
; 510  :         if (_Pnode->_Left->_Isnil) {

  00019	8b 55 fc	 mov	 edx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	75 18		 jne	 SHORT $LN86@Extract

; 511  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 512  :         } else if (_Pnode->_Right->_Isnil) {

  00027	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002b	74 04		 je	 SHORT $LN7@Extract

; 513  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  0002d	8b f8		 mov	 edi, eax

; 514  :         } else { // two subtrees, must lift successor node to replace erased

  0002f	eb 0e		 jmp	 SHORT $LN86@Extract
$LN7@Extract:

; 515  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]

; 516  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00034	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00037	3b ca		 cmp	 ecx, edx

; 517  :         }
; 518  : 
; 519  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  00039	0f 85 8b 00 00
	00		 jne	 $LN9@Extract
$LN86@Extract:

; 520  :             _Fixnodeparent = _Erasednode->_Parent;
; 521  :             if (!_Fixnode->_Isnil) {

  0003f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00043	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00046	75 03		 jne	 SHORT $LN11@Extract

; 522  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  00048	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 523  :             }
; 524  : 
; 525  :             if (_Myhead->_Parent == _Erasednode) {

  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004d	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  00050	75 05		 jne	 SHORT $LN12@Extract

; 526  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00052	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00055	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 527  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  00057	39 16		 cmp	 DWORD PTR [esi], edx
  00059	75 04		 jne	 SHORT $LN14@Extract

; 528  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005b	89 3e		 mov	 DWORD PTR [esi], edi

; 529  :             } else {

  0005d	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 530  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  0005f	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 531  :             }
; 532  : 
; 533  :             if (_Myhead->_Left == _Erasednode) {

  00062	8b 03		 mov	 eax, DWORD PTR [ebx]
  00064	39 10		 cmp	 DWORD PTR [eax], edx
  00066	75 2b		 jne	 SHORT $LN16@Extract

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00068	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006c	74 04		 je	 SHORT $LN42@Extract
  0006e	8b d6		 mov	 edx, esi
  00070	eb 1c		 jmp	 SHORT $LN48@Extract
$LN42@Extract:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00072	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00074	8b d7		 mov	 edx, edi

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00076	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007a	75 12		 jne	 SHORT $LN48@Extract
  0007c	0f 1f 40 00	 npad	 4
$LL47@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL47@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN48@Extract:

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0008e	89 10		 mov	 DWORD PTR [eax], edx
  00090	8b 55 fc	 mov	 edx, DWORD PTR __Erasednode$1$[ebp]
$LN16@Extract:

; 535  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 536  :             }
; 537  : 
; 538  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 03		 mov	 eax, DWORD PTR [ebx]
  00095	39 50 08	 cmp	 DWORD PTR [eax+8], edx
  00098	75 2b		 jne	 SHORT $LN17@Extract

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@Extract
  000a0	8b ce		 mov	 ecx, esi
  000a2	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a5	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000a8	eb 7c		 jmp	 SHORT $LN55@Extract
$LN44@Extract:

; 443  :         while (!_Pnode->_Right->_Isnil) {

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000ad	8b cf		 mov	 ecx, edi

; 443  :         while (!_Pnode->_Right->_Isnil) {

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN52@Extract
$LL51@Extract:

; 444  :             _Pnode = _Pnode->_Right;

  000b5	8b c8		 mov	 ecx, eax
  000b7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL51@Extract
$LN52@Extract:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000c2	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN17@Extract:

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000c5	8a 52 0c	 mov	 dl, BYTE PTR [edx+12]
  000c8	eb 5c		 jmp	 SHORT $LN55@Extract
$LN9@Extract:

; 543  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000ca	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 544  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000cd	8b 02		 mov	 eax, DWORD PTR [edx]
  000cf	89 01		 mov	 DWORD PTR [ecx], eax

; 545  : 
; 546  :             if (_Pnode == _Erasednode->_Right) {

  000d1	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  000d4	75 04		 jne	 SHORT $LN18@Extract

; 547  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000d6	8b f1		 mov	 esi, ecx

; 548  :             } else { // successor further down, link in place of erased

  000d8	eb 1a		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 549  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 550  :                 if (!_Fixnode->_Isnil) {

  000da	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000de	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000e1	75 03		 jne	 SHORT $LN20@Extract

; 551  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000e3	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 552  :                 }
; 553  : 
; 554  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000e6	89 3e		 mov	 DWORD PTR [esi], edi

; 555  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000e8	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000eb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 556  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000ee	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f1	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN19@Extract:

; 557  :             }
; 558  : 
; 559  :             if (_Myhead->_Parent == _Erasednode) {

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f6	39 50 04	 cmp	 DWORD PTR [eax+4], edx
  000f9	75 05		 jne	 SHORT $LN21@Extract

; 560  :                 _Myhead->_Parent = _Pnode; // link down from root

  000fb	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000fe	eb 0e		 jmp	 SHORT $LN24@Extract
$LN21@Extract:

; 561  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00100	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00103	39 10		 cmp	 DWORD PTR [eax], edx
  00105	75 04		 jne	 SHORT $LN23@Extract

; 562  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  00107	89 08		 mov	 DWORD PTR [eax], ecx

; 563  :             } else {

  00109	eb 03		 jmp	 SHORT $LN24@Extract
$LN23@Extract:

; 564  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0010b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN24@Extract:

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  0010e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  00111	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00114	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 101  :     _Left    = _STD move(_Right);

  00117	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0011a	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011d	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 102  :     _Right   = _STD move(_Tmp);

  00120	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00123	88 50 0c	 mov	 BYTE PTR [eax+12], dl
$LN55@Extract:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 571  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00126	80 fa 01	 cmp	 dl, 1
  00129	0f 85 46 01 00
	00		 jne	 $LN25@Extract

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 37 01 00
	00		 je	 $LN3@Extract
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Extract:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	89 75 f8	 mov	 DWORD PTR tv1186[ebp], esi
  00147	0f 85 24 01 00
	00		 jne	 $LN3@Extract

; 573  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  0014d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014f	3b f9		 cmp	 edi, ecx
  00151	0f 85 a2 00 00
	00		 jne	 $LN26@Extract

; 574  :                     _Pnode = _Fixnodeparent->_Right;

  00157	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 575  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  0015a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0015e	75 43		 jne	 SHORT $LN87@Extract

; 576  :                         _Pnode->_Color         = _Black;

  00160	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00164	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 577  :                         _Fixnodeparent->_Color = _Red;

  00167	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0016b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  00170	8b 01		 mov	 eax, DWORD PTR [ecx]
  00172	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00176	75 03		 jne	 SHORT $LN57@Extract

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00178	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Extract:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0017b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0017e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00181	8b 03		 mov	 eax, DWORD PTR [ebx]
  00183	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00186	75 05		 jne	 SHORT $LN58@Extract

; 469  :             _Myhead->_Parent = _Pnode;

  00188	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0018b	eb 0e		 jmp	 SHORT $LN61@Extract
$LN58@Extract:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  0018d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00190	3b 30		 cmp	 esi, DWORD PTR [eax]
  00192	75 04		 jne	 SHORT $LN60@Extract

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  00194	89 08		 mov	 DWORD PTR [eax], ecx

; 472  :         } else {

  00196	eb 03		 jmp	 SHORT $LN61@Extract
$LN60@Extract:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00198	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN61@Extract:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  0019b	89 31		 mov	 DWORD PTR [ecx], esi

; 477  :         _Wherenode->_Parent = _Pnode;

  0019d	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 578  :                         _Lrotate(_Fixnodeparent);
; 579  :                         _Pnode = _Fixnodeparent->_Right;

  001a0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN87@Extract:

; 580  :                     }
; 581  : 
; 582  :                     if (_Pnode->_Isnil) {

  001a3	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a7	0f 85 b1 00 00
	00		 jne	 $LN2@Extract

; 583  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 584  :                     } else if (_Pnode->_Left->_Color == _Black
; 585  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  001af	80 7a 0c 01	 cmp	 BYTE PTR [edx+12], 1
  001b3	75 0d		 jne	 SHORT $LN89@Extract
  001b5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001b8	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001bc	0f 84 98 00 00
	00		 je	 $LN93@Extract
$LN89@Extract:

; 586  :                         _Pnode->_Color = _Red;
; 587  :                         _Fixnode       = _Fixnodeparent;
; 588  :                     } else { // must rearrange right subtree
; 589  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001c5	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001c9	75 13		 jne	 SHORT $LN33@Extract

; 590  :                             _Pnode->_Left->_Color = _Black;

  001cb	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 591  :                             _Pnode->_Color        = _Red;

  001cf	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 592  :                             _Rrotate(_Pnode);

  001d3	51		 push	 ecx
  001d4	8b cb		 mov	 ecx, ebx
  001d6	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Rrotate

; 593  :                             _Pnode = _Fixnodeparent->_Right;

  001db	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 594  :                         }
; 595  : 
; 596  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  001de	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001e1	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 597  :                         _Fixnodeparent->_Color = _Black;

  001e4	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 598  :                         _Pnode->_Right->_Color = _Black;

  001e8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 599  :                         _Lrotate(_Fixnodeparent);

  001eb	8b cb		 mov	 ecx, ebx
  001ed	56		 push	 esi
  001ee	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001f2	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Lrotate

; 600  :                         break; // tree now recolored/rebalanced

  001f7	eb 78		 jmp	 SHORT $LN3@Extract
$LN26@Extract:

; 601  :                     }
; 602  :                 } else { // fixup right subtree
; 603  :                     _Pnode = _Fixnodeparent->_Left;
; 604  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  001f9	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001fd	75 44		 jne	 SHORT $LN88@Extract

; 605  :                         _Pnode->_Color         = _Black;

  001ff	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00203	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 606  :                         _Fixnodeparent->_Color = _Red;

  00205	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00209	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0020c	89 06		 mov	 DWORD PTR [esi], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0020e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00211	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00215	75 03		 jne	 SHORT $LN64@Extract

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00217	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN64@Extract:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0021a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0021d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00220	8b 03		 mov	 eax, DWORD PTR [ebx]
  00222	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00225	75 05		 jne	 SHORT $LN65@Extract

; 491  :             _Myhead->_Parent = _Pnode;

  00227	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0022a	eb 0f		 jmp	 SHORT $LN68@Extract
$LN65@Extract:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0022c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0022f	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00232	75 05		 jne	 SHORT $LN67@Extract

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00234	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  00237	eb 02		 jmp	 SHORT $LN68@Extract
$LN67@Extract:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00239	89 08		 mov	 DWORD PTR [eax], ecx
$LN68@Extract:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  0023b	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 499  :         _Wherenode->_Parent = _Pnode;

  0023e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 607  :                         _Rrotate(_Fixnodeparent);
; 608  :                         _Pnode = _Fixnodeparent->_Left;

  00241	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN88@Extract:

; 609  :                     }
; 610  : 
; 611  :                     if (_Pnode->_Isnil) {

  00243	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00247	75 15		 jne	 SHORT $LN2@Extract

; 612  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 613  :                     } else if (_Pnode->_Right->_Color == _Black
; 614  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  00249	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0024c	80 7a 0c 01	 cmp	 BYTE PTR [edx+12], 1
  00250	75 3a		 jne	 SHORT $LN90@Extract
  00252	8b 01		 mov	 eax, DWORD PTR [ecx]
  00254	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00258	75 32		 jne	 SHORT $LN90@Extract
$LN93@Extract:

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0025a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  0025e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00260	8b 4d f8	 mov	 ecx, DWORD PTR tv1186[ebp]
  00263	8b f9		 mov	 edi, ecx
  00265	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00268	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0026b	0f 85 cf fe ff
	ff		 jne	 $LL4@Extract
$LN3@Extract:

; 629  :                         break; // tree now recolored/rebalanced
; 630  :                     }
; 631  :                 }
; 632  :             }
; 633  : 
; 634  :             _Fixnode->_Color = _Black; // stopping node is black

  00271	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 635  :         }
; 636  : 
; 637  :         if (0 < _Mysize) {

  00275	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00278	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0027b	85 c9		 test	 ecx, ecx
  0027d	74 04		 je	 SHORT $LN40@Extract

; 638  :             --_Mysize;

  0027f	49		 dec	 ecx
  00280	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 639  :         }
; 640  : 
; 641  :         return _Erasednode;
; 642  :     }

  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	5b		 pop	 ebx
  00286	8b e5		 mov	 esp, ebp
  00288	5d		 pop	 ebp
  00289	c2 04 00	 ret	 4
$LN90@Extract:

; 615  :                         _Pnode->_Color = _Red;
; 616  :                         _Fixnode       = _Fixnodeparent;
; 617  :                     } else { // must rearrange left subtree
; 618  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  0028c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0028e	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00292	75 12		 jne	 SHORT $LN39@Extract

; 619  :                             _Pnode->_Right->_Color = _Black;

  00294	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 620  :                             _Pnode->_Color         = _Red;

  00298	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 621  :                             _Lrotate(_Pnode);

  0029c	51		 push	 ecx
  0029d	8b cb		 mov	 ecx, ebx
  0029f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Lrotate

; 622  :                             _Pnode = _Fixnodeparent->_Left;

  002a4	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@Extract:

; 623  :                         }
; 624  : 
; 625  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002a6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002a9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 626  :                         _Fixnodeparent->_Color = _Black;

  002ac	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 627  :                         _Pnode->_Left->_Color  = _Black;

  002b0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 628  :                         _Rrotate(_Fixnodeparent);

  002b2	8b cb		 mov	 ecx, ebx
  002b4	56		 push	 esi
  002b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Rrotate
  002be	eb b1		 jmp	 SHORT $LN3@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 480  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 494  :         } else {
; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;
; 499  :         _Wherenode->_Parent = _Pnode;
; 500  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 458  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 472  :         } else {
; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;
; 477  :         _Wherenode->_Parent = _Pnode;
; 478  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::~_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >, COMDAT
; _this$ = ecx

; 1084 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 23		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
$LN7@Tree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	6a 18		 push	 24			; 00000018H
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1091 :     }

  0003f	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::~_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z
_TEXT	SEGMENT
__Op$1 = -12						; size = 12
__Val$ = 8						; size = 4
?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z PROC ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove, COMDAT
; _this$ = ecx

; 1593 :     auto remove(const _Ty& _Val) { // erase each element matching _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1527 :         explicit _List_node_remove_op(list& _List_) noexcept : _List(_List_), _Head(), _Tail(_STD addressof(_Head)) {}

  0000b	8d 45 f8	 lea	 eax, DWORD PTR __Op$1[ebp+4]
  0000e	33 d2		 xor	 edx, edx
  00010	89 7d f4	 mov	 DWORD PTR __Op$1[ebp], edi
  00013	89 55 f8	 mov	 DWORD PTR __Op$1[ebp+4], edx
  00016	89 45 fc	 mov	 DWORD PTR __Op$1[ebp+8], eax

; 1601 :         const auto _Last         = _My_data._Myhead;

  00019	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1602 :         const size_type _Oldsize = _My_data._Mysize;
; 1603 :         for (auto _First = _Last->_Next; _First != _Last;) {

  0001b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001d	3b c3		 cmp	 eax, ebx
  0001f	74 36		 je	 SHORT $LN7@remove
  00021	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
$LL6@remove:

; 1594 :         return remove_if([&](const _Ty& _Other) { return _Other == _Val; });

  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1604 :             auto _Next = _First->_Next;

  00027	8b 30		 mov	 esi, DWORD PTR [eax]

; 1594 :         return remove_if([&](const _Ty& _Other) { return _Other == _Val; });

  00029	3b 0a		 cmp	 ecx, DWORD PTR [edx]

; 1605 :             if (_Pred(_First->_Myval)) {

  0002b	75 21		 jne	 SHORT $LN16@remove

; 1538 :             --_List._Mypair._Myval2._Mysize;

  0002d	ff 4f 04	 dec	 DWORD PTR [edi+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00030	8b 10		 mov	 edx, DWORD PTR [eax]

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1540 :             const auto _Prev = _Removed->_Prev;

  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1541 :             _Prev->_Next     = _Next;

  0003b	89 11		 mov	 DWORD PTR [ecx], edx

; 1542 :             _Next->_Prev     = _Prev;

  0003d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1543 : 
; 1544 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1545 :             // mark removed node for IDL to snip out later
; 1546 :             _Removed->_Prev = _Nodeptr();
; 1547 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1548 : 
; 1549 :             *_Tail = _Removed;

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __Op$1[ebp+8]
  00043	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 1550 :             _Tail  = _STD addressof(_Removed->_Next);

  00048	8b 7d f4	 mov	 edi, DWORD PTR __Op$1[ebp]
  0004b	89 45 fc	 mov	 DWORD PTR __Op$1[ebp+8], eax
$LN16@remove:

; 1609 :             _First = _Next;

  0004e	8b c6		 mov	 eax, esi
  00050	3b f3		 cmp	 esi, ebx
  00052	75 d0		 jne	 SHORT $LL6@remove
  00054	8b 55 f8	 mov	 edx, DWORD PTR __Op$1[ebp+4]
$LN7@remove:

; 1576 :             auto _Target = _Head;

  00057	85 d2		 test	 edx, edx

; 1577 :             while (_Target) {

  00059	74 18		 je	 SHORT $LN21@remove
  0005b	0f 1f 44 00 00	 npad	 5
$LL20@remove:

; 1578 :                 auto _Next = _Target->_Next;

  00060	8b 32		 mov	 esi, DWORD PTR [edx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00062	6a 0c		 push	 12			; 0000000cH
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006a	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1584 :                 _Target = _Next;

  0006d	8b d6		 mov	 edx, esi
  0006f	85 f6		 test	 esi, esi
  00071	75 ed		 jne	 SHORT $LL20@remove
$LN21@remove:
  00073	5f		 pop	 edi

; 1595 :     }

  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ENDP ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z PROC ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back, COMDAT
; _this$ = ecx

; 1242 :     void push_back(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 1005 :         if (_Mysize == max_size()) {

  00029	81 7e 04 55 55
	55 15		 cmp	 DWORD PTR [esi+4], 357913941 ; 15555555H

; 1243 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00030	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1005 :         if (_Mysize == max_size()) {

  00032	74 46		 je	 SHORT $LN62@push_back
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00034	89 75 ec	 mov	 DWORD PTR __Op$2[ebp], esi

; 79   :         return ::operator new(_Bytes);

  00037	6a 0c		 push	 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 582  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00040	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00047	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 584  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0004f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 584  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00052	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00054	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1010 :         ++_Mysize;

  00057	ff 46 04	 inc	 DWORD PTR [esi+4]

; 597  :         const pointer _Insert_after = _Insert_before->_Prev;

  0005a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 598  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  0005d	89 38		 mov	 DWORD PTR [eax], edi

; 599  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0005f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 600  :         const auto _Result    = this->_Ptr;
; 601  :         this->_Ptr            = pointer{};
; 602  :         _Insert_before->_Prev = _Result;

  00062	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 603  :         _Insert_after->_Next  = _Result;

  00065	89 01		 mov	 DWORD PTR [ecx], eax

; 1244 :     }

  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
$LN62@push_back:

; 1006 :             _Xlength_error("list too long");

  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0007f	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN60@push_back:
  00084	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ENDP ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ PROC ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >, COMDAT
; _this$ = ecx

; 1036 :     ~list() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 323  :         _Head->_Prev->_Next = nullptr;

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  0000e	8b 02		 mov	 eax, DWORD PTR [edx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN7@list
  00014	56		 push	 esi
$LL8@list:

; 327  :             _Pnext = _Pnode->_Next;

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL8@list
  00028	5e		 pop	 esi
$LN7@list:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	6a 0c		 push	 12			; 0000000cH
  0002b	ff 37		 push	 DWORD PTR [edi]
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1042 :     }

  00036	c3		 ret	 0
??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ENDP ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ
_TEXT	SEGMENT
?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ PROC ; UI::CWindowManager::__ClearReserveDeleteWindowList, COMDAT
; _this$ = ecx

; 701  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00004	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 702  : 		for (TWindowContainer::iterator itor = m_ReserveDeleteWindowList.begin(); itor != m_ReserveDeleteWindowList.end(); ++itor)

  0000e	74 19		 je	 SHORT $LN3@ClearReser
$LL19@ClearReser:

; 703  : 		{
; 704  : 			CWindow * pWin = *itor;
; 705  : #ifdef __WINDOW_LEAK_CHECK__
; 706  : 			gs_kSet_pkWnd.erase(pWin);
; 707  : #endif
; 708  : 			delete pWin;

  00010	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00013	85 c9		 test	 ecx, ecx
  00015	74 06		 je	 SHORT $LN2@ClearReser
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	6a 01		 push	 1
  0001b	ff 10		 call	 DWORD PTR [eax]
$LN2@ClearReser:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0001f	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]

; 198  :         return this->_Ptr == _Right._Ptr;

  00025	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 702  : 		for (TWindowContainer::iterator itor = m_ReserveDeleteWindowList.begin(); itor != m_ReserveDeleteWindowList.end(); ++itor)

  00027	75 e7		 jne	 SHORT $LL19@ClearReser
$LN3@ClearReser:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 323  :         _Head->_Prev->_Next = nullptr;

  00029	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  00032	8b 00		 mov	 eax, DWORD PTR [eax]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00034	85 c0		 test	 eax, eax
  00036	74 13		 je	 SHORT $LN40@ClearReser
$LL41@ClearReser:

; 327  :             _Pnext = _Pnode->_Next;

  00038	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	6a 0c		 push	 12			; 0000000cH
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00042	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00045	8b c6		 mov	 eax, esi
  00047	85 f6		 test	 esi, esi
  00049	75 ed		 jne	 SHORT $LL41@ClearReser
$LN40@ClearReser:

; 1421 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0004b	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  00051	89 00		 mov	 DWORD PTR [eax], eax

; 1422 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00053	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  00059	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1423 :         _My_data._Mysize        = 0;

  0005c	c7 87 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+132], 0
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 712  : 	}

  00068	c3		 ret	 0
?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ ENDP ; UI::CWindowManager::__ClearReserveDeleteWindowList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
$T2 = 12						; size = 4
$T3 = 12						; size = 4
$T4 = 12						; size = 4
$T5 = 12						; size = 4
$T6 = 12						; size = 4
$T7 = 12						; size = 4
$T8 = 12						; size = 4
$T9 = 12						; size = 4
$T10 = 12						; size = 4
$T11 = 12						; size = 4
$T12 = 12						; size = 4
$T13 = 12						; size = 4
$T14 = 12						; size = 4
$T15 = 12						; size = 4
$T16 = 12						; size = 4
$T17 = 12						; size = 4
$T18 = 12						; size = 4
_dwWndType$ = 12					; size = 4
?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z PROC ; UI::CWindowManager::__NewWindow, COMDAT
; _this$ = ecx

; 108  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 109  : 		switch(dwWndType)

  00022	8b 45 0c	 mov	 eax, DWORD PTR _dwWndType$[ebp]
  00025	48		 dec	 eax
  00026	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00029	0f 87 a3 03 00
	00		 ja	 $LN20@NewWindow
  0002f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN73@NewWindow[eax*4]
$LN4@NewWindow:

; 110  : 		{
; 111  : 			case WT_SLOT:
; 112  : 				return new CSlotWindow(po);

  00036	68 d8 00 00 00	 push	 216			; 000000d8H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 0c	 mov	 DWORD PTR $T18[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	0f 84 b0 03 00
	00		 je	 $LN54@NewWindow
  00055	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ??0CSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CSlotWindow::CSlotWindow

; 164  : 	}

  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
$LN5@NewWindow:

; 113  : 				break;
; 114  : 			case WT_GRIDSLOT:
; 115  : 				return new CGridSlotWindow(po);

  00070	68 ec 00 00 00	 push	 236			; 000000ecH
  00075	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007a	83 c4 04	 add	 esp, 4
  0007d	89 45 0c	 mov	 DWORD PTR $T17[ebp], eax
  00080	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00087	85 c0		 test	 eax, eax
  00089	0f 84 76 03 00
	00		 je	 $LN54@NewWindow
  0008f	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00092	8b c8		 mov	 ecx, eax
  00094	e8 00 00 00 00	 call	 ??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CGridSlotWindow::CGridSlotWindow

; 164  : 	}

  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a3	59		 pop	 ecx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 08 00	 ret	 8
$LN6@NewWindow:

; 116  : 				break;
; 117  : 			case WT_TEXTLINE:
; 118  : 				return new CTextLine(po);

  000aa	68 0c 01 00 00	 push	 268			; 0000010cH
  000af	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b4	83 c4 04	 add	 esp, 4
  000b7	89 45 0c	 mov	 DWORD PTR $T16[ebp], eax
  000ba	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000c1	85 c0		 test	 eax, eax
  000c3	0f 84 3c 03 00
	00		 je	 $LN54@NewWindow
  000c9	ff 75 08	 push	 DWORD PTR _po$[ebp]
  000cc	8b c8		 mov	 ecx, eax
  000ce	e8 00 00 00 00	 call	 ??0CTextLine@UI@@QAE@PAU_object@@@Z ; UI::CTextLine::CTextLine

; 164  : 	}

  000d3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dd	59		 pop	 ecx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 08 00	 ret	 8
$LN7@NewWindow:

; 119  : 				break;
; 120  : 			case WT_MARKBOX:
; 121  : 				return new CMarkBox(po);

  000e4	68 80 00 00 00	 push	 128			; 00000080H
  000e9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ee	83 c4 04	 add	 esp, 4
  000f1	89 45 0c	 mov	 DWORD PTR $T15[ebp], eax
  000f4	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000fb	85 c0		 test	 eax, eax
  000fd	0f 84 02 03 00
	00		 je	 $LN54@NewWindow
  00103	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00106	8b c8		 mov	 ecx, eax
  00108	e8 00 00 00 00	 call	 ??0CMarkBox@UI@@QAE@PAU_object@@@Z ; UI::CMarkBox::CMarkBox

; 164  : 	}

  0010d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00110	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00117	59		 pop	 ecx
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 08 00	 ret	 8
$LN8@NewWindow:

; 122  : 				break;
; 123  : 			case WT_IMAGEBOX:
; 124  : 				return new CImageBox(po);

  0011e	68 80 00 00 00	 push	 128			; 00000080H
  00123	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00128	83 c4 04	 add	 esp, 4
  0012b	89 45 0c	 mov	 DWORD PTR $T14[ebp], eax
  0012e	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00135	85 c0		 test	 eax, eax
  00137	0f 84 c8 02 00
	00		 je	 $LN54@NewWindow
  0013d	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00140	8b c8		 mov	 ecx, eax
  00142	e8 00 00 00 00	 call	 ??0CImageBox@UI@@QAE@PAU_object@@@Z ; UI::CImageBox::CImageBox

; 164  : 	}

  00147	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00151	59		 pop	 ecx
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 08 00	 ret	 8
$LN9@NewWindow:

; 125  : 				break;
; 126  : 			case WT_EXP_IMAGEBOX:
; 127  : 				return new CExpandedImageBox(po);

  00158	68 80 00 00 00	 push	 128			; 00000080H
  0015d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00162	83 c4 04	 add	 esp, 4
  00165	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax
  00168	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  0016f	85 c0		 test	 eax, eax
  00171	0f 84 8e 02 00
	00		 je	 $LN54@NewWindow
  00177	ff 75 08	 push	 DWORD PTR _po$[ebp]
  0017a	8b c8		 mov	 ecx, eax
  0017c	e8 00 00 00 00	 call	 ??0CExpandedImageBox@UI@@QAE@PAU_object@@@Z ; UI::CExpandedImageBox::CExpandedImageBox

; 164  : 	}

  00181	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00184	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018b	59		 pop	 ecx
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c2 08 00	 ret	 8
$LN10@NewWindow:

; 128  : 				break;
; 129  : 			case WT_ANI_IMAGEBOX:
; 130  : 				return new CAniImageBox(po);

  00192	68 94 00 00 00	 push	 148			; 00000094H
  00197	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0019c	83 c4 04	 add	 esp, 4
  0019f	89 45 0c	 mov	 DWORD PTR $T12[ebp], eax
  001a2	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  001a9	85 c0		 test	 eax, eax
  001ab	0f 84 54 02 00
	00		 je	 $LN54@NewWindow
  001b1	ff 75 08	 push	 DWORD PTR _po$[ebp]
  001b4	8b c8		 mov	 ecx, eax
  001b6	e8 00 00 00 00	 call	 ??0CAniImageBox@UI@@QAE@PAU_object@@@Z ; UI::CAniImageBox::CAniImageBox

; 164  : 	}

  001bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c5	59		 pop	 ecx
  001c6	8b e5		 mov	 esp, ebp
  001c8	5d		 pop	 ebp
  001c9	c2 08 00	 ret	 8
$LN11@NewWindow:

; 131  : 				break;
; 132  : 			case WT_BUTTON:
; 133  : 				return new CButton(po);

  001cc	68 34 01 00 00	 push	 308			; 00000134H
  001d1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001d6	83 c4 04	 add	 esp, 4
  001d9	89 45 0c	 mov	 DWORD PTR $T11[ebp], eax
  001dc	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  001e3	85 c0		 test	 eax, eax
  001e5	0f 84 1a 02 00
	00		 je	 $LN54@NewWindow
  001eb	ff 75 08	 push	 DWORD PTR _po$[ebp]
  001ee	8b c8		 mov	 ecx, eax
  001f0	e8 00 00 00 00	 call	 ??0CButton@UI@@QAE@PAU_object@@@Z ; UI::CButton::CButton

; 164  : 	}

  001f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ff	59		 pop	 ecx
  00200	8b e5		 mov	 esp, ebp
  00202	5d		 pop	 ebp
  00203	c2 08 00	 ret	 8
$LN12@NewWindow:

; 134  : 				break;
; 135  : 			case WT_RATIOBUTTON:
; 136  : 				return new CRadioButton(po);

  00206	68 34 01 00 00	 push	 308			; 00000134H
  0020b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00210	83 c4 04	 add	 esp, 4
  00213	89 45 0c	 mov	 DWORD PTR $T10[ebp], eax
  00216	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  0021d	85 c0		 test	 eax, eax
  0021f	0f 84 e0 01 00
	00		 je	 $LN54@NewWindow
  00225	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00228	8b c8		 mov	 ecx, eax
  0022a	e8 00 00 00 00	 call	 ??0CRadioButton@UI@@QAE@PAU_object@@@Z ; UI::CRadioButton::CRadioButton

; 164  : 	}

  0022f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00232	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00239	59		 pop	 ecx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 08 00	 ret	 8
$LN13@NewWindow:

; 137  : 				break;
; 138  : 			case WT_TOGGLEBUTTON:
; 139  : 				return new CToggleButton(po);

  00240	68 34 01 00 00	 push	 308			; 00000134H
  00245	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0024a	83 c4 04	 add	 esp, 4
  0024d	89 45 0c	 mov	 DWORD PTR $T9[ebp], eax
  00250	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  00257	85 c0		 test	 eax, eax
  00259	0f 84 a6 01 00
	00		 je	 $LN54@NewWindow
  0025f	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00262	8b c8		 mov	 ecx, eax
  00264	e8 00 00 00 00	 call	 ??0CToggleButton@UI@@QAE@PAU_object@@@Z ; UI::CToggleButton::CToggleButton

; 164  : 	}

  00269	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0026c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00273	59		 pop	 ecx
  00274	8b e5		 mov	 esp, ebp
  00276	5d		 pop	 ebp
  00277	c2 08 00	 ret	 8
$LN14@NewWindow:

; 140  : 				break;
; 141  : 			case WT_DRAGBUTTON:
; 142  : 				return new CDragButton(po);

  0027a	68 44 01 00 00	 push	 324			; 00000144H
  0027f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00284	83 c4 04	 add	 esp, 4
  00287	89 45 0c	 mov	 DWORD PTR $T8[ebp], eax
  0028a	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00291	85 c0		 test	 eax, eax
  00293	0f 84 6c 01 00
	00		 je	 $LN54@NewWindow
  00299	ff 75 08	 push	 DWORD PTR _po$[ebp]
  0029c	8b c8		 mov	 ecx, eax
  0029e	e8 00 00 00 00	 call	 ??0CDragButton@UI@@QAE@PAU_object@@@Z ; UI::CDragButton::CDragButton

; 164  : 	}

  002a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ad	59		 pop	 ecx
  002ae	8b e5		 mov	 esp, ebp
  002b0	5d		 pop	 ebp
  002b1	c2 08 00	 ret	 8
$LN15@NewWindow:

; 143  : 				break;
; 144  : 			case WT_BOX:
; 145  : 				return new CBox(po);

  002b4	68 80 00 00 00	 push	 128			; 00000080H
  002b9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002be	83 c4 04	 add	 esp, 4
  002c1	89 45 0c	 mov	 DWORD PTR $T7[ebp], eax
  002c4	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  002cb	85 c0		 test	 eax, eax
  002cd	0f 84 32 01 00
	00		 je	 $LN54@NewWindow
  002d3	ff 75 08	 push	 DWORD PTR _po$[ebp]
  002d6	8b c8		 mov	 ecx, eax
  002d8	e8 00 00 00 00	 call	 ??0CBox@UI@@QAE@PAU_object@@@Z ; UI::CBox::CBox

; 164  : 	}

  002dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e7	59		 pop	 ecx
  002e8	8b e5		 mov	 esp, ebp
  002ea	5d		 pop	 ebp
  002eb	c2 08 00	 ret	 8
$LN16@NewWindow:

; 146  : 				break;
; 147  : 			case WT_BAR:
; 148  : 				return new CBar(po);

  002ee	68 80 00 00 00	 push	 128			; 00000080H
  002f3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002f8	83 c4 04	 add	 esp, 4
  002fb	89 45 0c	 mov	 DWORD PTR $T6[ebp], eax
  002fe	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00305	85 c0		 test	 eax, eax
  00307	0f 84 f8 00 00
	00		 je	 $LN54@NewWindow
  0030d	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00310	8b c8		 mov	 ecx, eax
  00312	e8 00 00 00 00	 call	 ??0CBar@UI@@QAE@PAU_object@@@Z ; UI::CBar::CBar

; 164  : 	}

  00317	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0031a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00321	59		 pop	 ecx
  00322	8b e5		 mov	 esp, ebp
  00324	5d		 pop	 ebp
  00325	c2 08 00	 ret	 8
$LN17@NewWindow:

; 149  : 				break;
; 150  : 			case WT_LINE:
; 151  : 				return new CLine(po);

  00328	68 80 00 00 00	 push	 128			; 00000080H
  0032d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00332	83 c4 04	 add	 esp, 4
  00335	89 45 0c	 mov	 DWORD PTR $T5[ebp], eax
  00338	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0033f	85 c0		 test	 eax, eax
  00341	0f 84 be 00 00
	00		 je	 $LN54@NewWindow
  00347	ff 75 08	 push	 DWORD PTR _po$[ebp]
  0034a	8b c8		 mov	 ecx, eax
  0034c	e8 00 00 00 00	 call	 ??0CLine@UI@@QAE@PAU_object@@@Z ; UI::CLine::CLine

; 164  : 	}

  00351	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00354	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0035b	59		 pop	 ecx
  0035c	8b e5		 mov	 esp, ebp
  0035e	5d		 pop	 ebp
  0035f	c2 08 00	 ret	 8
$LN18@NewWindow:

; 152  : 				break;
; 153  : 			case WT_BAR3D:
; 154  : 				return new CBar3D(po);

  00362	68 88 00 00 00	 push	 136			; 00000088H
  00367	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0036c	83 c4 04	 add	 esp, 4
  0036f	89 45 0c	 mov	 DWORD PTR $T4[ebp], eax
  00372	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00379	85 c0		 test	 eax, eax
  0037b	0f 84 84 00 00
	00		 je	 $LN54@NewWindow
  00381	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00384	8b c8		 mov	 ecx, eax
  00386	e8 00 00 00 00	 call	 ??0CBar3D@UI@@QAE@PAU_object@@@Z ; UI::CBar3D::CBar3D

; 164  : 	}

  0038b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0038e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00395	59		 pop	 ecx
  00396	8b e5		 mov	 esp, ebp
  00398	5d		 pop	 ebp
  00399	c2 08 00	 ret	 8
$LN19@NewWindow:

; 155  : 				break;
; 156  : 			case WT_NUMLINE:
; 157  : 				return new CNumberLine(po);

  0039c	68 c0 00 00 00	 push	 192			; 000000c0H
  003a1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003a6	83 c4 04	 add	 esp, 4
  003a9	89 45 0c	 mov	 DWORD PTR $T3[ebp], eax
  003ac	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  003b3	85 c0		 test	 eax, eax
  003b5	74 4e		 je	 SHORT $LN54@NewWindow
  003b7	ff 75 08	 push	 DWORD PTR _po$[ebp]
  003ba	8b c8		 mov	 ecx, eax
  003bc	e8 00 00 00 00	 call	 ??0CNumberLine@UI@@QAE@PAU_object@@@Z ; UI::CNumberLine::CNumberLine

; 164  : 	}

  003c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003cb	59		 pop	 ecx
  003cc	8b e5		 mov	 esp, ebp
  003ce	5d		 pop	 ebp
  003cf	c2 08 00	 ret	 8
$LN20@NewWindow:

; 158  : 				break;
; 159  : 			default:
; 160  : 				assert(!"CWindowManager::__NewWindow");
; 161  : 				break;
; 162  : 		}
; 163  : 		return new CWindow(po);

  003d2	6a 7c		 push	 124			; 0000007cH
  003d4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003d9	83 c4 04	 add	 esp, 4
  003dc	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
  003df	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 16 ; 00000010H
  003e6	85 c0		 test	 eax, eax
  003e8	74 1b		 je	 SHORT $LN54@NewWindow
  003ea	ff 75 08	 push	 DWORD PTR _po$[ebp]
  003ed	8b c8		 mov	 ecx, eax
  003ef	e8 00 00 00 00	 call	 ??0CWindow@UI@@QAE@PAU_object@@@Z ; UI::CWindow::CWindow

; 164  : 	}

  003f4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003f7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003fe	59		 pop	 ecx
  003ff	8b e5		 mov	 esp, ebp
  00401	5d		 pop	 ebp
  00402	c2 08 00	 ret	 8
$LN54@NewWindow:
  00405	33 c0		 xor	 eax, eax
  00407	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0040a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00411	59		 pop	 ecx
  00412	8b e5		 mov	 esp, ebp
  00414	5d		 pop	 ebp
  00415	c2 08 00	 ret	 8
$LN73@NewWindow:
  00418	00 00 00 00	 DD	 $LN4@NewWindow
  0041c	00 00 00 00	 DD	 $LN5@NewWindow
  00420	00 00 00 00	 DD	 $LN6@NewWindow
  00424	00 00 00 00	 DD	 $LN7@NewWindow
  00428	00 00 00 00	 DD	 $LN8@NewWindow
  0042c	00 00 00 00	 DD	 $LN9@NewWindow
  00430	00 00 00 00	 DD	 $LN10@NewWindow
  00434	00 00 00 00	 DD	 $LN11@NewWindow
  00438	00 00 00 00	 DD	 $LN12@NewWindow
  0043c	00 00 00 00	 DD	 $LN13@NewWindow
  00440	00 00 00 00	 DD	 $LN14@NewWindow
  00444	00 00 00 00	 DD	 $LN15@NewWindow
  00448	00 00 00 00	 DD	 $LN16@NewWindow
  0044c	00 00 00 00	 DD	 $LN17@NewWindow
  00450	00 00 00 00	 DD	 $LN18@NewWindow
  00454	00 00 00 00	 DD	 $LN19@NewWindow
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$0:
  00000	68 d8 00 00 00	 push	 216			; 000000d8H
  00005	8b 45 0c	 mov	 eax, DWORD PTR $T18[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$1:
  00012	68 ec 00 00 00	 push	 236			; 000000ecH
  00017	8b 45 0c	 mov	 eax, DWORD PTR $T17[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$2:
  00024	68 0c 01 00 00	 push	 268			; 0000010cH
  00029	8b 45 0c	 mov	 eax, DWORD PTR $T16[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
  00035	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$3:
  00036	68 80 00 00 00	 push	 128			; 00000080H
  0003b	8b 45 0c	 mov	 eax, DWORD PTR $T15[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00044	83 c4 08	 add	 esp, 8
  00047	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$4:
  00048	68 80 00 00 00	 push	 128			; 00000080H
  0004d	8b 45 0c	 mov	 eax, DWORD PTR $T14[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
  00059	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$5:
  0005a	68 80 00 00 00	 push	 128			; 00000080H
  0005f	8b 45 0c	 mov	 eax, DWORD PTR $T13[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00068	83 c4 08	 add	 esp, 8
  0006b	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$6:
  0006c	68 94 00 00 00	 push	 148			; 00000094H
  00071	8b 45 0c	 mov	 eax, DWORD PTR $T12[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007a	83 c4 08	 add	 esp, 8
  0007d	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$7:
  0007e	68 34 01 00 00	 push	 308			; 00000134H
  00083	8b 45 0c	 mov	 eax, DWORD PTR $T11[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008c	83 c4 08	 add	 esp, 8
  0008f	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$8:
  00090	68 34 01 00 00	 push	 308			; 00000134H
  00095	8b 45 0c	 mov	 eax, DWORD PTR $T10[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009e	83 c4 08	 add	 esp, 8
  000a1	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$9:
  000a2	68 34 01 00 00	 push	 308			; 00000134H
  000a7	8b 45 0c	 mov	 eax, DWORD PTR $T9[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b0	83 c4 08	 add	 esp, 8
  000b3	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$10:
  000b4	68 44 01 00 00	 push	 324			; 00000144H
  000b9	8b 45 0c	 mov	 eax, DWORD PTR $T8[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c2	83 c4 08	 add	 esp, 8
  000c5	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$11:
  000c6	68 80 00 00 00	 push	 128			; 00000080H
  000cb	8b 45 0c	 mov	 eax, DWORD PTR $T7[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d4	83 c4 08	 add	 esp, 8
  000d7	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$12:
  000d8	68 80 00 00 00	 push	 128			; 00000080H
  000dd	8b 45 0c	 mov	 eax, DWORD PTR $T6[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e6	83 c4 08	 add	 esp, 8
  000e9	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$13:
  000ea	68 80 00 00 00	 push	 128			; 00000080H
  000ef	8b 45 0c	 mov	 eax, DWORD PTR $T5[ebp]
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f8	83 c4 08	 add	 esp, 8
  000fb	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$14:
  000fc	68 88 00 00 00	 push	 136			; 00000088H
  00101	8b 45 0c	 mov	 eax, DWORD PTR $T4[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010a	83 c4 08	 add	 esp, 8
  0010d	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$15:
  0010e	68 c0 00 00 00	 push	 192			; 000000c0H
  00113	8b 45 0c	 mov	 eax, DWORD PTR $T3[ebp]
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0011c	83 c4 08	 add	 esp, 8
  0011f	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$16:
  00120	6a 7c		 push	 124			; 0000007cH
  00122	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0012b	83 c4 08	 add	 esp, 8
  0012e	c3		 ret	 0
  0012f	cc		 int	 3
  00130	cc		 int	 3
  00131	cc		 int	 3
  00132	cc		 int	 3
  00133	cc		 int	 3
__ehhandler$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z:
  00134	90		 npad	 1
  00135	90		 npad	 1
  00136	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0013a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0013d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00140	33 c8		 xor	 ecx, eax
  00142	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00147	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z
  0014c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z ENDP ; UI::CWindowManager::__NewWindow
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?__PickWindow@CWindowManager@UI@@AAEPAVCWindow@2@JJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?__PickWindow@CWindowManager@UI@@AAEPAVCWindow@2@JJ@Z PROC ; UI::CWindowManager::__PickWindow, COMDAT
; _this$ = ecx

; 727  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 728  : 		if (m_pLockWindow)

  00006	8b 4b 5c	 mov	 ecx, DWORD PTR [ebx+92]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 07		 je	 SHORT $LN8@PickWindow
  0000d	5b		 pop	 ebx

; 751  : 	}

  0000e	5d		 pop	 ebp

; 729  : 		{
; 730  : 			return m_pLockWindow->PickWindow(x, y);

  0000f	e9 00 00 00 00	 jmp	 ?PickWindow@CWindow@UI@@QAEPAV12@JJ@Z ; UI::CWindow::PickWindow
$LN8@PickWindow:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00014	8b 83 88 00 00
	00		 mov	 eax, DWORD PTR [ebx+136]
  0001a	56		 push	 esi
  0001b	57		 push	 edi

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0001c	8b 30		 mov	 esi, DWORD PTR [eax]
  0001e	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 733  : 		for (TWindowContainer::iterator itor = m_PickAlwaysWindowList.begin(); itor != m_PickAlwaysWindowList.end(); ++itor)

  00020	74 29		 je	 SHORT $LN97@PickWindow
$LL24@PickWindow:

; 734  : 		{
; 735  : 			CWindow * pWindow = *itor;

  00022	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 736  : 			if (pWindow->IsRendering())

  00025	8b cf		 mov	 ecx, edi
  00027	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0002c	84 c0		 test	 al, al
  0002e	74 11		 je	 SHORT $LN2@PickWindow

; 737  : 			if (pWindow->IsIn(x, y))

  00030	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00033	8b cf		 mov	 ecx, edi
  00035	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00038	e8 00 00 00 00	 call	 ?IsIn@CWindow@UI@@QAE_NJJ@Z ; UI::CWindow::IsIn
  0003d	84 c0		 test	 al, al
  0003f	75 42		 jne	 SHORT $LN89@PickWindow
$LN2@PickWindow:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00041	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00043	3b b3 88 00 00
	00		 cmp	 esi, DWORD PTR [ebx+136]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 733  : 		for (TWindowContainer::iterator itor = m_PickAlwaysWindowList.begin(); itor != m_PickAlwaysWindowList.end(); ++itor)

  00049	75 d7		 jne	 SHORT $LL24@PickWindow
$LN97@PickWindow:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0004b	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [ebx+148]

; 198  :         return this->_Ptr == _Right._Ptr;

  00051	3b 00		 cmp	 eax, DWORD PTR [eax]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 741  : 		for (TWindowContainer::reverse_iterator ritor = m_LayerWindowList.rbegin(); ritor != m_LayerWindowList.rend(); ++ritor)

  00053	74 25		 je	 SHORT $LN6@PickWindow
$LL58@PickWindow:

; 744  : 			CWindow * pPickedWindow = pLayer->PickWindow(x, y);

  00055	ff 75 0c	 push	 DWORD PTR _y$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 176  :         const auto _New_ptr = this->_Ptr->_Prev;

  00058	8d 78 04	 lea	 edi, DWORD PTR [eax+4]

; 177  : #if _ITERATOR_DEBUG_LEVEL == 2
; 178  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());
; 179  :         _STL_ASSERT(_Mycont, "cannot decrement value-initialized list iterator");
; 180  :         _STL_VERIFY(_New_ptr != _Mycont->_Myhead, "cannot decrement begin list iterator");
; 181  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 182  : 
; 183  :         this->_Ptr = _New_ptr;

  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 744  : 			CWindow * pPickedWindow = pLayer->PickWindow(x, y);

  0005d	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00060	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?PickWindow@CWindow@UI@@QAEPAV12@JJ@Z ; UI::CWindow::PickWindow

; 745  : 
; 746  : 			if (pPickedWindow != pLayer)

  0006a	3b c6		 cmp	 eax, esi
  0006c	75 0e		 jne	 SHORT $LN98@PickWindow
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0006e	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [ebx+148]

; 183  :         this->_Ptr = _New_ptr;

  00074	8b 07		 mov	 eax, DWORD PTR [edi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00076	3b 01		 cmp	 eax, DWORD PTR [ecx]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 741  : 		for (TWindowContainer::reverse_iterator ritor = m_LayerWindowList.rbegin(); ritor != m_LayerWindowList.rend(); ++ritor)

  00078	75 db		 jne	 SHORT $LL58@PickWindow
$LN6@PickWindow:

; 747  : 				return pPickedWindow;
; 748  : 		}
; 749  : 
; 750  : 		return NULL;

  0007a	33 c0		 xor	 eax, eax
$LN98@PickWindow:
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx

; 751  : 	}

  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
$LN89@PickWindow:

; 738  : 				return pWindow;

  00083	8b c7		 mov	 eax, edi
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx

; 751  : 	}

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
?__PickWindow@CWindowManager@UI@@AAEPAVCWindow@2@JJ@Z ENDP ; UI::CWindowManager::__PickWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z PROC	; UI::CWindowManager::SetMousePosition, COMDAT
; _this$ = ecx

; 754  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 755  : 		if (m_iHres==0)

  00003	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00007	74 22		 je	 SHORT $LN1@SetMousePo

; 756  : 			return;
; 757  : 
; 758  : 		if (m_iVres==0)

  00009	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  0000d	74 1c		 je	 SHORT $LN1@SetMousePo

; 759  : 			return;
; 760  : 
; 761  : 		m_lMouseX = m_lWidth * x / m_iHres;

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00012	0f af 45 08	 imul	 eax, DWORD PTR _x$[ebp]
  00016	99		 cdq
  00017	f7 79 10	 idiv	 DWORD PTR [ecx+16]
  0001a	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 762  : 		m_lMouseY = m_lHeight * y / m_iVres;

  0001d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00020	0f af 45 0c	 imul	 eax, DWORD PTR _y$[ebp]
  00024	99		 cdq
  00025	f7 79 0c	 idiv	 DWORD PTR [ecx+12]
  00028	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN1@SetMousePo:

; 763  : 	}

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ENDP	; UI::CWindowManager::SetMousePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunPressExitKey@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunPressExitKey@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::RunPressExitKey, COMDAT
; _this$ = ecx

; 1285 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1286 : 		if (m_pLockWindow)

  00003	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN2@RunPressEx

; 1287 : 		{
; 1288 : 			m_pLockWindow->OnPressExitKey();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff a0 90 00 00
	00		 jmp	 DWORD PTR [eax+144]
$LN2@RunPressEx:

; 1289 : 			return;
; 1290 : 		}
; 1291 : 		if (m_pActiveWindow)

  00013	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00016	85 c9		 test	 ecx, ecx
  00018	74 0c		 je	 SHORT $LN4@RunPressEx

; 1292 : 		{
; 1293 : 			if (m_pActiveWindow->OnPressExitKey())

  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	ff 90 90 00 00
	00		 call	 DWORD PTR [eax+144]
  00022	85 c0		 test	 eax, eax
  00024	75 0c		 jne	 SHORT $LN1@RunPressEx
$LN4@RunPressEx:

; 1294 : 				return;
; 1295 : 		}
; 1296 : 
; 1297 : 		m_pRootWindow->RunPressExitKeyEvent();

  00026	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [esi+144]
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ?RunPressExitKeyEvent@CWindow@UI@@QAEHXZ ; UI::CWindow::RunPressExitKeyEvent
$LN1@RunPressEx:
  00032	5e		 pop	 esi

; 1298 : 	}

  00033	c3		 ret	 0
?RunPressExitKey@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::RunPressExitKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunPressEscapeKey@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunPressEscapeKey@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::RunPressEscapeKey, COMDAT
; _this$ = ecx

; 1274 : 	{

  00000	8b c1		 mov	 eax, ecx

; 1275 : 		if (m_pLockWindow)

  00002	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00005	85 c9		 test	 ecx, ecx
  00007	74 08		 je	 SHORT $LN2@RunPressEs

; 1276 : 		{
; 1277 : 			m_pLockWindow->OnPressEscapeKey();

  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	ff a0 8c 00 00
	00		 jmp	 DWORD PTR [eax+140]
$LN2@RunPressEs:

; 1278 : 			return;
; 1279 : 		}
; 1280 : 
; 1281 : 		m_pRootWindow->RunPressEscapeKeyEvent();

  00011	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00017	e9 00 00 00 00	 jmp	 ?RunPressEscapeKeyEvent@CWindow@UI@@QAEHXZ ; UI::CWindow::RunPressEscapeKeyEvent
?RunPressEscapeKey@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::RunPressEscapeKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunKeyUp@CWindowManager@UI@@QAEXH@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
_this$1$ = -4						; size = 4
_vkey$ = 8						; size = 4
?RunKeyUp@CWindowManager@UI@@QAEXH@Z PROC		; UI::CWindowManager::RunKeyUp, COMDAT
; _this$ = ecx

; 1246 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000a	8d 4d 08	 lea	 ecx, DWORD PTR _vkey$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1246 : 	{

  0000d	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	51		 push	 ecx
  0000f	8d 4d f0	 lea	 ecx, DWORD PTR __Loc$1[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1247 : 		TKeyCaptureWindowMap::iterator itor = m_KeyCaptureWindowMap.find(vkey);

  00012	8d 43 78	 lea	 eax, DWORD PTR [ebx+120]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00015	51		 push	 ecx
  00016	8b c8		 mov	 ecx, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1247 : 		TKeyCaptureWindowMap::iterator itor = m_KeyCaptureWindowMap.find(vkey);

  00018	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0001b	e8 00 00 00 00	 call	 ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00020	8b 75 f8	 mov	 esi, DWORD PTR __Loc$1[ebp+8]
  00023	8b 7d 08	 mov	 edi, DWORD PTR _vkey$[ebp]
  00026	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002a	75 3c		 jne	 SHORT $LN2@RunKeyUp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  0002c	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002f	7c 37		 jl	 SHORT $LN2@RunKeyUp

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00031	39 73 78	 cmp	 DWORD PTR [ebx+120], esi
  00034	8d 43 78	 lea	 eax, DWORD PTR [ebx+120]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1248 : 		if (m_KeyCaptureWindowMap.end() != itor)

  00037	74 2f		 je	 SHORT $LN2@RunKeyUp

; 1249 : 		{
; 1250 : 			CWindow * pKeyCaptureWindow = itor->second;

  00039	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1251 : 			if (pKeyCaptureWindow)

  0003c	85 c9		 test	 ecx, ecx
  0003e	74 0c		 je	 SHORT $LN3@RunKeyUp

; 1252 : 				pKeyCaptureWindow->OnKeyUp(vkey);

  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	57		 push	 edi
  00043	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
$LN3@RunKeyUp:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1284 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  0004c	56		 push	 esi
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Extract
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00054	6a 18		 push	 24			; 00000018H
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005c	83 c4 08	 add	 esp, 8
  0005f	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1271 : 	}

  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN2@RunKeyUp:

; 1253 : 
; 1254 : 			m_KeyCaptureWindowMap.erase(itor);
; 1255 : 			return;
; 1256 : 		}
; 1257 : 
; 1258 : 		if (m_pLockWindow)

  00068	8b 4b 5c	 mov	 ecx, DWORD PTR [ebx+92]
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN4@RunKeyUp

; 1259 : 		{
; 1260 : 			m_pLockWindow->OnKeyUp(vkey);

  0006f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00071	57		 push	 edi
  00072	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]
  00078	5f		 pop	 edi

; 1271 : 	}

  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
$LN4@RunKeyUp:

; 1261 : 			return;
; 1262 : 		}
; 1263 : 
; 1264 : 		if (m_pActiveWindow)

  00081	8b 4b 50	 mov	 ecx, DWORD PTR [ebx+80]
  00084	85 c9		 test	 ecx, ecx
  00086	74 0d		 je	 SHORT $LN6@RunKeyUp

; 1265 : 		{
; 1266 : 			if (m_pActiveWindow->OnKeyUp(vkey))

  00088	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008a	57		 push	 edi
  0008b	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]
  00091	85 c0		 test	 eax, eax
  00093	75 0c		 jne	 SHORT $LN1@RunKeyUp
$LN6@RunKeyUp:

; 1267 : 				return;
; 1268 : 		}
; 1269 : 
; 1270 : 		m_pRootWindow->RunKeyUpEvent(vkey);

  00095	8b 8b 90 00 00
	00		 mov	 ecx, DWORD PTR [ebx+144]
  0009b	57		 push	 edi
  0009c	e8 00 00 00 00	 call	 ?RunKeyUpEvent@CWindow@UI@@QAEHH@Z ; UI::CWindow::RunKeyUpEvent
$LN1@RunKeyUp:

; 1271 : 	}

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 04 00	 ret	 4
?RunKeyUp@CWindowManager@UI@@QAEXH@Z ENDP		; UI::CWindowManager::RunKeyUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunKeyDown@CWindowManager@UI@@QAEXH@Z
_TEXT	SEGMENT
$T2 = -44						; size = 12
__Loc$3 = -32						; size = 12
$T4 = -28						; size = 8
$T5 = -20						; size = 8
$T6 = -20						; size = 8
$T7 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_vkey$ = 8						; size = 4
?RunKeyDown@CWindowManager@UI@@QAEXH@Z PROC		; UI::CWindowManager::RunKeyDown, COMDAT
; _this$ = ecx

; 1220 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RunKeyDown@CWindowManager@UI@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1221 : 		if (m_pLockWindow)

  0002a	8b 4f 5c	 mov	 ecx, DWORD PTR [edi+92]
  0002d	8b 75 08	 mov	 esi, DWORD PTR _vkey$[ebp]
  00030	85 c9		 test	 ecx, ecx
  00032	74 36		 je	 SHORT $LN2@RunKeyDown

; 1222 : 		{
; 1223 : 			m_pLockWindow->OnKeyDown(vkey);

  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	56		 push	 esi
  00037	ff 90 84 00 00
	00		 call	 DWORD PTR [eax+132]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0003d	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
$LN187@RunKeyDown:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1243 : 	}

  00040	89 45 f0	 mov	 DWORD PTR $T7[ebp+4], eax
  00043	8d 4f 78	 lea	 ecx, DWORD PTR [edi+120]
  00046	8d 45 ec	 lea	 eax, DWORD PTR $T7[ebp]
  00049	89 75 ec	 mov	 DWORD PTR $T7[ebp], esi
  0004c	50		 push	 eax
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::insert<std::pair<int,UI::CWindow *>,0>
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
$LN2@RunKeyDown:

; 1224 : 			m_KeyCaptureWindowMap.insert(make_pair(vkey, m_pLockWindow));
; 1225 : 			return;
; 1226 : 		}
; 1227 : 		if (m_pActiveWindow)

  0006a	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 18		 je	 SHORT $LN5@RunKeyDown

; 1228 : 		if (m_pActiveWindow->IsShow())

  00071	80 79 55 00	 cmp	 BYTE PTR [ecx+85], 0
  00075	74 12		 je	 SHORT $LN5@RunKeyDown

; 1229 : 		{
; 1230 : 			if (m_pActiveWindow->OnKeyDown(vkey))

  00077	8b 01		 mov	 eax, DWORD PTR [ecx]
  00079	56		 push	 esi
  0007a	ff 90 84 00 00
	00		 call	 DWORD PTR [eax+132]
  00080	85 c0		 test	 eax, eax
  00082	74 05		 je	 SHORT $LN5@RunKeyDown
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00084	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1233 : 				return;

  00087	eb b7		 jmp	 SHORT $LN187@RunKeyDown
$LN5@RunKeyDown:

; 1234 : 			}
; 1235 : 		}
; 1236 : 
; 1237 : 		CWindow * pKeyCaptureWindow = m_pRootWindow->RunKeyDownEvent(vkey);

  00089	8b 8f 90 00 00
	00		 mov	 ecx, DWORD PTR [edi+144]
  0008f	56		 push	 esi
  00090	e8 00 00 00 00	 call	 ?RunKeyDownEvent@CWindow@UI@@QAEPAV12@H@Z ; UI::CWindow::RunKeyDownEvent
  00095	8b d8		 mov	 ebx, eax

; 1238 : 		if (pKeyCaptureWindow)

  00097	85 db		 test	 ebx, ebx
  00099	0f 84 9c 00 00
	00		 je	 $LN161@RunKeyDown
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0009f	8b 97 80 00 00
	00		 mov	 edx, DWORD PTR [edi+128]
  000a5	8b 0a		 mov	 ecx, DWORD PTR [edx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  000a7	3b d1		 cmp	 edx, ecx
  000a9	74 16		 je	 SHORT $LN185@RunKeyDown
  000ab	0f 1f 44 00 00	 npad	 5
$LL62@RunKeyDown:

; 5186 :         if (*_First == _Val) {

  000b0	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  000b3	74 08		 je	 SHORT $LN173@RunKeyDown
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 51   :         _Ptr = _Ptr->_Next;

  000b5	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b7	8b c8		 mov	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  000b9	3b c2		 cmp	 eax, edx
  000bb	75 f3		 jne	 SHORT $LL62@RunKeyDown
$LN173@RunKeyDown:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1239 : 		if (m_ReserveDeleteWindowList.end() == std::find(m_ReserveDeleteWindowList.begin(), m_ReserveDeleteWindowList.end(), pKeyCaptureWindow))

  000bd	3b d1		 cmp	 edx, ecx
  000bf	75 7a		 jne	 SHORT $LN161@RunKeyDown
$LN185@RunKeyDown:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  000c1	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000c4	89 75 ec	 mov	 DWORD PTR $T6[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  000c7	50		 push	 eax
  000c8	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000cb	89 5d f0	 mov	 DWORD PTR $T6[ebp+4], ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1241 : 			m_KeyCaptureWindowMap.insert(TKeyCaptureWindowMap::value_type(vkey, pKeyCaptureWindow));

  000ce	83 c7 78	 add	 edi, 120		; 00000078H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  000d1	50		 push	 eax
  000d2	8b cf		 mov	 ecx, edi
  000d4	e8 00 00 00 00	 call	 ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>
  000d9	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000dd	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e0	66 0f d6 45 e0	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000e9	75 05		 jne	 SHORT $LN91@RunKeyDown
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  000eb	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000ee	7d 4b		 jge	 SHORT $LN161@RunKeyDown
$LN91@RunKeyDown:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  000f0	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  000f7	74 56		 je	 SHORT $LN189@RunKeyDown

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  000f9	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000fb	89 7d ec	 mov	 DWORD PTR $T5[ebp], edi

; 79   :         return ::operator new(_Bytes);

  000fe	6a 18		 push	 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00100	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00107	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  0010e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 805  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00113	8b 4d 08	 mov	 ecx, DWORD PTR _vkey$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00116	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 805  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00119	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0011c	8b cf		 mov	 ecx, edi
  0011e	50		 push	 eax
  0011f	ff 75 e4	 push	 DWORD PTR __Loc$3[ebp+4]

; 805  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00122	89 58 14	 mov	 DWORD PTR [eax+20], ebx

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00125	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00128	89 30		 mov	 DWORD PTR [eax], esi

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0012a	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0012d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 809  :         this->_Ptr->_Color = _Red;

  00130	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00136	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Insert_node
$LN161@RunKeyDown:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1243 : 	}

  0013b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00145	59		 pop	 ecx
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 04 00	 ret	 4
$LN189@RunKeyDown:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

  0014f	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN183@RunKeyDown:
  00154	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunKeyDown@CWindowManager@UI@@QAEXH@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RunKeyDown@CWindowManager@UI@@QAEXH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunKeyDown@CWindowManager@UI@@QAEXH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunKeyDown@CWindowManager@UI@@QAEXH@Z ENDP		; UI::CWindowManager::RunKeyDown
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunCloseReading@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunCloseReading@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::RunCloseReading, COMDAT
; _this$ = ecx

; 1204 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1205 : 		if (m_pLockWindow)

  00003	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunCloseRe

; 1206 : 		{
; 1207 : 			m_pLockWindow->OnIMECloseReadingWndEvent();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 54	 jmp	 DWORD PTR [eax+84]
$LN2@RunCloseRe:

; 1208 : 			return;
; 1209 : 		}
; 1210 : 		if (m_pActiveWindow)

  00010	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN5@RunCloseRe

; 1211 : 		if (m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN5@RunCloseRe

; 1212 : 		{
; 1213 : 			if (m_pActiveWindow->OnIMECloseReadingWndEvent())

  00020	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 54	 jmp	 DWORD PTR [eax+84]
$LN5@RunCloseRe:
  00029	5e		 pop	 esi

; 1214 : 				return;
; 1215 : 		}
; 1216 : 	}

  0002a	c3		 ret	 0
?RunCloseReading@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::RunCloseReading
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunOpenReading@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunOpenReading@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::RunOpenReading, COMDAT
; _this$ = ecx

; 1189 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1190 : 		if (m_pLockWindow)

  00003	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunOpenRea

; 1191 : 		{
; 1192 : 			m_pLockWindow->OnIMEOpenReadingWndEvent();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 50	 jmp	 DWORD PTR [eax+80]
$LN2@RunOpenRea:

; 1193 : 			return;
; 1194 : 		}
; 1195 : 		if (m_pActiveWindow)

  00010	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN5@RunOpenRea

; 1196 : 		if (m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN5@RunOpenRea

; 1197 : 		{
; 1198 : 			if (m_pActiveWindow->OnIMEOpenReadingWndEvent())

  00020	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 50	 jmp	 DWORD PTR [eax+80]
$LN5@RunOpenRea:
  00029	5e		 pop	 esi

; 1199 : 				return;
; 1200 : 		}
; 1201 : 	}

  0002a	c3		 ret	 0
?RunOpenReading@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::RunOpenReading
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunCloseCandidate@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunCloseCandidate@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::RunCloseCandidate, COMDAT
; _this$ = ecx

; 1174 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1175 : 		if (m_pLockWindow)

  00003	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunCloseCa

; 1176 : 		{
; 1177 : 			m_pLockWindow->OnIMECloseCandidateListEvent();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 4c	 jmp	 DWORD PTR [eax+76]
$LN2@RunCloseCa:

; 1178 : 			return;
; 1179 : 		}
; 1180 : 		if (m_pActiveWindow)

  00010	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN5@RunCloseCa

; 1181 : 		if (m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN5@RunCloseCa

; 1182 : 		{
; 1183 : 			if (m_pActiveWindow->OnIMECloseCandidateListEvent())

  00020	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 4c	 jmp	 DWORD PTR [eax+76]
$LN5@RunCloseCa:
  00029	5e		 pop	 esi

; 1184 : 				return;
; 1185 : 		}
; 1186 : 	}

  0002a	c3		 ret	 0
?RunCloseCandidate@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::RunCloseCandidate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunOpenCandidate@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunOpenCandidate@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::RunOpenCandidate, COMDAT
; _this$ = ecx

; 1159 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1160 : 		if (m_pLockWindow)

  00003	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunOpenCan

; 1161 : 		{
; 1162 : 			m_pLockWindow->OnIMEOpenCandidateListEvent();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 48	 jmp	 DWORD PTR [eax+72]
$LN2@RunOpenCan:

; 1163 : 			return;
; 1164 : 		}
; 1165 : 		if (m_pActiveWindow)

  00010	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN5@RunOpenCan

; 1166 : 		if (m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN5@RunOpenCan

; 1167 : 		{
; 1168 : 			if (m_pActiveWindow->OnIMEOpenCandidateListEvent())

  00020	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 48	 jmp	 DWORD PTR [eax+72]
$LN5@RunOpenCan:
  00029	5e		 pop	 esi

; 1169 : 				return;
; 1170 : 		}
; 1171 : 	}

  0002a	c3		 ret	 0
?RunOpenCandidate@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::RunOpenCandidate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunChangeCodePage@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunChangeCodePage@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::RunChangeCodePage, COMDAT
; _this$ = ecx

; 1150 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1151 : 		if (m_pActiveWindow)

  00003	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00006	85 c9		 test	 ecx, ecx
  00008	74 12		 je	 SHORT $LN4@RunChangeC

; 1152 : 		if (m_pActiveWindow->IsRendering())

  0000a	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0000f	84 c0		 test	 al, al
  00011	74 09		 je	 SHORT $LN4@RunChangeC

; 1153 : 		{
; 1154 : 			if (m_pActiveWindow->OnIMEChangeCodePage())

  00013	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00016	5e		 pop	 esi
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	ff 60 44	 jmp	 DWORD PTR [eax+68]
$LN4@RunChangeC:
  0001c	5e		 pop	 esi

; 1155 : 				return;
; 1156 : 		}
; 1157 : 	}

  0001d	c3		 ret	 0
?RunChangeCodePage@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::RunChangeCodePage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunIMEKeyDown@CWindowManager@UI@@QAEXH@Z
_TEXT	SEGMENT
_vkey$ = 8						; size = 4
?RunIMEKeyDown@CWindowManager@UI@@QAEXH@Z PROC		; UI::CWindowManager::RunIMEKeyDown, COMDAT
; _this$ = ecx

; 1134 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1135 : 		if (m_pLockWindow)

  00006	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 0a		 je	 SHORT $LN2@RunIMEKeyD

; 1136 : 		{
; 1137 : 			m_pLockWindow->OnKeyDown(vkey);

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	5e		 pop	 esi

; 1144 : 				return;
; 1145 : 		}
; 1146 : 
; 1147 : 	}

  00010	5d		 pop	 ebp

; 1136 : 		{
; 1137 : 			m_pLockWindow->OnKeyDown(vkey);

  00011	ff a0 84 00 00
	00		 jmp	 DWORD PTR [eax+132]
$LN2@RunIMEKeyD:

; 1138 : 			return;
; 1139 : 		}
; 1140 : 		if (m_pActiveWindow)

  00017	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 13		 je	 SHORT $LN5@RunIMEKeyD

; 1141 : 		if (m_pActiveWindow->IsRendering())

  0001e	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  00023	84 c0		 test	 al, al
  00025	74 0a		 je	 SHORT $LN5@RunIMEKeyD

; 1142 : 		{
; 1143 : 			if (m_pActiveWindow->OnIMEKeyDownEvent(vkey))

  00027	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0002a	5e		 pop	 esi
  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1144 : 				return;
; 1145 : 		}
; 1146 : 
; 1147 : 	}

  0002d	5d		 pop	 ebp

; 1142 : 		{
; 1143 : 			if (m_pActiveWindow->OnIMEKeyDownEvent(vkey))

  0002e	ff 60 40	 jmp	 DWORD PTR [eax+64]
$LN5@RunIMEKeyD:
  00031	5e		 pop	 esi

; 1144 : 				return;
; 1145 : 		}
; 1146 : 
; 1147 : 	}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?RunIMEKeyDown@CWindowManager@UI@@QAEXH@Z ENDP		; UI::CWindowManager::RunIMEKeyDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunIMEReturnEvent@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunIMEReturnEvent@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::RunIMEReturnEvent, COMDAT
; _this$ = ecx

; 1117 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1118 : 		if (m_pLockWindow)

  00003	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunIMERetu

; 1119 : 		{
; 1120 : 			m_pLockWindow->OnIMEReturnEvent();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 3c	 jmp	 DWORD PTR [eax+60]
$LN2@RunIMERetu:

; 1121 : 			return;
; 1122 : 		}
; 1123 : 		if (m_pActiveWindow)

  00010	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00013	85 c9		 test	 ecx, ecx
  00015	74 15		 je	 SHORT $LN5@RunIMERetu

; 1124 : 		if (m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 0c		 je	 SHORT $LN5@RunIMERetu

; 1125 : 		{
; 1126 : 			if (m_pActiveWindow->OnIMEReturnEvent())

  00020	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	ff 50 3c	 call	 DWORD PTR [eax+60]
  00028	85 c0		 test	 eax, eax
  0002a	75 0c		 jne	 SHORT $LN1@RunIMERetu
$LN5@RunIMERetu:

; 1127 : 				return;
; 1128 : 		}
; 1129 : 
; 1130 : 		m_pRootWindow->RunIMEReturnEvent();

  0002c	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [esi+144]
  00032	5e		 pop	 esi
  00033	e9 00 00 00 00	 jmp	 ?RunIMEReturnEvent@CWindow@UI@@QAEHXZ ; UI::CWindow::RunIMEReturnEvent
$LN1@RunIMERetu:
  00038	5e		 pop	 esi

; 1131 : 	}

  00039	c3		 ret	 0
?RunIMEReturnEvent@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::RunIMEReturnEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunIMETabEvent@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
tv491 = -48						; size = 4
_pCurrentWindow$1$ = -44				; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?RunIMETabEvent@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::RunIMETabEvent, COMDAT
; _this$ = ecx

; 1072 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx

; 1073 : 		if (m_pLockWindow)

  0002d	8b 4f 5c	 mov	 ecx, DWORD PTR [edi+92]
  00030	85 c9		 test	 ecx, ecx
  00032	74 0a		 je	 SHORT $LN5@RunIMETabE

; 1074 : 		{
; 1075 : 			m_pLockWindow->OnIMETabEvent();

  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	ff 50 38	 call	 DWORD PTR [eax+56]

; 1076 : 			return;

  00039	e9 14 01 00 00	 jmp	 $LN3@RunIMETabE
$LN5@RunIMETabE:

; 1077 : 		}
; 1078 : 		if (m_pActiveWindow)

  0003e	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
  00041	85 c9		 test	 ecx, ecx
  00043	74 19		 je	 SHORT $LN8@RunIMETabE

; 1079 : 		if (m_pActiveWindow->IsRendering())

  00045	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0004a	84 c0		 test	 al, al
  0004c	74 10		 je	 SHORT $LN8@RunIMETabE

; 1080 : 		{
; 1081 : 			if (m_pActiveWindow->OnIMETabEvent())

  0004e	8b 4f 50	 mov	 ecx, DWORD PTR [edi+80]
  00051	8b 01		 mov	 eax, DWORD PTR [ecx]
  00053	ff 50 38	 call	 DWORD PTR [eax+56]
  00056	85 c0		 test	 eax, eax
  00058	0f 85 f4 00 00
	00		 jne	 $LN3@RunIMETabE
$LN8@RunIMETabE:

; 1082 : 				return;
; 1083 : 		}
; 1084 : 
; 1085 : 		if (!m_pRootWindow->RunIMETabEvent())

  0005e	8b 8f 90 00 00
	00		 mov	 ecx, DWORD PTR [edi+144]
  00064	e8 00 00 00 00	 call	 ?RunIMETabEvent@CWindow@UI@@QAEHXZ ; UI::CWindow::RunIMETabEvent
  00069	85 c0		 test	 eax, eax
  0006b	0f 85 e1 00 00
	00		 jne	 $LN3@RunIMETabE

; 1086 : 		{
; 1087 : 			if (!m_ActiveWindowList.empty())

  00071	39 47 58	 cmp	 DWORD PTR [edi+88], eax
  00074	0f 84 d8 00 00
	00		 je	 $LN3@RunIMETabE
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0007a	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1090 : 				ActivateWindow(pWindow);

  0007d	8b cf		 mov	 ecx, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0007f	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1089 : 				CWindow * pWindow = *(m_ActiveWindowList.begin());

  00081	8b 70 08	 mov	 esi, DWORD PTR [eax+8]

; 1090 : 				ActivateWindow(pWindow);

  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 ?ActivateWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::ActivateWindow

; 1091 : 
; 1092 : 				/////////////////////////////////////////////
; 1093 : 
; 1094 : 				CWindow * pParentWindow = pWindow;
; 1095 : 				CWindow * pCurrentWindow = pWindow->GetParent();

  0008a	8b ce		 mov	 ecx, esi
  0008c	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent
  00091	89 45 d4	 mov	 DWORD PTR _pCurrentWindow$1$[ebp], eax

; 1096 : 
; 1097 : 				DWORD dwMaxLoopCount = 20;
; 1098 : 				for (DWORD i = 0; i < dwMaxLoopCount; ++i)

  00094	33 db		 xor	 ebx, ebx
$LL4@RunIMETabE:

; 1099 : 				{
; 1100 : 					if (!pParentWindow)

  00096	85 f6		 test	 esi, esi
  00098	0f 84 b4 00 00
	00		 je	 $LN3@RunIMETabE
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0009e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 2487 :         assign(_Ptr);

  000a5	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_04FOKBGDA@GAME@

; 4562 :         _My_data._Mysize = 0;

  000ad	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  000b4	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000bb	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 2487 :         assign(_Ptr);

  000bf	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1103 : 					if (pParentWindow == m_LayerWindowMap["GAME"])

  000c4	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  000c7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ce	50		 push	 eax
  000cf	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  000d5	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000da	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1103 : 					if (pParentWindow == m_LayerWindowMap["GAME"])

  000dd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e4	8b 00		 mov	 eax, DWORD PTR [eax]
  000e6	89 45 d0	 mov	 DWORD PTR tv491[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000e9	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000ec	72 2b		 jb	 SHORT $LN53@RunIMETabE
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ee	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000f1	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f2	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000fa	72 10		 jb	 SHORT $LN63@RunIMETabE

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000ff	83 c2 23	 add	 edx, 35			; 00000023H
  00102	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 62		 ja	 SHORT $LN60@RunIMETabE
$LN63@RunIMETabE:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010c	52		 push	 edx
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00113	8b 45 d0	 mov	 eax, DWORD PTR tv491[ebp]
  00116	83 c4 08	 add	 esp, 8
$LN53@RunIMETabE:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00119	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00120	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00127	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 1103 : 					if (pParentWindow == m_LayerWindowMap["GAME"])

  0012b	3b f0		 cmp	 esi, eax
  0012d	74 18		 je	 SHORT $LN71@RunIMETabE

; 1106 : 						break;
; 1107 : 					}
; 1108 : 
; 1109 : 					pCurrentWindow = pParentWindow;
; 1110 : 					pParentWindow = pCurrentWindow->GetParent();

  0012f	8b ce		 mov	 ecx, esi
  00131	89 75 d4	 mov	 DWORD PTR _pCurrentWindow$1$[ebp], esi
  00134	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent
  00139	43		 inc	 ebx
  0013a	8b f0		 mov	 esi, eax
  0013c	83 fb 14	 cmp	 ebx, 20			; 00000014H
  0013f	0f 82 51 ff ff
	ff		 jb	 $LL4@RunIMETabE

; 1096 : 
; 1097 : 				DWORD dwMaxLoopCount = 20;
; 1098 : 				for (DWORD i = 0; i < dwMaxLoopCount; ++i)

  00145	eb 0b		 jmp	 SHORT $LN3@RunIMETabE
$LN71@RunIMETabE:

; 1104 : 					{
; 1105 : 						SetTop(pCurrentWindow);

  00147	8b 45 d4	 mov	 eax, DWORD PTR _pCurrentWindow$1$[ebp]
  0014a	8b cf		 mov	 ecx, edi
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::SetTop
$LN3@RunIMETabE:

; 1114 : 	}

  00152	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00155	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015c	59		 pop	 ecx
  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	5b		 pop	 ebx
  00160	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00163	33 cd		 xor	 ecx, ebp
  00165	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c3		 ret	 0
$LN60@RunIMETabE:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@RunIMETabE:
  00173	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunIMETabEvent@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::RunIMETabEvent
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunIMEUpdate@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunIMEUpdate@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::RunIMEUpdate, COMDAT
; _this$ = ecx

; 1056 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1057 : 		if (m_pLockWindow)

  00003	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunIMEUpda

; 1058 : 		{
; 1059 : 			m_pLockWindow->OnIMEUpdate();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 30	 jmp	 DWORD PTR [eax+48]
$LN2@RunIMEUpda:

; 1060 : 			return;
; 1061 : 		}
; 1062 : 
; 1063 : 		if (!m_pActiveWindow)

  00010	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN1@RunIMEUpda

; 1064 : 			return;
; 1065 : 		if (!m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN1@RunIMEUpda

; 1066 : 			return;
; 1067 : 
; 1068 : 		m_pActiveWindow->OnIMEUpdate();

  00020	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 30	 jmp	 DWORD PTR [eax+48]
$LN1@RunIMEUpda:
  00029	5e		 pop	 esi

; 1069 : 	}

  0002a	c3		 ret	 0
?RunIMEUpdate@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::RunIMEUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseWheelScroll@CWindowManager@UI@@QAE_NJJF@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_wDelta$ = 16						; size = 2
?RunMouseWheelScroll@CWindowManager@UI@@QAE_NJJF@Z PROC	; UI::CWindowManager::RunMouseWheelScroll, COMDAT
; _this$ = ecx

; 1043 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1044 : 		SetMousePosition(x, y);

  00004	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000c	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 1045 : 		CWindow * pWin = GetPointWindow();

  00011	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00014	5e		 pop	 esi

; 1046 : 		if (!pWin)

  00015	85 c9		 test	 ecx, ecx
  00017	75 06		 jne	 SHORT $LN2@RunMouseWh

; 1047 : 			return false;

  00019	32 c0		 xor	 al, al

; 1050 : 	}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
$LN2@RunMouseWh:

; 1048 : 
; 1049 : 		return pWin->OnMouseWheelScroll(wDelta) == TRUE;

  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	ff 75 10	 push	 DWORD PTR _wDelta$[ebp]
  00024	ff 50 7c	 call	 DWORD PTR [eax+124]
  00027	83 f8 01	 cmp	 eax, 1
  0002a	0f 94 c0	 sete	 al

; 1050 : 	}

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
?RunMouseWheelScroll@CWindowManager@UI@@QAE_NJJF@Z ENDP	; UI::CWindowManager::RunMouseWheelScroll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseWheelEvent@CWindowManager@UI@@QAE_NJ@Z
_TEXT	SEGMENT
_nLen$ = 8						; size = 4
?RunMouseWheelEvent@CWindowManager@UI@@QAE_NJ@Z PROC	; UI::CWindowManager::RunMouseWheelEvent, COMDAT
; _this$ = ecx

; 1030 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1031 : 		CWindow * pWin;
; 1032 : 		if (pWin = GetPointWindow())

  00004	8b 71 68	 mov	 esi, DWORD PTR [ecx+104]
  00007	85 f6		 test	 esi, esi
  00009	74 2b		 je	 SHORT $LN3@RunMouseWh

; 1033 : 		{
; 1034 : 			if (pWin->IsRendering() || pWin->IsShow())

  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  00012	84 c0		 test	 al, al
  00014	75 05		 jne	 SHORT $LN4@RunMouseWh
  00016	38 46 55	 cmp	 BYTE PTR [esi+85], al
  00019	74 1b		 je	 SHORT $LN3@RunMouseWh
$LN4@RunMouseWh:

; 1035 : 				return pWin->GetRoot()->RunMouseWheelEvent(nLen) != 0;

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?GetRoot@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetRoot
  00022	ff 75 08	 push	 DWORD PTR _nLen$[ebp]
  00025	8b c8		 mov	 ecx, eax
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	ff 52 78	 call	 DWORD PTR [edx+120]
  0002c	85 c0		 test	 eax, eax
  0002e	5e		 pop	 esi
  0002f	0f 95 c0	 setne	 al

; 1038 : 	}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN3@RunMouseWh:

; 1036 : 		}
; 1037 : 		return false;

  00036	32 c0		 xor	 al, al
  00038	5e		 pop	 esi

; 1038 : 	}

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?RunMouseWheelEvent@CWindowManager@UI@@QAE_NJ@Z ENDP	; UI::CWindowManager::RunMouseWheelEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseMiddleButtonUp@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseMiddleButtonUp@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseMiddleButtonUp, COMDAT
; _this$ = ecx

; 1008 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1009 : 		SetMousePosition(x, y);

  00004	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000c	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 1010 : 
; 1011 : 		if (m_pMiddleCaptureWindow)

  00011	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00014	85 c9		 test	 ecx, ecx
  00016	74 09		 je	 SHORT $LN3@RunMouseMi

; 1012 : 		{
; 1013 : 			if (m_pMiddleCaptureWindow->OnMouseMiddleButtonUp())

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 74	 call	 DWORD PTR [eax+116]
  0001d	85 c0		 test	 eax, eax
  0001f	75 0c		 jne	 SHORT $LN6@RunMouseMi
$LN3@RunMouseMi:

; 1014 : 			{
; 1015 : 				m_pMiddleCaptureWindow = NULL;
; 1016 : 				return;
; 1017 : 			}
; 1018 : 		}
; 1019 : 
; 1020 : 		CWindow * pWin = GetPointWindow();

  00021	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]

; 1021 : 		if (!pWin)

  00024	85 c9		 test	 ecx, ecx
  00026	74 0c		 je	 SHORT $LN1@RunMouseMi

; 1022 : 			return;
; 1023 : 
; 1024 : 		pWin->OnMouseMiddleButtonUp();

  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	ff 50 74	 call	 DWORD PTR [eax+116]
$LN6@RunMouseMi:

; 1025 : 		m_pMiddleCaptureWindow = NULL;
; 1026 : 	}

  0002d	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
$LN1@RunMouseMi:
  00034	5e		 pop	 esi
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?RunMouseMiddleButtonUp@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseMiddleButtonUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseMiddleButtonDown@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseMiddleButtonDown@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseMiddleButtonDown, COMDAT
; _this$ = ecx

; 995  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 996  : 		SetMousePosition(x, y);

  00004	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000c	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 997  : 
; 998  : 		CWindow * pWin = GetPointWindow();

  00011	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]

; 999  : 		if (!pWin)

  00014	85 c9		 test	 ecx, ecx
  00016	74 08		 je	 SHORT $LN1@RunMouseMi

; 1000 : 			return;
; 1001 : 
; 1002 : 		m_pMiddleCaptureWindow = pWin;

  00018	89 4e 74	 mov	 DWORD PTR [esi+116], ecx

; 1003 : 
; 1004 : 		pWin->OnMouseMiddleButtonDown();

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	ff 50 70	 call	 DWORD PTR [eax+112]
$LN1@RunMouseMi:
  00020	5e		 pop	 esi

; 1005 : 	}

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?RunMouseMiddleButtonDown@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseMiddleButtonDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseRightButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseRightButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseRightButtonDoubleClick, COMDAT
; _this$ = ecx

; 984  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 985  : 		SetMousePosition(x, y);

  00004	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000c	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 986  : 
; 987  : 		CWindow * pWin = GetPointWindow();

  00011	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00014	5e		 pop	 esi

; 988  : 		if (pWin)

  00015	85 c9		 test	 ecx, ecx
  00017	74 05		 je	 SHORT $LN2@RunMouseRi

; 989  : 		{
; 990  : 			pWin->OnMouseRightButtonDoubleClick();

  00019	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001b	ff 50 6c	 call	 DWORD PTR [eax+108]
$LN2@RunMouseRi:

; 991  : 		}
; 992  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?RunMouseRightButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseRightButtonDoubleClick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseRightButtonUp@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseRightButtonUp@CWindowManager@UI@@QAEXJJ@Z PROC	; UI::CWindowManager::RunMouseRightButtonUp, COMDAT
; _this$ = ecx

; 965  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 966  : 		if (m_pRightCaptureWindow)

  00003	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  00006	85 c9		 test	 ecx, ecx
  00008	74 14		 je	 SHORT $LN3@RunMouseRi

; 967  : 		{
; 968  : 			if (m_pRightCaptureWindow->OnMouseRightButtonUp())

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	ff 50 68	 call	 DWORD PTR [eax+104]
  0000f	85 c0		 test	 eax, eax
  00011	74 0b		 je	 SHORT $LN3@RunMouseRi

; 969  : 			{
; 970  : 				m_pRightCaptureWindow = NULL;

  00013	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
  0001a	5e		 pop	 esi

; 981  : 	}

  0001b	c2 08 00	 ret	 8
$LN3@RunMouseRi:

; 971  : 				return;
; 972  : 			}
; 973  : 		}
; 974  : 
; 975  : 		CWindow * pWin = GetPointWindow();

  0001e	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]

; 976  : 		if (pWin)

  00021	85 c9		 test	 ecx, ecx
  00023	74 05		 je	 SHORT $LN4@RunMouseRi

; 977  : 			pWin->OnMouseRightButtonUp();

  00025	8b 01		 mov	 eax, DWORD PTR [ecx]
  00027	ff 50 68	 call	 DWORD PTR [eax+104]
$LN4@RunMouseRi:

; 978  : 
; 979  : 		m_pRightCaptureWindow = NULL;
; 980  : 		DeattachIcon();

  0002a	8b ce		 mov	 ecx, esi
  0002c	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
  00033	e8 00 00 00 00	 call	 ?DeattachIcon@CWindowManager@UI@@QAEXXZ ; UI::CWindowManager::DeattachIcon
  00038	5e		 pop	 esi

; 981  : 	}

  00039	c2 08 00	 ret	 8
?RunMouseRightButtonUp@CWindowManager@UI@@QAEXJJ@Z ENDP	; UI::CWindowManager::RunMouseRightButtonUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseRightButtonDown@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseRightButtonDown@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseRightButtonDown, COMDAT
; _this$ = ecx

; 943  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 944  : 		SetTopUIWindow();

  00006	e8 00 00 00 00	 call	 ?SetTopUIWindow@CWindowManager@UI@@QAEXXZ ; UI::CWindowManager::SetTopUIWindow

; 945  : 
; 946  : 		///////////////////////////////////////////////////////////////////////////////////////////
; 947  : 
; 948  : 		SetMousePosition(x, y);

  0000b	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  0000e	8b ce		 mov	 ecx, esi
  00010	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00013	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 949  : 		CWindow * pWin = GetPointWindow();

  00018	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]

; 950  : 		if (!pWin)

  0001b	85 c9		 test	 ecx, ecx
  0001d	74 23		 je	 SHORT $LN1@RunMouseRi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  0001f	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00022	c1 e8 04	 shr	 eax, 4
  00025	a8 01		 test	 al, 1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 954  : 		if (pWin->IsFlag(CWindow::FLAG_ATTACH))

  00027	74 07		 je	 SHORT $LN3@RunMouseRi

; 955  : 			pWin = pWin->GetRoot();

  00029	e8 00 00 00 00	 call	 ?GetRoot@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetRoot
  0002e	8b c8		 mov	 ecx, eax
$LN3@RunMouseRi:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00030	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00033	c1 e8 07	 shr	 eax, 7
  00036	a8 01		 test	 al, 1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 958  : 		if (!pWin->IsFlag(CWindow::FLAG_NOT_CAPTURE))

  00038	75 03		 jne	 SHORT $LN4@RunMouseRi

; 959  : 			m_pRightCaptureWindow = pWin;

  0003a	89 4e 70	 mov	 DWORD PTR [esi+112], ecx
$LN4@RunMouseRi:

; 960  : 
; 961  : 		pWin->OnMouseRightButtonDown();

  0003d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003f	ff 50 64	 call	 DWORD PTR [eax+100]
$LN1@RunMouseRi:
  00042	5e		 pop	 esi

; 962  : 	}

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?RunMouseRightButtonDown@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseRightButtonDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseLeftButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseLeftButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseLeftButtonDoubleClick, COMDAT
; _this$ = ecx

; 932  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 933  : 		SetMousePosition(x, y);

  00004	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000c	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 934  : 
; 935  : 		CWindow * pWin = GetPointWindow();

  00011	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00014	5e		 pop	 esi

; 936  : 		if (!pWin)

  00015	85 c9		 test	 ecx, ecx
  00017	74 05		 je	 SHORT $LN1@RunMouseLe

; 937  : 			return;
; 938  : 
; 939  : 		pWin->OnMouseLeftButtonDoubleClick();

  00019	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001b	ff 50 60	 call	 DWORD PTR [eax+96]
$LN1@RunMouseLe:

; 940  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?RunMouseLeftButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseLeftButtonDoubleClick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseLeftButtonUp@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseLeftButtonUp@CWindowManager@UI@@QAEXJJ@Z PROC	; UI::CWindowManager::RunMouseLeftButtonUp, COMDAT
; _this$ = ecx

; 902  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 903  : 		if (m_bOnceIgnoreMouseLeftButtonUpEventFlag)

  00006	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  0000a	74 12		 je	 SHORT $LN3@RunMouseLe

; 904  : 		{
; 905  : 			m_bOnceIgnoreMouseLeftButtonUpEventFlag = FALSE;

  0000c	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 906  : 
; 907  : 			if (timeGetTime() < m_iIgnoreEndTime)

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00019	3b 46 30	 cmp	 eax, DWORD PTR [esi+48]
  0001c	72 30		 jb	 SHORT $LN1@RunMouseLe
$LN3@RunMouseLe:

; 908  : 			{
; 909  : 				return;
; 910  : 			}
; 911  : 		}
; 912  : 
; 913  : 		SetMousePosition(x, y);

  0001e	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00021	8b ce		 mov	 ecx, esi
  00023	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00026	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 914  : 
; 915  : 		if (m_pLeftCaptureWindow)

  0002b	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0002e	85 c9		 test	 ecx, ecx
  00030	74 09		 je	 SHORT $LN5@RunMouseLe

; 916  : 		{
; 917  : 			if (m_pLeftCaptureWindow->OnMouseLeftButtonUp())

  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	ff 50 5c	 call	 DWORD PTR [eax+92]
  00037	85 c0		 test	 eax, eax
  00039	75 0c		 jne	 SHORT $LN6@RunMouseLe
$LN5@RunMouseLe:

; 918  : 			{
; 919  : 				m_pLeftCaptureWindow = NULL;
; 920  : 				return;
; 921  : 			}
; 922  : 		}
; 923  : 
; 924  : 		CWindow * pWin = GetPointWindow();

  0003b	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]

; 925  : 		if (pWin)

  0003e	85 c9		 test	 ecx, ecx
  00040	74 05		 je	 SHORT $LN6@RunMouseLe

; 926  : 			pWin->OnMouseLeftButtonUp();

  00042	8b 01		 mov	 eax, DWORD PTR [ecx]
  00044	ff 50 5c	 call	 DWORD PTR [eax+92]
$LN6@RunMouseLe:

; 927  : 
; 928  : 		m_pLeftCaptureWindow = NULL;

  00047	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
$LN1@RunMouseLe:
  0004e	5e		 pop	 esi

; 929  : 	}

  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
?RunMouseLeftButtonUp@CWindowManager@UI@@QAEXJJ@Z ENDP	; UI::CWindowManager::RunMouseLeftButtonUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseLeftButtonDown@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseLeftButtonDown@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseLeftButtonDown, COMDAT
; _this$ = ecx

; 873  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 874  : 		SetTopUIWindow();

  00007	e8 00 00 00 00	 call	 ?SetTopUIWindow@CWindowManager@UI@@QAEXXZ ; UI::CWindowManager::SetTopUIWindow

; 875  : 
; 876  : 		/////
; 877  : 
; 878  : 		SetMousePosition(x, y);

  0000c	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  0000f	8b cf		 mov	 ecx, edi
  00011	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 879  : 		CWindow * pWin = GetPointWindow();

  00019	8b 77 68	 mov	 esi, DWORD PTR [edi+104]

; 880  : 
; 881  : 		if (!pWin)

  0001c	85 f6		 test	 esi, esi
  0001e	74 43		 je	 SHORT $LN1@RunMouseLe
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00020	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00023	c1 e8 04	 shr	 eax, 4
  00026	a8 01		 test	 al, 1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 885  : 		if (pWin->IsFlag(CWindow::FLAG_ATTACH))

  00028	74 09		 je	 SHORT $LN3@RunMouseLe

; 886  : 			pWin = pWin->GetRoot();

  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?GetRoot@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetRoot
  00031	8b f0		 mov	 esi, eax
$LN3@RunMouseLe:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00033	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00036	c1 e8 07	 shr	 eax, 7
  00039	a8 01		 test	 al, 1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 889  : 		if (!pWin->IsFlag(CWindow::FLAG_NOT_CAPTURE))

  0003b	75 03		 jne	 SHORT $LN4@RunMouseLe

; 890  : 			m_pLeftCaptureWindow = pWin;

  0003d	89 77 6c	 mov	 DWORD PTR [edi+108], esi
$LN4@RunMouseLe:

; 891  : 
; 892  : 		m_lDragX = m_lMouseX - pWin->GetRect().left;

  00040	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00043	8b c2		 mov	 eax, edx
  00045	2b 46 34	 sub	 eax, DWORD PTR [esi+52]

; 893  : 		m_lDragY = m_lMouseY - pWin->GetRect().top;

  00048	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0004b	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  0004e	8b c1		 mov	 eax, ecx
  00050	2b 46 38	 sub	 eax, DWORD PTR [esi+56]

; 894  : 		m_lPickedX = m_lMouseX;
; 895  : 		m_lPickedY = m_lMouseY;

  00053	89 4f 28	 mov	 DWORD PTR [edi+40], ecx

; 896  : 
; 897  : 		// Event
; 898  : 		pWin->OnMouseLeftButtonDown();

  00056	8b ce		 mov	 ecx, esi
  00058	89 47 20	 mov	 DWORD PTR [edi+32], eax
  0005b	89 57 24	 mov	 DWORD PTR [edi+36], edx
  0005e	8b 06		 mov	 eax, DWORD PTR [esi]
  00060	ff 50 58	 call	 DWORD PTR [eax+88]
$LN1@RunMouseLe:

; 899  : 	}

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
?RunMouseLeftButtonDown@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseLeftButtonDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_limitRect$2 = -48					; size = 16
_pPointWindow$1$ = -32					; size = 4
tv750 = -28						; size = 4
_ly$3 = -24						; size = 4
_lx$4 = -20						; size = 4
tv749 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_y$2$ = 8						; size = 4
_x$ = 8							; size = 4
tv742 = 12						; size = 4
_x$2$ = 12						; size = 4
_y$ = 12						; size = 4
?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z PROC		; UI::CWindowManager::RunMouseMove, COMDAT
; _this$ = ecx

; 772  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 773  : 		if (IsAttaching())

  00029	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00031	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00034	85 c0		 test	 eax, eax
  00036	74 0e		 je	 SHORT $LN5@RunMouseMo

; 774  : 		{
; 775  : 			if (x > m_lWidth)

  00038	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0003b	0f 4f 4e 04	 cmovg	 ecx, DWORD PTR [esi+4]

; 776  : 				x = m_lWidth;
; 777  : 			if (y > m_lHeight)

  0003f	3b 56 08	 cmp	 edx, DWORD PTR [esi+8]
  00042	0f 4f 56 08	 cmovg	 edx, DWORD PTR [esi+8]
$LN5@RunMouseMo:

; 778  : 				y = m_lHeight;
; 779  : 		}
; 780  : 
; 781  : 		SetMousePosition(x, y);

  00046	52		 push	 edx
  00047	51		 push	 ecx
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 782  : 		CWindow * pPointWindow = __PickWindow(m_lMouseX, m_lMouseY);

  0004f	ff 76 18	 push	 DWORD PTR [esi+24]
  00052	8b ce		 mov	 ecx, esi
  00054	ff 76 14	 push	 DWORD PTR [esi+20]
  00057	e8 00 00 00 00	 call	 ?__PickWindow@CWindowManager@UI@@AAEPAVCWindow@2@JJ@Z ; UI::CWindowManager::__PickWindow

; 783  : 
; 784  : 		if (g_bShowOverInWindowName)

  0005c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bShowOverInWindowName@@3HA, 0 ; g_bShowOverInWindowName
  00063	8b f8		 mov	 edi, eax
  00065	89 7d e0	 mov	 DWORD PTR _pPointWindow$1$[ebp], edi
  00068	0f 84 9f 00 00
	00		 je	 $LN8@RunMouseMo

; 785  : 		{
; 786  : 			if (pPointWindow)

  0006e	85 ff		 test	 edi, edi
  00070	0f 84 97 00 00
	00		 je	 $LN8@RunMouseMo

; 788  : 				static std::string strPickWindowName = "";

  00076	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  0007c	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA
  00088	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  0008b	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00091	0f 8f e8 01 00
	00		 jg	 $LN100@RunMouseMo
$LN2@RunMouseMo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3888 :         return _Mypair._Myval2._Myptr();

  00097	83 c7 04	 add	 edi, 4

; 2272 :         const value_type* _Result = _Bx._Buf;

  0009a	8b d7		 mov	 edx, edi

; 2286 :         return _BUF_SIZE <= _Myres;

  0009c	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  000a0	72 02		 jb	 SHORT $LN93@RunMouseMo

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  000a2	8b 17		 mov	 edx, DWORD PTR [edi]
$LN93@RunMouseMo:

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000a4	8b ca		 mov	 ecx, edx
  000a6	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000a9	89 45 0c	 mov	 DWORD PTR tv742[ebp], eax
  000ac	0f 1f 40 00	 npad	 4
$LL95@RunMouseMo:
  000b0	8a 01		 mov	 al, BYTE PTR [ecx]
  000b2	41		 inc	 ecx
  000b3	84 c0		 test	 al, al
  000b5	75 f9		 jne	 SHORT $LL95@RunMouseMo
  000b7	2b 4d 0c	 sub	 ecx, DWORD PTR tv742[ebp]

; 2272 :         const value_type* _Result = _Bx._Buf;

  000ba	b8 00 00 00 00	 mov	 eax, OFFSET ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 2286 :         return _BUF_SIZE <= _Myres;

  000bf	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 4402 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  000c6	51		 push	 ecx

; 2273 :         if (_Large_string_engaged()) {

  000c7	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 4402 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  000ce	52		 push	 edx
  000cf	ff 35 10 00 00
	00		 push	 DWORD PTR ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  000db	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 789  : 				if (0 != strPickWindowName.compare(pPointWindow->GetName()))

  000de	85 c0		 test	 eax, eax
  000e0	74 2b		 je	 SHORT $LN8@RunMouseMo
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000e2	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  000e6	8b c7		 mov	 eax, edi

; 2273 :         if (_Large_string_engaged()) {

  000e8	72 02		 jb	 SHORT $LN94@RunMouseMo

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  000ea	8b 07		 mov	 eax, DWORD PTR [edi]
$LN94@RunMouseMo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 791  : 					Tracef(" OverInWindowName [%s]\n", pPointWindow->GetName());

  000ec	50		 push	 eax
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MLGEFGCP@?5OverInWindowName?5?$FL?$CFs?$FN?6@
  000f2	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  000f7	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000fa	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  000fe	72 02		 jb	 SHORT $LN73@RunMouseMo

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00100	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN73@RunMouseMo:

; 3058 :         return assign(_Ptr);

  00102	57		 push	 edi
  00103	b9 00 00 00 00	 mov	 ecx, OFFSET ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00108	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN8@RunMouseMo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 797  : 		if (m_pLeftCaptureWindow)

  0010d	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00110	85 ff		 test	 edi, edi
  00112	0f 84 27 01 00
	00		 je	 $LN22@RunMouseMo
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00118	f6 47 58 01	 test	 BYTE PTR [edi+88], 1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 801  : 			if (pWin->IsFlag(CWindow::FLAG_MOVABLE))

  0011c	0f 84 fe 00 00
	00		 je	 $LN10@RunMouseMo

; 802  : 			{
; 803  : 				long x = m_lMouseX - m_lDragX;

  00122	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00125	2b 46 1c	 sub	 eax, DWORD PTR [esi+28]
  00128	89 45 0c	 mov	 DWORD PTR _x$2$[ebp], eax

; 804  : 				long y = m_lMouseY - m_lDragY;

  0012b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0012e	2b 46 20	 sub	 eax, DWORD PTR [esi+32]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 80   : 			bool			HasParent()		{ return m_pParent ? true : false; }

  00131	83 7f 60 00	 cmp	 DWORD PTR [edi+96], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 804  : 				long y = m_lMouseY - m_lDragY;

  00135	89 45 08	 mov	 DWORD PTR _y$2$[ebp], eax

; 805  : 				if (pWin->HasParent())

  00138	74 20		 je	 SHORT $LN12@RunMouseMo

; 806  : 				{
; 807  : 					x -= pWin->GetParent()->GetRect().left;

  0013a	8b cf		 mov	 ecx, edi
  0013c	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent
  00141	8b 4d 0c	 mov	 ecx, DWORD PTR _x$2$[ebp]
  00144	2b 48 34	 sub	 ecx, DWORD PTR [eax+52]
  00147	89 4d 0c	 mov	 DWORD PTR _x$2$[ebp], ecx

; 808  : 					y -= pWin->GetParent()->GetRect().top;

  0014a	8b cf		 mov	 ecx, edi
  0014c	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent
  00151	8b 4d 08	 mov	 ecx, DWORD PTR _y$2$[ebp]
  00154	2b 48 38	 sub	 ecx, DWORD PTR [eax+56]
  00157	89 4d 08	 mov	 DWORD PTR _y$2$[ebp], ecx
$LN12@RunMouseMo:

; 809  : 				}
; 810  : 
; 811  : 				long lx, ly;
; 812  : 				pWin->GetPosition(&lx, &ly);

  0015a	8d 45 e8	 lea	 eax, DWORD PTR _ly$3[ebp]
  0015d	8b cf		 mov	 ecx, edi
  0015f	50		 push	 eax
  00160	8d 45 ec	 lea	 eax, DWORD PTR _lx$4[ebp]
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 ?GetPosition@CWindow@UI@@QAEXPAJ0@Z ; UI::CWindow::GetPosition
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00169	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  0016c	8b c1		 mov	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 817  : 				if (pWin->IsFlag(CWindow::FLAG_RESTRICT_Y))

  0016e	8b 55 08	 mov	 edx, DWORD PTR _y$2$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00171	c1 e8 05	 shr	 eax, 5
  00174	a8 01		 test	 al, 1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 813  : 				if (pWin->IsFlag(CWindow::FLAG_RESTRICT_X))

  00176	8b 45 0c	 mov	 eax, DWORD PTR _x$2$[ebp]
  00179	0f 45 45 ec	 cmovne	 eax, DWORD PTR _lx$4[ebp]
  0017d	89 45 0c	 mov	 DWORD PTR _x$2$[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00180	8b c1		 mov	 eax, ecx
  00182	c1 e8 06	 shr	 eax, 6
  00185	a8 01		 test	 al, 1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 817  : 				if (pWin->IsFlag(CWindow::FLAG_RESTRICT_Y))

  00187	0f 45 55 e8	 cmovne	 edx, DWORD PTR _ly$3[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  0018b	d1 e9		 shr	 ecx, 1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 817  : 				if (pWin->IsFlag(CWindow::FLAG_RESTRICT_Y))

  0018d	89 55 08	 mov	 DWORD PTR _y$2$[ebp], edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00190	f6 c1 01	 test	 cl, 1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 822  : 				if (pWin->IsFlag(CWindow::FLAG_LIMIT))

  00193	74 70		 je	 SHORT $LN21@RunMouseMo

; 823  : 				{
; 824  : 					RECT limitRect = pWin->GetLimitBias();

  00195	0f 10 4f 44	 movups	 xmm1, XMMWORD PTR [edi+68]

; 825  : 
; 826  : 					limitRect.right = m_lWidth - limitRect.right;

  00199	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0019c	0f 28 c1	 movaps	 xmm0, xmm1
  0019f	66 0f 73 d8 08	 psrldq	 xmm0, 8
  001a4	66 0f 7e c0	 movd	 eax, xmm0

; 827  : 					limitRect.bottom = m_lHeight - limitRect.bottom;

  001a8	0f 28 c1	 movaps	 xmm0, xmm1
  001ab	66 0f 73 d8 0c	 psrldq	 xmm0, 12		; 0000000cH
  001b0	0f 11 4d d0	 movups	 XMMWORD PTR _limitRect$2[ebp], xmm1
  001b4	2b c8		 sub	 ecx, eax
  001b6	89 4d e4	 mov	 DWORD PTR tv750[ebp], ecx
  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	66 0f 7e c0	 movd	 eax, xmm0
  001c0	2b c8		 sub	 ecx, eax

; 828  : 
; 829  : 					if (x < limitRect.left)

  001c2	66 0f 7e c8	 movd	 eax, xmm1
  001c6	89 4d f0	 mov	 DWORD PTR tv749[ebp], ecx
  001c9	8b 4d 0c	 mov	 ecx, DWORD PTR _x$2$[ebp]
  001cc	3b c8		 cmp	 ecx, eax
  001ce	7d 05		 jge	 SHORT $LN16@RunMouseMo

; 830  : 						x = limitRect.left;

  001d0	89 45 0c	 mov	 DWORD PTR _x$2$[ebp], eax
  001d3	eb 12		 jmp	 SHORT $LN18@RunMouseMo
$LN16@RunMouseMo:

; 831  : 					else if (x + pWin->GetWidth() >= limitRect.right)

  001d5	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  001d8	03 c1		 add	 eax, ecx
  001da	8b 4d e4	 mov	 ecx, DWORD PTR tv750[ebp]
  001dd	3b c1		 cmp	 eax, ecx
  001df	7c 06		 jl	 SHORT $LN18@RunMouseMo

; 832  : 						x = limitRect.right - pWin->GetWidth();

  001e1	2b 4f 2c	 sub	 ecx, DWORD PTR [edi+44]
  001e4	89 4d 0c	 mov	 DWORD PTR _x$2$[ebp], ecx
$LN18@RunMouseMo:

; 833  : 
; 834  : 					if (y < limitRect.top)

  001e7	8b 45 d4	 mov	 eax, DWORD PTR _limitRect$2[ebp+4]
  001ea	3b d0		 cmp	 edx, eax
  001ec	7d 04		 jge	 SHORT $LN19@RunMouseMo

; 835  : 						y = limitRect.top;

  001ee	8b d0		 mov	 edx, eax
  001f0	eb 10		 jmp	 SHORT $LN98@RunMouseMo
$LN19@RunMouseMo:

; 836  : 					else if (y + pWin->GetHeight() >= limitRect.bottom)

  001f2	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  001f5	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  001f8	3b 45 f0	 cmp	 eax, DWORD PTR tv749[ebp]
  001fb	7c 08		 jl	 SHORT $LN21@RunMouseMo

; 837  : 						y = limitRect.bottom - pWin->GetHeight();

  001fd	8b 55 f0	 mov	 edx, DWORD PTR tv749[ebp]
  00200	2b d1		 sub	 edx, ecx
$LN98@RunMouseMo:

; 838  : 				}
; 839  : 
; 840  : 				pWin->SetPosition(x, y);

  00202	89 55 08	 mov	 DWORD PTR _y$2$[ebp], edx
$LN21@RunMouseMo:
  00205	52		 push	 edx
  00206	ff 75 0c	 push	 DWORD PTR _x$2$[ebp]
  00209	8b cf		 mov	 ecx, edi
  0020b	e8 00 00 00 00	 call	 ?SetPosition@CWindow@UI@@QAEXJJ@Z ; UI::CWindow::SetPosition

; 841  : 				pWin->OnMoveWindow(x, y);

  00210	8b 4d 08	 mov	 ecx, DWORD PTR _y$2$[ebp]
  00213	8b 07		 mov	 eax, DWORD PTR [edi]
  00215	51		 push	 ecx
  00216	ff 75 0c	 push	 DWORD PTR _x$2$[ebp]
  00219	8b cf		 mov	 ecx, edi
  0021b	ff 50 34	 call	 DWORD PTR [eax+52]

; 842  : 			}

  0021e	eb 1f		 jmp	 SHORT $LN22@RunMouseMo
$LN10@RunMouseMo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 99   : 			bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00220	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00223	c1 e8 03	 shr	 eax, 3
  00226	a8 01		 test	 al, 1
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 843  : 			else if (m_pLeftCaptureWindow->IsFlag(CWindow::FLAG_DRAGABLE))

  00228	74 15		 je	 SHORT $LN22@RunMouseMo

; 844  : 			{
; 845  : 				long x = m_lMouseX - m_lDragX;
; 846  : 				long y = m_lMouseY - m_lDragY;

  0022a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]

; 847  : 				m_pLeftCaptureWindow->OnMouseDrag(x, y);

  0022d	8b cf		 mov	 ecx, edi
  0022f	2b 46 20	 sub	 eax, DWORD PTR [esi+32]
  00232	8b 17		 mov	 edx, DWORD PTR [edi]
  00234	50		 push	 eax
  00235	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00238	2b 46 1c	 sub	 eax, DWORD PTR [esi+28]
  0023b	50		 push	 eax
  0023c	ff 52 18	 call	 DWORD PTR [edx+24]
$LN22@RunMouseMo:

; 848  : 			}
; 849  : 		}
; 850  : 
; 851  : 		if (m_pPointWindow != pPointWindow)

  0023f	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00242	8b 7d e0	 mov	 edi, DWORD PTR _pPointWindow$1$[ebp]
  00245	3b cf		 cmp	 ecx, edi
  00247	74 1a		 je	 SHORT $LN25@RunMouseMo

; 852  : 		{
; 853  : #ifdef _DEBUG
; 854  : 			if (pPointWindow && pPointWindow->GetName())
; 855  : 				Tracenf("PointWindow: %s", pPointWindow->GetName());
; 856  : #endif
; 857  : 			if (m_pPointWindow)

  00249	85 c9		 test	 ecx, ecx
  0024b	74 05		 je	 SHORT $LN24@RunMouseMo

; 858  : 				m_pPointWindow->OnMouseOverOut();

  0024d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0024f	ff 50 20	 call	 DWORD PTR [eax+32]
$LN24@RunMouseMo:

; 859  : 
; 860  : 			m_pPointWindow = pPointWindow;

  00252	89 7e 68	 mov	 DWORD PTR [esi+104], edi

; 861  : 
; 862  : 			if (m_pPointWindow)

  00255	85 ff		 test	 edi, edi
  00257	74 13		 je	 SHORT $LN26@RunMouseMo

; 863  : 				m_pPointWindow->OnMouseOverIn();

  00259	8b 07		 mov	 eax, DWORD PTR [edi]
  0025b	8b cf		 mov	 ecx, edi
  0025d	ff 50 1c	 call	 DWORD PTR [eax+28]
  00260	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
$LN25@RunMouseMo:

; 864  : 		}
; 865  : 
; 866  : 		if (m_pPointWindow)

  00263	85 c9		 test	 ecx, ecx
  00265	74 05		 je	 SHORT $LN26@RunMouseMo

; 867  : 		{
; 868  : 			m_pPointWindow->OnMouseOver();

  00267	8b 01		 mov	 eax, DWORD PTR [ecx]
  00269	ff 50 24	 call	 DWORD PTR [eax+36]
$LN26@RunMouseMo:

; 869  : 		}
; 870  : 	}

  0026c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0026f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00276	59		 pop	 ecx
  00277	5f		 pop	 edi
  00278	5e		 pop	 esi
  00279	8b e5		 mov	 esp, ebp
  0027b	5d		 pop	 ebp
  0027c	c2 08 00	 ret	 8
$LN100@RunMouseMo:

; 788  : 				static std::string strPickWindowName = "";

  0027f	68 00 00 00 00	 push	 OFFSET ?$TSS0@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA
  00284	e8 00 00 00 00	 call	 __Init_thread_header
  00289	83 c4 04	 add	 esp, 4
  0028c	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA, -1
  00293	0f 85 fe fd ff
	ff		 jne	 $LN2@RunMouseMo
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2487 :         assign(_Ptr);

  00299	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0029e	b9 00 00 00 00	 mov	 ecx, OFFSET ?strPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 788  : 				static std::string strPickWindowName = "";

  002a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2487 :         assign(_Ptr);

  002aa	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 788  : 				static std::string strPickWindowName = "";

  002af	68 00 00 00 00	 push	 OFFSET ??__FstrPickWindowName@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@YAXXZ ; `UI::CWindowManager::RunMouseMove'::`15'::`dynamic atexit destructor for 'strPickWindowName''
  002b4	e8 00 00 00 00	 call	 _atexit
  002b9	68 00 00 00 00	 push	 OFFSET ?$TSS0@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA
  002be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002c5	e8 00 00 00 00	 call	 __Init_thread_footer
  002ca	83 c4 08	 add	 esp, 8
  002cd	e9 c5 fd ff ff	 jmp	 $LN2@RunMouseMo
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?P@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z ENDP		; UI::CWindowManager::RunMouseMove
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?Render@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?Render@CWindowManager@UI@@QAEXXZ PROC			; UI::CWindowManager::Render, COMDAT
; _this$ = ecx

; 723  : 		m_pRootWindow->Render();

  00000	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  00006	e9 00 00 00 00	 jmp	 ?Render@CWindow@UI@@QAEXXZ ; UI::CWindow::Render
?Render@CWindowManager@UI@@QAEXXZ ENDP			; UI::CWindowManager::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?Update@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?Update@CWindowManager@UI@@QAEXXZ PROC			; UI::CWindowManager::Update, COMDAT
; _this$ = ecx

; 715  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 716  : 		__ClearReserveDeleteWindowList();

  00003	e8 00 00 00 00	 call	 ?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ ; UI::CWindowManager::__ClearReserveDeleteWindowList

; 717  : 
; 718  : 		m_pRootWindow->Update();

  00008	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [esi+144]
  0000e	5e		 pop	 esi
  0000f	e9 00 00 00 00	 jmp	 ?Update@CWindow@UI@@QAEXXZ ; UI::CWindow::Update
?Update@CWindowManager@UI@@QAEXXZ ENDP			; UI::CWindowManager::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?ResetCapture@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?ResetCapture@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::ResetCapture, COMDAT
; _this$ = ecx

; 670  : 		m_pLeftCaptureWindow = NULL;

  00000	c7 41 6c 00 00
	00 00		 mov	 DWORD PTR [ecx+108], 0

; 671  : 		m_pMiddleCaptureWindow = NULL;

  00007	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0

; 672  : 		m_pRightCaptureWindow = NULL;

  0000e	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0

; 673  : 	}

  00015	c3		 ret	 0
?ResetCapture@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::ResetCapture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetTopUIWindow@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
__Loc$1 = -40						; size = 12
$T2 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
?SetTopUIWindow@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::SetTopUIWindow, COMDAT
; _this$ = ecx

; 648  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 649  : 		if (m_pLockWindow)

  00013	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00017	0f 85 ae 00 00
	00		 jne	 $LN4@SetTopUIWi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0001d	53		 push	 ebx
  0001e	57		 push	 edi

; 2487 :         assign(_Ptr);

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_02ELHCDOPK@UI@
  00024	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00027	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 4562 :         _My_data._Mysize = 0;

  0002e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00035	c7 45 f8 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 2487 :         assign(_Ptr);

  0003c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1353 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00041	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  00044	50		 push	 eax
  00045	8d 45 d8	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00048	50		 push	 eax
  00049	8d 8e 9c 00 00
	00		 lea	 ecx, DWORD PTR [esi+156]
  0004f	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00054	8b 7d e0	 mov	 edi, DWORD PTR __Loc$1[ebp+8]
  00057	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0005b	75 14		 jne	 SHORT $LN22@SetTopUIWi
  0005d	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  00060	50		 push	 eax
  00061	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0006a	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0006d	84 c0		 test	 al, al
  0006f	74 06		 je	 SHORT $LN21@SetTopUIWi
$LN22@SetTopUIWi:

; 1358 :         return _Get_scary()->_Myhead;

  00071	8b be 9c 00 00
	00		 mov	 edi, DWORD PTR [esi+156]
$LN21@SetTopUIWi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00077	8b 55 f8	 mov	 edx, DWORD PTR $T2[ebp+20]
  0007a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0007d	72 28		 jb	 SHORT $LN48@SetTopUIWi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007f	8b 4d e4	 mov	 ecx, DWORD PTR $T2[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00082	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00085	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0008b	72 10		 jb	 SHORT $LN58@SetTopUIWi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008d	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00090	83 c2 23	 add	 edx, 35			; 00000023H
  00093	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00095	83 c0 fc	 add	 eax, -4			; fffffffcH
  00098	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009b	77 3d		 ja	 SHORT $LN84@SetTopUIWi
$LN58@SetTopUIWi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0009d	52		 push	 edx
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a4	83 c4 08	 add	 esp, 8
$LN48@SetTopUIWi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 233  :         return this->_Ptr == _Right._Ptr;

  000a7	3b be 9c 00 00
	00		 cmp	 edi, DWORD PTR [esi+156]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 653  : 		if (itor == m_LayerWindowMap.end())

  000ad	74 1a		 je	 SHORT $LN81@SetTopUIWi

; 654  : 			return;
; 655  : 		CWindow * pGameLayer = itor->second;
; 656  : 		CWindow * pTopWindow = pGameLayer->PickTopWindow(m_lMouseX, m_lMouseY);

  000af	ff 76 18	 push	 DWORD PTR [esi+24]
  000b2	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  000b5	ff 76 14	 push	 DWORD PTR [esi+20]
  000b8	e8 00 00 00 00	 call	 ?PickTopWindow@CWindow@UI@@QAEPAV12@JJ@Z ; UI::CWindow::PickTopWindow

; 657  : 		if (pTopWindow)

  000bd	85 c0		 test	 eax, eax
  000bf	74 08		 je	 SHORT $LN81@SetTopUIWi

; 658  : 		{
; 659  : 			SetTop(pTopWindow);

  000c1	50		 push	 eax
  000c2	8b ce		 mov	 ecx, esi
  000c4	e8 00 00 00 00	 call	 ?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::SetTop
$LN81@SetTopUIWi:
  000c9	5f		 pop	 edi
  000ca	5b		 pop	 ebx
$LN4@SetTopUIWi:

; 661  : 	}

  000cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	33 cd		 xor	 ecx, ebp
  000d0	5e		 pop	 esi
  000d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
$LN84@SetTopUIWi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000da	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN82@SetTopUIWi:
  000df	cc		 int	 3
?SetTopUIWindow@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::SetTopUIWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC	; UI::CWindowManager::SetTop, COMDAT
; _this$ = ecx

; 637  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 80   : 			bool			HasParent()		{ return m_pParent ? true : false; }

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWin$[ebp]
  00007	83 7e 60 00	 cmp	 DWORD PTR [esi+96], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 638  : 		if (!pWin->HasParent())

  0000b	74 0f		 je	 SHORT $LN1@SetTop

; 639  : 			return;
; 640  : 
; 641  : 		CWindow * pParentWindow = pWin->GetParent();

  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent

; 642  : 		pParentWindow->SetTop(pWin);

  00014	56		 push	 esi
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ?SetTop@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::SetTop
$LN1@SetTop:
  0001c	5e		 pop	 esi

; 643  : 
; 644  : //		ResetCapture();
; 645  : 	}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP	; UI::CWindowManager::SetTop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetActivateWindow@CWindowManager@UI@@QAEPAVCWindow@2@XZ
_TEXT	SEGMENT
?GetActivateWindow@CWindowManager@UI@@QAEPAVCWindow@2@XZ PROC ; UI::CWindowManager::GetActivateWindow, COMDAT
; _this$ = ecx

; 665  : 		return m_pActiveWindow;

  00000	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]

; 666  : 	}

  00003	c3		 ret	 0
?GetActivateWindow@CWindowManager@UI@@QAEPAVCWindow@2@XZ ENDP ; UI::CWindowManager::GetActivateWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?DeactivateWindow@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?DeactivateWindow@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::DeactivateWindow, COMDAT
; _this$ = ecx

; 616  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 617  : 		if (m_pActiveWindow)

  00003	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00006	85 c9		 test	 ecx, ecx
  00008	74 12		 je	 SHORT $LN4@Deactivate
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1191 :         return _Mypair._Myval2._Mysize == 0;

  0000a	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 619  : 			if (m_ActiveWindowList.empty())

  00010	75 0c		 jne	 SHORT $LN3@Deactivate

; 620  : 			{
; 621  : 				m_pActiveWindow->OnKillFocus();

  00012	ff 50 14	 call	 DWORD PTR [eax+20]

; 622  : 				m_pActiveWindow = NULL;

  00015	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
$LN4@Deactivate:
  0001c	5e		 pop	 esi

; 632  : 			}
; 633  : 		}
; 634  : 	}

  0001d	c3		 ret	 0
$LN3@Deactivate:

; 623  : 			}
; 624  : 			else
; 625  : 			{
; 626  : 				m_pActiveWindow->OnKillFocus();

  0001e	ff 50 14	 call	 DWORD PTR [eax+20]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1219 :         return _Mypair._Myval2._Myhead->_Prev->_Myval;

  00021	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00024	6a 0c		 push	 12			; 0000000cH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 628  : 				m_pActiveWindow = m_ActiveWindowList.back();

  00026	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00029	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002c	89 46 50	 mov	 DWORD PTR [esi+80], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1251 :         _Unchecked_erase(_Mypair._Myval2._Myhead->_Prev);

  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	52		 push	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1351 :         const auto _Result = _Pnode->_Next;

  00033	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 1352 :         _Mypair._Myval2._Orphan_ptr2(_Pnode);
; 1353 :         --_Mypair._Myval2._Mysize;

  00035	ff 4e 58	 dec	 DWORD PTR [esi+88]

; 1354 :         _Pnode->_Prev->_Next = _Result;

  00038	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003b	89 08		 mov	 DWORD PTR [eax], ecx

; 1355 :         _Result->_Prev       = _Pnode->_Prev;

  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 631  : 				m_pActiveWindow->OnSetFocus();

  00048	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004b	83 c4 08	 add	 esp, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 631  : 				m_pActiveWindow->OnSetFocus();

  0004e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00050	5e		 pop	 esi
  00051	ff 60 10	 jmp	 DWORD PTR [eax+16]
?DeactivateWindow@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::DeactivateWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?ActivateWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
?ActivateWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC ; UI::CWindowManager::ActivateWindow, COMDAT
; _this$ = ecx

; 595  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 596  : 		m_ActiveWindowList.remove(pWin);

  00007	8d 45 08	 lea	 eax, DWORD PTR _pWin$[ebp]
  0000a	57		 push	 edi
  0000b	50		 push	 eax
  0000c	8d 5e 54	 lea	 ebx, DWORD PTR [esi+84]
  0000f	8b cb		 mov	 ecx, ebx
  00011	e8 00 00 00 00	 call	 ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove

; 597  : 
; 598  : 		if (pWin == m_pActiveWindow)

  00016	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00019	8d 7e 50	 lea	 edi, DWORD PTR [esi+80]
  0001c	8b 75 08	 mov	 esi, DWORD PTR _pWin$[ebp]
  0001f	3b f0		 cmp	 esi, eax
  00021	74 20		 je	 SHORT $LN4@ActivateWi

; 599  : 			return;
; 600  : 
; 601  : 		if (m_pActiveWindow)

  00023	85 c0		 test	 eax, eax
  00025	74 0f		 je	 SHORT $LN3@ActivateWi

; 602  : 		{
; 603  : 			m_ActiveWindowList.push_back(m_pActiveWindow);

  00027	57		 push	 edi
  00028	8b cb		 mov	 ecx, ebx
  0002a	e8 00 00 00 00	 call	 ?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back

; 604  : 			m_pActiveWindow->OnKillFocus();

  0002f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 14	 call	 DWORD PTR [eax+20]
$LN3@ActivateWi:

; 605  : 		}
; 606  : 
; 607  : 		m_pActiveWindow = pWin;

  00036	89 37		 mov	 DWORD PTR [edi], esi

; 608  : 
; 609  : 		if (m_pActiveWindow)

  00038	85 f6		 test	 esi, esi
  0003a	74 07		 je	 SHORT $LN4@ActivateWi

; 610  : 		{
; 611  : 			m_pActiveWindow->OnSetFocus();

  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b ce		 mov	 ecx, esi
  00040	ff 50 10	 call	 DWORD PTR [eax+16]
$LN4@ActivateWi:

; 612  : 		}
; 613  : 	}

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?ActivateWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP ; UI::CWindowManager::ActivateWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?UnlockWindow@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?UnlockWindow@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::UnlockWindow, COMDAT
; _this$ = ecx

; 577  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 578  : 		if (m_pLockWindow)

  00003	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00007	74 47		 je	 SHORT $LN23@UnlockWind
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1191 :         return _Mypair._Myval2._Mysize == 0;

  00009	57		 push	 edi
  0000a	8b 7e 64	 mov	 edi, DWORD PTR [esi+100]
  0000d	85 ff		 test	 edi, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 580  : 			if (m_LockWindowList.empty())

  0000f	75 11		 jne	 SHORT $LN3@UnlockWind

; 581  : 			{
; 582  : 				m_pLockWindow = NULL;
; 583  : 				if (m_pActiveWindow)

  00011	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00014	89 7e 5c	 mov	 DWORD PTR [esi+92], edi
  00017	85 c9		 test	 ecx, ecx
  00019	74 34		 je	 SHORT $LN41@UnlockWind

; 584  : 					m_pActiveWindow->OnSetFocus();

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	ff 60 10	 jmp	 DWORD PTR [eax+16]
$LN3@UnlockWind:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1219 :         return _Mypair._Myval2._Myhead->_Prev->_Myval;

  00022	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00025	6a 0c		 push	 12			; 0000000cH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 588  : 				m_pLockWindow = m_LockWindowList.back();

  00027	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	89 46 5c	 mov	 DWORD PTR [esi+92], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1353 :         --_Mypair._Myval2._Mysize;

  00030	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]

; 1251 :         _Unchecked_erase(_Mypair._Myval2._Myhead->_Prev);

  00033	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00036	52		 push	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1351 :         const auto _Result = _Pnode->_Next;

  00037	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 1353 :         --_Mypair._Myval2._Mysize;

  00039	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 1354 :         _Pnode->_Prev->_Next = _Result;

  0003c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003f	89 08		 mov	 DWORD PTR [eax], ecx

; 1355 :         _Result->_Prev       = _Pnode->_Prev;

  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00047	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004c	83 c4 08	 add	 esp, 8
$LN41@UnlockWind:
  0004f	5f		 pop	 edi
$LN23@UnlockWind:
  00050	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 592  : 	}

  00051	c3		 ret	 0
?UnlockWindow@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::UnlockWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?LockWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
?LockWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC	; UI::CWindowManager::LockWindow, COMDAT
; _this$ = ecx

; 559  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 560  : 		if (m_pActiveWindow)

  00008	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 05		 je	 SHORT $LN2@LockWindow

; 561  : 			m_pActiveWindow->OnKillFocus();

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	ff 50 14	 call	 DWORD PTR [eax+20]
$LN2@LockWindow:

; 562  : 
; 563  : 		m_LockWindowList.remove(pWin);

  00014	8d 45 08	 lea	 eax, DWORD PTR _pWin$[ebp]
  00017	8d 5e 60	 lea	 ebx, DWORD PTR [esi+96]
  0001a	50		 push	 eax
  0001b	8b cb		 mov	 ecx, ebx
  0001d	e8 00 00 00 00	 call	 ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove

; 564  : 
; 565  : 		if (m_pLockWindow)

  00022	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00025	83 c6 5c	 add	 esi, 92			; 0000005cH
  00028	8b 7d 08	 mov	 edi, DWORD PTR _pWin$[ebp]
  0002b	85 c0		 test	 eax, eax
  0002d	74 0c		 je	 SHORT $LN3@LockWindow

; 566  : 		{
; 567  : 			if (m_pLockWindow==pWin)

  0002f	3b c7		 cmp	 eax, edi
  00031	74 0a		 je	 SHORT $LN1@LockWindow

; 568  : 				return;
; 569  : 
; 570  : 			m_LockWindowList.push_back(m_pLockWindow);

  00033	56		 push	 esi
  00034	8b cb		 mov	 ecx, ebx
  00036	e8 00 00 00 00	 call	 ?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back
$LN3@LockWindow:

; 571  : 		}
; 572  : 
; 573  : 		m_pLockWindow = pWin;

  0003b	89 3e		 mov	 DWORD PTR [esi], edi
$LN1@LockWindow:
  0003d	5f		 pop	 edi

; 574  : 	}

  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?LockWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP	; UI::CWindowManager::LockWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?OnceIgnoreMouseLeftButtonUpEvent@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?OnceIgnoreMouseLeftButtonUpEvent@CWindowManager@UI@@QAEXXZ PROC ; UI::CWindowManager::OnceIgnoreMouseLeftButtonUpEvent, COMDAT
; _this$ = ecx

; 553  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 554  : 		m_bOnceIgnoreMouseLeftButtonUpEventFlag = TRUE;

  00003	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1

; 555  : 		m_iIgnoreEndTime = timeGetTime() + 500;

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00010	05 f4 01 00 00	 add	 eax, 500		; 000001f4H
  00015	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00018	5e		 pop	 esi

; 556  : 	}

  00019	c3		 ret	 0
?OnceIgnoreMouseLeftButtonUpEvent@CWindowManager@UI@@QAEXXZ ENDP ; UI::CWindowManager::OnceIgnoreMouseLeftButtonUpEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetAttachingRealSlotNumber@CWindowManager@UI@@QAEXK@Z
_TEXT	SEGMENT
_dwRealSlotNumber$ = 8					; size = 4
?SetAttachingRealSlotNumber@CWindowManager@UI@@QAEXK@Z PROC ; UI::CWindowManager::SetAttachingRealSlotNumber, COMDAT
; _this$ = ecx

; 510  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 511  : 		m_dwAttachingRealSlotNumber = dwRealSlotNumber;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwRealSlotNumber$[ebp]
  00006	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 512  : 	}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetAttachingRealSlotNumber@CWindowManager@UI@@QAEXK@Z ENDP ; UI::CWindowManager::SetAttachingRealSlotNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetAttachingFlag@CWindowManager@UI@@QAEXH@Z
_TEXT	SEGMENT
_bFlag$ = 8						; size = 4
?SetAttachingFlag@CWindowManager@UI@@QAEXH@Z PROC	; UI::CWindowManager::SetAttachingFlag, COMDAT
; _this$ = ecx

; 505  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 506  : 		m_bAttachingFlag = bFlag;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bFlag$[ebp]
  00006	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 507  : 	}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetAttachingFlag@CWindowManager@UI@@QAEXH@Z ENDP	; UI::CWindowManager::SetAttachingFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?DeattachIcon@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?DeattachIcon@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::DeattachIcon, COMDAT
; _this$ = ecx

; 515  : 	{

  00000	56		 push	 esi

; 516  : 		SetAttachingFlag(FALSE);

  00001	6a 00		 push	 0
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?SetAttachingFlag@CWindowManager@UI@@QAEXH@Z ; UI::CWindowManager::SetAttachingFlag

; 517  : 		if (m_poMouseHandler)

  0000a	83 7e 34 00	 cmp	 DWORD PTR [esi+52], 0
  0000e	74 16		 je	 SHORT $LN2@DeattachIc

; 518  : 			PyCallClassMemberFunc(m_poMouseHandler, "DeattachObject", BuildEmptyTuple());

  00010	e8 00 00 00 00	 call	 ?BuildEmptyTuple@UI@@YAPAU_object@@XZ ; UI::BuildEmptyTuple
  00015	50		 push	 eax
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KLAFPINF@DeattachObject@
  0001b	ff 76 34	 push	 DWORD PTR [esi+52]
  0001e	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@DeattachIc:

; 519  : 	}

  00026	5e		 pop	 esi
  00027	c3		 ret	 0
?DeattachIcon@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::DeattachIcon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?AttachIcon@CWindowManager@UI@@QAEXKKKEE@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
_dwIndex$ = 12						; size = 4
_dwSlotNumber$ = 16					; size = 4
_byWidth$ = 20						; size = 1
_byHeight$ = 24						; size = 1
?AttachIcon@CWindowManager@UI@@QAEXKKKEE@Z PROC		; UI::CWindowManager::AttachIcon, COMDAT
; _this$ = ecx

; 494  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 495  : 		m_bAttachingFlag = TRUE;
; 496  : 		m_dwAttachingType = dwType;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwType$[ebp]
  00006	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 497  : 		m_dwAttachingIndex = dwIndex;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  0000c	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 498  : 		m_dwAttachingSlotNumber = dwSlotNumber;

  0000f	8b 45 10	 mov	 eax, DWORD PTR _dwSlotNumber$[ebp]
  00012	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 499  : 
; 500  : 		m_byAttachingIconWidth = byWidth;

  00015	8a 45 14	 mov	 al, BYTE PTR _byWidth$[ebp]
  00018	88 41 4c	 mov	 BYTE PTR [ecx+76], al

; 501  : 		m_byAttachingIconHeight = byHeight;

  0001b	8a 45 18	 mov	 al, BYTE PTR _byHeight$[ebp]
  0001e	c7 41 38 01 00
	00 00		 mov	 DWORD PTR [ecx+56], 1
  00025	88 41 4d	 mov	 BYTE PTR [ecx+77], al

; 502  : 	}

  00028	5d		 pop	 ebp
  00029	c2 14 00	 ret	 20			; 00000014H
?AttachIcon@CWindowManager@UI@@QAEXKKKEE@Z ENDP		; UI::CWindowManager::AttachIcon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z
_TEXT	SEGMENT
_pbyWidth$ = 8						; size = 4
_pbyHeight$ = 12					; size = 4
?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z PROC ; UI::CWindowManager::GetAttachingIconSize, COMDAT
; _this$ = ecx

; 488  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 489  : 		*pbyWidth = m_byAttachingIconWidth;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pbyWidth$[ebp]
  00006	8a 51 4c	 mov	 dl, BYTE PTR [ecx+76]
  00009	88 10		 mov	 BYTE PTR [eax], dl

; 490  : 		*pbyHeight = m_byAttachingIconHeight;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pbyHeight$[ebp]
  0000e	8a 49 4d	 mov	 cl, BYTE PTR [ecx+77]
  00011	88 08		 mov	 BYTE PTR [eax], cl

; 491  : 	}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z ENDP ; UI::CWindowManager::GetAttachingIconSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAttachingRealSlotNumber@CWindowManager@UI@@QAEKXZ
_TEXT	SEGMENT
?GetAttachingRealSlotNumber@CWindowManager@UI@@QAEKXZ PROC ; UI::CWindowManager::GetAttachingRealSlotNumber, COMDAT
; _this$ = ecx

; 484  : 		return m_dwAttachingRealSlotNumber;

  00000	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]

; 485  : 	}

  00003	c3		 ret	 0
?GetAttachingRealSlotNumber@CWindowManager@UI@@QAEKXZ ENDP ; UI::CWindowManager::GetAttachingRealSlotNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ
_TEXT	SEGMENT
?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ PROC	; UI::CWindowManager::GetAttachingSlotNumber, COMDAT
; _this$ = ecx

; 479  : 		return m_dwAttachingSlotNumber;

  00000	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]

; 480  : 	}

  00003	c3		 ret	 0
?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ ENDP	; UI::CWindowManager::GetAttachingSlotNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAttachingIndex@CWindowManager@UI@@QAEKXZ
_TEXT	SEGMENT
?GetAttachingIndex@CWindowManager@UI@@QAEKXZ PROC	; UI::CWindowManager::GetAttachingIndex, COMDAT
; _this$ = ecx

; 474  : 		return m_dwAttachingIndex;

  00000	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]

; 475  : 	}

  00003	c3		 ret	 0
?GetAttachingIndex@CWindowManager@UI@@QAEKXZ ENDP	; UI::CWindowManager::GetAttachingIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAttachingType@CWindowManager@UI@@QAEKXZ
_TEXT	SEGMENT
?GetAttachingType@CWindowManager@UI@@QAEKXZ PROC	; UI::CWindowManager::GetAttachingType, COMDAT
; _this$ = ecx

; 469  : 		return m_dwAttachingType;

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 470  : 	}

  00003	c3		 ret	 0
?GetAttachingType@CWindowManager@UI@@QAEKXZ ENDP	; UI::CWindowManager::GetAttachingType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?IsAttaching@CWindowManager@UI@@QAEHXZ
_TEXT	SEGMENT
?IsAttaching@CWindowManager@UI@@QAEHXZ PROC		; UI::CWindowManager::IsAttaching, COMDAT
; _this$ = ecx

; 464  : 		return m_bAttachingFlag;

  00000	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]

; 465  : 	}

  00003	c3		 ret	 0
?IsAttaching@CWindowManager@UI@@QAEHXZ ENDP		; UI::CWindowManager::IsAttaching
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?NotifyDestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_itor$ = -4						; size = 4
__Successor$1 = 8					; size = 4
_pWindow$ = 8						; size = 4
?NotifyDestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC ; UI::CWindowManager::NotifyDestroyWindow, COMDAT
; _this$ = ecx

; 403  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 404  : 		if (pWindow == m_pActiveWindow)

  00004	8b 45 08	 mov	 eax, DWORD PTR _pWindow$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	3b 46 50	 cmp	 eax, DWORD PTR [esi+80]
  0000e	75 07		 jne	 SHORT $LN5@NotifyDest

; 405  : 			m_pActiveWindow = NULL;

  00010	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
$LN5@NotifyDest:

; 406  : 
; 407  : 		if (pWindow == m_pPointWindow)

  00017	3b 46 68	 cmp	 eax, DWORD PTR [esi+104]
  0001a	75 07		 jne	 SHORT $LN6@NotifyDest

; 408  : 			m_pPointWindow = NULL;

  0001c	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
$LN6@NotifyDest:

; 409  : 
; 410  : 		if (pWindow == m_pLeftCaptureWindow)

  00023	3b 46 6c	 cmp	 eax, DWORD PTR [esi+108]
  00026	75 07		 jne	 SHORT $LN7@NotifyDest

; 411  : 			m_pLeftCaptureWindow = NULL;

  00028	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
$LN7@NotifyDest:

; 412  : 
; 413  : 		if (pWindow == m_pMiddleCaptureWindow)

  0002f	3b 46 74	 cmp	 eax, DWORD PTR [esi+116]
  00032	75 07		 jne	 SHORT $LN8@NotifyDest

; 414  : 			m_pMiddleCaptureWindow = NULL;

  00034	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
$LN8@NotifyDest:

; 415  : 
; 416  : 		if (pWindow == m_pRightCaptureWindow)

  0003b	3b 46 70	 cmp	 eax, DWORD PTR [esi+112]
  0003e	75 07		 jne	 SHORT $LN9@NotifyDest

; 417  : 			m_pRightCaptureWindow = NULL;

  00040	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
$LN9@NotifyDest:

; 418  : 
; 419  : 		if (pWindow == m_pLockWindow)

  00047	3b 46 5c	 cmp	 eax, DWORD PTR [esi+92]
  0004a	75 07		 jne	 SHORT $LN10@NotifyDest

; 420  : 			m_pLockWindow = NULL;

  0004c	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
$LN10@NotifyDest:

; 421  : 
; 422  : 		m_LockWindowList.remove(pWindow);

  00053	8d 45 08	 lea	 eax, DWORD PTR _pWindow$[ebp]
  00056	50		 push	 eax
  00057	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]
  0005a	e8 00 00 00 00	 call	 ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove

; 423  : 		m_ActiveWindowList.remove(pWindow);

  0005f	8d 45 08	 lea	 eax, DWORD PTR _pWindow$[ebp]
  00062	50		 push	 eax
  00063	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  00066	e8 00 00 00 00	 call	 ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove

; 424  : 		m_PickAlwaysWindowList.remove(pWindow);

  0006b	8d 45 08	 lea	 eax, DWORD PTR _pWindow$[ebp]
  0006e	50		 push	 eax
  0006f	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  00075	e8 00 00 00 00	 call	 ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1135 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0007a	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  0007d	8d 7e 78	 lea	 edi, DWORD PTR [esi+120]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00080	8b 30		 mov	 esi, DWORD PTR [eax]
  00082	89 75 fc	 mov	 DWORD PTR _itor$[ebp], esi
  00085	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 427  : 		for (; itor != m_KeyCaptureWindowMap.end();)

  00087	74 42		 je	 SHORT $LN3@NotifyDest
  00089	53		 push	 ebx
  0008a	8b 5d 08	 mov	 ebx, DWORD PTR _pWindow$[ebp]
  0008d	0f 1f 00	 npad	 3
$LL2@NotifyDest:

; 428  : 		{
; 429  : 			if (pWindow == itor->second)

  00090	3b 5e 14	 cmp	 ebx, DWORD PTR [esi+20]
  00093	75 26		 jne	 SHORT $LN11@NotifyDest
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1283 :         ++_Successor; // save successor iterator for return

  00095	8d 4d 08	 lea	 ecx, DWORD PTR __Successor$1[ebp]
  00098	89 75 08	 mov	 DWORD PTR __Successor$1[ebp], esi
  0009b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++

; 1284 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  000a0	56		 push	 esi
  000a1	8b cf		 mov	 ecx, edi
  000a3	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Extract
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a8	6a 18		 push	 24			; 00000018H
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 431  : 				itor = m_KeyCaptureWindowMap.erase(itor);

  000b0	8b 75 08	 mov	 esi, DWORD PTR __Successor$1[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b3	83 c4 08	 add	 esp, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 431  : 				itor = m_KeyCaptureWindowMap.erase(itor);

  000b6	89 75 fc	 mov	 DWORD PTR _itor$[ebp], esi

; 432  : 			}

  000b9	eb 0b		 jmp	 SHORT $LN85@NotifyDest
$LN11@NotifyDest:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 199  :         _Mybase::operator++();

  000bb	8d 4d fc	 lea	 ecx, DWORD PTR _itor$[ebp]
  000be	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++
  000c3	8b 75 fc	 mov	 esi, DWORD PTR _itor$[ebp]
$LN85@NotifyDest:

; 233  :         return this->_Ptr == _Right._Ptr;

  000c6	3b 37		 cmp	 esi, DWORD PTR [edi]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 427  : 		for (; itor != m_KeyCaptureWindowMap.end();)

  000c8	75 c6		 jne	 SHORT $LL2@NotifyDest
  000ca	5b		 pop	 ebx
$LN3@NotifyDest:
  000cb	5f		 pop	 edi

; 433  : 			else
; 434  : 			{
; 435  : 				++itor;
; 436  : 			}
; 437  : 		}
; 438  : 	}

  000cc	5e		 pop	 esi
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 04 00	 ret	 4
?NotifyDestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP ; UI::CWindowManager::NotifyDestroyWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?DestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
?DestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC ; UI::CWindowManager::DestroyWindow, COMDAT
; _this$ = ecx

; 441  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 442  : 		NotifyDestroyWindow(pWin);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWin$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?NotifyDestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::NotifyDestroyWindow
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 80   : 			bool			HasParent()		{ return m_pParent ? true : false; }

  00010	83 7e 60 00	 cmp	 DWORD PTR [esi+96], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 443  : 		if (pWin->HasParent())

  00014	74 0f		 je	 SHORT $LN2@DestroyWin

; 444  : 		{
; 445  : 			CWindow * pParentWin = pWin->GetParent();

  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent

; 446  : 			pParentWin->DeleteChild(pWin);

  0001d	56		 push	 esi
  0001e	8b c8		 mov	 ecx, eax
  00020	e8 00 00 00 00	 call	 ?DeleteChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::DeleteChild
$LN2@DestroyWin:

; 447  : 		}
; 448  : 		pWin->Clear();

  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?Clear@CWindow@UI@@QAEXXZ ; UI::CWindow::Clear

; 449  : 		m_ReserveDeleteWindowList.push_back(pWin);

  0002c	8d 45 08	 lea	 eax, DWORD PTR _pWin$[ebp]
  0002f	50		 push	 eax
  00030	8d 8f 80 00 00
	00		 lea	 ecx, DWORD PTR [edi+128]
  00036	e8 00 00 00 00	 call	 ?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 450  : 	}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?DestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP ; UI::CWindowManager::DestroyWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterNumberLine, COMDAT
; _this$ = ecx

; 390  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 393  : 		CWindow * pWin = new CNumberLine(po);

  00033	68 c0 00 00 00	 push	 192			; 000000c0H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterNu
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CNumberLine@UI@@QAE@PAU_object@@@Z ; UI::CNumberLine::CNumberLine
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterNu
$LN3@RegisterNu:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterNu:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 393  : 		CWindow * pWin = new CNumberLine(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 394  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterNu
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterNu

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterNu
$LN41@RegisterNu:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterNu:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 399  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 400  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterNu:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterNu:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 c0 00 00 00	 push	 192			; 000000c0H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterNumberLine
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterBar3D, COMDAT
; _this$ = ecx

; 377  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 380  : 		CWindow * pWin = new CBar3D(po);

  00033	68 88 00 00 00	 push	 136			; 00000088H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterBa
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CBar3D@UI@@QAE@PAU_object@@@Z ; UI::CBar3D::CBar3D
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterBa
$LN3@RegisterBa:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterBa:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 380  : 		CWindow * pWin = new CBar3D(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 381  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterBa
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterBa

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterBa
$LN41@RegisterBa:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterBa:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 386  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 387  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterBa:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterBa:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 88 00 00 00	 push	 136			; 00000088H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterBar3D
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterLine, COMDAT
; _this$ = ecx

; 364  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 367  : 		CWindow * pWin = new CLine(po);

  00033	68 80 00 00 00	 push	 128			; 00000080H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterLi
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CLine@UI@@QAE@PAU_object@@@Z ; UI::CLine::CLine
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterLi
$LN3@RegisterLi:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterLi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 367  : 		CWindow * pWin = new CLine(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 368  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterLi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterLi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterLi
$LN41@RegisterLi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterLi:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 373  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 374  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterLi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterLi:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterLine
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterBar, COMDAT
; _this$ = ecx

; 351  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 354  : 		CWindow * pWin = new CBar(po);

  00033	68 80 00 00 00	 push	 128			; 00000080H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterBa
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CBar@UI@@QAE@PAU_object@@@Z ; UI::CBar::CBar
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterBa
$LN3@RegisterBa:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterBa:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 354  : 		CWindow * pWin = new CBar(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 355  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterBa
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterBa

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterBa
$LN41@RegisterBa:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterBa:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 360  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 361  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterBa:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterBa:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterBar
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterRenderTarget, COMDAT
; _this$ = ecx

; 324  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 327  : 		CWindow* pWin = new CRenderTarget(po);

  00033	68 80 00 00 00	 push	 128			; 00000080H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterRe
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CRenderTarget@UI@@QAE@PAU_object@@@Z ; UI::CRenderTarget::CRenderTarget
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterRe
$LN3@RegisterRe:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterRe:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 327  : 		CWindow* pWin = new CRenderTarget(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 328  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterRe
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterRe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterRe
$LN41@RegisterRe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterRe:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 333  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 334  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterRe:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterRe:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterRenderTarget
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterBox, COMDAT
; _this$ = ecx

; 338  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 341  : 		CWindow * pWin = new CBox(po);

  00033	68 80 00 00 00	 push	 128			; 00000080H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterBo
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CBox@UI@@QAE@PAU_object@@@Z ; UI::CBox::CBox
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterBo
$LN3@RegisterBo:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterBo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 341  : 		CWindow * pWin = new CBox(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 342  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterBo
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterBo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterBo
$LN41@RegisterBo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterBo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 347  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 348  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterBo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterBo:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterBox
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterDragButton, COMDAT
; _this$ = ecx

; 310  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 313  : 		CWindow * pWin = new CDragButton(po);

  00033	68 44 01 00 00	 push	 324			; 00000144H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterDr
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CDragButton@UI@@QAE@PAU_object@@@Z ; UI::CDragButton::CDragButton
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterDr
$LN3@RegisterDr:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterDr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 313  : 		CWindow * pWin = new CDragButton(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 314  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterDr
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterDr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterDr
$LN41@RegisterDr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterDr:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 319  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 320  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterDr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterDr:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 44 01 00 00	 push	 324			; 00000144H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterDragButton
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterToggleButton, COMDAT
; _this$ = ecx

; 297  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 300  : 		CWindow * pWin = new CToggleButton(po);

  00033	68 34 01 00 00	 push	 308			; 00000134H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterTo
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CToggleButton@UI@@QAE@PAU_object@@@Z ; UI::CToggleButton::CToggleButton
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterTo
$LN3@RegisterTo:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterTo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 300  : 		CWindow * pWin = new CToggleButton(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 301  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterTo
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterTo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterTo
$LN41@RegisterTo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterTo:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 306  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 307  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterTo:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterTo:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 34 01 00 00	 push	 308			; 00000134H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterToggleButton
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterRadioButton, COMDAT
; _this$ = ecx

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 287  : 		CWindow * pWin = new CRadioButton(po);

  00033	68 34 01 00 00	 push	 308			; 00000134H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterRa
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CRadioButton@UI@@QAE@PAU_object@@@Z ; UI::CRadioButton::CRadioButton
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterRa
$LN3@RegisterRa:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterRa:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 287  : 		CWindow * pWin = new CRadioButton(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 288  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterRa
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterRa

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterRa
$LN41@RegisterRa:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterRa:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 293  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 294  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterRa:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterRa:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 34 01 00 00	 push	 308			; 00000134H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterRadioButton
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterButton, COMDAT
; _this$ = ecx

; 271  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 274  : 		CWindow * pWin = new CButton(po);

  00033	68 34 01 00 00	 push	 308			; 00000134H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterBu
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CButton@UI@@QAE@PAU_object@@@Z ; UI::CButton::CButton
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterBu
$LN3@RegisterBu:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterBu:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 274  : 		CWindow * pWin = new CButton(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 275  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterBu
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterBu

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterBu
$LN41@RegisterBu:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterBu:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 280  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 281  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterBu:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterBu:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 34 01 00 00	 push	 308			; 00000134H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterButton
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterAniImageBox, COMDAT
; _this$ = ecx

; 258  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 261  : 		CWindow * pWin = new CAniImageBox(po);

  00033	68 94 00 00 00	 push	 148			; 00000094H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterAn
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CAniImageBox@UI@@QAE@PAU_object@@@Z ; UI::CAniImageBox::CAniImageBox
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterAn
$LN3@RegisterAn:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterAn:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 261  : 		CWindow * pWin = new CAniImageBox(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 262  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterAn
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterAn

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterAn
$LN41@RegisterAn:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterAn:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 267  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 268  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterAn:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterAn:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 94 00 00 00	 push	 148			; 00000094H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterAniImageBox
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterExpandedImageBox, COMDAT
; _this$ = ecx

; 245  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 248  : 		CWindow * pWin = new CExpandedImageBox(po);

  00033	68 80 00 00 00	 push	 128			; 00000080H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterEx
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CExpandedImageBox@UI@@QAE@PAU_object@@@Z ; UI::CExpandedImageBox::CExpandedImageBox
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterEx
$LN3@RegisterEx:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterEx:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 248  : 		CWindow * pWin = new CExpandedImageBox(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 249  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterEx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterEx

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterEx
$LN41@RegisterEx:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterEx:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 254  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 255  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterEx:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterEx:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterExpandedImageBox
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterImageBox, COMDAT
; _this$ = ecx

; 219  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 222  : 		CWindow * pWin = new CImageBox(po);

  00033	68 80 00 00 00	 push	 128			; 00000080H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterIm
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CImageBox@UI@@QAE@PAU_object@@@Z ; UI::CImageBox::CImageBox
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterIm
$LN3@RegisterIm:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterIm:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 222  : 		CWindow * pWin = new CImageBox(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 223  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterIm
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterIm

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterIm
$LN41@RegisterIm:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterIm:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 228  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 229  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterIm:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterIm:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterImageBox
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterMarkBox, COMDAT
; _this$ = ecx

; 232  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 235  : 		CWindow * pWin = new CMarkBox(po);

  00033	68 80 00 00 00	 push	 128			; 00000080H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterMa
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CMarkBox@UI@@QAE@PAU_object@@@Z ; UI::CMarkBox::CMarkBox
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterMa
$LN3@RegisterMa:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterMa:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 235  : 		CWindow * pWin = new CMarkBox(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 236  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterMa
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterMa

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterMa
$LN41@RegisterMa:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterMa:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 241  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 242  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterMa:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterMa:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterMarkBox
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterTextLine, COMDAT
; _this$ = ecx

; 206  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 209  : 		CWindow * pWin = new CTextLine(po);

  00033	68 0c 01 00 00	 push	 268			; 0000010cH
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterTe
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CTextLine@UI@@QAE@PAU_object@@@Z ; UI::CTextLine::CTextLine
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterTe
$LN3@RegisterTe:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterTe:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 209  : 		CWindow * pWin = new CTextLine(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 210  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterTe
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterTe
$LN41@RegisterTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterTe:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 215  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 216  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterTe:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterTe:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 0c 01 00 00	 push	 268			; 0000010cH
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterTextLine
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterGridSlotWindow, COMDAT
; _this$ = ecx

; 193  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 196  : 		CWindow * pWin = new CGridSlotWindow(po);

  00033	68 ec 00 00 00	 push	 236			; 000000ecH
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterGr
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CGridSlotWindow::CGridSlotWindow
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterGr
$LN3@RegisterGr:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterGr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 196  : 		CWindow * pWin = new CGridSlotWindow(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 197  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterGr
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterGr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterGr
$LN41@RegisterGr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterGr:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 202  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 203  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterGr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterGr:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 ec 00 00 00	 push	 236			; 000000ecH
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterGridSlotWindow
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterSlotWindow, COMDAT
; _this$ = ecx

; 180  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 183  : 		CWindow * pWin = new CSlotWindow(po);

  00033	68 d8 00 00 00	 push	 216			; 000000d8H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0c		 je	 SHORT $LN3@RegisterSl
  0004e	56		 push	 esi
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??0CSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CSlotWindow::CSlotWindow
  00056	8b f0		 mov	 esi, eax
  00058	eb 02		 jmp	 SHORT $LN4@RegisterSl
$LN3@RegisterSl:
  0005a	33 f6		 xor	 esi, esi
$LN4@RegisterSl:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0005c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00063	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00066	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 183  : 		CWindow * pWin = new CSlotWindow(po);

  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00075	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 184  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00085	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	50		 push	 eax
  00090	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00096	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0009b	56		 push	 esi
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a3	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a6	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a9	72 28		 jb	 SHORT $LN31@RegisterSl
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ae	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b1	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b7	72 10		 jb	 SHORT $LN41@RegisterSl

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b9	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000bc	83 c2 23	 add	 edx, 35			; 00000023H
  000bf	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c7	77 2a		 ja	 SHORT $LN50@RegisterSl
$LN41@RegisterSl:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c9	52		 push	 edx
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
$LN31@RegisterSl:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 189  : 		return pWin;

  000d3	8b c6		 mov	 eax, esi

; 190  : 	}

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN50@RegisterSl:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterSl:
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 d8 00 00 00	 push	 216			; 000000d8H
  00005	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterSlotWindow
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z
_TEXT	SEGMENT
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_dwWndType$ = 12					; size = 4
_c_szLayer$ = 16					; size = 4
?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z PROC ; UI::CWindowManager::RegisterTypeWindow, COMDAT
; _this$ = ecx

; 167  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _dwWndType$[ebp]
  00030	8b 55 08	 mov	 edx, DWORD PTR _po$[ebp]
  00033	8b 75 10	 mov	 esi, DWORD PTR _c_szLayer$[ebp]

; 170  : 		CWindow * pWin = __NewWindow(po, dwWndType);

  00036	50		 push	 eax
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z ; UI::CWindowManager::__NewWindow
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0003d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 2487 :         assign(_Ptr);

  00044	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00047	56		 push	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 170  : 		CWindow * pWin = __NewWindow(po, dwWndType);

  00048	8b d8		 mov	 ebx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0004a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00051	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00058	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0

; 2487 :         assign(_Ptr);

  0005c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 171  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00061	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006b	50		 push	 eax
  0006c	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00072	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00077	53		 push	 ebx
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0007f	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp+20]
  00082	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00085	72 28		 jb	 SHORT $LN28@RegisterTy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00087	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0008a	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008b	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00093	72 10		 jb	 SHORT $LN38@RegisterTy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00095	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00098	83 c2 23	 add	 edx, 35			; 00000023H
  0009b	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009d	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a3	77 2a		 ja	 SHORT $LN47@RegisterTy
$LN38@RegisterTy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a5	52		 push	 edx
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ac	83 c4 08	 add	 esp, 8
$LN28@RegisterTy:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 176  : 		return pWin;

  000af	8b c3		 mov	 eax, ebx

; 177  : 	}

  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c2	33 cd		 xor	 ecx, ebp
  000c4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 0c 00	 ret	 12			; 0000000cH
$LN47@RegisterTy:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN45@RegisterTy:
  000d4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z ENDP ; UI::CWindowManager::RegisterTypeWindow
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterWindow, COMDAT
; _this$ = ecx

; 96   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]
  00030	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szLayer$[ebp]

; 99   : 		CWindow * pWin = new CWindow(po);

  00033	6a 7c		 push	 124			; 0000007cH
  00035	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	85 c0		 test	 eax, eax
  00049	74 0c		 je	 SHORT $LN3@RegisterWi
  0004b	56		 push	 esi
  0004c	8b c8		 mov	 ecx, eax
  0004e	e8 00 00 00 00	 call	 ??0CWindow@UI@@QAE@PAU_object@@@Z ; UI::CWindow::CWindow
  00053	8b f0		 mov	 esi, eax
  00055	eb 02		 jmp	 SHORT $LN4@RegisterWi
$LN3@RegisterWi:
  00057	33 f6		 xor	 esi, esi
$LN4@RegisterWi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00059	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  00060	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00063	53		 push	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 99   : 		CWindow * pWin = new CWindow(po);

  00064	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0006b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00072	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00079	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 2487 :         assign(_Ptr);

  0007d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 100  : 		m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  00082	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00085	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008c	50		 push	 eax
  0008d	8d 8f 9c 00 00
	00		 lea	 ecx, DWORD PTR [edi+156]
  00093	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00098	56		 push	 esi
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000a0	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp+20]
  000a3	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000a6	72 28		 jb	 SHORT $LN31@RegisterWi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a8	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000ab	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ac	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ae	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000b4	72 10		 jb	 SHORT $LN41@RegisterWi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b6	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000b9	83 c2 23	 add	 edx, 35			; 00000023H
  000bc	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000be	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c4	77 2a		 ja	 SHORT $LN50@RegisterWi
$LN41@RegisterWi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c6	52		 push	 edx
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000cd	83 c4 08	 add	 esp, 8
$LN31@RegisterWi:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 104  : 		return (pWin);

  000d0	8b c6		 mov	 eax, esi

; 105  : 	}

  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dc	59		 pop	 ecx
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e3	33 cd		 xor	 ecx, ebp
  000e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 08 00	 ret	 8
$LN50@RegisterWi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@RegisterWi:
  000f5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	6a 7c		 push	 124			; 0000007cH
  00002	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  0000f	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00012	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
__ehhandler$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001c	90		 npad	 1
  0001d	90		 npad	 1
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterWindow
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetPickAlways@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWindow$ = 8						; size = 4
?SetPickAlways@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC ; UI::CWindowManager::SetPickAlways, COMDAT
; _this$ = ecx

; 548  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 549  : 		m_PickAlwaysWindowList.push_back(pWindow);

  00003	8d 45 08	 lea	 eax, DWORD PTR _pWindow$[ebp]
  00006	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back

; 550  : 	}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetPickAlways@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP ; UI::CWindowManager::SetPickAlways
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetParent@CWindowManager@UI@@QAEXPAVCWindow@2@0@Z
_TEXT	SEGMENT
_pWindow$ = 8						; size = 4
_pParentWindow$ = 12					; size = 4
?SetParent@CWindowManager@UI@@QAEXPAVCWindow@2@0@Z PROC	; UI::CWindowManager::SetParent, COMDAT
; _this$ = ecx

; 522  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 523  : 		if (!pWindow)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWindow$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 2a		 je	 SHORT $LN1@SetParent

; 524  : 		{
; 525  : 			assert(!"CWindowManager::SetParent - There is no self window!");
; 526  : 			return;
; 527  : 		}
; 528  : 		if (!pParentWindow)

  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _pParentWindow$[ebp]
  0000f	85 ff		 test	 edi, edi
  00011	74 21		 je	 SHORT $LN9@SetParent
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 80   : 			bool			HasParent()		{ return m_pParent ? true : false; }

  00013	83 7e 60 00	 cmp	 DWORD PTR [esi+96], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 534  : 		if (pWindow->HasParent())

  00017	74 13		 je	 SHORT $LN4@SetParent

; 535  : 		{
; 536  : 			CWindow * pOldParentWindow = pWindow->GetParent();

  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent

; 537  : 
; 538  : 			if (pParentWindow == pOldParentWindow)

  00020	3b f8		 cmp	 edi, eax
  00022	74 10		 je	 SHORT $LN9@SetParent

; 539  : 				return;
; 540  : 
; 541  : 			pOldParentWindow->DeleteChild(pWindow);

  00024	56		 push	 esi
  00025	8b c8		 mov	 ecx, eax
  00027	e8 00 00 00 00	 call	 ?DeleteChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::DeleteChild
$LN4@SetParent:

; 542  : 		}
; 543  : 
; 544  : 		pParentWindow->AddChild(pWindow);

  0002c	56		 push	 esi
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
$LN9@SetParent:
  00034	5f		 pop	 edi
$LN1@SetParent:
  00035	5e		 pop	 esi

; 545  : 	}

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
?SetParent@CWindowManager@UI@@QAEXPAVCWindow@2@0@Z ENDP	; UI::CWindowManager::SetParent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdlib.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdlib.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdlib.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?IsDragging@CWindowManager@UI@@QAEHXZ
_TEXT	SEGMENT
?IsDragging@CWindowManager@UI@@QAEHXZ PROC		; UI::CWindowManager::IsDragging, COMDAT
; _this$ = ecx

; 455  : 		long ldy = abs(m_lMouseY - m_lPickedY);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	2b 41 28	 sub	 eax, DWORD PTR [ecx+40]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdlib.h

; 365  :         return labs(_X);

  00006	99		 cdq
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 453  : 	{

  00007	56		 push	 esi
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdlib.h

; 365  :         return labs(_X);

  00008	8b f0		 mov	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 454  : 		long ldx = abs(m_lMouseX - m_lPickedX);

  0000a	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000d	2b 41 24	 sub	 eax, DWORD PTR [ecx+36]
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdlib.h

; 365  :         return labs(_X);

  00010	33 f2		 xor	 esi, edx
  00012	2b f2		 sub	 esi, edx
  00014	99		 cdq
  00015	33 c2		 xor	 eax, edx
  00017	2b c2		 sub	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 456  : 		if (ldx+ldy < 10)

  00019	03 f0		 add	 esi, eax
  0001b	33 c0		 xor	 eax, eax
  0001d	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00020	5e		 pop	 esi
  00021	0f 9d c0	 setge	 al

; 457  : 			return FALSE;
; 458  : 
; 459  : 		return TRUE;
; 460  : 	}

  00024	c3		 ret	 0
?IsDragging@CWindowManager@UI@@QAEHXZ ENDP		; UI::CWindowManager::IsDragging
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetMousePosition@CWindowManager@UI@@QAEXAAJ0@Z
_TEXT	SEGMENT
_rx$ = 8						; size = 4
_ry$ = 12						; size = 4
?GetMousePosition@CWindowManager@UI@@QAEXAAJ0@Z PROC	; UI::CWindowManager::GetMousePosition, COMDAT
; _this$ = ecx

; 766  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  : 		rx = m_lMouseX;

  00003	8b 45 08	 mov	 eax, DWORD PTR _rx$[ebp]
  00006	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00009	89 10		 mov	 DWORD PTR [eax], edx

; 768  : 		ry = m_lMouseY;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _ry$[ebp]
  0000e	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00011	89 08		 mov	 DWORD PTR [eax], ecx

; 769  : 	}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?GetMousePosition@CWindowManager@UI@@QAEXAAJ0@Z ENDP	; UI::CWindowManager::GetMousePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetMouseHandler@CWindowManager@UI@@QAEXPAU_object@@@Z
_TEXT	SEGMENT
_poMouseHandler$ = 8					; size = 4
?SetMouseHandler@CWindowManager@UI@@QAEXPAU_object@@@Z PROC ; UI::CWindowManager::SetMouseHandler, COMDAT
; _this$ = ecx

; 91   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 92   : 		m_poMouseHandler = poMouseHandler;

  00003	8b 45 08	 mov	 eax, DWORD PTR _poMouseHandler$[ebp]
  00006	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 93   : 	}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetMouseHandler@CWindowManager@UI@@QAEXPAU_object@@@Z ENDP ; UI::CWindowManager::SetMouseHandler
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetResolution@CWindowManager@UI@@QAEXHH@Z
_TEXT	SEGMENT
_hres$ = 8						; size = 4
_vres$ = 12						; size = 4
?SetResolution@CWindowManager@UI@@QAEXHH@Z PROC		; UI::CWindowManager::SetResolution, COMDAT
; _this$ = ecx

; 676  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 677  : 		if (hres<=0 || vres<=0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _hres$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	7e 0d		 jle	 SHORT $LN3@SetResolut
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _vres$[ebp]
  0000d	85 c0		 test	 eax, eax
  0000f	7e 06		 jle	 SHORT $LN3@SetResolut

; 678  : 			return;
; 679  : 
; 680  : 		m_iHres = hres;

  00011	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 681  : 		m_iVres = vres;

  00014	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN3@SetResolut:

; 682  : 	}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?SetResolution@CWindowManager@UI@@QAEXHH@Z ENDP		; UI::CWindowManager::SetResolution
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetScreenSize@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_lWidth$ = 8						; size = 4
_lHeight$ = 12						; size = 4
?SetScreenSize@CWindowManager@UI@@QAEXJJ@Z PROC		; UI::CWindowManager::SetScreenSize, COMDAT
; _this$ = ecx

; 690  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 691  : 		m_lWidth	= lWidth;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lWidth$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 692  : 		m_lHeight	= lHeight;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _lHeight$[ebp]
  0000e	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00011	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1135 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00014	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001a	8b 30		 mov	 esi, DWORD PTR [eax]
  0001c	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 694  : 		for (TLayerContainer::iterator itor = m_LayerWindowMap.begin(); itor != m_LayerWindowMap.end(); ++itor)

  0001e	74 57		 je	 SHORT $LN3@SetScreenS
$LL22@SetScreenS:

; 695  : 		{
; 696  : 			itor->second->SetSize(lWidth, lHeight);

  00020	51		 push	 ecx
  00021	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00024	53		 push	 ebx
  00025	e8 00 00 00 00	 call	 ?SetSize@CWindow@UI@@QAEXJJ@Z ; UI::CWindow::SetSize
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0002a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00031	74 21		 je	 SHORT $LN21@SetScreenS

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00033	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00036	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0003a	75 14		 jne	 SHORT $LN58@SetScreenS
  0003c	0f 1f 40 00	 npad	 4
$LL19@SetScreenS:
  00040	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00043	75 0b		 jne	 SHORT $LN58@SetScreenS

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00045	8b f0		 mov	 esi, eax
  00047	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004e	74 f0		 je	 SHORT $LL19@SetScreenS
$LN58@SetScreenS:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  00050	8b f0		 mov	 esi, eax

; 58   :         } else {

  00052	eb 18		 jmp	 SHORT $LN26@SetScreenS
$LN21@SetScreenS:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00054	8b f0		 mov	 esi, eax

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00056	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00058	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0005c	75 0e		 jne	 SHORT $LN26@SetScreenS
  0005e	66 90		 npad	 2
$LL25@SetScreenS:
  00060	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  00062	8b f1		 mov	 esi, ecx
  00064	8b c8		 mov	 ecx, eax
  00066	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0006a	74 f4		 je	 SHORT $LL25@SetScreenS
$LN26@SetScreenS:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 694  : 		for (TLayerContainer::iterator itor = m_LayerWindowMap.begin(); itor != m_LayerWindowMap.end(); ++itor)

  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _lHeight$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 233  :         return this->_Ptr == _Right._Ptr;

  0006f	3b b7 9c 00 00
	00		 cmp	 esi, DWORD PTR [edi+156]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 694  : 		for (TLayerContainer::iterator itor = m_LayerWindowMap.begin(); itor != m_LayerWindowMap.end(); ++itor)

  00075	75 a9		 jne	 SHORT $LL22@SetScreenS
$LN3@SetScreenS:
  00077	5f		 pop	 edi

; 697  : 		}
; 698  : 	}

  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
?SetScreenSize@CWindowManager@UI@@QAEXJJ@Z ENDP		; UI::CWindowManager::SetScreenSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAspect@CWindowManager@UI@@QAEMXZ
_TEXT	SEGMENT
tv134 = -4						; size = 4
?GetAspect@CWindowManager@UI@@QAEMXZ PROC		; UI::CWindowManager::GetAspect, COMDAT
; _this$ = ecx

; 685  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	66 0f 6e 49 10	 movd	 xmm1, DWORD PTR [ecx+16]
  00009	66 0f 6e 41 0c	 movd	 xmm0, DWORD PTR [ecx+12]

; 686  : 		return (m_iHres)/float(m_iVres);

  0000e	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00011	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00014	f3 0f 5e c8	 divss	 xmm1, xmm0
  00018	f3 0f 11 4d fc	 movss	 DWORD PTR tv134[ebp], xmm1
  0001d	d9 45 fc	 fld	 DWORD PTR tv134[ebp]

; 687  : 	}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?GetAspect@CWindowManager@UI@@QAEMXZ ENDP		; UI::CWindowManager::GetAspect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?Destroy@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CWindowManager@UI@@QAEXXZ PROC			; UI::CWindowManager::Destroy, COMDAT
; _this$ = ecx

; 78   : 		__ClearReserveDeleteWindowList();

  00000	e9 00 00 00 00	 jmp	 ?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ ; UI::CWindowManager::__ClearReserveDeleteWindowList
?Destroy@CWindowManager@UI@@QAEXXZ ENDP			; UI::CWindowManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Stl.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Stl.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Singleton.h
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Singleton.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ??1CWindowManager@UI@@UAE@XZ
_TEXT	SEGMENT
__Head$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CWindowManager@UI@@UAE@XZ PROC			; UI::CWindowManager::~CWindowManager, COMDAT
; _this$ = ecx

; 64   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CWindowManager@UI@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx

; 65   : 		Py_DECREF(gs_poEmptyTuple);

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_poEmptyTuple@UI@@3PAU_object@@A
  0002e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CWindowManager@UI@@6B@
  00034	83 01 ff	 add	 DWORD PTR [ecx], -1
  00037	75 0c		 jne	 SHORT $LN2@CWindowMan
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	51		 push	 ecx
  0003d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00040	ff d0		 call	 eax
  00042	83 c4 04	 add	 esp, 4
$LN2@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1135 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00045	8b bb 9c 00 00
	00		 mov	 edi, DWORD PTR [ebx+156]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 67   : 		stl_wipe_second(m_LayerWindowMap);

  0004b	8d 93 9c 00 00
	00		 lea	 edx, DWORD PTR [ebx+156]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00051	8b 37		 mov	 esi, DWORD PTR [edi]
  00053	3b f7		 cmp	 esi, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Stl.h

; 127  : 	for (TContainer::iterator i = container.begin(); i != container.end(); ++i)

  00055	74 5b		 je	 SHORT $LN12@CWindowMan
$LL33@CWindowMan:

; 128  : 	{
; 129  : 		delete i->second;

  00057	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 0c		 je	 SHORT $LN11@CWindowMan
  0005e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00060	6a 01		 push	 1
  00062	ff 10		 call	 DWORD PTR [eax]
  00064	8d 93 9c 00 00
	00		 lea	 edx, DWORD PTR [ebx+156]
$LN11@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0006a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00071	74 21		 je	 SHORT $LN32@CWindowMan

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00073	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00076	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007a	75 14		 jne	 SHORT $LN31@CWindowMan
  0007c	0f 1f 40 00	 npad	 4
$LL30@CWindowMan:
  00080	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00083	75 0b		 jne	 SHORT $LN31@CWindowMan

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00085	8b f0		 mov	 esi, eax
  00087	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008e	74 f0		 je	 SHORT $LL30@CWindowMan
$LN31@CWindowMan:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  00090	8b f0		 mov	 esi, eax

; 58   :         } else {

  00092	eb 18		 jmp	 SHORT $LN449@CWindowMan
$LN32@CWindowMan:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00094	8b f0		 mov	 esi, eax

; 451  :         while (!_Pnode->_Left->_Isnil) {

  00096	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00098	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0009c	75 0e		 jne	 SHORT $LN449@CWindowMan
  0009e	66 90		 npad	 2
$LL36@CWindowMan:
  000a0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 452  :             _Pnode = _Pnode->_Left;

  000a2	8b f1		 mov	 esi, ecx
  000a4	8b c8		 mov	 ecx, eax
  000a6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000aa	74 f4		 je	 SHORT $LL36@CWindowMan
$LN449@CWindowMan:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000ac	8b 3a		 mov	 edi, DWORD PTR [edx]

; 233  :         return this->_Ptr == _Right._Ptr;

  000ae	3b f7		 cmp	 esi, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Stl.h

; 127  : 	for (TContainer::iterator i = container.begin(); i != container.end(); ++i)

  000b0	75 a5		 jne	 SHORT $LL33@CWindowMan
$LN12@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1343 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000b2	ff 77 04	 push	 DWORD PTR [edi+4]
  000b5	8b ca		 mov	 ecx, edx
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >

; 1344 :         _Head->_Parent  = _Head;

  000bd	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1345 :         _Head->_Left    = _Head;

  000c0	89 3f		 mov	 DWORD PTR [edi], edi

; 1346 :         _Head->_Right   = _Head;

  000c2	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1347 :         _Scary->_Mysize = 0;

  000c5	8d bb 9c 00 00
	00		 lea	 edi, DWORD PTR [ebx+156]
  000cb	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1343 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000d2	8b cf		 mov	 ecx, edi
  000d4	8b 37		 mov	 esi, DWORD PTR [edi]
  000d6	ff 76 04	 push	 DWORD PTR [esi+4]
  000d9	57		 push	 edi
  000da	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >

; 1344 :         _Head->_Parent  = _Head;

  000df	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1345 :         _Head->_Left    = _Head;

  000e2	89 36		 mov	 DWORD PTR [esi], esi

; 1346 :         _Head->_Right   = _Head;

  000e4	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1347 :         _Scary->_Mysize = 0;

  000e7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1420 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  000ee	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [ebx+148]

; 323  :         _Head->_Prev->_Next = nullptr;

  000f4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000f7	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  000fd	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  000ff	85 c0		 test	 eax, eax
  00101	74 13		 je	 SHORT $LN65@CWindowMan
$LL66@CWindowMan:

; 327  :             _Pnext = _Pnode->_Next;

  00103	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00105	6a 0c		 push	 12			; 0000000cH
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010d	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00110	8b c6		 mov	 eax, esi
  00112	85 f6		 test	 esi, esi
  00114	75 ed		 jne	 SHORT $LL66@CWindowMan
$LN65@CWindowMan:

; 1421 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00116	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [ebx+148]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 70   : 		m_KeyCaptureWindowMap.clear();

  0011c	8d 7b 78	 lea	 edi, DWORD PTR [ebx+120]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1421 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0011f	89 00		 mov	 DWORD PTR [eax], eax

; 1422 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00121	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [ebx+148]
  00127	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1423 :         _My_data._Mysize        = 0;

  0012a	c7 83 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+152], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1342 :         auto _Head = _Scary->_Myhead;

  00134	8b 07		 mov	 eax, DWORD PTR [edi]
  00136	89 45 f0	 mov	 DWORD PTR __Head$1$[ebp], eax

; 1343 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00139	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0013c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00140	75 23		 jne	 SHORT $LN98@CWindowMan
$LL97@CWindowMan:

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00142	ff 76 08	 push	 DWORD PTR [esi+8]
  00145	8b cf		 mov	 ecx, edi
  00147	57		 push	 edi
  00148	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0014d	8b c6		 mov	 eax, esi

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  0014f	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00151	6a 18		 push	 24			; 00000018H
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00159	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0015c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00160	74 e0		 je	 SHORT $LL97@CWindowMan
  00162	8b 45 f0	 mov	 eax, DWORD PTR __Head$1$[ebp]
$LN98@CWindowMan:

; 1344 :         _Head->_Parent  = _Head;

  00165	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1345 :         _Head->_Left    = _Head;

  00168	89 00		 mov	 DWORD PTR [eax], eax

; 1346 :         _Head->_Right   = _Head;

  0016a	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1347 :         _Scary->_Mysize = 0;

  0016d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 72   : 		delete m_pRootWindow;

  00174	8b 8b 90 00 00
	00		 mov	 ecx, DWORD PTR [ebx+144]
  0017a	85 c9		 test	 ecx, ecx
  0017c	74 06		 je	 SHORT $LN8@CWindowMan
  0017e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00180	6a 01		 push	 1
  00182	ff 10		 call	 DWORD PTR [eax]
$LN8@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00184	8d b3 9c 00 00
	00		 lea	 esi, DWORD PTR [ebx+156]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 73   : 		m_pRootWindow = NULL;

  0018a	c7 83 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+144], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00194	8b 06		 mov	 eax, DWORD PTR [esi]
  00196	8b ce		 mov	 ecx, esi
  00198	ff 70 04	 push	 DWORD PTR [eax+4]
  0019b	56		 push	 esi
  0019c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001a1	6a 2c		 push	 44			; 0000002cH
  001a3	ff 36		 push	 DWORD PTR [esi]
  001a5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  001aa	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [ebx+148]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001b0	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 323  :         _Head->_Prev->_Next = nullptr;

  001b3	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001b6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  001bc	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  001be	85 c0		 test	 eax, eax
  001c0	74 13		 je	 SHORT $LN163@CWindowMan
$LL164@CWindowMan:

; 327  :             _Pnext = _Pnode->_Next;

  001c2	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001c4	6a 0c		 push	 12			; 0000000cH
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001cc	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  001cf	8b c6		 mov	 eax, esi
  001d1	85 f6		 test	 esi, esi
  001d3	75 ed		 jne	 SHORT $LL164@CWindowMan
$LN163@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001d5	6a 0c		 push	 12			; 0000000cH
  001d7	ff b3 94 00 00
	00		 push	 DWORD PTR [ebx+148]
  001dd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  001e2	8b 8b 88 00 00
	00		 mov	 ecx, DWORD PTR [ebx+136]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001e8	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 323  :         _Head->_Prev->_Next = nullptr;

  001eb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001ee	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  001f4	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  001f6	85 c0		 test	 eax, eax
  001f8	74 19		 je	 SHORT $LN218@CWindowMan
  001fa	66 0f 1f 44 00
	00		 npad	 6
$LL219@CWindowMan:

; 327  :             _Pnext = _Pnode->_Next;

  00200	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00202	6a 0c		 push	 12			; 0000000cH
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0020a	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0020d	8b c6		 mov	 eax, esi
  0020f	85 f6		 test	 esi, esi
  00211	75 ed		 jne	 SHORT $LL219@CWindowMan
$LN218@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00213	6a 0c		 push	 12			; 0000000cH
  00215	ff b3 88 00 00
	00		 push	 DWORD PTR [ebx+136]
  0021b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00220	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [ebx+128]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00226	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 323  :         _Head->_Prev->_Next = nullptr;

  00229	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0022c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  00232	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00234	85 c0		 test	 eax, eax
  00236	74 13		 je	 SHORT $LN273@CWindowMan
$LL274@CWindowMan:

; 327  :             _Pnext = _Pnode->_Next;

  00238	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0023a	6a 0c		 push	 12			; 0000000cH
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00242	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00245	8b c6		 mov	 eax, esi
  00247	85 f6		 test	 esi, esi
  00249	75 ed		 jne	 SHORT $LL274@CWindowMan
$LN273@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0024b	6a 0c		 push	 12			; 0000000cH
  0024d	ff b3 80 00 00
	00		 push	 DWORD PTR [ebx+128]
  00253	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00258	83 c4 08	 add	 esp, 8
  0025b	8b cf		 mov	 ecx, edi
  0025d	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::~_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00262	8b 4b 60	 mov	 ecx, DWORD PTR [ebx+96]

; 323  :         _Head->_Prev->_Next = nullptr;

  00265	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00268	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  0026e	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00270	85 c0		 test	 eax, eax
  00272	74 13		 je	 SHORT $LN331@CWindowMan
$LL332@CWindowMan:

; 327  :             _Pnext = _Pnode->_Next;

  00274	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00276	6a 0c		 push	 12			; 0000000cH
  00278	50		 push	 eax
  00279	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0027e	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00281	8b c6		 mov	 eax, esi
  00283	85 f6		 test	 esi, esi
  00285	75 ed		 jne	 SHORT $LL332@CWindowMan
$LN331@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00287	6a 0c		 push	 12			; 0000000cH
  00289	ff 73 60	 push	 DWORD PTR [ebx+96]
  0028c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00291	8b 4b 54	 mov	 ecx, DWORD PTR [ebx+84]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00294	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 323  :         _Head->_Prev->_Next = nullptr;

  00297	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0029a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  002a0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002a2	85 c0		 test	 eax, eax
  002a4	74 13		 je	 SHORT $LN386@CWindowMan
$LL387@CWindowMan:

; 327  :             _Pnext = _Pnode->_Next;

  002a6	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002a8	6a 0c		 push	 12			; 0000000cH
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002b0	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002b3	8b c6		 mov	 eax, esi
  002b5	85 f6		 test	 esi, esi
  002b7	75 ed		 jne	 SHORT $LL387@CWindowMan
$LN386@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002b9	6a 0c		 push	 12			; 0000000cH
  002bb	ff 73 54	 push	 DWORD PTR [ebx+84]
  002be	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Singleton.h

; 19   : 	{

  002c3	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$CSingleton@VCWindowManager@UI@@@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002c9	83 c4 08	 add	 esp, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Singleton.h

; 21   : 		ms_singleton = 0;

  002cc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A, 0 ; CSingleton<UI::CWindowManager>::ms_singleton
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 74   : 	}

  002d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e0	59		 pop	 ecx
  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi
  002e3	5b		 pop	 ebx
  002e4	8b e5		 mov	 esp, ebp
  002e6	5d		 pop	 ebp
  002e7	c3		 ret	 0
  002e8	cc		 int	 3
  002e9	cc		 int	 3
  002ea	cc		 int	 3
  002eb	cc		 int	 3
  002ec	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CWindowManager@UI@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CWindowManager@UI@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CWindowManager@UI@@UAE@XZ ENDP			; UI::CWindowManager::~CWindowManager
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Singleton.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ??0CWindowManager@UI@@QAE@XZ
_TEXT	SEGMENT
$T2 = -148						; size = 12
__Loc$3 = -136						; size = 12
$T4 = -124						; size = 4
_this$GSCopy$ = -120					; size = 4
__Op$5 = -116						; size = 8
$T6 = -108						; size = 8
$T7 = -100						; size = 4
__Result$2$ = -96					; size = 4
_layer$1$ = -92						; size = 4
__Ptr$1$ = -88						; size = 4
$T8 = -84						; size = 4
_this$1$ = -80						; size = 4
$T9 = -76						; size = 4
_this$GSCopy$1$ = -72					; size = 4
__Where$1$ = -68					; size = 4
__Myhead$1$ = -68					; size = 4
_this$ = -68						; size = 4
_this$ = -68						; size = 4
$T10 = -68						; size = 4
_this$ = -68						; size = 4
$T11 = -64						; size = 28
_layerTbl$ = -36					; size = 20
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0CWindowManager@UI@@QAE@XZ PROC			; UI::CWindowManager::CWindowManager, COMDAT
; _this$ = ecx

; 40   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CWindowManager@UI@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	89 7d b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00032	89 7d bc	 mov	 DWORD PTR _this$[ebp], edi
  00035	89 7d 88	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00038	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A, edi ; CSingleton<UI::CWindowManager>::ms_singleton
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 40   : 	{

  0003e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CWindowManager@UI@@6B@

; 38   : 		m_iVres(0),

  00044	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 37   : 		m_iHres(0),

  0004b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 39   : 		m_bOnceIgnoreMouseLeftButtonUpEventFlag(FALSE)

  00052	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 36   : 		m_poMouseHandler(NULL),

  00059	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0

; 31   : 		m_bAttachingFlag(FALSE),

  00060	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0

; 32   : 		m_dwAttachingType(0),

  00067	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0

; 33   : 		m_dwAttachingIndex(0),

  0006e	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0

; 34   : 		m_dwAttachingSlotNumber(0),

  00075	c7 47 44 00 00
	00 00		 mov	 DWORD PTR [edi+68], 0

; 35   : 		m_dwAttachingRealSlotNumber(0),

  0007c	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], 0

; 25   : 		m_pActiveWindow(NULL),

  00083	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0008a	6a 0c		 push	 12			; 0000000cH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 40   : 	{

  0008c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 352  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00093	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0
  0009a	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  000a1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1767 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  000a6	89 00		 mov	 DWORD PTR [eax], eax

; 1768 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  000a8	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1769 :         _Mypair._Myval2._Myhead = _Newhead;

  000ab	89 47 54	 mov	 DWORD PTR [edi+84], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 30   : 		m_pLockWindow(NULL),

  000ae	c7 47 5c 00 00
	00 00		 mov	 DWORD PTR [edi+92], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  000b5	6a 0c		 push	 12			; 0000000cH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 40   : 	{

  000b7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 352  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  000bb	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
  000c2	c7 47 64 00 00
	00 00		 mov	 DWORD PTR [edi+100], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  000c9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1767 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  000ce	89 00		 mov	 DWORD PTR [eax], eax

; 1768 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  000d0	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1769 :         _Mypair._Myval2._Myhead = _Newhead;

  000d3	89 47 60	 mov	 DWORD PTR [edi+96], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 40   : 	{

  000d6	8d 77 78	 lea	 esi, DWORD PTR [edi+120]
  000d9	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
  000e0	c7 47 6c 00 00
	00 00		 mov	 DWORD PTR [edi+108], 0
  000e7	c7 47 70 00 00
	00 00		 mov	 DWORD PTR [edi+112], 0
  000ee	c7 47 74 00 00
	00 00		 mov	 DWORD PTR [edi+116], 0
  000f5	89 75 bc	 mov	 DWORD PTR _this$[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  000f8	6a 18		 push	 24			; 00000018H
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 40   : 	{

  000fa	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000fe	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00104	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0010b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00110	89 00		 mov	 DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00112	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00115	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

  00118	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0011e	89 06		 mov	 DWORD PTR [esi], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00120	6a 0c		 push	 12			; 0000000cH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 40   : 	{

  00122	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 352  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00126	c7 87 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+128], 0
  00130	c7 87 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+132], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0013a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1767 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0013f	89 00		 mov	 DWORD PTR [eax], eax

; 1768 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00141	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1769 :         _Mypair._Myval2._Myhead = _Newhead;

  00144	89 87 80 00 00
	00		 mov	 DWORD PTR [edi+128], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0014a	6a 0c		 push	 12			; 0000000cH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 40   : 	{

  0014c	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 352  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00150	c7 87 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+136], 0
  0015a	c7 87 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+140], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00164	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1767 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00169	89 00		 mov	 DWORD PTR [eax], eax

; 1768 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0016b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1769 :         _Mypair._Myval2._Myhead = _Newhead;

  0016e	89 87 88 00 00
	00		 mov	 DWORD PTR [edi+136], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00174	6a 0c		 push	 12			; 0000000cH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 40   : 	{

  00176	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 352  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0017a	c7 87 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+148], 0
  00184	c7 87 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+152], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0018e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1767 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00193	89 00		 mov	 DWORD PTR [eax], eax

; 1768 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00195	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1769 :         _Mypair._Myval2._Myhead = _Newhead;

  00198	89 87 94 00 00
	00		 mov	 DWORD PTR [edi+148], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 40   : 	{

  0019e	8d b7 9c 00 00
	00		 lea	 esi, DWORD PTR [edi+156]
  001a4	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001a8	89 75 bc	 mov	 DWORD PTR _this$[ebp], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  001ab	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  001b1	6a 2c		 push	 44			; 0000002cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  001b3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  001ba	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 345  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  001bf	89 00		 mov	 DWORD PTR [eax], eax

; 346  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  001c1	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 347  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  001c4	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 348  :         _Pnode->_Color = _Black;

  001c7	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1917 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  001cd	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 41   : 		m_pRootWindow = new CWindow(NULL);

  001cf	6a 7c		 push	 124			; 0000007cH
  001d1	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  001d5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001da	83 c4 20	 add	 esp, 32			; 00000020H
  001dd	89 45 bc	 mov	 DWORD PTR $T10[ebp], eax
  001e0	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  001e4	85 c0		 test	 eax, eax
  001e6	74 0b		 je	 SHORT $LN6@CWindowMan
  001e8	6a 00		 push	 0
  001ea	8b c8		 mov	 ecx, eax
  001ec	e8 00 00 00 00	 call	 ??0CWindow@UI@@QAE@PAU_object@@@Z ; UI::CWindow::CWindow
  001f1	eb 02		 jmp	 SHORT $LN7@CWindowMan
$LN6@CWindowMan:
  001f3	33 c0		 xor	 eax, eax
$LN7@CWindowMan:

; 42   : 		m_pRootWindow->SetName("root");

  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_04NBFCGMPH@root@
  001fa	8b c8		 mov	 ecx, eax
  001fc	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00200	89 87 90 00 00
	00		 mov	 DWORD PTR [edi+144], eax
  00206	e8 00 00 00 00	 call	 ?SetName@CWindow@UI@@QAEXPBD@Z ; UI::CWindow::SetName

; 43   : 		m_pRootWindow->Show();

  0020b	8b 8f 90 00 00
	00		 mov	 ecx, DWORD PTR [edi+144]
  00211	e8 00 00 00 00	 call	 ?Show@CWindow@UI@@QAEXXZ ; UI::CWindow::Show

; 47   : 		for(DWORD layer = 0; layer < sizeof(layerTbl)/sizeof(layerTbl[0]); layer++)

  00216	33 f6		 xor	 esi, esi
  00218	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _layerTbl$[ebp], OFFSET ??_C@_04FOKBGDA@GAME@
  0021f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _layerTbl$[ebp+4], OFFSET ??_C@_09CHAIFIBB@UI_BOTTOM@
  00226	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _layerTbl$[ebp+8], OFFSET ??_C@_02ELHCDOPK@UI@
  0022d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _layerTbl$[ebp+12], OFFSET ??_C@_08MLMBKENF@TOP_MOST@
  00234	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _layerTbl$[ebp+16], OFFSET ??_C@_07PCOOAIOD@CURTAIN@
  0023b	89 75 a4	 mov	 DWORD PTR _layer$1$[ebp], esi
  0023e	66 90		 npad	 2
$LL4@CWindowMan:

; 49   : 			CWindow * pLayer = new CLayer(NULL);

  00240	6a 7c		 push	 124			; 0000007cH
  00242	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00247	8b f8		 mov	 edi, eax
  00249	83 c4 04	 add	 esp, 4
  0024c	89 7d 84	 mov	 DWORD PTR $T4[ebp], edi
  0024f	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00253	85 ff		 test	 edi, edi
  00255	74 11		 je	 SHORT $LN8@CWindowMan
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h

; 204  : 			CLayer(PyObject * ppyObject) : CWindow(ppyObject) {}

  00257	6a 00		 push	 0
  00259	8b cf		 mov	 ecx, edi
  0025b	e8 00 00 00 00	 call	 ??0CWindow@UI@@QAE@PAU_object@@@Z ; UI::CWindow::CWindow
  00260	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CLayer@UI@@6B@
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 49   : 			CWindow * pLayer = new CLayer(NULL);

  00266	eb 02		 jmp	 SHORT $LN9@CWindowMan
$LN8@CWindowMan:
  00268	33 ff		 xor	 edi, edi
$LN9@CWindowMan:

; 50   : 			pLayer->SetName(layerTbl[layer]);

  0026a	8b 74 b5 dc	 mov	 esi, DWORD PTR _layerTbl$[ebp+esi*4]
  0026e	8b cf		 mov	 ecx, edi
  00270	56		 push	 esi
  00271	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00275	e8 00 00 00 00	 call	 ?SetName@CWindow@UI@@QAEXPBD@Z ; UI::CWindow::SetName

; 51   : 			pLayer->Show();

  0027a	8b cf		 mov	 ecx, edi
  0027c	e8 00 00 00 00	 call	 ?Show@CWindow@UI@@QAEXXZ ; UI::CWindow::Show
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00281	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T11[ebp], 0

; 2487 :         assign(_Ptr);

  00288	8d 4d c0	 lea	 ecx, DWORD PTR $T11[ebp]
  0028b	56		 push	 esi

; 4562 :         _My_data._Mysize = 0;

  0028c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00293	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T11[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0029a	c6 45 c0 00	 mov	 BYTE PTR $T11[ebp], 0

; 2487 :         assign(_Ptr);

  0029e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 186  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  002a3	89 7d d8	 mov	 DWORD PTR $T11[ebp+24], edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 52   : 			m_LayerWindowMap.insert(TLayerContainer::value_type(layerTbl[layer], pLayer));

  002a6	8b 75 b8	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  002a9	8d 45 c0	 lea	 eax, DWORD PTR $T11[ebp]
  002ac	50		 push	 eax
  002ad	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 52   : 			m_LayerWindowMap.insert(TLayerContainer::value_type(layerTbl[layer], pLayer));

  002b3	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  002b7	50		 push	 eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 52   : 			m_LayerWindowMap.insert(TLayerContainer::value_type(layerTbl[layer], pLayer));

  002b8	8d 8e 9c 00 00
	00		 lea	 ecx, DWORD PTR [esi+156]
  002be	89 4d b0	 mov	 DWORD PTR _this$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  002c1	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  002c6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002c9	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  002cd	8b 45 d4	 mov	 eax, DWORD PTR $T11[ebp+20]
  002d0	89 45 ac	 mov	 DWORD PTR $T8[ebp], eax
  002d3	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  002d7	8b 45 c0	 mov	 eax, DWORD PTR $T11[ebp]

; 1006 :             _Loc                = _Find_lower_bound(_Keyval);

  002da	66 0f d6 85 78
	ff ff ff	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  002e2	89 45 a8	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  002e5	75 18		 jne	 SHORT $LN222@CWindowMan
  002e7	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstddef

; 117  :         return _Left < _Right;

  002ea	50		 push	 eax
  002eb	8d 45 c0	 lea	 eax, DWORD PTR $T11[ebp]
  002ee	50		 push	 eax
  002ef	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  002f4	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1591 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  002f7	84 c0		 test	 al, al
  002f9	0f 84 02 01 00
	00		 je	 $LN367@CWindowMan
$LN222@CWindowMan:

; 1615 :         if (max_size() == _Get_scary()->_Mysize) {

  002ff	8b 45 b0	 mov	 eax, DWORD PTR _this$1$[ebp]
  00302	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00309	0f 84 3e 02 00
	00		 je	 $LN532@CWindowMan

; 1012 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0030f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00311	89 4d bc	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00314	89 45 94	 mov	 DWORD PTR $T6[ebp], eax

; 79   :         return ::operator new(_Bytes);

  00317	6a 2c		 push	 44			; 0000002cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 783  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00319	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0031d	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00324	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00329	8b f0		 mov	 esi, eax

; 79   :         return ::operator new(_Bytes);

  0032b	83 c4 04	 add	 esp, 4

; 966  :         _Ptr = _Al.allocate(1);

  0032e	89 75 98	 mov	 DWORD PTR $T6[ebp+4], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  00331	83 7d ac 10	 cmp	 DWORD PTR $T8[ebp], 16	; 00000010H
  00335	8d 45 c0	 lea	 eax, DWORD PTR $T11[ebp]

; 2899 :         if (_Stay_small) { // stay small, don't allocate

  00338	8b 4d d0	 mov	 ecx, DWORD PTR $T11[ebp+16]

; 2273 :         if (_Large_string_engaged()) {

  0033b	0f 43 45 a8	 cmovae	 eax, DWORD PTR __Ptr$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 804  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  0033f	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00343	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2322 :     size_type _Mysize = 0; // current length of string

  0034a	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 2323 :     size_type _Myres  = 0; // current storage reserved for string

  00351	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 2273 :         if (_Large_string_engaged()) {

  00358	89 45 a0	 mov	 DWORD PTR __Result$2$[ebp], eax

; 2899 :         if (_Stay_small) { // stay small, don't allocate

  0035b	89 4d b4	 mov	 DWORD PTR $T9[ebp], ecx
  0035e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00361	73 0e		 jae	 SHORT $LN273@CWindowMan

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00363	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2902 :             _My_data._Myres  = _BUF_SIZE - 1;

  00366	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0036b	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0

; 2903 :             return;

  0036f	eb 57		 jmp	 SHORT $LN272@CWindowMan
$LN273@CWindowMan:

; 2904 :         }
; 2905 : 
; 2906 :         auto& _Al                     = _Getal();
; 2907 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00371	8b c1		 mov	 eax, ecx
  00373	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00378	83 c8 0f	 or	 eax, 15			; 0000000fH
  0037b	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00380	0f 47 c1	 cmova	 eax, ecx
  00383	89 45 9c	 mov	 DWORD PTR $T7[ebp], eax

; 2908 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00386	40		 inc	 eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00387	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0038c	72 0d		 jb	 SHORT $LN287@CWindowMan

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0038e	50		 push	 eax
  0038f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00394	83 c4 04	 add	 esp, 4
  00397	8b c8		 mov	 ecx, eax
  00399	eb 13		 jmp	 SHORT $LN286@CWindowMan
$LN287@CWindowMan:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0039b	85 c0		 test	 eax, eax
  0039d	74 0d		 je	 SHORT $LN288@CWindowMan

; 79   :         return ::operator new(_Bytes);

  0039f	50		 push	 eax
  003a0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003a5	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  003a8	8b c8		 mov	 ecx, eax
  003aa	eb 02		 jmp	 SHORT $LN286@CWindowMan
$LN288@CWindowMan:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  003ac	33 c9		 xor	 ecx, ecx
$LN286@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2916 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  003ae	8b 45 b4	 mov	 eax, DWORD PTR $T9[ebp]
  003b1	40		 inc	 eax
  003b2	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003b5	50		 push	 eax
  003b6	ff 75 a0	 push	 DWORD PTR __Result$2$[ebp]
  003b9	51		 push	 ecx
  003ba	e8 00 00 00 00	 call	 _memcpy
  003bf	8b 45 9c	 mov	 eax, DWORD PTR $T7[ebp]
  003c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c5	8b 4d b4	 mov	 ecx, DWORD PTR $T9[ebp]
$LN272@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 206  :     pair(pair&&)      = default;

  003c8	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  003cb	8b 4d b0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 206  :     pair(pair&&)      = default;

  003ce	89 46 24	 mov	 DWORD PTR [esi+36], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  003d1	8b 45 bc	 mov	 eax, DWORD PTR __Myhead$1$[ebp]

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  003d4	56		 push	 esi
  003d5	ff b5 7c ff ff
	ff		 push	 DWORD PTR __Loc$3[ebp+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 206  :     pair(pair&&)      = default;

  003db	89 7e 28	 mov	 DWORD PTR [esi+40], edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  003de	ff b5 78 ff ff
	ff		 push	 DWORD PTR __Loc$3[ebp]

; 806  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  003e4	89 06		 mov	 DWORD PTR [esi], eax

; 807  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  003e6	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 808  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  003e9	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 809  :         this->_Ptr->_Color = _Red;

  003ec	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  003f2	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1031 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  003f9	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Insert_node
  003fe	8b 75 b8	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN367@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00401	8b 45 ac	 mov	 eax, DWORD PTR $T8[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 52   : 			m_LayerWindowMap.insert(TLayerContainer::value_type(layerTbl[layer], pLayer));

  00404	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00408	83 f8 10	 cmp	 eax, 16			; 00000010H
  0040b	72 2e		 jb	 SHORT $LN392@CWindowMan
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0040d	8b 4d a8	 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00410	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00413	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00415	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0041b	72 14		 jb	 SHORT $LN402@CWindowMan

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0041d	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00420	83 c2 23	 add	 edx, 35			; 00000023H
  00423	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00425	83 c0 fc	 add	 eax, -4			; fffffffcH
  00428	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0042b	0f 87 21 01 00
	00		 ja	 $LN399@CWindowMan
$LN402@CWindowMan:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00431	52		 push	 edx
  00432	51		 push	 ecx
  00433	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00438	83 c4 08	 add	 esp, 8
$LN392@CWindowMan:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 53   : 			m_pRootWindow->AddChild(pLayer);

  0043b	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [esi+144]
  00441	57		 push	 edi
  00442	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1243 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00447	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 54   : 			m_LayerWindowList.push_back(pLayer);

  0044d	81 c6 94 00 00
	00		 add	 esi, 148		; 00000094H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1243 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00453	89 45 bc	 mov	 DWORD PTR __Where$1$[ebp], eax

; 1005 :         if (_Mysize == max_size()) {

  00456	81 7e 04 55 55
	55 15		 cmp	 DWORD PTR [esi+4], 357913941 ; 15555555H
  0045d	0f 84 f4 00 00
	00		 je	 $LN533@CWindowMan
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00463	89 75 8c	 mov	 DWORD PTR __Op$5[ebp], esi

; 79   :         return ::operator new(_Bytes);

  00466	6a 0c		 push	 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 582  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00468	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0046c	c7 45 90 00 00
	00 00		 mov	 DWORD PTR __Op$5[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00473	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 597  :         const pointer _Insert_after = _Insert_before->_Prev;

  00478	8b 55 bc	 mov	 edx, DWORD PTR __Where$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0047b	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 585  :     }

  0047e	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 601  :         this->_Ptr            = pointer{};

  00482	c7 45 90 00 00
	00 00		 mov	 DWORD PTR __Op$5[ebp+4], 0

; 584  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00489	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 1010 :         ++_Mysize;

  0048c	ff 46 04	 inc	 DWORD PTR [esi+4]

; 597  :         const pointer _Insert_after = _Insert_before->_Prev;

  0048f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 47   : 		for(DWORD layer = 0; layer < sizeof(layerTbl)/sizeof(layerTbl[0]); layer++)

  00492	8b 75 a4	 mov	 esi, DWORD PTR _layer$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 598  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00495	89 10		 mov	 DWORD PTR [eax], edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 47   : 		for(DWORD layer = 0; layer < sizeof(layerTbl)/sizeof(layerTbl[0]); layer++)

  00497	46		 inc	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 599  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00498	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 602  :         _Insert_before->_Prev = _Result;

  0049b	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 603  :         _Insert_after->_Next  = _Result;

  0049e	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 47   : 		for(DWORD layer = 0; layer < sizeof(layerTbl)/sizeof(layerTbl[0]); layer++)

  004a0	89 75 a4	 mov	 DWORD PTR _layer$1$[ebp], esi
  004a3	83 fe 05	 cmp	 esi, 5
  004a6	0f 82 94 fd ff
	ff		 jb	 $LL4@CWindowMan
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1420 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  004ac	8b 7d b8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  004af	8b 4f 54	 mov	 ecx, DWORD PTR [edi+84]

; 323  :         _Head->_Prev->_Next = nullptr;

  004b2	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  004b5	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  004bb	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  004bd	85 c0		 test	 eax, eax
  004bf	74 13		 je	 SHORT $LN469@CWindowMan
$LL470@CWindowMan:

; 327  :             _Pnext = _Pnode->_Next;

  004c1	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  004c3	6a 0c		 push	 12			; 0000000cH
  004c5	50		 push	 eax
  004c6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004cb	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  004ce	8b c6		 mov	 eax, esi
  004d0	85 f6		 test	 esi, esi
  004d2	75 ed		 jne	 SHORT $LL470@CWindowMan
$LN469@CWindowMan:

; 1421 :         _My_data._Myhead->_Next = _My_data._Myhead;

  004d4	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  004d7	89 00		 mov	 DWORD PTR [eax], eax

; 1422 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  004d9	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  004dc	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1423 :         _My_data._Mysize        = 0;

  004df	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0

; 1420 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  004e6	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]

; 323  :         _Head->_Prev->_Next = nullptr;

  004e9	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  004ec	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  004f2	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  004f4	85 c0		 test	 eax, eax
  004f6	74 13		 je	 SHORT $LN501@CWindowMan
$LL502@CWindowMan:

; 327  :             _Pnext = _Pnode->_Next;

  004f8	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  004fa	6a 0c		 push	 12			; 0000000cH
  004fc	50		 push	 eax
  004fd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00502	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00505	8b c6		 mov	 eax, esi
  00507	85 f6		 test	 esi, esi
  00509	75 ed		 jne	 SHORT $LL502@CWindowMan
$LN501@CWindowMan:

; 1421 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0050b	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 60   : 		gs_poEmptyTuple = Py_BuildValue("()");

  0050e	68 00 00 00 00	 push	 OFFSET ??_C@_02HCKGKOFO@?$CI?$CJ@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1421 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00513	89 09		 mov	 DWORD PTR [ecx], ecx

; 1422 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00515	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  00518	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 1423 :         _My_data._Mysize        = 0;

  0051b	c7 47 64 00 00
	00 00		 mov	 DWORD PTR [edi+100], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindowManager.cpp

; 60   : 		gs_poEmptyTuple = Py_BuildValue("()");

  00522	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00528	a3 00 00 00 00	 mov	 DWORD PTR ?gs_poEmptyTuple@UI@@3PAU_object@@A, eax
  0052d	83 c4 04	 add	 esp, 4

; 61   : 	}

  00530	8b c7		 mov	 eax, edi
  00532	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00535	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0053c	59		 pop	 ecx
  0053d	5f		 pop	 edi
  0053e	5e		 pop	 esi
  0053f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00542	33 cd		 xor	 ecx, ebp
  00544	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00549	8b e5		 mov	 esp, ebp
  0054b	5d		 pop	 ebp
  0054c	c3		 ret	 0
$LN532@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree

; 1616 :             _Throw_tree_length_error();

  0054d	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN399@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00552	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN533@CWindowMan:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1006 :             _Xlength_error("list too long");

  00557	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0055c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN555@CWindowMan:
  00561	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$0:
  00000	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCWindowManager@UI@@@@UAE@XZ ; CSingleton<UI::CWindowManager>::~CSingleton<UI::CWindowManager>
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$1:
  00008	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	83 c1 54	 add	 ecx, 84			; 00000054H
  0000e	e9 00 00 00 00	 jmp	 ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$2:
  00013	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00016	83 c1 60	 add	 ecx, 96			; 00000060H
  00019	e9 00 00 00 00	 jmp	 ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$3:
  0001e	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00021	83 c1 78	 add	 ecx, 120		; 00000078H
  00024	e9 00 00 00 00	 jmp	 ??1?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE@XZ
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$4:
  00029	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0002c	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00032	e9 00 00 00 00	 jmp	 ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$5:
  00037	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0003a	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00040	e9 00 00 00 00	 jmp	 ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$6:
  00045	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00048	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
  0004e	e9 00 00 00 00	 jmp	 ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$7:
  00053	8b 4d 88	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00056	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  0005c	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$8:
  00061	6a 7c		 push	 124			; 0000007cH
  00063	8b 45 bc	 mov	 eax, DWORD PTR $T10[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006c	83 c4 08	 add	 esp, 8
  0006f	c3		 ret	 0
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$9:
  00070	6a 7c		 push	 124			; 0000007cH
  00072	8b 45 84	 mov	 eax, DWORD PTR $T4[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007b	83 c4 08	 add	 esp, 8
  0007e	c3		 ret	 0
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$10:
  0007f	8d 4d c0	 lea	 ecx, DWORD PTR $T11[ebp]
  00082	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@QAE@XZ
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$19:
  00087	8d 4d 94	 lea	 ecx, DWORD PTR $T6[ebp]
  0008a	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$18:
  0008f	8d 4d 94	 lea	 ecx, DWORD PTR $T6[ebp]
  00092	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$30:
  00097	8d 4d 8c	 lea	 ecx, DWORD PTR __Op$5[ebp]
  0009a	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >
  0009f	cc		 int	 3
  000a0	cc		 int	 3
  000a1	cc		 int	 3
  000a2	cc		 int	 3
  000a3	cc		 int	 3
__ehhandler$??0CWindowManager@UI@@QAE@XZ:
  000a4	90		 npad	 1
  000a5	90		 npad	 1
  000a6	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000aa	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000ad	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  000b3	33 c8		 xor	 ecx, eax
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000bd	33 c8		 xor	 ecx, eax
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CWindowManager@UI@@QAE@XZ
  000c9	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CWindowManager@UI@@QAE@XZ ENDP			; UI::CWindowManager::CWindowManager
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z PROC	; CSingleton<UI::CWindowManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCWindowManager@UI@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A, 0 ; CSingleton<UI::CWindowManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z ENDP	; CSingleton<UI::CWindowManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCWindowManager@UI@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCWindowManager@UI@@@@UAE@XZ PROC	; CSingleton<UI::CWindowManager>::~CSingleton<UI::CWindowManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCWindowManager@UI@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A, 0 ; CSingleton<UI::CWindowManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCWindowManager@UI@@@@UAE@XZ ENDP	; CSingleton<UI::CWindowManager>::~CSingleton<UI::CWindowManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 416  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3229 :     _CONSTEXPR20_CONTAINER basic_string& assign(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]

; 3229 :     _CONSTEXPR20_CONTAINER basic_string& assign(_In_z_ const _Elem* const _Ptr) {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8b f2		 mov	 esi, edx

; 3229 :     _CONSTEXPR20_CONTAINER basic_string& assign(_In_z_ const _Elem* const _Ptr) {

  0000d	8b d9		 mov	 ebx, ecx
  0000f	57		 push	 edi

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00010	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL61@assign:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL61@assign
  0001a	2b f1		 sub	 esi, ecx

; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001c	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0001f	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00022	3b f1		 cmp	 esi, ecx
  00024	77 26		 ja	 SHORT $LN6@assign

; 2263 :         value_type* _Result = _Bx._Buf;

  00026	8b fb		 mov	 edi, ebx

; 2286 :         return _BUF_SIZE <= _Myres;

  00028	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  0002b	72 02		 jb	 SHORT $LN9@assign

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0002d	8b 3b		 mov	 edi, DWORD PTR [ebx]
$LN9@assign:

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002f	56		 push	 esi
  00030	52		 push	 edx
  00031	57		 push	 edi

; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00032	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003d	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00041	8b c3		 mov	 eax, ebx
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx

; 3231 :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN6@assign:

; 4474 :         if (_New_size > max_size()) {

  0004c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00052	0f 87 d4 00 00
	00		 ja	 $LN65@assign

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00058	8b fe		 mov	 edi, esi
  0005a	83 cf 0f	 or	 edi, 15			; 0000000fH
  0005d	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	76 15		 jbe	 SHORT $LN23@assign

; 4456 :             return _Max;

  00065	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006a	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00075	83 c4 04	 add	 esp, 4
  00078	eb 52		 jmp	 SHORT $LN63@assign
$LN23@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0007a	8b d1		 mov	 edx, ecx
  0007c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00081	d1 ea		 shr	 edx, 1
  00083	2b c2		 sub	 eax, edx
  00085	3b c8		 cmp	 ecx, eax
  00087	76 15		 jbe	 SHORT $LN24@assign

; 4460 :             return _Max;

  00089	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0008e	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00099	83 c4 04	 add	 esp, 4
  0009c	eb 2e		 jmp	 SHORT $LN63@assign
$LN24@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0009e	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000a1	3b f8		 cmp	 edi, eax
  000a3	0f 42 f8	 cmovb	 edi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a6	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a9	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ae	72 0b		 jb	 SHORT $LN31@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b6	83 c4 04	 add	 esp, 4
  000b9	eb 11		 jmp	 SHORT $LN63@assign
$LN31@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000bb	85 c0		 test	 eax, eax
  000bd	74 0b		 je	 SHORT $LN32@assign

; 79   :         return ::operator new(_Bytes);

  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c5	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c8	eb 02		 jmp	 SHORT $LN63@assign
$LN32@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000ca	33 c0		 xor	 eax, eax
$LN63@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	56		 push	 esi
  000cd	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000d0	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d3	50		 push	 eax

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000d4	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  000d7	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000da	e8 00 00 00 00	 call	 _memcpy

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000df	8b 7d fc	 mov	 edi, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000e5	8b 45 f8	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000e8	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000ec	83 f8 10	 cmp	 eax, 16			; 00000010H
  000ef	72 29		 jb	 SHORT $LN17@assign

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000f1	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fc	72 12		 jb	 SHORT $LN54@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fe	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00101	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00104	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00106	83 c0 fc	 add	 eax, -4			; fffffffcH
  00109	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010c	77 19		 ja	 SHORT $LN51@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010e	8b c2		 mov	 eax, edx
$LN54@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00110	51		 push	 ecx
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00117	83 c4 08	 add	 esp, 8
$LN17@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3220 :         return _Reallocate_for(

  0011a	89 3b		 mov	 DWORD PTR [ebx], edi

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0011c	8b c3		 mov	 eax, ebx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx

; 3231 :     }

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
$LN51@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00127	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN65@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4475 :             _Xlen_string(); // result too long

  0012c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN62@assign:
  00131	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2968 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2286 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 2976 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2340 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
