; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30151.0 

	TITLE	C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\Distribute\PythonGridSlotWindow.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?OnChangePosition@CWindow@UI@@UAEXXZ		; UI::CWindow::OnChangePosition
PUBLIC	?SetColor@CWindow@UI@@UAEXK@Z			; UI::CWindow::SetColor
PUBLIC	?IsWindow@CWindow@UI@@UAEHXZ			; UI::CWindow::IsWindow
PUBLIC	?Type@CGridSlotWindow@UI@@SAKXZ			; UI::CGridSlotWindow::Type
PUBLIC	??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z	; UI::CGridSlotWindow::CGridSlotWindow
PUBLIC	??1CGridSlotWindow@UI@@UAE@XZ			; UI::CGridSlotWindow::~CGridSlotWindow
PUBLIC	?Destroy@CGridSlotWindow@UI@@QAEXXZ		; UI::CGridSlotWindow::Destroy
PUBLIC	?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z ; UI::CGridSlotWindow::ArrangeGridSlot
PUBLIC	?__Initialize@CGridSlotWindow@UI@@IAEXXZ	; UI::CGridSlotWindow::__Initialize
PUBLIC	?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetPickedSlotPointer
PUBLIC	?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::GetPickedSlotList
PUBLIC	?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
PUBLIC	?GetSlotPointerByNumber@CGridSlotWindow@UI@@IAEHKPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetSlotPointerByNumber
PUBLIC	?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z ; UI::CGridSlotWindow::GetPickedGridSlotPosition
PUBLIC	?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::CheckMoving
PUBLIC	?OnIsType@CGridSlotWindow@UI@@MAEHK@Z		; UI::CGridSlotWindow::OnIsType
PUBLIC	?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ	; UI::CGridSlotWindow::OnRefreshSlot
PUBLIC	?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ	; UI::CGridSlotWindow::OnRenderPickingSlot
PUBLIC	?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength
PUBLIC	??_GCGridSlotWindow@UI@@UAEPAXI@Z		; UI::CGridSlotWindow::`scalar deleting destructor'
PUBLIC	??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ; std::_Zero_range<UI::CSlotWindow::SSlot * *>
PUBLIC	??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CGridSlotWindow@UI@@6B@			; UI::CGridSlotWindow::`vftable'
PUBLIC	??_C@_0BA@BFEGLPNH@CGridSlotWindow@		; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_R1A@?0A@EA@CWindow@UI@@8			; UI::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWindow@UI@@@8				; UI::CWindow `RTTI Type Descriptor'
PUBLIC	??_R3CWindow@UI@@8				; UI::CWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWindow@UI@@8				; UI::CWindow::`RTTI Base Class Array'
PUBLIC	??_R4CGridSlotWindow@UI@@6B@			; UI::CGridSlotWindow::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGridSlotWindow@UI@@@8			; UI::CGridSlotWindow `RTTI Type Descriptor'
PUBLIC	??_R3CGridSlotWindow@UI@@8			; UI::CGridSlotWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGridSlotWindow@UI@@8			; UI::CGridSlotWindow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGridSlotWindow@UI@@8		; UI::CGridSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSlotWindow@UI@@8			; UI::CSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCSlotWindow@UI@@@8			; UI::CSlotWindow `RTTI Type Descriptor'
PUBLIC	??_R3CSlotWindow@UI@@8				; UI::CSlotWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSlotWindow@UI@@8				; UI::CSlotWindow::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?RenderBar2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderBar2d
EXTRN	?SetDiffuseColor@CScreen@@QAEXMMMM@Z:PROC	; CScreen::SetDiffuseColor
EXTRN	?IsAttaching@CWindowManager@UI@@QAEHXZ:PROC	; UI::CWindowManager::IsAttaching
EXTRN	?GetAttachingIndex@CWindowManager@UI@@QAEKXZ:PROC ; UI::CWindowManager::GetAttachingIndex
EXTRN	?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ:PROC ; UI::CWindowManager::GetAttachingSlotNumber
EXTRN	?GetAttachingRealSlotNumber@CWindowManager@UI@@QAEKXZ:PROC ; UI::CWindowManager::GetAttachingRealSlotNumber
EXTRN	?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z:PROC ; UI::CWindowManager::GetAttachingIconSize
EXTRN	?SetSize@CWindow@UI@@QAEXJJ@Z:PROC		; UI::CWindow::SetSize
EXTRN	?GetMouseLocalPosition@CWindow@UI@@QAEXAAJ0@Z:PROC ; UI::CWindow::GetMouseLocalPosition
EXTRN	?OnSetFocus@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnSetFocus
EXTRN	?OnKillFocus@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnKillFocus
EXTRN	?OnMouseDrag@CWindow@UI@@UAEXJJ@Z:PROC		; UI::CWindow::OnMouseDrag
EXTRN	?OnMouseOverIn@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnMouseOverIn
EXTRN	?OnDrop@CWindow@UI@@UAEXXZ:PROC			; UI::CWindow::OnDrop
EXTRN	?OnTop@CWindow@UI@@UAEXXZ:PROC			; UI::CWindow::OnTop
EXTRN	?OnIMEUpdate@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnIMEUpdate
EXTRN	?OnMoveWindow@CWindow@UI@@UAEXJJ@Z:PROC		; UI::CWindow::OnMoveWindow
EXTRN	?OnIMETabEvent@CWindow@UI@@UAEHXZ:PROC		; UI::CWindow::OnIMETabEvent
EXTRN	?OnIMEReturnEvent@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnIMEReturnEvent
EXTRN	?OnIMEKeyDownEvent@CWindow@UI@@UAEHH@Z:PROC	; UI::CWindow::OnIMEKeyDownEvent
EXTRN	?OnIMEChangeCodePage@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnIMEChangeCodePage
EXTRN	?OnIMEOpenCandidateListEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEOpenCandidateListEvent
EXTRN	?OnIMECloseCandidateListEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMECloseCandidateListEvent
EXTRN	?OnIMEOpenReadingWndEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEOpenReadingWndEvent
EXTRN	?OnIMECloseReadingWndEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMECloseReadingWndEvent
EXTRN	?OnMouseRightButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseRightButtonUp
EXTRN	?OnMouseRightButtonDoubleClick@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseRightButtonDoubleClick
EXTRN	?OnMouseMiddleButtonDown@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseMiddleButtonDown
EXTRN	?OnMouseMiddleButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseMiddleButtonUp
EXTRN	?RunMouseWheelEvent@CWindow@UI@@UAEHJ@Z:PROC	; UI::CWindow::RunMouseWheelEvent
EXTRN	?OnMouseWheelScroll@CWindow@UI@@UAEHF@Z:PROC	; UI::CWindow::OnMouseWheelScroll
EXTRN	?SetScrollable@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::SetScrollable
EXTRN	?OnKeyDown@CWindow@UI@@UAEHH@Z:PROC		; UI::CWindow::OnKeyDown
EXTRN	?OnKeyUp@CWindow@UI@@UAEHH@Z:PROC		; UI::CWindow::OnKeyUp
EXTRN	?OnPressEscapeKey@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnPressEscapeKey
EXTRN	?OnPressExitKey@CWindow@UI@@UAEHXZ:PROC		; UI::CWindow::OnPressExitKey
EXTRN	??0CSlotWindow@UI@@QAE@PAU_object@@@Z:PROC	; UI::CSlotWindow::CSlotWindow
EXTRN	??1CSlotWindow@UI@@UAE@XZ:PROC			; UI::CSlotWindow::~CSlotWindow
EXTRN	?Destroy@CSlotWindow@UI@@QAEXXZ:PROC		; UI::CSlotWindow::Destroy
EXTRN	?AppendSlot@CSlotWindow@UI@@QAEXKHHHH@Z:PROC	; UI::CSlotWindow::AppendSlot
EXTRN	?OnUpdate@CSlotWindow@UI@@MAEXXZ:PROC		; UI::CSlotWindow::OnUpdate
EXTRN	?OnRender@CSlotWindow@UI@@MAEXXZ:PROC		; UI::CSlotWindow::OnRender
EXTRN	?OnMouseLeftButtonDown@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseLeftButtonDown
EXTRN	?OnMouseLeftButtonUp@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseLeftButtonUp
EXTRN	?OnMouseRightButtonDown@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseRightButtonDown
EXTRN	?OnMouseLeftButtonDoubleClick@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseLeftButtonDoubleClick
EXTRN	?OnMouseOverOut@CSlotWindow@UI@@MAEXXZ:PROC	; UI::CSlotWindow::OnMouseOverOut
EXTRN	?OnMouseOver@CSlotWindow@UI@@MAEXXZ:PROC	; UI::CSlotWindow::OnMouseOver
EXTRN	?OnRenderSelectedSlot@CSlotWindow@UI@@MAEXXZ:PROC ; UI::CSlotWindow::OnRenderSelectedSlot
EXTRN	?GetSlotPointer@CSlotWindow@UI@@IAEHKPAPAUSSlot@12@@Z:PROC ; UI::CSlotWindow::GetSlotPointer
EXTRN	?GetPickedSlotPointer@CSlotWindow@UI@@MAEHPAPAUSSlot@12@@Z:PROC ; UI::CSlotWindow::GetPickedSlotPointer
EXTRN	?OnIsType@CSlotWindow@UI@@MAEHK@Z:PROC		; UI::CSlotWindow::OnIsType
EXTRN	??_ECGridSlotWindow@UI@@UAEPAXI@Z:PROC		; UI::CGridSlotWindow::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A DD 01H DUP (?) ; CSingleton<CPythonGraphic>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A DD 01H DUP (?) ; CSingleton<UI::CWindowManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
_BSS	SEGMENT
?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA DD 01H DUP (?) ; `UI::CGridSlotWindow::Type'::`2'::s_Type
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA DD 01H DUP (?) ; `UI::CGridSlotWindow::Type'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_R2CSlotWindow@UI@@8
rdata$r	SEGMENT
??_R2CSlotWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CSlotWindow@UI@@8 ; UI::CSlotWindow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R3CSlotWindow@UI@@8
rdata$r	SEGMENT
??_R3CSlotWindow@UI@@8 DD 00H				; UI::CSlotWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSlotWindow@UI@@@8
data$rs	SEGMENT
??_R0?AVCSlotWindow@UI@@@8 DD FLAT:??_7type_info@@6B@	; UI::CSlotWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSlotWindow@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CSlotWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSlotWindow@UI@@8 DD FLAT:??_R0?AVCSlotWindow@UI@@@8 ; UI::CSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGridSlotWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGridSlotWindow@UI@@8 DD FLAT:??_R0?AVCGridSlotWindow@UI@@@8 ; UI::CGridSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGridSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R2CGridSlotWindow@UI@@8
rdata$r	SEGMENT
??_R2CGridSlotWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CGridSlotWindow@UI@@8 ; UI::CGridSlotWindow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSlotWindow@UI@@8
	DD	FLAT:??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R3CGridSlotWindow@UI@@8
rdata$r	SEGMENT
??_R3CGridSlotWindow@UI@@8 DD 00H			; UI::CGridSlotWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGridSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGridSlotWindow@UI@@@8
data$rs	SEGMENT
??_R0?AVCGridSlotWindow@UI@@@8 DD FLAT:??_7type_info@@6B@ ; UI::CGridSlotWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGridSlotWindow@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGridSlotWindow@UI@@6B@
rdata$r	SEGMENT
??_R4CGridSlotWindow@UI@@6B@ DD 00H			; UI::CGridSlotWindow::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGridSlotWindow@UI@@@8
	DD	FLAT:??_R3CGridSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R2CWindow@UI@@8
rdata$r	SEGMENT
??_R2CWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CWindow@UI@@8	; UI::CWindow::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWindow@UI@@8
rdata$r	SEGMENT
??_R3CWindow@UI@@8 DD 00H				; UI::CWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWindow@UI@@@8
data$rs	SEGMENT
??_R0?AVCWindow@UI@@@8 DD FLAT:??_7type_info@@6B@	; UI::CWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWindow@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWindow@UI@@8 DD FLAT:??_R0?AVCWindow@UI@@@8 ; UI::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BFEGLPNH@CGridSlotWindow@
CONST	SEGMENT
??_C@_0BA@BFEGLPNH@CGridSlotWindow@ DB 'CGridSlotWindow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CGridSlotWindow@UI@@6B@
CONST	SEGMENT
??_7CGridSlotWindow@UI@@6B@ DD FLAT:??_R4CGridSlotWindow@UI@@6B@ ; UI::CGridSlotWindow::`vftable'
	DD	FLAT:??_ECGridSlotWindow@UI@@UAEPAXI@Z
	DD	FLAT:?OnRender@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnUpdate@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnChangePosition@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnSetFocus@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnKillFocus@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseDrag@CWindow@UI@@UAEXJJ@Z
	DD	FLAT:?OnMouseOverIn@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseOverOut@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnMouseOver@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnDrop@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnTop@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnIMEUpdate@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMoveWindow@CWindow@UI@@UAEXJJ@Z
	DD	FLAT:?OnIMETabEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEReturnEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEKeyDownEvent@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnIMEChangeCodePage@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEOpenCandidateListEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMECloseCandidateListEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEOpenReadingWndEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMECloseReadingWndEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseLeftButtonDown@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseLeftButtonUp@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseLeftButtonDoubleClick@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseRightButtonDown@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseRightButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseRightButtonDoubleClick@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseMiddleButtonDown@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseMiddleButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?RunMouseWheelEvent@CWindow@UI@@UAEHJ@Z
	DD	FLAT:?OnMouseWheelScroll@CWindow@UI@@UAEHF@Z
	DD	FLAT:?SetScrollable@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnKeyDown@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnKeyUp@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnPressEscapeKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnPressExitKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?SetColor@CWindow@UI@@UAEXK@Z
	DD	FLAT:?OnIsType@CGridSlotWindow@UI@@MAEHK@Z
	DD	FLAT:?IsWindow@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnRenderSelectedSlot@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
	DD	FLAT:?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z$0
__ehfuncinfo$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z$1
__ehfuncinfo$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z$1
__ehfuncinfo$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ$0
__ehfuncinfo$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z$4
__ehfuncinfo$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z$0
__ehfuncinfo$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CGridSlotWindow@UI@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CGridSlotWindow@UI@@SAKXZ$0
__ehfuncinfo$?Type@CGridSlotWindow@UI@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CGridSlotWindow@UI@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z PROC ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z ENDP ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z PROC ; std::_Zero_range<UI::CSlotWindow::SSlot * *>, COMDAT

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1793 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1794 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ENDP ; std::_Zero_range<UI::CSlotWindow::SSlot * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1217 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00012	0f 87 ea 00 00
	00		 ja	 $LN82@Resize_rea

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0001b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00020	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00022	c1 f9 02	 sar	 ecx, 2
  00025	89 4d fc	 mov	 DWORD PTR __Oldsize$1$[ebp], ecx

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002b	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0002d	c1 f9 02	 sar	 ecx, 2

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00030	8b d1		 mov	 edx, ecx
  00032	d1 ea		 shr	 edx, 1
  00034	2b c2		 sub	 eax, edx
  00036	3b c8		 cmp	 ecx, eax
  00038	76 12		 jbe	 SHORT $LN10@Resize_rea

; 1676 :             return _Max; // geometric growth would overflow

  0003a	bf fc ff ff ff	 mov	 edi, -4			; fffffffcH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00045	83 c4 04	 add	 esp, 4
  00048	8b d8		 mov	 ebx, eax
  0004a	eb 42		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0004c	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 1680 : 
; 1681 :         if (_Geometric < _Newsize) {

  0004f	3b fb		 cmp	 edi, ebx
  00051	73 1a		 jae	 SHORT $LN11@Resize_rea

; 1682 :             return _Newsize; // geometric growth would be insufficient

  00053	8b fb		 mov	 edi, ebx
$LN18@Resize_rea:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 65   :     return _Count * _Ty_size;

  00055	c1 e7 02	 shl	 edi, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00058	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0005e	72 1b		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00060	57		 push	 edi
  00061	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00066	83 c4 04	 add	 esp, 4
  00069	8b d8		 mov	 ebx, eax
  0006b	eb 21		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  0006d	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00073	0f 87 8e 00 00
	00		 ja	 $LN83@Resize_rea
  00079	eb da		 jmp	 SHORT $LN18@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  0007b	85 ff		 test	 edi, edi
  0007d	74 0d		 je	 SHORT $LN23@Resize_rea

; 79   :         return ::operator new(_Bytes);

  0007f	57		 push	 edi
  00080	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00085	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00088	8b d8		 mov	 ebx, eax
  0008a	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0008c	33 db		 xor	 ebx, ebx
$LN21@Resize_rea:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

  0008e	8b 55 fc	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

  00091	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00094	2b c2		 sub	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00096	8d 0c 93	 lea	 ecx, DWORD PTR [ebx+edx*4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

  00099	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0009c	50		 push	 eax
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ; std::_Zero_range<UI::CSlotWindow::SSlot * *>

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000a3	53		 push	 ebx
  000a4	ff 76 04	 push	 DWORD PTR [esi+4]
  000a7	ff 36		 push	 DWORD PTR [esi]
  000a9	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  000ae	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b0	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  000b3	85 c0		 test	 eax, eax
  000b5	74 2c		 je	 SHORT $LN65@Resize_rea

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ba	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bc	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bf	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c5	72 12		 jb	 SHORT $LN75@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000c7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ca	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000cd	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cf	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d5	77 26		 ja	 SHORT $LN72@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000d7	8b c2		 mov	 eax, edx
$LN75@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000d9	51		 push	 ecx
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e0	83 c4 08	 add	 esp, 8
$LN65@Resize_rea:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1738 :         _Mylast  = _Newvec + _Newsize;

  000e3	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000e6	89 1e		 mov	 DWORD PTR [esi], ebx
  000e8	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  000eb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  000ee	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  000f1	5f		 pop	 edi
  000f2	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 1242 :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN72@Resize_rea:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN82@Resize_rea:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1218 :             _Xlength();

  00102	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength
$LN83@Resize_rea:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00107	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN80@Resize_rea:
  0010c	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >, COMDAT
; _this$ = ecx

; 970  :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 971  :             _Al.deallocate(_Ptr, 1);
; 972  :         }
; 973  :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
;	COMDAT ??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ PROC ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >, COMDAT
; _this$ = ecx

; 1036 :     ~list() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 323  :         _Head->_Prev->_Next = nullptr;

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  0000e	8b 02		 mov	 eax, DWORD PTR [edx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN7@list
  00014	56		 push	 esi
$LL8@list:

; 327  :             _Pnext = _Pnode->_Next;

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL8@list
  00028	5e		 pop	 esi
$LN7@list:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	6a 0c		 push	 12			; 0000000cH
  0002b	ff 37		 push	 DWORD PTR [edi]
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1042 :     }

  00036	c3		 ret	 0
??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ENDP ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGridSlotWindow@UI@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGridSlotWindow@UI@@UAEPAXI@Z PROC			; UI::CGridSlotWindow::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGridSlotWindow@UI@@UAE@XZ ; UI::CGridSlotWindow::~CGridSlotWindow
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 ec 00 00 00	 push	 236			; 000000ecH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCGridSlotWindow@UI@@UAEPAXI@Z ENDP			; UI::CGridSlotWindow::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ PROC ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ ENDP ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
_TEXT	SEGMENT
_SlotList$ = -48					; size = 8
tv1010 = -40						; size = 4
tv1007 = -36						; size = 4
_Rect$1$sroa$579$1$ = -32				; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
_Rect$1$sroa$580$1$ = -20				; size = 4
_pCenterSlot$5 = -20					; size = 4
_byWidth$ = -14						; size = 1
_byHeight$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ PROC	; UI::CGridSlotWindow::OnRenderPickingSlot, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 9    : 	if (!UI::CWindowManager::Instance().IsAttaching())

  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  00035	85 c0		 test	 eax, eax
  00037	0f 84 a7 02 00
	00		 je	 $LN183@OnRenderPi

; 10   : 		return;
; 11   : 
; 12   : 	BYTE byWidth, byHeight;
; 13   : 	UI::CWindowManager::Instance().GetAttachingIconSize(&byWidth, &byHeight);

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00043	8d 45 f3	 lea	 eax, DWORD PTR _byHeight$[ebp]
  00046	50		 push	 eax
  00047	8d 45 f2	 lea	 eax, DWORD PTR _byWidth$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z ; UI::CWindowManager::GetAttachingIconSize
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00050	6a 0c		 push	 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 352  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00052	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp], 0
  00059	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00060	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00065	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1767 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00068	89 00		 mov	 DWORD PTR [eax], eax

; 1768 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0006a	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1769 :         _Mypair._Myval2._Myhead = _Newhead;

  0006d	89 45 d0	 mov	 DWORD PTR _SlotList$[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 16   : 	if (GetPickedSlotList(byWidth, byHeight, &SlotList))

  00070	8d 45 d0	 lea	 eax, DWORD PTR _SlotList$[ebp]
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007a	50		 push	 eax
  0007b	0f b6 45 f3	 movzx	 eax, BYTE PTR _byHeight$[ebp]
  0007f	8b cf		 mov	 ecx, edi
  00081	50		 push	 eax
  00082	0f b6 45 f2	 movzx	 eax, BYTE PTR _byWidth$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::GetPickedSlotList
  0008c	85 c0		 test	 eax, eax
  0008e	0f 84 1e 02 00
	00		 je	 $LN6@OnRenderPi

; 17   : 	{
; 18   : 		DWORD dwSlotNumber = UI::CWindowManager::Instance().GetAttachingSlotNumber();

  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  0009a	e8 00 00 00 00	 call	 ?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingSlotNumber

; 19   : 		DWORD dwRealSlotNumber = UI::CWindowManager::Instance().GetAttachingRealSlotNumber();

  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  000a5	e8 00 00 00 00	 call	 ?GetAttachingRealSlotNumber@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingRealSlotNumber

; 20   : 		DWORD dwItemIndex = UI::CWindowManager::Instance().GetAttachingIndex();

  000aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  000b0	8b f0		 mov	 esi, eax
  000b2	e8 00 00 00 00	 call	 ?GetAttachingIndex@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingIndex

; 21   : 
; 22   : 		if (m_isUseMode)

  000b7	83 bf a0 00 00
	00 00		 cmp	 DWORD PTR [edi+160], 0
  000be	8b d8		 mov	 ebx, eax
  000c0	0f 84 d1 00 00
	00		 je	 $LN9@OnRenderPi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000c6	8b 4d d0	 mov	 ecx, DWORD PTR _SlotList$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 26   : 			if (GetSlotPointer(pSlot->dwCenterSlotNumber, &pCenterSlot))

  000c9	8d 45 ec	 lea	 eax, DWORD PTR _pCenterSlot$5[ebp]
  000cc	50		 push	 eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000cd	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 24   : 			TSlot * pSlot = *SlotList.begin();

  000cf	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 26   : 			if (GetSlotPointer(pSlot->dwCenterSlotNumber, &pCenterSlot))

  000d2	ff 71 08	 push	 DWORD PTR [ecx+8]
  000d5	8b cf		 mov	 ecx, edi
  000d7	e8 00 00 00 00	 call	 ?GetSlotPointer@CSlotWindow@UI@@IAEHKPAPAUSSlot@12@@Z ; UI::CSlotWindow::GetSlotPointer
  000dc	85 c0		 test	 eax, eax
  000de	0f 84 b3 00 00
	00		 je	 $LN9@OnRenderPi

; 27   : 			if (pCenterSlot->isItem)

  000e4	8b 45 ec	 mov	 eax, DWORD PTR _pCenterSlot$5[ebp]
  000e7	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000eb	0f 84 a6 00 00
	00		 je	 $LN9@OnRenderPi

; 28   : 			{
; 29   : 				if (m_isUsableItem)

  000f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  000f7	83 ec 10	 sub	 esp, 16			; 00000010H
  000fa	83 bf a4 00 00
	00 00		 cmp	 DWORD PTR [edi+164], 0
  00101	c7 44 24 0c 00
	00 00 3f	 mov	 DWORD PTR [esp+12], 1056964608 ; 3f000000H
  00109	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  00111	74 0a		 je	 SHORT $LN10@OnRenderPi

; 30   : 					CPythonGraphic::Instance().SetDiffuseColor(1.0f, 1.0f, 0.0f, 0.5f);

  00113	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  0011b	eb 08		 jmp	 SHORT $LN209@OnRenderPi
$LN10@OnRenderPi:

; 31   : 				else
; 32   : 					CPythonGraphic::Instance().SetDiffuseColor(1.0f, 0.0f, 0.0f, 0.5f);

  0011d	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
$LN209@OnRenderPi:

; 33   : 
; 34   : 				CPythonGraphic::Instance().RenderBar2d(	m_rect.left + pCenterSlot->ixPosition,

  00125	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0012c	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor
  00131	8b 4d ec	 mov	 ecx, DWORD PTR _pCenterSlot$5[ebp]
  00134	83 ec 14	 sub	 esp, 20			; 00000014H
  00137	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
  0013a	8b 7f 34	 mov	 edi, DWORD PTR [edi+52]
  0013d	0f b6 41 51	 movzx	 eax, BYTE PTR [ecx+81]
  00141	8b 71 44	 mov	 esi, DWORD PTR [ecx+68]
  00144	8b 59 40	 mov	 ebx, DWORD PTR [ecx+64]
  00147	c1 e0 05	 shl	 eax, 5
  0014a	03 c2		 add	 eax, edx
  0014c	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00154	03 c6		 add	 eax, esi
  00156	66 0f 6e c0	 movd	 xmm0, eax
  0015a	0f b6 41 50	 movzx	 eax, BYTE PTR [ecx+80]
  0015e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00161	c1 e0 05	 shl	 eax, 5
  00164	03 c7		 add	 eax, edi
  00166	03 c3		 add	 eax, ebx
  00168	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0016e	66 0f 6e c0	 movd	 xmm0, eax
  00172	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00175	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00178	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0017e	66 0f 6e c0	 movd	 xmm0, eax
  00182	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00185	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00188	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0018e	66 0f 6e c0	 movd	 xmm0, eax
  00192	e9 08 01 00 00	 jmp	 $LN210@OnRenderPi
$LN9@OnRenderPi:

; 35   : 														m_rect.top + pCenterSlot->iyPosition,
; 36   : 														m_rect.left + pCenterSlot->ixPosition + pCenterSlot->byxPlacedItemSize * ITEM_WIDTH,
; 37   : 														m_rect.top + pCenterSlot->iyPosition + pCenterSlot->byyPlacedItemSize * ITEM_HEIGHT);
; 38   : 				return;
; 39   : 			}
; 40   : 		}
; 41   : 
; 42   : 		if (CheckMoving(dwRealSlotNumber, dwItemIndex, SlotList))

  00197	8d 45 d0	 lea	 eax, DWORD PTR _SlotList$[ebp]
  0019a	8b cf		 mov	 ecx, edi
  0019c	50		 push	 eax
  0019d	53		 push	 ebx
  0019e	56		 push	 esi
  0019f	e8 00 00 00 00	 call	 ?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::CheckMoving
  001a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  001aa	83 ec 10	 sub	 esp, 16			; 00000010H
  001ad	c7 44 24 0c 00
	00 00 3f	 mov	 DWORD PTR [esp+12], 1056964608 ; 3f000000H
  001b5	85 c0		 test	 eax, eax
  001b7	74 12		 je	 SHORT $LN12@OnRenderPi

; 43   : 			CPythonGraphic::Instance().SetDiffuseColor(1.0f, 1.0f, 1.0f, 0.5f);

  001b9	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  001c1	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  001c9	eb 10		 jmp	 SHORT $LN211@OnRenderPi
$LN12@OnRenderPi:

; 44   : #ifdef ENABLE_SWAP_SLOT_DIFFUSE_COLOR
; 45   : 		else if (CheckSwapping(dwRealSlotNumber, byHeight, SlotList))
; 46   : 			CPythonGraphic::Instance().SetDiffuseColor(0.22f, 0.67f, 0.65f, 0.5f);
; 47   : #endif
; 48   : 		else
; 49   : 			CPythonGraphic::Instance().SetDiffuseColor(1.0f, 0.0f, 0.0f, 0.5f);

  001cb	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  001d3	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
$LN211@OnRenderPi:

; 50   : 
; 51   : 		RECT Rect;
; 52   : 		Rect.left = m_rect.right;

  001db	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  001e2	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  001e7	8b 45 d0	 mov	 eax, DWORD PTR _SlotList$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 54   : 		Rect.right = 0;

  001ea	33 f6		 xor	 esi, esi
  001ec	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]

; 55   : 		Rect.bottom = 0;

  001ef	33 d2		 xor	 edx, edx
  001f1	8b 5f 40	 mov	 ebx, DWORD PTR [edi+64]
  001f4	89 4d ec	 mov	 DWORD PTR _Rect$1$sroa$580$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  001f7	8b 00		 mov	 eax, DWORD PTR [eax]

; 198  :         return this->_Ptr == _Right._Ptr;

  001f9	3b 45 d0	 cmp	 eax, DWORD PTR _SlotList$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 57   : 		for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  001fc	74 6b		 je	 SHORT $LN3@OnRenderPi

; 60   : 			Rect.left = min(Rect.left, m_rect.left + pSlot->ixPosition);

  001fe	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00201	89 4d e8	 mov	 DWORD PTR $T4[ebp], ecx

; 61   : 			Rect.top = min(Rect.top, m_rect.top + pSlot->iyPosition);

  00204	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00207	89 4d e4	 mov	 DWORD PTR $T3[ebp], ecx
  0020a	8b 4d ec	 mov	 ecx, DWORD PTR _Rect$1$sroa$580$1$[ebp]
  0020d	0f 1f 00	 npad	 3
$LL126@OnRenderPi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 151  :         return this->_Ptr->_Myval;

  00210	89 55 d8	 mov	 DWORD PTR tv1010[ebp], edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 59   : 			TSlot * pSlot = *itor;

  00213	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 151  :         return this->_Ptr->_Myval;

  00216	89 75 dc	 mov	 DWORD PTR tv1007[ebp], esi
  00219	8b f3		 mov	 esi, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 60   : 			Rect.left = min(Rect.left, m_rect.left + pSlot->ixPosition);

  0021b	8b 5d e8	 mov	 ebx, DWORD PTR $T4[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0021e	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 60   : 			Rect.left = min(Rect.left, m_rect.left + pSlot->ixPosition);

  00220	8b 7a 40	 mov	 edi, DWORD PTR [edx+64]
  00223	03 df		 add	 ebx, edi

; 61   : 			Rect.top = min(Rect.top, m_rect.top + pSlot->iyPosition);

  00225	3b cb		 cmp	 ecx, ebx
  00227	0f 4c d9	 cmovl	 ebx, ecx
  0022a	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  0022d	89 5d ec	 mov	 DWORD PTR _Rect$1$sroa$580$1$[ebp], ebx
  00230	8b 5a 44	 mov	 ebx, DWORD PTR [edx+68]
  00233	03 cb		 add	 ecx, ebx

; 62   : 			Rect.right = max(Rect.right, m_rect.left + pSlot->ixPosition + pSlot->byxPlacedItemSize*ITEM_WIDTH);

  00235	3b f1		 cmp	 esi, ecx
  00237	0f 4c ce	 cmovl	 ecx, esi
  0023a	89 4d e0	 mov	 DWORD PTR _Rect$1$sroa$579$1$[ebp], ecx
  0023d	0f b6 4a 50	 movzx	 ecx, BYTE PTR [edx+80]
  00241	c1 e1 05	 shl	 ecx, 5
  00244	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]
  00247	03 75 e8	 add	 esi, DWORD PTR $T4[ebp]

; 63   : 			Rect.bottom = max(Rect.bottom, m_rect.top + pSlot->iyPosition + pSlot->byxPlacedItemSize*ITEM_HEIGHT);

  0024a	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  0024d	39 75 dc	 cmp	 DWORD PTR tv1007[ebp], esi
  00250	8b 4d ec	 mov	 ecx, DWORD PTR _Rect$1$sroa$580$1$[ebp]
  00253	0f 4f 75 dc	 cmovg	 esi, DWORD PTR tv1007[ebp]
  00257	03 55 e4	 add	 edx, DWORD PTR $T3[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0025a	39 55 d8	 cmp	 DWORD PTR tv1010[ebp], edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 57   : 		for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  0025d	8b 5d e0	 mov	 ebx, DWORD PTR _Rect$1$sroa$579$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00260	0f 4f 55 d8	 cmovg	 edx, DWORD PTR tv1010[ebp]

; 198  :         return this->_Ptr == _Right._Ptr;

  00264	3b 45 d0	 cmp	 eax, DWORD PTR _SlotList$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 57   : 		for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  00267	75 a7		 jne	 SHORT $LL126@OnRenderPi
$LN3@OnRenderPi:

; 64   : 		}
; 65   : 
; 66   : 		CPythonGraphic::Instance().RenderBar2d(Rect.left, Rect.top, Rect.right, Rect.bottom);

  00269	83 ec 14	 sub	 esp, 20			; 00000014H
  0026c	66 0f 6e c2	 movd	 xmm0, edx
  00270	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00273	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0027b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00281	66 0f 6e c6	 movd	 xmm0, esi
  00285	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00288	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0028e	66 0f 6e c3	 movd	 xmm0, ebx
  00292	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00295	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0029b	66 0f 6e c1	 movd	 xmm0, ecx
$LN210@OnRenderPi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1431 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  0029f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  002a5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	e8 00 00 00 00	 call	 ?RenderBar2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBar2d
$LN6@OnRenderPi:
  002b2	8b 4d d0	 mov	 ecx, DWORD PTR _SlotList$[ebp]

; 323  :         _Head->_Prev->_Next = nullptr;

  002b5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002b8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  002be	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002c0	85 c0		 test	 eax, eax
  002c2	74 13		 je	 SHORT $LN149@OnRenderPi
$LL150@OnRenderPi:

; 327  :             _Pnext = _Pnode->_Next;

  002c4	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002c6	6a 0c		 push	 12			; 0000000cH
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002ce	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002d1	8b c6		 mov	 eax, esi
  002d3	85 f6		 test	 esi, esi
  002d5	75 ed		 jne	 SHORT $LL150@OnRenderPi
$LN149@OnRenderPi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002d7	6a 0c		 push	 12			; 0000000cH
  002d9	ff 75 d0	 push	 DWORD PTR _SlotList$[ebp]
  002dc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002e1	83 c4 08	 add	 esp, 8
$LN183@OnRenderPi:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 68   : }

  002e4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ee	59		 pop	 ecx
  002ef	5f		 pop	 edi
  002f0	5e		 pop	 esi
  002f1	5b		 pop	 ebx
  002f2	8b e5		 mov	 esp, ebp
  002f4	5d		 pop	 ebp
  002f5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _SlotList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ ENDP	; UI::CGridSlotWindow::OnRenderPickingSlot
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ
_TEXT	SEGMENT
_pSubSlot$1 = -20					; size = 4
_pSlot$2 = -16						; size = 4
_x$2$ = -12						; size = 4
_pSlot$3 = -12						; size = 4
_y$2$ = -8						; size = 4
_this$1$ = -4						; size = 4
?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ PROC		; UI::CGridSlotWindow::OnRefreshSlot, COMDAT
; _this$ = ecx

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	57		 push	 edi

; 311  : 	DWORD x, y;
; 312  : 
; 313  : 	for (x = 0; x < m_dwxCount; ++x)

  0000a	33 ff		 xor	 edi, edi
  0000c	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000f	39 bb d8 00 00
	00		 cmp	 DWORD PTR [ebx+216], edi
  00015	0f 86 02 01 00
	00		 jbe	 $LN9@OnRefreshS
  0001b	56		 push	 esi
  0001c	0f 1f 40 00	 npad	 4
$LL4@OnRefreshS:

; 314  : 	for (y = 0; y < m_dwyCount; ++y)

  00020	33 f6		 xor	 esi, esi
  00022	39 b3 dc 00 00
	00		 cmp	 DWORD PTR [ebx+220], esi
  00028	76 2f		 jbe	 SHORT $LN2@OnRefreshS
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL7@OnRefreshS:

; 315  : 	{
; 316  : 		TSlot * pSlot;
; 317  : 		if (!GetGridSlotPointer(x, y, &pSlot))

  00030	8d 45 f4	 lea	 eax, DWORD PTR _pSlot$3[ebp]
  00033	8b cb		 mov	 ecx, ebx
  00035	50		 push	 eax
  00036	56		 push	 esi
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  0003d	85 c0		 test	 eax, eax
  0003f	74 0f		 je	 SHORT $LN5@OnRefreshS

; 318  : 			continue;
; 319  : 
; 320  : 		pSlot->dwCenterSlotNumber = pSlot->dwSlotNumber;

  00041	8b 4d f4	 mov	 ecx, DWORD PTR _pSlot$3[ebp]
  00044	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00047	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 321  : 		pSlot->dwRealCenterSlotNumber = pSlot->dwRealSlotNumber;

  0004a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0004d	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN5@OnRefreshS:

; 314  : 	for (y = 0; y < m_dwyCount; ++y)

  00050	46		 inc	 esi
  00051	3b b3 dc 00 00
	00		 cmp	 esi, DWORD PTR [ebx+220]
  00057	72 d7		 jb	 SHORT $LL7@OnRefreshS
$LN2@OnRefreshS:

; 311  : 	DWORD x, y;
; 312  : 
; 313  : 	for (x = 0; x < m_dwxCount; ++x)

  00059	8b 83 d8 00 00
	00		 mov	 eax, DWORD PTR [ebx+216]
  0005f	47		 inc	 edi
  00060	3b f8		 cmp	 edi, eax
  00062	72 bc		 jb	 SHORT $LL4@OnRefreshS

; 322  : 	}
; 323  : 
; 324  : 	for (x = 0; x < m_dwxCount; ++x)

  00064	33 f6		 xor	 esi, esi
  00066	89 75 f4	 mov	 DWORD PTR _x$2$[ebp], esi
  00069	85 c0		 test	 eax, eax
  0006b	0f 84 ab 00 00
	00		 je	 $LN58@OnRefreshS
$LL10@OnRefreshS:

; 325  : 	for (y = 0; y < m_dwyCount; ++y)

  00071	33 c0		 xor	 eax, eax
  00073	89 45 f8	 mov	 DWORD PTR _y$2$[ebp], eax
  00076	39 83 dc 00 00
	00		 cmp	 DWORD PTR [ebx+220], eax
  0007c	0f 86 8a 00 00
	00		 jbe	 $LN8@OnRefreshS
$LL13@OnRefreshS:

; 326  : 	{
; 327  : 		TSlot * pSlot;
; 328  : 		if (!GetGridSlotPointer(x, y, &pSlot))

  00082	8d 4d f0	 lea	 ecx, DWORD PTR _pSlot$2[ebp]
  00085	51		 push	 ecx
  00086	50		 push	 eax
  00087	56		 push	 esi
  00088	8b cb		 mov	 ecx, ebx
  0008a	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  0008f	85 c0		 test	 eax, eax
  00091	74 66		 je	 SHORT $LN11@OnRefreshS

; 329  : 			continue;
; 330  : 
; 331  : 		if (pSlot->isItem)

  00093	8b 7d f0	 mov	 edi, DWORD PTR _pSlot$2[ebp]
  00096	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  0009a	0f 84 83 00 00
	00		 je	 $LN22@OnRefreshS

; 332  : 		{
; 333  : 			for (DWORD xSub = 0; xSub < pSlot->byxPlacedItemSize; ++xSub)

  000a0	33 db		 xor	 ebx, ebx
  000a2	38 5f 50	 cmp	 BYTE PTR [edi+80], bl
  000a5	76 4f		 jbe	 SHORT $LN57@OnRefreshS
$LL16@OnRefreshS:

; 334  : 			for (DWORD ySub = 0; ySub < pSlot->byyPlacedItemSize; ++ySub)

  000a7	33 f6		 xor	 esi, esi
  000a9	80 7f 51 00	 cmp	 BYTE PTR [edi+81], 0
  000ad	76 3b		 jbe	 SHORT $LN14@OnRefreshS
  000af	90		 npad	 1
$LL19@OnRefreshS:

; 335  : 			{
; 336  : 				TSlot * pSubSlot;
; 337  : 				if (!GetGridSlotPointer(x+xSub, y+ySub, &pSubSlot))

  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000b3	8d 45 ec	 lea	 eax, DWORD PTR _pSubSlot$1[ebp]
  000b6	50		 push	 eax
  000b7	8b 45 f8	 mov	 eax, DWORD PTR _y$2$[ebp]
  000ba	03 c6		 add	 eax, esi
  000bc	50		 push	 eax
  000bd	8b 45 f4	 mov	 eax, DWORD PTR _x$2$[ebp]
  000c0	03 c3		 add	 eax, ebx
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  000c8	85 c0		 test	 eax, eax
  000ca	74 15		 je	 SHORT $LN17@OnRefreshS

; 338  : 					continue;
; 339  : 
; 340  : 				pSubSlot->dwCenterSlotNumber = pSlot->dwSlotNumber;

  000cc	8b 4d ec	 mov	 ecx, DWORD PTR _pSubSlot$1[ebp]
  000cf	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000d2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 341  : 						pSubSlot->dwRealCenterSlotNumber = pSlot->dwRealSlotNumber;

  000d5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000d8	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 342  : 				pSubSlot->dwItemIndex = pSlot->dwItemIndex;

  000db	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  000de	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN17@OnRefreshS:

; 334  : 			for (DWORD ySub = 0; ySub < pSlot->byyPlacedItemSize; ++ySub)

  000e1	0f b6 47 51	 movzx	 eax, BYTE PTR [edi+81]
  000e5	46		 inc	 esi
  000e6	3b f0		 cmp	 esi, eax
  000e8	72 c6		 jb	 SHORT $LL19@OnRefreshS
$LN14@OnRefreshS:

; 332  : 		{
; 333  : 			for (DWORD xSub = 0; xSub < pSlot->byxPlacedItemSize; ++xSub)

  000ea	0f b6 47 50	 movzx	 eax, BYTE PTR [edi+80]
  000ee	43		 inc	 ebx
  000ef	3b d8		 cmp	 ebx, eax
  000f1	72 b4		 jb	 SHORT $LL16@OnRefreshS

; 343  : 			}
; 344  : 		}

  000f3	8b 75 f4	 mov	 esi, DWORD PTR _x$2$[ebp]
$LN57@OnRefreshS:

; 325  : 	for (y = 0; y < m_dwyCount; ++y)

  000f6	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN11@OnRefreshS:
  000f9	8b 45 f8	 mov	 eax, DWORD PTR _y$2$[ebp]
  000fc	40		 inc	 eax
  000fd	89 45 f8	 mov	 DWORD PTR _y$2$[ebp], eax
  00100	3b 83 dc 00 00
	00		 cmp	 eax, DWORD PTR [ebx+220]
  00106	0f 82 76 ff ff
	ff		 jb	 $LL13@OnRefreshS
$LN8@OnRefreshS:

; 322  : 	}
; 323  : 
; 324  : 	for (x = 0; x < m_dwxCount; ++x)

  0010c	46		 inc	 esi
  0010d	89 75 f4	 mov	 DWORD PTR _x$2$[ebp], esi
  00110	3b b3 d8 00 00
	00		 cmp	 esi, DWORD PTR [ebx+216]
  00116	0f 82 55 ff ff
	ff		 jb	 $LL10@OnRefreshS
$LN58@OnRefreshS:
  0011c	5e		 pop	 esi
$LN9@OnRefreshS:
  0011d	5f		 pop	 edi

; 348  : 		}
; 349  : 	}
; 350  : }

  0011e	5b		 pop	 ebx
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
$LN22@OnRefreshS:

; 345  : 		else
; 346  : 		{
; 347  : 			pSlot->dwItemIndex = 0;

  00123	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0012a	eb cd		 jmp	 SHORT $LN11@OnRefreshS
?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ ENDP		; UI::CGridSlotWindow::OnRefreshSlot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?OnIsType@CGridSlotWindow@UI@@MAEHK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?OnIsType@CGridSlotWindow@UI@@MAEHK@Z PROC		; UI::CGridSlotWindow::OnIsType, COMDAT
; _this$ = ecx

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 450  : 	if (CGridSlotWindow::Type() == dwType)

  00006	e8 00 00 00 00	 call	 ?Type@CGridSlotWindow@UI@@SAKXZ ; UI::CGridSlotWindow::Type
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwType$[ebp]
  0000e	3b c2		 cmp	 eax, edx
  00010	75 0a		 jne	 SHORT $LN2@OnIsType

; 451  : 		return TRUE;

  00012	b8 01 00 00 00	 mov	 eax, 1
  00017	5e		 pop	 esi

; 454  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@OnIsType:

; 452  : 
; 453  : 	return CSlotWindow::OnIsType(dwType);

  0001c	52		 push	 edx
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?OnIsType@CSlotWindow@UI@@MAEHK@Z ; UI::CSlotWindow::OnIsType
  00024	5e		 pop	 esi

; 454  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?OnIsType@CGridSlotWindow@UI@@MAEHK@Z ENDP		; UI::CGridSlotWindow::OnIsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
_TEXT	SEGMENT
_dwRealSlotNumber$ = 8					; size = 4
_dwItemIndex$ = 12					; size = 4
_c_rSlotList$ = 16					; size = 4
?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z PROC ; UI::CGridSlotWindow::CheckMoving, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 354  : 	if (m_dwSlotStyle != SLOT_STYLE_PICK_UP)

  00003	83 b9 80 00 00
	00 01		 cmp	 DWORD PTR [ecx+128], 1
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	75 32		 jne	 SHORT $LN37@CheckMovin
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1087 :         return const_iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _c_rSlotList$[ebp]
  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	3b c1		 cmp	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 357  : 	for (std::list<TSlot*>::const_iterator itor = c_rSlotList.begin(); itor != c_rSlotList.end(); ++itor)

  00018	74 27		 je	 SHORT $LN37@CheckMovin
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR _dwItemIndex$[ebp]
  0001d	0f 1f 00	 npad	 3
$LL18@CheckMovin:

; 358  : 	{
; 359  : 		TSlot * pSlot = *itor;

  00020	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 360  : 
; 361  : 		if (dwRealSlotNumber != pSlot->dwRealCenterSlotNumber)

  00023	8b 72 10	 mov	 esi, DWORD PTR [edx+16]
  00026	39 75 08	 cmp	 DWORD PTR _dwRealSlotNumber$[ebp], esi
  00029	74 10		 je	 SHORT $LN2@CheckMovin

; 362  : 		{
; 363  : 			if (0 != pSlot->dwItemIndex || pSlot->dwRealCenterSlotNumber != pSlot->dwRealSlotNumber)

  0002b	8b 7a 14	 mov	 edi, DWORD PTR [edx+20]
  0002e	85 ff		 test	 edi, edi
  00030	75 05		 jne	 SHORT $LN35@CheckMovin
  00032	3b 72 0c	 cmp	 esi, DWORD PTR [edx+12]
  00035	74 04		 je	 SHORT $LN2@CheckMovin
$LN35@CheckMovin:

; 364  : 			{
; 365  : 				if (dwItemIndex != pSlot->dwItemIndex)

  00037	3b df		 cmp	 ebx, edi
  00039	75 12		 jne	 SHORT $LN32@CheckMovin
$LN2@CheckMovin:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0003b	8b 00		 mov	 eax, DWORD PTR [eax]

; 198  :         return this->_Ptr == _Right._Ptr;

  0003d	3b c1		 cmp	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 357  : 	for (std::list<TSlot*>::const_iterator itor = c_rSlotList.begin(); itor != c_rSlotList.end(); ++itor)

  0003f	75 df		 jne	 SHORT $LL18@CheckMovin
$LN37@CheckMovin:
  00041	5f		 pop	 edi

; 366  : 					return false;
; 367  : 			}
; 368  : 		}
; 369  : 	}
; 370  : 
; 371  : 	return true;
; 372  : }

  00042	5e		 pop	 esi
  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	5b		 pop	 ebx
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN32@CheckMovin:
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	33 c0		 xor	 eax, eax
  00051	5b		 pop	 ebx
  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ENDP ; UI::CGridSlotWindow::CheckMoving
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z
_TEXT	SEGMENT
_pSlot$1 = -8						; size = 4
_x$1$ = -4						; size = 4
_ixLocal$ = 8						; size = 4
_iyLocal$ = 12						; size = 4
_pix$ = 16						; size = 4
_piy$ = 20						; size = 4
?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z PROC ; UI::CGridSlotWindow::GetPickedGridSlotPosition, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi

; 261  : 	for (DWORD x = 0; x < m_dwxCount; ++x)

  0000b	33 ff		 xor	 edi, edi
  0000d	89 7d fc	 mov	 DWORD PTR _x$1$[ebp], edi
  00010	39 bb d8 00 00
	00		 cmp	 DWORD PTR [ebx+216], edi
  00016	76 68		 jbe	 SHORT $LN26@GetPickedG
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetPickedG:

; 262  : 	for (DWORD y = 0; y < m_dwyCount; ++y)

  00020	33 f6		 xor	 esi, esi
  00022	39 b3 dc 00 00
	00		 cmp	 DWORD PTR [ebx+220], esi
  00028	76 4a		 jbe	 SHORT $LN2@GetPickedG
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL7@GetPickedG:

; 263  : 	{
; 264  : 		TSlot * pSlot;
; 265  : 		if (!GetGridSlotPointer(x, y, &pSlot))

  00030	8d 45 f8	 lea	 eax, DWORD PTR _pSlot$1[ebp]
  00033	8b cb		 mov	 ecx, ebx
  00035	50		 push	 eax
  00036	56		 push	 esi
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  0003d	85 c0		 test	 eax, eax
  0003f	74 2a		 je	 SHORT $LN5@GetPickedG

; 266  : 			continue;
; 267  : 
; 268  : 		if (ixLocal >= pSlot->ixPosition)

  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pSlot$1[ebp]
  00044	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00047	39 55 08	 cmp	 DWORD PTR _ixLocal$[ebp], edx
  0004a	7c 1f		 jl	 SHORT $LN5@GetPickedG

; 269  : 		if (iyLocal >= pSlot->iyPosition)

  0004c	8b 79 44	 mov	 edi, DWORD PTR [ecx+68]
  0004f	39 7d 0c	 cmp	 DWORD PTR _iyLocal$[ebp], edi
  00052	7c 14		 jl	 SHORT $LN29@GetPickedG

; 270  : 		if (ixLocal <= pSlot->ixPosition + pSlot->ixCellSize)

  00054	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  00057	03 c2		 add	 eax, edx
  00059	39 45 08	 cmp	 DWORD PTR _ixLocal$[ebp], eax
  0005c	7f 0a		 jg	 SHORT $LN29@GetPickedG

; 271  : 		if (iyLocal <= pSlot->iyPosition + pSlot->iyCellSize)

  0005e	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00061	03 c7		 add	 eax, edi
  00063	39 45 0c	 cmp	 DWORD PTR _iyLocal$[ebp], eax
  00066	7e 23		 jle	 SHORT $LN16@GetPickedG
$LN29@GetPickedG:

; 262  : 	for (DWORD y = 0; y < m_dwyCount; ++y)

  00068	8b 7d fc	 mov	 edi, DWORD PTR _x$1$[ebp]
$LN5@GetPickedG:
  0006b	46		 inc	 esi
  0006c	3b b3 dc 00 00
	00		 cmp	 esi, DWORD PTR [ebx+220]
  00072	72 bc		 jb	 SHORT $LL7@GetPickedG
$LN2@GetPickedG:

; 261  : 	for (DWORD x = 0; x < m_dwxCount; ++x)

  00074	47		 inc	 edi
  00075	89 7d fc	 mov	 DWORD PTR _x$1$[ebp], edi
  00078	3b bb d8 00 00
	00		 cmp	 edi, DWORD PTR [ebx+216]
  0007e	72 a0		 jb	 SHORT $LL4@GetPickedG
$LN26@GetPickedG:
  00080	5f		 pop	 edi

; 276  : 		}
; 277  : 	}
; 278  : 
; 279  : 	return FALSE;
; 280  : }

  00081	5e		 pop	 esi
  00082	33 c0		 xor	 eax, eax
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 10 00	 ret	 16			; 00000010H
$LN16@GetPickedG:

; 272  : 		{
; 273  : 			*pix = x;

  0008b	8b 45 10	 mov	 eax, DWORD PTR _pix$[ebp]
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _x$1$[ebp]
  00091	5f		 pop	 edi
  00092	89 08		 mov	 DWORD PTR [eax], ecx

; 274  : 			*piy = y;

  00094	8b 45 14	 mov	 eax, DWORD PTR _piy$[ebp]
  00097	89 30		 mov	 DWORD PTR [eax], esi

; 275  : 			return TRUE;

  00099	b8 01 00 00 00	 mov	 eax, 1

; 276  : 		}
; 277  : 	}
; 278  : 
; 279  : 	return FALSE;
; 280  : }

  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 10 00	 ret	 16			; 00000010H
?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z ENDP ; UI::CGridSlotWindow::GetPickedGridSlotPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetSlotPointerByNumber@CGridSlotWindow@UI@@IAEHKPAPAUSSlot@CSlotWindow@2@@Z
_TEXT	SEGMENT
_dwSlotNumber$ = 8					; size = 4
_ppSlot$ = 12						; size = 4
?GetSlotPointerByNumber@CGridSlotWindow@UI@@IAEHKPAPAUSSlot@CSlotWindow@2@@Z PROC ; UI::CGridSlotWindow::GetSlotPointerByNumber, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 81 e4 00 00
	00		 mov	 eax, DWORD PTR [ecx+228]
  00009	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  0000f	2b c2		 sub	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 251  : 	if (dwSlotNumber >= m_SlotVector.size())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _dwSlotNumber$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 251  : 	if (dwSlotNumber >= m_SlotVector.size())

  00017	3b c8		 cmp	 ecx, eax
  00019	72 06		 jb	 SHORT $LN2@GetSlotPoi

; 252  : 		return false;

  0001b	33 c0		 xor	 eax, eax

; 257  : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
$LN2@GetSlotPoi:

; 253  : 
; 254  : 	*ppSlot = m_SlotVector[dwSlotNumber];

  00021	8b 45 0c	 mov	 eax, DWORD PTR _ppSlot$[ebp]
  00024	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00027	89 08		 mov	 DWORD PTR [eax], ecx

; 255  : 
; 256  : 	return true;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 257  : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?GetSlotPointerByNumber@CGridSlotWindow@UI@@IAEHKPAPAUSSlot@CSlotWindow@2@@Z ENDP ; UI::CGridSlotWindow::GetSlotPointerByNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z
_TEXT	SEGMENT
_ix$ = 8						; size = 4
_iy$ = 12						; size = 4
_ppSlot$ = 16						; size = 4
?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z PROC ; UI::CGridSlotWindow::GetGridSlotPointer, COMDAT
; _this$ = ecx

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 240  : 	DWORD dwSlotIndex = ix + iy*m_dwxCount;

  00003	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  00009	0f af 55 0c	 imul	 edx, DWORD PTR _iy$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000d	8b 81 e4 00 00
	00		 mov	 eax, DWORD PTR [ecx+228]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 239  : {

  00013	56		 push	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1536 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	8b b1 e0 00 00
	00		 mov	 esi, DWORD PTR [ecx+224]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 240  : 	DWORD dwSlotIndex = ix + iy*m_dwxCount;

  0001f	03 55 08	 add	 edx, DWORD PTR _ix$[ebp]

; 241  : 	if (dwSlotIndex >= m_SlotVector.size())

  00022	3b d0		 cmp	 edx, eax
  00024	72 07		 jb	 SHORT $LN2@GetGridSlo

; 242  : 		return FALSE;

  00026	33 c0		 xor	 eax, eax
  00028	5e		 pop	 esi

; 247  : }

  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetGridSlo:

; 243  : 
; 244  : 	*ppSlot = m_SlotVector[dwSlotIndex];

  0002d	8b 45 10	 mov	 eax, DWORD PTR _ppSlot$[ebp]
  00030	8b 0c 96	 mov	 ecx, DWORD PTR [esi+edx*4]
  00033	5e		 pop	 esi
  00034	89 08		 mov	 DWORD PTR [eax], ecx

; 245  : 
; 246  : 	return TRUE;

  00036	b8 01 00 00 00	 mov	 eax, 1

; 247  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ENDP ; UI::CGridSlotWindow::GetGridSlotPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -44						; size = 8
__Op$3 = -44						; size = 8
_pSlot$4 = -36						; size = 4
_iyEnd$2$ = -32						; size = 4
_ix$ = -32						; size = 4
_lx$ = -28						; size = 4
_ly$ = -24						; size = 4
_this$1$ = -20						; size = 4
_iyStart$2$ = -16					; size = 4
_iy$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pSlot$1$ = 8						; size = 4
_ixEnd$1$ = 8						; size = 4
tv1570 = 8						; size = 4
_iWidth$ = 8						; size = 4
_pMainSlot$1$ = 12					; size = 4
_i$1$ = 12						; size = 4
_iHeight$ = 12						; size = 4
_pSlotPointerList$ = 16					; size = 4
?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z PROC ; UI::CGridSlotWindow::GetPickedSlotList, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 138  : 	long lx, ly;
; 139  : 	GetMouseLocalPosition(lx, ly);

  0002d	8d 45 e8	 lea	 eax, DWORD PTR _ly$[ebp]
  00030	50		 push	 eax
  00031	8d 45 e4	 lea	 eax, DWORD PTR _lx$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?GetMouseLocalPosition@CWindow@UI@@QAEXAAJ0@Z ; UI::CWindow::GetMouseLocalPosition

; 140  : 
; 141  : 	if (lx < 0)

  0003a	8b 4d e4	 mov	 ecx, DWORD PTR _lx$[ebp]
  0003d	85 c9		 test	 ecx, ecx
  0003f	0f 88 a0 02 00
	00		 js	 $LN29@GetPickedS

; 142  : 		return FALSE;
; 143  : 	if (ly < 0)

  00045	8b 45 e8	 mov	 eax, DWORD PTR _ly$[ebp]
  00048	85 c0		 test	 eax, eax
  0004a	0f 88 95 02 00
	00		 js	 $LN29@GetPickedS

; 144  : 		return FALSE;
; 145  : 	if (lx >= GetWidth())

  00050	3b 4b 2c	 cmp	 ecx, DWORD PTR [ebx+44]
  00053	0f 8d 8c 02 00
	00		 jge	 $LN29@GetPickedS

; 146  : 		return FALSE;
; 147  : 	if (ly >= GetHeight())

  00059	3b 43 30	 cmp	 eax, DWORD PTR [ebx+48]
  0005c	0f 8d 83 02 00
	00		 jge	 $LN29@GetPickedS
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1420 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00062	8b 7d 10	 mov	 edi, DWORD PTR _pSlotPointerList$[ebp]
  00065	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 323  :         _Head->_Prev->_Next = nullptr;

  00067	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0006a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  00070	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00072	85 c0		 test	 eax, eax
  00074	74 13		 je	 SHORT $LN35@GetPickedS
$LL36@GetPickedS:

; 327  :             _Pnext = _Pnode->_Next;

  00076	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00078	6a 0c		 push	 12			; 0000000cH
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00080	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00083	8b c6		 mov	 eax, esi
  00085	85 f6		 test	 esi, esi
  00087	75 ed		 jne	 SHORT $LL36@GetPickedS
$LN35@GetPickedS:

; 1421 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00089	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 153  : 	if (GetPickedGridSlotPosition(lx, ly, &ix, &iy))

  0008b	8b cb		 mov	 ecx, ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1421 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0008d	89 00		 mov	 DWORD PTR [eax], eax

; 1422 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  0008f	8b 07		 mov	 eax, DWORD PTR [edi]
  00091	89 40 04	 mov	 DWORD PTR [eax+4], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 153  : 	if (GetPickedGridSlotPosition(lx, ly, &ix, &iy))

  00094	8d 45 f0	 lea	 eax, DWORD PTR _iy$[ebp]
  00097	50		 push	 eax
  00098	8d 45 e0	 lea	 eax, DWORD PTR _ix$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1423 :         _My_data._Mysize        = 0;

  0009b	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 153  : 	if (GetPickedGridSlotPosition(lx, ly, &ix, &iy))

  000a2	50		 push	 eax
  000a3	ff 75 e8	 push	 DWORD PTR _ly$[ebp]
  000a6	ff 75 e4	 push	 DWORD PTR _lx$[ebp]
  000a9	e8 00 00 00 00	 call	 ?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z ; UI::CGridSlotWindow::GetPickedGridSlotPosition
  000ae	85 c0		 test	 eax, eax
  000b0	0f 84 2f 02 00
	00		 je	 $LN29@GetPickedS

; 154  : 	{
; 155  : 		int ixHalfStep = (iWidth / 2);

  000b6	8b 45 08	 mov	 eax, DWORD PTR _iWidth$[ebp]
  000b9	99		 cdq
  000ba	2b c2		 sub	 eax, edx
  000bc	d1 f8		 sar	 eax, 1

; 156  : 		//int iyHalfStep = (iHeight / 2);
; 157  : 
; 158  : 		int ixStart = int(ix) - int(ixHalfStep - (ixHalfStep % 2));

  000be	8b d0		 mov	 edx, eax
  000c0	81 e2 01 00 00
	80		 and	 edx, -2147483647	; 80000001H
  000c6	79 05		 jns	 SHORT $LN304@GetPickedS
  000c8	4a		 dec	 edx
  000c9	83 ca fe	 or	 edx, -2			; fffffffeH
  000cc	42		 inc	 edx
$LN304@GetPickedS:
  000cd	8b 4d e0	 mov	 ecx, DWORD PTR _ix$[ebp]
  000d0	2b d0		 sub	 edx, eax
  000d2	03 d1		 add	 edx, ecx

; 159  : 		int ixEnd = int(ix) + int(ixHalfStep);
; 160  : 
; 161  : 		int iyStart = 0, iyEnd = 0;

  000d4	33 f6		 xor	 esi, esi
  000d6	89 55 08	 mov	 DWORD PTR tv1570[ebp], edx
  000d9	33 d2		 xor	 edx, edx
  000db	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]

; 162  : 
; 163  : 		if (1 == iHeight)

  000de	8b 45 0c	 mov	 eax, DWORD PTR _iHeight$[ebp]
  000e1	83 f8 01	 cmp	 eax, 1
  000e4	75 07		 jne	 SHORT $LN16@GetPickedS

; 164  : 		{
; 165  : 			iyStart = iy;

  000e6	8b 55 f0	 mov	 edx, DWORD PTR _iy$[ebp]

; 166  : 			iyEnd = iy;

  000e9	8b f2		 mov	 esi, edx

; 167  : 		}

  000eb	eb 1b		 jmp	 SHORT $LN20@GetPickedS
$LN16@GetPickedS:

; 168  : 		else if (2 == iHeight)

  000ed	83 f8 02	 cmp	 eax, 2
  000f0	75 08		 jne	 SHORT $LN18@GetPickedS

; 169  : 		{
; 170  : 			iyStart = iy;

  000f2	8b 55 f0	 mov	 edx, DWORD PTR _iy$[ebp]
  000f5	8d 72 01	 lea	 esi, DWORD PTR [edx+1]

; 171  : 			iyEnd = iy + 1;
; 172  : 		}

  000f8	eb 0e		 jmp	 SHORT $LN20@GetPickedS
$LN18@GetPickedS:

; 173  : 		else if (3 == iHeight)

  000fa	83 f8 03	 cmp	 eax, 3
  000fd	75 09		 jne	 SHORT $LN20@GetPickedS

; 174  : 		{
; 175  : 			iyStart = iy - 1;

  000ff	8b 45 f0	 mov	 eax, DWORD PTR _iy$[ebp]
  00102	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]

; 176  : 			iyEnd = iy + 1;

  00105	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LN20@GetPickedS:

; 177  : 		}
; 178  : 
; 179  : 		if (ixStart < 0)
; 180  : 		{
; 181  : 			ixEnd += -ixStart;
; 182  : 			ixStart = 0;
; 183  : 		}
; 184  : 
; 185  : 		if (iyStart < 0)

  00108	8b 4d 08	 mov	 ecx, DWORD PTR tv1570[ebp]
  0010b	8b c3		 mov	 eax, ebx
  0010d	2b c1		 sub	 eax, ecx
  0010f	85 c9		 test	 ecx, ecx
  00111	0f 49 c3	 cmovns	 eax, ebx
  00114	33 db		 xor	 ebx, ebx
  00116	85 c9		 test	 ecx, ecx
  00118	89 45 08	 mov	 DWORD PTR _ixEnd$1$[ebp], eax
  0011b	0f 49 d9	 cmovns	 ebx, ecx

; 186  : 		{
; 187  : 			iyEnd += -iyStart;
; 188  : 			iyStart = 0;
; 189  : 		}
; 190  : 
; 191  : 		if (DWORD(ixEnd) >= m_dwxCount)

  0011e	8b ce		 mov	 ecx, esi
  00120	2b ca		 sub	 ecx, edx
  00122	89 5d 0c	 mov	 DWORD PTR _i$1$[ebp], ebx
  00125	85 d2		 test	 edx, edx
  00127	0f 49 ce	 cmovns	 ecx, esi
  0012a	33 f6		 xor	 esi, esi
  0012c	85 d2		 test	 edx, edx
  0012e	89 4d e0	 mov	 DWORD PTR _iyEnd$2$[ebp], ecx
  00131	0f 49 f2	 cmovns	 esi, edx
  00134	8b 55 ec	 mov	 edx, DWORD PTR _this$1$[ebp]
  00137	89 75 f0	 mov	 DWORD PTR _iyStart$2$[ebp], esi
  0013a	3b 82 d8 00 00
	00		 cmp	 eax, DWORD PTR [edx+216]
  00140	72 0f		 jb	 SHORT $LN23@GetPickedS

; 192  : 		{
; 193  : 			int ixTemporary = DWORD(ixEnd) - m_dwxCount + 1;

  00142	2b 82 d8 00 00
	00		 sub	 eax, DWORD PTR [edx+216]
  00148	40		 inc	 eax

; 194  : 			ixStart -= ixTemporary;

  00149	2b d8		 sub	 ebx, eax

; 195  : 			ixEnd -= ixTemporary;

  0014b	29 45 08	 sub	 DWORD PTR _ixEnd$1$[ebp], eax
  0014e	89 5d 0c	 mov	 DWORD PTR _i$1$[ebp], ebx
$LN23@GetPickedS:

; 196  : 		}
; 197  : 
; 198  : 		if (DWORD(iyEnd) >= m_dwyCount)

  00151	3b 8a dc 00 00
	00		 cmp	 ecx, DWORD PTR [edx+220]
  00157	72 13		 jb	 SHORT $LN24@GetPickedS

; 199  : 		{
; 200  : 			int iyTemporary = DWORD(iyEnd) - m_dwyCount + 1;

  00159	8b c1		 mov	 eax, ecx
  0015b	2b 82 dc 00 00
	00		 sub	 eax, DWORD PTR [edx+220]
  00161	40		 inc	 eax

; 201  : 			iyStart -= iyTemporary;

  00162	2b f0		 sub	 esi, eax

; 202  : 			iyEnd -= iyTemporary;

  00164	2b c8		 sub	 ecx, eax
  00166	89 75 f0	 mov	 DWORD PTR _iyStart$2$[ebp], esi
  00169	89 4d e0	 mov	 DWORD PTR _iyEnd$2$[ebp], ecx
$LN24@GetPickedS:

; 203  : 		}
; 204  : 
; 205  : 		for (int i = ixStart; i <= ixEnd; ++i)

  0016c	8b 45 08	 mov	 eax, DWORD PTR _ixEnd$1$[ebp]
  0016f	3b d8		 cmp	 ebx, eax
  00171	0f 8f 88 00 00
	00		 jg	 $LN3@GetPickedS
$LL4@GetPickedS:

; 206  : 		for (int j = iyStart; j <= iyEnd; ++j)

  00177	39 4d f0	 cmp	 DWORD PTR _iyStart$2$[ebp], ecx
  0017a	7f 74		 jg	 SHORT $LN2@GetPickedS
  0017c	0f 1f 40 00	 npad	 4
$LL7@GetPickedS:

; 207  : 		{
; 208  : 			TSlot * pSlot;
; 209  : 			if (GetGridSlotPointer(DWORD(i), DWORD(j), &pSlot))

  00180	8d 45 dc	 lea	 eax, DWORD PTR _pSlot$4[ebp]
  00183	8b ca		 mov	 ecx, edx
  00185	50		 push	 eax
  00186	56		 push	 esi
  00187	53		 push	 ebx
  00188	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  0018d	85 c0		 test	 eax, eax
  0018f	74 51		 je	 SHORT $LN5@GetPickedS
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1005 :         if (_Mysize == max_size()) {

  00191	81 7f 04 55 55
	55 15		 cmp	 DWORD PTR [edi+4], 357913941 ; 15555555H

; 1243 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00198	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1005 :         if (_Mysize == max_size()) {

  0019a	0f 84 5b 01 00
	00		 je	 $LN283@GetPickedS
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  001a0	89 7d d4	 mov	 DWORD PTR __Op$3[ebp], edi

; 79   :         return ::operator new(_Bytes);

  001a3	6a 0c		 push	 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 582  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  001a5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001ac	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Op$3[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  001b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 584  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001b8	8b 4d dc	 mov	 ecx, DWORD PTR _pSlot$4[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  001bb	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 585  :     }

  001be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 601  :         this->_Ptr            = pointer{};

  001c5	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Op$3[ebp+4], 0

; 584  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001cc	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1010 :         ++_Mysize;

  001cf	ff 47 04	 inc	 DWORD PTR [edi+4]

; 597  :         const pointer _Insert_after = _Insert_before->_Prev;

  001d2	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 598  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  001d5	89 18		 mov	 DWORD PTR [eax], ebx

; 599  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  001d7	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 602  :         _Insert_before->_Prev = _Result;

  001da	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  001dd	8b 5d 0c	 mov	 ebx, DWORD PTR _i$1$[ebp]

; 603  :         _Insert_after->_Next  = _Result;

  001e0	89 01		 mov	 DWORD PTR [ecx], eax
$LN5@GetPickedS:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 206  : 		for (int j = iyStart; j <= iyEnd; ++j)

  001e2	8b 4d e0	 mov	 ecx, DWORD PTR _iyEnd$2$[ebp]
  001e5	46		 inc	 esi
  001e6	8b 55 ec	 mov	 edx, DWORD PTR _this$1$[ebp]
  001e9	3b f1		 cmp	 esi, ecx
  001eb	7e 93		 jle	 SHORT $LL7@GetPickedS
  001ed	8b 45 08	 mov	 eax, DWORD PTR _ixEnd$1$[ebp]
$LN2@GetPickedS:

; 203  : 		}
; 204  : 
; 205  : 		for (int i = ixStart; i <= ixEnd; ++i)

  001f0	8b 75 f0	 mov	 esi, DWORD PTR _iyStart$2$[ebp]
  001f3	43		 inc	 ebx
  001f4	89 5d 0c	 mov	 DWORD PTR _i$1$[ebp], ebx
  001f7	3b d8		 cmp	 ebx, eax
  001f9	0f 8e 78 ff ff
	ff		 jle	 $LL4@GetPickedS
$LN3@GetPickedS:

; 210  : 			{
; 211  : 				pSlotPointerList->push_back(pSlot);
; 212  : 			}
; 213  : 		}
; 214  : 
; 215  : 		if (m_isUseMode && 1 == pSlotPointerList->size())

  001ff	83 ba a0 00 00
	00 00		 cmp	 DWORD PTR [edx+160], 0
  00206	0f 84 ba 00 00
	00		 je	 $LN301@GetPickedS
  0020c	83 7f 04 01	 cmp	 DWORD PTR [edi+4], 1
  00210	0f 85 b0 00 00
	00		 jne	 $LN301@GetPickedS
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1083 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00216	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 41   :     _CONSTEXPR20_CONTAINER _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00218	8b b2 e0 00 00
	00		 mov	 esi, DWORD PTR [edx+224]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0021e	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 217  : 			TSlot * pMainSlot = *pSlotPointerList->begin();

  00220	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00223	89 4d 0c	 mov	 DWORD PTR _pMainSlot$1$[ebp], ecx

; 220  : 			for (; itor != m_SlotVector.end(); ++itor)

  00226	3b b2 e4 00 00
	00		 cmp	 esi, DWORD PTR [edx+228]
  0022c	0f 84 94 00 00
	00		 je	 $LN301@GetPickedS
$LL142@GetPickedS:

; 221  : 			{
; 222  : 				TSlot * pSlot = *itor;

  00232	8b 06		 mov	 eax, DWORD PTR [esi]
  00234	89 45 08	 mov	 DWORD PTR _pSlot$1$[ebp], eax

; 223  : 				if (pSlot->dwCenterSlotNumber == pMainSlot->dwCenterSlotNumber)

  00237	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0023a	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0023d	75 74		 jne	 SHORT $LN8@GetPickedS
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0023f	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00241	8b 03		 mov	 eax, DWORD PTR [ebx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  00243	3b d8		 cmp	 ebx, eax
  00245	74 1d		 je	 SHORT $LN307@GetPickedS
  00247	8b 7d 08	 mov	 edi, DWORD PTR _pSlot$1$[ebp]
  0024a	66 0f 1f 44 00
	00		 npad	 6
$LL198@GetPickedS:

; 5186 :         if (*_First == _Val) {

  00250	39 78 08	 cmp	 DWORD PTR [eax+8], edi
  00253	74 08		 je	 SHORT $LN302@GetPickedS
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 51   :         _Ptr = _Ptr->_Next;

  00255	8b 08		 mov	 ecx, DWORD PTR [eax]
  00257	8b c1		 mov	 eax, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 5185 :     for (; _First != _Last; ++_First) {

  00259	3b cb		 cmp	 ecx, ebx
  0025b	75 f3		 jne	 SHORT $LL198@GetPickedS
$LN302@GetPickedS:
  0025d	8b 7d 10	 mov	 edi, DWORD PTR _pSlotPointerList$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 224  : 				if (pSlotPointerList->end() == std::find(pSlotPointerList->begin(), pSlotPointerList->end(), pSlot))

  00260	3b d8		 cmp	 ebx, eax
  00262	75 4f		 jne	 SHORT $LN8@GetPickedS
$LN307@GetPickedS:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1005 :         if (_Mysize == max_size()) {

  00264	81 7f 04 55 55
	55 15		 cmp	 DWORD PTR [edi+4], 357913941 ; 15555555H
  0026b	0f 84 8a 00 00
	00		 je	 $LN283@GetPickedS
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 958  :     _CONSTEXPR20_DYNALLOC explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00271	89 7d d4	 mov	 DWORD PTR __Op$2[ebp], edi

; 79   :         return ::operator new(_Bytes);

  00274	6a 0c		 push	 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 582  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00276	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 965  :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0027d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 79   :         return ::operator new(_Bytes);

  00284	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 584  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00289	8b 4d 08	 mov	 ecx, DWORD PTR _pSlot$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0028c	83 c4 04	 add	 esp, 4
  0028f	8b 55 ec	 mov	 edx, DWORD PTR _this$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 585  :     }

  00292	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00299	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1010 :         ++_Mysize;

  0029c	ff 47 04	 inc	 DWORD PTR [edi+4]

; 597  :         const pointer _Insert_after = _Insert_before->_Prev;

  0029f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 598  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  002a2	89 18		 mov	 DWORD PTR [eax], ebx

; 599  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  002a4	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 602  :         _Insert_before->_Prev = _Result;

  002a7	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  002aa	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 603  :         _Insert_after->_Next  = _Result;

  002b1	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@GetPickedS:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 74   :         ++_Ptr;

  002b3	83 c6 04	 add	 esi, 4

; 150  :         return _Ptr == _Right._Ptr;

  002b6	3b b2 e4 00 00
	00		 cmp	 esi, DWORD PTR [edx+228]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 220  : 			for (; itor != m_SlotVector.end(); ++itor)

  002bc	74 08		 je	 SHORT $LN301@GetPickedS
  002be	8b 4d 0c	 mov	 ecx, DWORD PTR _pMainSlot$1$[ebp]
  002c1	e9 6c ff ff ff	 jmp	 $LL142@GetPickedS
$LN301@GetPickedS:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1191 :         return _Mypair._Myval2._Mysize == 0;

  002c6	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 231  : 		if (!pSlotPointerList->empty())

  002ca	74 19		 je	 SHORT $LN29@GetPickedS

; 232  : 			return TRUE;

  002cc	b8 01 00 00 00	 mov	 eax, 1

; 236  : }

  002d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002db	59		 pop	 ecx
  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi
  002de	5b		 pop	 ebx
  002df	8b e5		 mov	 esp, ebp
  002e1	5d		 pop	 ebp
  002e2	c2 0c 00	 ret	 12			; 0000000cH
$LN29@GetPickedS:

; 233  : 	}
; 234  : 
; 235  : 	return FALSE;

  002e5	33 c0		 xor	 eax, eax

; 236  : }

  002e7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f1	59		 pop	 ecx
  002f2	5f		 pop	 edi
  002f3	5e		 pop	 esi
  002f4	5b		 pop	 ebx
  002f5	8b e5		 mov	 esp, ebp
  002f7	5d		 pop	 ebp
  002f8	c2 0c 00	 ret	 12			; 0000000cH
$LN283@GetPickedS:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1006 :             _Xlength_error("list too long");

  002fb	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00300	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN305@GetPickedS:
  00305	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z$1:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Op$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
__unwindfunclet$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z$4:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Op$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ENDP ; UI::CGridSlotWindow::GetPickedSlotList
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
_TEXT	SEGMENT
_SlotList$ = -28					; size = 8
_pCenterSlot$2 = -20					; size = 4
_byWidth$ = -14						; size = 1
_byHeight$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_ppSlot$ = 8						; size = 4
?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z PROC ; UI::CGridSlotWindow::GetPickedSlotPointer, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx

; 72   : 	if (!UI::CWindowManager::Instance().IsAttaching())

  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  00035	85 c0		 test	 eax, eax
  00037	75 1e		 jne	 SHORT $LN5@GetPickedS

; 73   : 		return CSlotWindow::GetPickedSlotPointer(ppSlot);

  00039	ff 75 08	 push	 DWORD PTR _ppSlot$[ebp]
  0003c	8b cb		 mov	 ecx, ebx
  0003e	e8 00 00 00 00	 call	 ?GetPickedSlotPointer@CSlotWindow@UI@@MAEHPAPAUSSlot@12@@Z ; UI::CSlotWindow::GetPickedSlotPointer

; 134  : }

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN5@GetPickedS:

; 74   : 
; 75   : 	BYTE byWidth, byHeight;
; 76   : 	UI::CWindowManager::Instance().GetAttachingIconSize(&byWidth, &byHeight);

  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  0005d	8d 45 f3	 lea	 eax, DWORD PTR _byHeight$[ebp]
  00060	50		 push	 eax
  00061	8d 45 f2	 lea	 eax, DWORD PTR _byWidth$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z ; UI::CWindowManager::GetAttachingIconSize
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0006a	6a 0c		 push	 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 352  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0006c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp], 0
  00073	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp+4], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007f	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 1767 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00082	89 00		 mov	 DWORD PTR [eax], eax

; 1768 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00084	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1769 :         _Mypair._Myval2._Myhead = _Newhead;

  00087	89 45 e4	 mov	 DWORD PTR _SlotList$[ebp], eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 79   : 	if (!GetPickedSlotList(byWidth, byHeight, &SlotList))

  0008a	8d 45 e4	 lea	 eax, DWORD PTR _SlotList$[ebp]
  0008d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00094	50		 push	 eax
  00095	0f b6 45 f3	 movzx	 eax, BYTE PTR _byHeight$[ebp]
  00099	8b cb		 mov	 ecx, ebx
  0009b	50		 push	 eax
  0009c	0f b6 45 f2	 movzx	 eax, BYTE PTR _byWidth$[ebp]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::GetPickedSlotList
  000a6	85 c0		 test	 eax, eax
  000a8	0f 84 88 00 00
	00		 je	 $LN302@GetPickedS
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000ae	8b 7d e4	 mov	 edi, DWORD PTR _SlotList$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 82   : 	TSlot * pMinSlot = NULL;

  000b1	33 f6		 xor	 esi, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000b3	8b 07		 mov	 eax, DWORD PTR [edi]

; 198  :         return this->_Ptr == _Right._Ptr;

  000b5	3b c7		 cmp	 eax, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 86   : 	for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  000b7	0f 84 7c 00 00
	00		 je	 $LN20@GetPickedS
  000bd	0f 1f 00	 npad	 3
$LL111@GetPickedS:

; 87   : 	{
; 88   : 		TSlot * pSlot = *itor;

  000c0	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 89   : 
; 90   : 		if (!pMinSlot)

  000c3	85 f6		 test	 esi, esi
  000c5	75 04		 jne	 SHORT $LN7@GetPickedS

; 91   : 		{
; 92   : 			pMinSlot = pSlot;

  000c7	8b f2		 mov	 esi, edx

; 93   : 		}

  000c9	eb 19		 jmp	 SHORT $LN2@GetPickedS
$LN7@GetPickedS:

; 94   : 		else
; 95   : 		{
; 96   : 			if (pSlot->dwSlotNumber < pMinSlot->dwSlotNumber)

  000cb	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ce	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  000d1	73 04		 jae	 SHORT $LN9@GetPickedS

; 97   : 			{
; 98   : 				pMinSlot = pSlot;

  000d3	8b f2		 mov	 esi, edx

; 99   : 			}

  000d5	eb 0d		 jmp	 SHORT $LN2@GetPickedS
$LN9@GetPickedS:

; 100  : 			else
; 101  : 			{
; 102  : 				if (!pMinSlot->isItem && pSlot->isItem)

  000d7	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  000db	75 07		 jne	 SHORT $LN2@GetPickedS
  000dd	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  000e1	0f 45 f2	 cmovne	 esi, edx
$LN2@GetPickedS:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  000e4	8b 00		 mov	 eax, DWORD PTR [eax]

; 198  :         return this->_Ptr == _Right._Ptr;

  000e6	3b c7		 cmp	 eax, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 86   : 	for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  000e8	75 d6		 jne	 SHORT $LL111@GetPickedS

; 103  : 				{
; 104  : 					pMinSlot = pSlot;
; 105  : 				}
; 106  : 			}
; 107  : 		}
; 108  : 	}
; 109  : 
; 110  : 	if (!pMinSlot)

  000ea	85 f6		 test	 esi, esi
  000ec	74 4b		 je	 SHORT $LN20@GetPickedS

; 111  : 	{
; 112  : 		return FALSE;
; 113  : 	}
; 114  : 	else
; 115  : 	{
; 116  : 		TSlot * pCenterSlot;
; 117  : 		if (!GetSlotPointer(pMinSlot->dwCenterSlotNumber, &pCenterSlot))

  000ee	8d 45 ec	 lea	 eax, DWORD PTR _pCenterSlot$2[ebp]
  000f1	8b cb		 mov	 ecx, ebx
  000f3	50		 push	 eax
  000f4	ff 76 08	 push	 DWORD PTR [esi+8]
  000f7	e8 00 00 00 00	 call	 ?GetSlotPointer@CSlotWindow@UI@@IAEHKPAPAUSSlot@12@@Z ; UI::CSlotWindow::GetSlotPointer
  000fc	85 c0		 test	 eax, eax
  000fe	74 36		 je	 SHORT $LN302@GetPickedS

; 118  : 			return FALSE;
; 119  : 
; 120  : 		*ppSlot = pCenterSlot;

  00100	8b 7d 08	 mov	 edi, DWORD PTR _ppSlot$[ebp]
  00103	8b 45 ec	 mov	 eax, DWORD PTR _pCenterSlot$2[ebp]
  00106	89 07		 mov	 DWORD PTR [edi], eax

; 121  : 
; 122  : 		if (UI::CWindowManager::Instance().IsAttaching())

  00108	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  0010e	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  00113	85 c0		 test	 eax, eax
  00115	74 15		 je	 SHORT $LN16@GetPickedS

; 123  : 		{
; 124  : 			DWORD dwSlotNumber = UI::CWindowManager::Instance().GetAttachingSlotNumber();

  00117	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  0011d	e8 00 00 00 00	 call	 ?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingSlotNumber

; 125  : 
; 126  : 			if (dwSlotNumber == pCenterSlot->dwSlotNumber)

  00122	8b 4d ec	 mov	 ecx, DWORD PTR _pCenterSlot$2[ebp]
  00125	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00128	75 02		 jne	 SHORT $LN16@GetPickedS

; 127  : 			{
; 128  : 				*ppSlot = pMinSlot;

  0012a	89 37		 mov	 DWORD PTR [edi], esi
$LN16@GetPickedS:

; 133  : 	return TRUE;

  0012c	8b 7d e4	 mov	 edi, DWORD PTR _SlotList$[ebp]
  0012f	bb 01 00 00 00	 mov	 ebx, 1
  00134	eb 05		 jmp	 SHORT $LN21@GetPickedS
$LN302@GetPickedS:

; 79   : 	if (!GetPickedSlotList(byWidth, byHeight, &SlotList))

  00136	8b 7d e4	 mov	 edi, DWORD PTR _SlotList$[ebp]
$LN20@GetPickedS:
  00139	33 db		 xor	 ebx, ebx
$LN21@GetPickedS:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 323  :         _Head->_Prev->_Next = nullptr;

  0013b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0013e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 324  : 
; 325  :         auto _Pnode = _Head->_Next;

  00144	8b 07		 mov	 eax, DWORD PTR [edi]

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00146	85 c0		 test	 eax, eax
  00148	74 19		 je	 SHORT $LN244@GetPickedS
  0014a	66 0f 1f 44 00
	00		 npad	 6
$LL245@GetPickedS:

; 327  :             _Pnext = _Pnode->_Next;

  00150	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00152	6a 0c		 push	 12			; 0000000cH
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0015a	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 326  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0015d	8b c6		 mov	 eax, esi
  0015f	85 f6		 test	 esi, esi
  00161	75 ed		 jne	 SHORT $LL245@GetPickedS
$LN244@GetPickedS:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00163	6a 0c		 push	 12			; 0000000cH
  00165	ff 75 e4	 push	 DWORD PTR _SlotList$[ebp]
  00168	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0016d	83 c4 08	 add	 esp, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 133  : 	return TRUE;

  00170	8b c3		 mov	 eax, ebx

; 134  : }

  00172	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00175	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017c	59		 pop	 ecx
  0017d	5f		 pop	 edi
  0017e	5e		 pop	 esi
  0017f	5b		 pop	 ebx
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _SlotList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z ENDP ; UI::CGridSlotWindow::GetPickedSlotPointer
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?__Initialize@CGridSlotWindow@UI@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CGridSlotWindow@UI@@IAEXXZ PROC		; UI::CGridSlotWindow::__Initialize, COMDAT
; _this$ = ecx

; 438  : 	m_dwxCount = 0;

  00000	c7 81 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+216], 0

; 439  : 	m_dwyCount = 0;

  0000a	c7 81 dc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+220], 0

; 440  : }

  00014	c3		 ret	 0
?__Initialize@CGridSlotWindow@UI@@IAEXXZ ENDP		; UI::CGridSlotWindow::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z
_TEXT	SEGMENT
tv575 = -28						; size = 4
tv568 = -24						; size = 4
tv576 = -20						; size = 4
_x$1$ = -16						; size = 4
tv579 = -12						; size = 4
_this$1$ = -8						; size = 4
$T1 = -1						; size = 1
_dwStartIndex$ = 8					; size = 4
_dwxCount$ = 12						; size = 4
_dwyCount$ = 16						; size = 4
_ixSlotSize$ = 20					; size = 4
_iySlotSize$ = 24					; size = 4
_ixTemporarySize$ = 28					; size = 4
_iyTemporarySize$ = 32					; size = 4
?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z PROC	; UI::CGridSlotWindow::ArrangeGridSlot, COMDAT
; _this$ = ecx

; 283  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 284  : 	Destroy();

  0000c	e8 00 00 00 00	 call	 ?Destroy@CGridSlotWindow@UI@@QAEXXZ ; UI::CGridSlotWindow::Destroy

; 285  : 
; 286  : 	m_dwxCount = dwxCount;

  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _dwxCount$[ebp]

; 287  : 	m_dwyCount = dwyCount;
; 288  : 
; 289  : 	m_SlotVector.clear();
; 290  : 	m_SlotVector.resize(dwxCount*dwyCount);

  00014	8b cb		 mov	 ecx, ebx
  00016	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  00019	8b 45 10	 mov	 eax, DWORD PTR _dwyCount$[ebp]
  0001c	8d ba e0 00 00
	00		 lea	 edi, DWORD PTR [edx+224]
  00022	8b 37		 mov	 esi, DWORD PTR [edi]
  00024	0f af c8	 imul	 ecx, eax
  00027	89 9a d8 00 00
	00		 mov	 DWORD PTR [edx+216], ebx
  0002d	89 82 dc 00 00
	00		 mov	 DWORD PTR [edx+220], eax
  00033	89 77 04	 mov	 DWORD PTR [edi+4], esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1259 :         if (_Newsize > _Oldsize) { // append

  00036	85 c9		 test	 ecx, ecx
  00038	74 2e		 je	 SHORT $LN13@ArrangeGri

; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0003a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0003d	2b c6		 sub	 eax, esi
  0003f	c1 f8 02	 sar	 eax, 2

; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate

  00042	3b c8		 cmp	 ecx, eax
  00044	76 0e		 jbe	 SHORT $LN14@ArrangeGri

; 1262 :                 _Resize_reallocate(_Newsize, _Val);

  00046	8d 45 ff	 lea	 eax, DWORD PTR $T1[ebp]
  00049	50		 push	 eax
  0004a	51		 push	 ecx
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>

; 1263 :                 return;

  00052	eb 11		 jmp	 SHORT $LN65@ArrangeGri
$LN14@ArrangeGri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1807 :             _Zero_range(_PFirst, _PFirst + _Count);

  00054	8d 34 8e	 lea	 esi, DWORD PTR [esi+ecx*4]
  00057	56		 push	 esi
  00058	ff 37		 push	 DWORD PTR [edi]
  0005a	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ; std::_Zero_range<UI::CSlotWindow::SSlot * *>
  0005f	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  00062	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN65@ArrangeGri:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 292  : 	for (DWORD x = 0; x < dwxCount; ++x)

  00065	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN13@ArrangeGri:
  00068	8b 4d 10	 mov	 ecx, DWORD PTR _dwyCount$[ebp]
  0006b	33 c0		 xor	 eax, eax
  0006d	89 45 f0	 mov	 DWORD PTR _x$1$[ebp], eax
  00070	85 db		 test	 ebx, ebx
  00072	0f 84 87 00 00
	00		 je	 $LN3@ArrangeGri
$LL4@ArrangeGri:

; 293  : 	for (DWORD y = 0; y < dwyCount; ++y)

  00078	85 c9		 test	 ecx, ecx
  0007a	74 77		 je	 SHORT $LN2@ArrangeGri
  0007c	8b 4d 14	 mov	 ecx, DWORD PTR _ixSlotSize$[ebp]
  0007f	33 f6		 xor	 esi, esi
  00081	03 4d 1c	 add	 ecx, DWORD PTR _ixTemporarySize$[ebp]
  00084	8b 7d 18	 mov	 edi, DWORD PTR _iySlotSize$[ebp]
  00087	03 7d 20	 add	 edi, DWORD PTR _iyTemporarySize$[ebp]
  0008a	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  0008d	c1 e3 02	 shl	 ebx, 2
  00090	0f af c8	 imul	 ecx, eax
  00093	89 5d e8	 mov	 DWORD PTR tv568[ebp], ebx
  00096	8b 5d 08	 mov	 ebx, DWORD PTR _dwStartIndex$[ebp]
  00099	89 7d ec	 mov	 DWORD PTR tv576[ebp], edi
  0009c	03 d8		 add	 ebx, eax
  0009e	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  000a5	8b 45 10	 mov	 eax, DWORD PTR _dwyCount$[ebp]
  000a8	89 4d e4	 mov	 DWORD PTR tv575[ebp], ecx
  000ab	89 45 f4	 mov	 DWORD PTR tv579[ebp], eax
  000ae	66 90		 npad	 2
$LL7@ArrangeGri:

; 294  : 	{
; 295  : 		DWORD dwIndex = dwStartIndex + x + y * dwxCount;
; 296  : 		int ixPosition = x * (ixSlotSize + ixTemporarySize);
; 297  : 		int iyPosition = y * (iySlotSize + iyTemporarySize);
; 298  : 
; 299  : 		AppendSlot(dwIndex, ixPosition, iyPosition, ixSlotSize, iySlotSize);

  000b0	ff 75 18	 push	 DWORD PTR _iySlotSize$[ebp]
  000b3	ff 75 14	 push	 DWORD PTR _ixSlotSize$[ebp]
  000b6	56		 push	 esi
  000b7	51		 push	 ecx
  000b8	53		 push	 ebx
  000b9	8b ca		 mov	 ecx, edx
  000bb	e8 00 00 00 00	 call	 ?AppendSlot@CSlotWindow@UI@@QAEXKHHHH@Z ; UI::CSlotWindow::AppendSlot
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         : current(_STD move(_Right)) {}

  000c0	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 293  : 	for (DWORD y = 0; y < dwyCount; ++y)

  000c3	03 75 ec	 add	 esi, DWORD PTR tv576[ebp]
  000c6	03 5d 0c	 add	 ebx, DWORD PTR _dwxCount$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility

; 1590 :         : current(_STD move(_Right)) {}

  000c9	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 183  :         this->_Ptr = _New_ptr;

  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 301  : 		m_SlotVector[x+y*dwxCount] = &(*m_SlotList.rbegin());

  000d2	8b 82 e0 00 00
	00		 mov	 eax, DWORD PTR [edx+224]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\list

; 183  :         this->_Ptr = _New_ptr;

  000d8	83 c1 08	 add	 ecx, 8
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 301  : 		m_SlotVector[x+y*dwxCount] = &(*m_SlotList.rbegin());

  000db	89 0c 07	 mov	 DWORD PTR [edi+eax], ecx
  000de	03 7d e8	 add	 edi, DWORD PTR tv568[ebp]
  000e1	83 6d f4 01	 sub	 DWORD PTR tv579[ebp], 1
  000e5	8b 4d e4	 mov	 ecx, DWORD PTR tv575[ebp]
  000e8	75 c6		 jne	 SHORT $LL7@ArrangeGri
  000ea	8b 45 f0	 mov	 eax, DWORD PTR _x$1$[ebp]
  000ed	8b 5d 0c	 mov	 ebx, DWORD PTR _dwxCount$[ebp]
  000f0	8b 4d 10	 mov	 ecx, DWORD PTR _dwyCount$[ebp]
$LN2@ArrangeGri:

; 292  : 	for (DWORD x = 0; x < dwxCount; ++x)

  000f3	40		 inc	 eax
  000f4	89 45 f0	 mov	 DWORD PTR _x$1$[ebp], eax
  000f7	3b c3		 cmp	 eax, ebx
  000f9	0f 82 79 ff ff
	ff		 jb	 $LL4@ArrangeGri
$LN3@ArrangeGri:

; 302  : 	}
; 303  : 
; 304  : 	int iWidth = dwxCount * (ixSlotSize + ixTemporarySize);
; 305  : 	int iHeight = dwyCount * (iySlotSize + iyTemporarySize);

  000ff	8b 45 18	 mov	 eax, DWORD PTR _iySlotSize$[ebp]
  00102	03 45 20	 add	 eax, DWORD PTR _iyTemporarySize$[ebp]
  00105	0f af c1	 imul	 eax, ecx

; 306  : 	SetSize(iWidth, iHeight);

  00108	8b ca		 mov	 ecx, edx
  0010a	50		 push	 eax
  0010b	8b 45 14	 mov	 eax, DWORD PTR _ixSlotSize$[ebp]
  0010e	03 45 1c	 add	 eax, DWORD PTR _ixTemporarySize$[ebp]
  00111	0f af c3	 imul	 eax, ebx
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ?SetSize@CWindow@UI@@QAEXJJ@Z ; UI::CWindow::SetSize
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx

; 307  : }

  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c2 1c 00	 ret	 28			; 0000001cH
?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z ENDP	; UI::CGridSlotWindow::ArrangeGridSlot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?Destroy@CGridSlotWindow@UI@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGridSlotWindow@UI@@QAEXXZ PROC		; UI::CGridSlotWindow::Destroy, COMDAT
; _this$ = ecx

; 428  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 429  : 	CSlotWindow::Destroy();

  00003	e8 00 00 00 00	 call	 ?Destroy@CSlotWindow@UI@@QAEXXZ ; UI::CSlotWindow::Destroy

; 430  : 
; 431  : 	m_SlotVector.clear();

  00008	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]

; 432  : 
; 433  : 	__Initialize();

  0000e	8b ce		 mov	 ecx, esi
  00010	89 86 e4 00 00
	00		 mov	 DWORD PTR [esi+228], eax
  00016	5e		 pop	 esi
  00017	e9 00 00 00 00	 jmp	 ?__Initialize@CGridSlotWindow@UI@@IAEXXZ ; UI::CGridSlotWindow::__Initialize
?Destroy@CGridSlotWindow@UI@@QAEXXZ ENDP		; UI::CGridSlotWindow::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ??1CGridSlotWindow@UI@@UAE@XZ
_TEXT	SEGMENT
??1CGridSlotWindow@UI@@UAE@XZ PROC			; UI::CGridSlotWindow::~CGridSlotWindow, COMDAT
; _this$ = ecx

; 461  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGridSlotWindow@UI@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1750 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  0000f	85 c0		 test	 eax, eax
  00011	74 4d		 je	 SHORT $LN6@CGridSlotW

; 1751 :             _Destroy(_Myfirst, _Mylast);
; 1752 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 8e e8 00 00
	00		 mov	 ecx, DWORD PTR [esi+232]
  00019	2b c8		 sub	 ecx, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00024	72 12		 jb	 SHORT $LN22@CGridSlotW

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00026	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00029	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00031	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00034	77 32		 ja	 SHORT $LN19@CGridSlotW

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	8b c2		 mov	 eax, edx
$LN22@CGridSlotW:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	51		 push	 ecx
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1754 :             _Myfirst = nullptr;

  0003f	c7 86 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+224], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00049	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1755 :             _Mylast  = nullptr;

  0004c	c7 86 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+228], 0

; 1756 :             _Myend   = nullptr;

  00056	c7 86 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+232], 0
$LN6@CGridSlotW:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 462  : }

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ??1CSlotWindow@UI@@UAE@XZ ; UI::CSlotWindow::~CSlotWindow
$LN19@CGridSlotW:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00068	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@CGridSlotW:
  0006d	cc		 int	 3
??1CGridSlotWindow@UI@@UAE@XZ ENDP			; UI::CGridSlotWindow::~CGridSlotWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ppyObject$ = 8						; size = 4
??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z PROC		; UI::CGridSlotWindow::CGridSlotWindow, COMDAT
; _this$ = ecx

; 457  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	ff 75 08	 push	 DWORD PTR _ppyObject$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	e8 00 00 00 00	 call	 ??0CSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CSlotWindow::CSlotWindow
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGridSlotWindow@UI@@6B@

; 458  : }

  00018	8b c6		 mov	 eax, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 390  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0001a	c7 86 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+224], 0
  00024	c7 86 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+228], 0
  0002e	c7 86 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+232], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp

; 458  : }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z ENDP		; UI::CGridSlotWindow::CGridSlotWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?Type@CGridSlotWindow@UI@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CGridSlotWindow@UI@@SAKXZ PROC			; UI::CGridSlotWindow::Type, COMDAT

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CGridSlotWindow@UI@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 444  : 	static int s_Type = GetCRC32("CGridSlotWindow", strlen("CGridSlotWindow"));

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Type
$LN5@Type:

; 445  : 	return s_Type;
; 446  : }

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Type:

; 444  : 	static int s_Type = GetCRC32("CGridSlotWindow", strlen("CGridSlotWindow"));

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Type
  00068	6a 0f		 push	 15			; 0000000fH
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BFEGLPNH@CGridSlotWindow@
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0007b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA, eax
  00085	e8 00 00 00 00	 call	 __Init_thread_footer
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	eb af		 jmp	 SHORT $LN5@Type
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CGridSlotWindow@UI@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CGridSlotWindow@UI@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CGridSlotWindow@UI@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CGridSlotWindow@UI@@SAKXZ ENDP			; UI::CGridSlotWindow::Type
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
;	COMDAT ?IsWindow@CWindow@UI@@UAEHXZ
_TEXT	SEGMENT
?IsWindow@CWindow@UI@@UAEHXZ PROC			; UI::CWindow::IsWindow, COMDAT
; _this$ = ecx

; 165  : 			virtual BOOL	IsWindow() { return TRUE; }

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?IsWindow@CWindow@UI@@UAEHXZ ENDP			; UI::CWindow::IsWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
;	COMDAT ?SetColor@CWindow@UI@@UAEXK@Z
_TEXT	SEGMENT
_dwColor$ = 8						; size = 4
?SetColor@CWindow@UI@@UAEXK@Z PROC			; UI::CWindow::SetColor, COMDAT
; _this$ = ecx

; 161  : 			virtual void	SetColor(DWORD dwColor){}

  00000	c2 04 00	 ret	 4
?SetColor@CWindow@UI@@UAEXK@Z ENDP			; UI::CWindow::SetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\eterPythonLib\PythonWindow.h
;	COMDAT ?OnChangePosition@CWindow@UI@@UAEXXZ
_TEXT	SEGMENT
?OnChangePosition@CWindow@UI@@UAEXXZ PROC		; UI::CWindow::OnChangePosition, COMDAT
; _this$ = ecx

; 104  : 			virtual void	OnChangePosition(){}

  00000	c2 00 00	 ret	 0
?OnChangePosition@CWindow@UI@@UAEXXZ ENDP		; UI::CWindow::OnChangePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
