; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30151.0 

	TITLE	C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Distribute\Utils.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	_sprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
PUBLIC	?CreateTempFileName@@YAPBDPBD@Z			; CreateTempFileName
PUBLIC	?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z ; GetFilePathNameExtension
PUBLIC	?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetFileExtension
PUBLIC	?GetFileNameParts@@YAXPBDHPAD11@Z		; GetFileNameParts
PUBLIC	?GetOldIndexingName@@YAXPADH@Z			; GetOldIndexingName
PUBLIC	?GetIndexingName@@YAXPADK@Z			; GetIndexingName
PUBLIC	?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyFileName
PUBLIC	?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyPathName
PUBLIC	?GetOnlyPathName@@YAPBDPBD@Z			; GetOnlyPathName
PUBLIC	?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetLocalFileName
PUBLIC	?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetExceptionPathName
PUBLIC	?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetWorkingFolder
PUBLIC	?StringLowers@@YAXPAD@Z				; StringLowers
PUBLIC	?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
PUBLIC	?StringPath@@YAXPAD@Z				; StringPath
PUBLIC	?StringPath@@YAXPBDPAD@Z			; StringPath
PUBLIC	?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
PUBLIC	?PrintAsciiData@@YAXPBXH@Z			; PrintAsciiData
PUBLIC	?IsFile@@YA_NPBD@Z				; IsFile
PUBLIC	?IsGlobalFileName@@YA_NPBD@Z			; IsGlobalFileName
PUBLIC	?MIN@@YAHHH@Z					; MIN
PUBLIC	?MAX@@YAHHH@Z					; MAX
PUBLIC	?MINMAX@@YAHHHH@Z				; MINMAX
PUBLIC	?fMIN@@YAMMM@Z					; fMIN
PUBLIC	?fMAX@@YAMMM@Z					; fMAX
PUBLIC	?fMINMAX@@YAMMMM@Z				; fMINMAX
PUBLIC	?MyCreateDirectory@@YAXPBD@Z			; MyCreateDirectory
PUBLIC	?RemoveAllDirectory@@YAXPBD@Z			; RemoveAllDirectory
PUBLIC	?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; SplitLine
PUBLIC	?_getf@@YAPBDPBDZZ				; _getf
PUBLIC	?CommandLineToArgv@@YAPAPADPADPAH@Z		; CommandLineToArgv
PUBLIC	?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; StringExceptCharacter
PUBLIC	?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetExcutedFileName
PUBLIC	??1CDirRemover@@UAE@XZ				; CDirRemover::~CDirRemover
PUBLIC	?OnFolder@CDirRemover@@UAE_NPBD00@Z		; CDirRemover::OnFolder
PUBLIC	?OnFile@CDirRemover@@UAE_NPBD0@Z		; CDirRemover::OnFile
PUBLIC	??_GCDirRemover@@UAEPAXI@Z			; CDirRemover::`scalar deleting destructor'
PUBLIC	?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
PUBLIC	?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
PUBLIC	?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>
PUBLIC	??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_03NGHAOOHL@etb@				; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_01LOCGONAA@?$AA@				; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	??_C@_03NDEAONJP@?5?5?5@			; `string'
PUBLIC	??_C@_05CNDJFPDP@?$CF02x?5@			; `string'
PUBLIC	??_C@_02MINBJDHL@?$HM?5@			; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
PUBLIC	??_7CDirRemover@@6B@				; CDirRemover::`vftable'
PUBLIC	??_C@_03EMIMMIHL@?$CK?4?$CK@			; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDirRemover@@6B@				; CDirRemover::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDirRemover@@@8				; CDirRemover `RTTI Type Descriptor'
PUBLIC	??_R3CDirRemover@@8				; CDirRemover::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDirRemover@@8				; CDirRemover::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDirRemover@@8			; CDirRemover::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CDir@@8				; CDir::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCDir@@@8				; CDir `RTTI Type Descriptor'
PUBLIC	??_R3CDir@@8					; CDir::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDir@@8					; CDir::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isprint:PROC
EXTRN	_strchr:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__RemoveDirectoryA@4:PROC
EXTRN	__imp__GetTempPathA@8:PROC
EXTRN	__imp__GetTempFileNameA@16:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	__imp__GlobalAlloc@8:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	__ecvt:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	__getcwd:PROC
EXTRN	__access:PROC
EXTRN	__chmod:PROC
EXTRN	??0CDir@@QAE@XZ:PROC				; CDir::CDir
EXTRN	??1CDir@@UAE@XZ:PROC				; CDir::~CDir
EXTRN	?Create@CDir@@QAE_NPBD0H@Z:PROC			; CDir::Create
EXTRN	?korean_tolower@@YADD@Z:PROC			; korean_tolower
EXTRN	??_ECDirRemover@@UAEPAXI@Z:PROC			; CDirRemover::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA
_BSS	SEGMENT
?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA DB 0105H DUP (?) ; `CreateTempFileName'::`2'::szTempName
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA DD 01H DUP (?) ; `GetOnlyPathName'::`2'::$TSS0
_BSS	ENDS
_BSS	SEGMENT
?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A DB 014H DUP (?) ; CDirRemover::ms_strDirectoryDeque
_BSS	ENDS
;	COMDAT ?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA
_BSS	SEGMENT
?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA DB 0100H DUP (?)	; `_getf'::`2'::szBuf
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_strDirectoryDeque$initializer$@CDirRemover@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ; ??ms_strDirectoryDeque$initializer$@CDirRemover@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R2CDir@@8
rdata$r	SEGMENT
??_R2CDir@@8 DD	FLAT:??_R1A@?0A@EA@CDir@@8		; CDir::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDir@@8
rdata$r	SEGMENT
??_R3CDir@@8 DD	00H					; CDir::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDir@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDir@@@8
data$rs	SEGMENT
??_R0?AVCDir@@@8 DD FLAT:??_7type_info@@6B@		; CDir `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDir@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CDir@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDir@@8 DD FLAT:??_R0?AVCDir@@@8		; CDir::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDir@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDirRemover@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDirRemover@@8 DD FLAT:??_R0?AVCDirRemover@@@8 ; CDirRemover::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDirRemover@@8
rdata$r	ENDS
;	COMDAT ??_R2CDirRemover@@8
rdata$r	SEGMENT
??_R2CDirRemover@@8 DD FLAT:??_R1A@?0A@EA@CDirRemover@@8 ; CDirRemover::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDir@@8
rdata$r	ENDS
;	COMDAT ??_R3CDirRemover@@8
rdata$r	SEGMENT
??_R3CDirRemover@@8 DD 00H				; CDirRemover::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CDirRemover@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDirRemover@@@8
data$rs	SEGMENT
??_R0?AVCDirRemover@@@8 DD FLAT:??_7type_info@@6B@	; CDirRemover `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDirRemover@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CDirRemover@@6B@
rdata$r	SEGMENT
??_R4CDirRemover@@6B@ DD 00H				; CDirRemover::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDirRemover@@@8
	DD	FLAT:??_R3CDirRemover@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03EMIMMIHL@?$CK?4?$CK@
CONST	SEGMENT
??_C@_03EMIMMIHL@?$CK?4?$CK@ DB '*.*', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CDirRemover@@6B@
CONST	SEGMENT
??_7CDirRemover@@6B@ DD FLAT:??_R4CDirRemover@@6B@	; CDirRemover::`vftable'
	DD	FLAT:??_ECDirRemover@@UAEPAXI@Z
	DD	FLAT:?OnFolder@CDirRemover@@UAE_NPBD00@Z
	DD	FLAT:?OnFile@CDirRemover@@UAE_NPBD0@Z
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MINBJDHL@?$HM?5@
CONST	SEGMENT
??_C@_02MINBJDHL@?$HM?5@ DB '| ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CNDJFPDP@?$CF02x?5@
CONST	SEGMENT
??_C@_05CNDJFPDP@?$CF02x?5@ DB '%02x ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NDEAONJP@?5?5?5@
CONST	SEGMENT
??_C@_03NDEAONJP@?5?5?5@ DB '   ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB '-'
	DB	'-------------------------------------------------------------'
	DB	'----', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
_DATA	SEGMENT
?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 014H DUP (?)
	DD	0fH					; `GetOnlyPathName'::`2'::strPathName
_DATA	ENDS
;	COMDAT ??_C@_01LOCGONAA@?$AA@
CONST	SEGMENT
??_C@_01LOCGONAA@?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu@ DB '%u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGHAOOHL@etb@
CONST	SEGMENT
??_C@_03NGHAOOHL@etb@ DB 'etb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnFile@CDirRemover@@UAE_NPBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnFile@CDirRemover@@UAE_NPBD0@Z$0
__ehfuncinfo$?OnFile@CDirRemover@@UAE_NPBD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnFile@CDirRemover@@UAE_NPBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnFolder@CDirRemover@@UAE_NPBD00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$2
__ehfuncinfo$?OnFolder@CDirRemover@@UAE_NPBD00@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?OnFolder@CDirRemover@@UAE_NPBD00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
__ehfuncinfo$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$1
__ehfuncinfo$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RemoveAllDirectory@@YAXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RemoveAllDirectory@@YAXPBD@Z$0
__ehfuncinfo$?RemoveAllDirectory@@YAXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RemoveAllDirectory@@YAXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
__ehfuncinfo$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z PROC ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 4058 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4059 :     auto _FirstPtr              = _To_address(_First);
; 4060 :     auto _LastPtr               = _To_address(_Last);
; 4061 :     auto _DestPtr               = _To_address(_Dest);
; 4062 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4063 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4064 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4065 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4066 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4067 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4068 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4069 :     } else {
; 4070 :         return _Dest + (_LastPtr - _FirstPtr);
; 4071 :     }
; 4072 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ENDP ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z PROC ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 1789 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1790 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1791 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1792 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1793 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1794 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ENDP ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>, COMDAT

; 1821 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1822 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1823 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1824 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1825 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 1826 :     } else {
; 1827 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1828 :         for (; 0 < _Count; --_Count) {
; 1829 :             _Backout._Emplace_back();
; 1830 :         }
; 1831 : 
; 1832 :         return _Backout._Release();
; 1833 :     }
; 1834 : }

  00012	5d		 pop	 ebp

; 1822 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1823 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1824 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1825 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z PROC ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 1687 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1688 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1689 :     _Adl_verify_range(_First, _Last);
; 1690 :     auto _UFirst      = _Get_unwrapped(_First);
; 1691 :     const auto _ULast = _Get_unwrapped(_Last);
; 1692 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1693 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1694 :     return _Dest;
; 1695 : }

  00003	5d		 pop	 ebp

; 1674 :             return _Copy_memmove(_First, _Last, _Dest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ENDP ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 79   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 79   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1699 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 4f		 je	 SHORT $LN3@Uninitiali

; 1609 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2322 :     size_type _Mysize = 0; // current length of string

  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2323 :     size_type _Myres  = 0; // current storage reserved for string

  0002d	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1621 :         ++_Last;

  00045	83 c6 18	 add	 esi, 24			; 00000018H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0004f	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1621 :         ++_Last;

  00059	83 c0 18	 add	 eax, 24			; 00000018H

; 1700 :     // move [_First, _Last) to raw _Dest, using _Al
; 1701 :     // note: only called internally from elsewhere in the STL
; 1702 :     using _Ptrval     = typename _Alloc::value_type*;
; 1703 :     auto _UFirst      = _Get_unwrapped(_First);
; 1704 :     const auto _ULast = _Get_unwrapped(_Last);
; 1705 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1706 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1707 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1708 :         if (!_STD is_constant_evaluated())
; 1709 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1710 :         {
; 1711 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1712 :             return _Dest + (_ULast - _UFirst);
; 1713 :         }
; 1714 :     }
; 1715 : 
; 1716 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1717 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005c	3b c2		 cmp	 eax, edx
  0005e	75 c0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1615 :         _Destroy_range(_First, _Last, _Al);

  00060	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00063	56		 push	 esi
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1718 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1719 :     }
; 1720 : 
; 1721 :     return _Backout._Release();

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1722 : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 900  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 904  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN45@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 27		 jb	 SHORT $LN23@Destroy_ra
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0001a	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN33@Destroy_ra

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN30@Destroy_ra

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN33@Destroy_ra:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN23@Destroy_ra:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 904  :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN45@Destroy_ra:
  00057	5f		 pop	 edi

; 905  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 906  :         }
; 907  :     }
; 908  : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN30@Destroy_ra:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN46@Destroy_ra:
  00060	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 33		 mov	 esi, DWORD PTR [ebx]
  00015	2b d6		 sub	 edx, esi

; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b ce		 sub	 ecx, esi
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b c2		 mov	 eax, edx
  00037	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003a	03 c2		 add	 eax, edx
  0003c	89 45 f8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 763  : 
; 764  :         if (_Oldsize == max_size()) {

  0003f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00044	0f 84 14 01 00
	00		 je	 $LN68@Emplace_re

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;

  0004d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00050	2b ce		 sub	 ecx, esi
  00052	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00057	f7 e9		 imul	 ecx

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00059	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005e	c1 fa 02	 sar	 edx, 2
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1675 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 17		 jbe	 SHORT $LN12@Emplace_re

; 1676 :             return _Max; // geometric growth would overflow

  00072	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  00077	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	83 c4 04	 add	 esp, 4
  00085	8b f8		 mov	 edi, eax
  00087	eb 43		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1679 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00089	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0008c	8b f7		 mov	 esi, edi
  0008e	3b c7		 cmp	 eax, edi
  00090	0f 43 f0	 cmovae	 esi, eax
  00093	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  00099	0f 87 c4 00 00
	00		 ja	 $LN69@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0009f	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000a2	c1 e0 03	 shl	 eax, 3

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a5	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000aa	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b2	83 c4 04	 add	 esp, 4
  000b5	8b f8		 mov	 edi, eax
  000b7	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000b9	85 c0		 test	 eax, eax
  000bb	74 0d		 je	 SHORT $LN25@Emplace_re

; 79   :         return ::operator new(_Bytes);

  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c3	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c6	8b f8		 mov	 edi, eax
  000c8	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000ca	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000cc	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000cf	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d2	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  000d8	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 2322 :     size_type _Mysize = 0; // current length of string

  000de	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2323 :     size_type _Myres  = 0; // current storage reserved for string

  000e5	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ec	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ef	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000f2	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000f5	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000fa	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 4562 :         _My_data._Mysize = 0;

  000ff	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00106	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0010d	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00110	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00113	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00116	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00118	3b c2		 cmp	 eax, edx
  0011a	75 04		 jne	 SHORT $LN4@Emplace_re

; 1651 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0011c	8b c7		 mov	 eax, edi

; 780  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 781  :         } else { // provide basic guarantee

  0011e	eb 18		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1646 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00120	53		 push	 ebx
  00121	57		 push	 edi
  00122	50		 push	 eax
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00129	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 1646 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0012c	83 c4 10	 add	 esp, 16			; 00000010H
  0012f	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00132	83 c0 18	 add	 eax, 24			; 00000018H

; 1646 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00135	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
$LN5@Emplace_re:

; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00138	53		 push	 ebx
  00139	50		 push	 eax
  0013a	52		 push	 edx
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00141	8b 45 f8	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00144	83 c4 10	 add	 esp, 16			; 00000010H
  00147	40		 inc	 eax
  00148	8b cb		 mov	 ecx, ebx
  0014a	56		 push	 esi
  0014b	50		 push	 eax
  0014c	57		 push	 edi
  0014d	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 793  :         return _Newvec + _Whereoff;

  00152	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx

; 794  :     }

  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 08 00	 ret	 8
$LN68@Emplace_re:

; 765  :             _Xlength();

  0015e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN69@Emplace_re:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00163	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN66@Emplace_re:
  00168	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1761 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1723 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 1724 :         // orphan all iterators, discard old array, acquire new array
; 1725 :         auto& _My_data    = _Mypair._Myval2;
; 1726 :         pointer& _Myfirst = _My_data._Myfirst;
; 1727 :         pointer& _Mylast  = _My_data._Mylast;
; 1728 :         pointer& _Myend   = _My_data._Myend;
; 1729 : 
; 1730 :         _My_data._Orphan_all();
; 1731 : 
; 1732 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	85 c0		 test	 eax, eax
  0000a	74 51		 je	 SHORT $LN10@Change_arr

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	ff 77 04	 push	 DWORD PTR [edi+4]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00017	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001f	8b 37		 mov	 esi, DWORD PTR [edi]

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :             _Destroy(_Myfirst, _Mylast);
; 1734 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00024	2b ce		 sub	 ecx, esi
  00026	f7 e9		 imul	 ecx
  00028	c1 fa 02	 sar	 edx, 2
  0002b	8b c2		 mov	 eax, edx
  0002d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00030	03 c2		 add	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00032	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00035	c1 e1 03	 shl	 ecx, 3

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00038	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003e	72 12		 jb	 SHORT $LN20@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00040	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00043	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00046	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0004b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004e	77 2f		 ja	 SHORT $LN17@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00050	8b f2		 mov	 esi, edx
$LN20@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00052	51		 push	 ecx
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00059	83 c4 08	 add	 esp, 8
  0005c	5e		 pop	 esi
$LN10@Change_arr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1737 :         _Myfirst = _Newvec;

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1738 :         _Mylast  = _Newvec + _Newsize;

  00060	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00063	89 0f		 mov	 DWORD PTR [edi], ecx
  00065	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00068	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1739 :         _Myend   = _Newvec + _Newcapacity;

  0006e	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00071	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00074	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00077	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0007a	5f		 pop	 edi

; 1740 :     }

  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN17@Change_arr:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@Change_arr:
  00084	cc		 int	 3
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1286 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1292 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00008	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00014	2b 17		 sub	 edx, DWORD PTR [edi]
  00016	f7 ea		 imul	 edx
  00018	c1 fa 02	 sar	 edx, 2
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
  00022	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00025	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  0002b	77 51		 ja	 SHORT $LN27@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0002d	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  00030	c1 e0 03	 shl	 eax, 3

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00033	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00038	72 0d		 jb	 SHORT $LN15@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00040	83 c4 04	 add	 esp, 4
  00043	8b f0		 mov	 esi, eax
  00045	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00047	85 c0		 test	 eax, eax
  00049	74 0d		 je	 SHORT $LN16@Reallocate

; 79   :         return ::operator new(_Bytes);

  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00054	8b f0		 mov	 esi, eax
  00056	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00058	33 f6		 xor	 esi, esi
$LN14@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1651 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0005a	57		 push	 edi
  0005b	56		 push	 esi
  0005c	ff 77 04	 push	 DWORD PTR [edi+4]
  0005f	ff 37		 push	 DWORD PTR [edi]
  00061	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00066	83 c4 10	 add	 esp, 16			; 00000010H

; 1293 : 
; 1294 :         const pointer _Newvec = _Getal().allocate(_Newcapacity);
; 1295 : 
; 1296 :         _TRY_BEGIN
; 1297 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1298 :         _CATCH_ALL
; 1299 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1300 :         _RERAISE;
; 1301 :         _CATCH_END
; 1302 : 
; 1303 :         _Change_array(_Newvec, _Size, _Newcapacity);

  00069	8b cf		 mov	 ecx, edi
  0006b	53		 push	 ebx
  0006c	ff 75 fc	 push	 DWORD PTR __Size$1$[ebp]
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx

; 1304 :     }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN27@Reallocate:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0007e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN25@Reallocate:
  00083	cc		 int	 3
?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CDirRemover::ms_strDirectoryDeque'', COMDAT
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 861  :         _Tidy();

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
  00005	e8 00 00 00 00	 call	 ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 602  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000f	6a 08		 push	 8
  00011	50		 push	 eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 603  :     _Val         = static_cast<_Other&&>(_New_val);

  00012	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A, 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	83 c4 08	 add	 esp, 8
  00024	c3		 ret	 0
??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CDirRemover::ms_strDirectoryDeque''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CDirRemover::ms_strDirectoryDeque'', COMDAT
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00000	6a 08		 push	 8
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 512  : std::deque<std::string> CDirRemover::ms_strDirectoryDeque;

  00007	68 00 00 00 00	 push	 OFFSET ??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CDirRemover::ms_strDirectoryDeque''
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1003 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1020 :         _Myproxy            = _New_proxy;

  00013	a3 00 00 00 00	 mov	 DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A, eax

; 1021 :         _New_proxy->_Mycont = this;

  00018	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 512  : std::deque<std::string> CDirRemover::ms_strDirectoryDeque;

  0001e	e8 00 00 00 00	 call	 _atexit
  00023	83 c4 08	 add	 esp, 8
  00026	c3		 ret	 0
??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CDirRemover::ms_strDirectoryDeque''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1471 :     void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 1002 :         return _Mysize() == 0;

  00004	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00007	85 c9		 test	 ecx, ecx

; 1472 :         _Orphan_all();
; 1473 : 
; 1474 :         _Alpty _Almap(_Getal());
; 1475 :         while (!empty()) {

  00009	74 73		 je	 SHORT $LN99@Tidy
  0000b	0f 1f 44 00 00	 npad	 5
$LL2@Tidy:

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00010	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00013	48		 dec	 eax
  00014	03 c8		 add	 ecx, eax
  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00019	48		 dec	 eax
  0001a	23 c8		 and	 ecx, eax

; 1145 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _Block_size));

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00022	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00025	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00028	72 2b		 jb	 SHORT $LN36@Tidy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002a	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0002c	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0002d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00033	72 16		 jb	 SHORT $LN46@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00035	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00038	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00040	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00043	0f 87 98 00 00
	00		 ja	 $LN83@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b c2		 mov	 eax, edx
$LN46@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8
$LN36@Tidy:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00055	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0005c	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00063	c6 07 00	 mov	 BYTE PTR [edi], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 1146 :         if (--_Mysize() == 0) {

  00066	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00069	83 e9 01	 sub	 ecx, 1
  0006c	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0006f	74 06		 je	 SHORT $LN98@Tidy

; 1002 :         return _Mysize() == 0;

  00071	85 c9		 test	 ecx, ecx

; 1472 :         _Orphan_all();
; 1473 : 
; 1474 :         _Alpty _Almap(_Getal());
; 1475 :         while (!empty()) {

  00073	75 9b		 jne	 SHORT $LL2@Tidy
  00075	eb 07		 jmp	 SHORT $LN99@Tidy
$LN98@Tidy:

; 1147 :             _Myoff() = 0;

  00077	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN99@Tidy:

; 1479 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  0007e	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00081	85 ff		 test	 edi, edi
  00083	74 1a		 je	 SHORT $LN5@Tidy
$LL4@Tidy:

; 1480 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	4f		 dec	 edi
  00089	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0008c	85 c0		 test	 eax, eax
  0008e	74 0b		 je	 SHORT $LN59@Tidy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00090	6a 18		 push	 24			; 00000018H
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00098	83 c4 08	 add	 esp, 8
$LN59@Tidy:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 1479 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  0009b	85 ff		 test	 edi, edi
  0009d	75 e6		 jne	 SHORT $LL4@Tidy
$LN5@Tidy:

; 1481 :                 _Getal().deallocate(_Map()[_Block], _Block_size);
; 1482 :                 _Destroy_in_place(_Map()[_Block]);
; 1483 :             }
; 1484 :         }
; 1485 : 
; 1486 :         if (_Map() != _Mapptr()) {

  0009f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a2	85 c0		 test	 eax, eax
  000a4	74 2a		 je	 SHORT $LN76@Tidy
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a9	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ac	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b2	72 12		 jb	 SHORT $LN86@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000b7	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000ba	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000bc	83 c0 fc	 add	 eax, -4			; fffffffcH
  000bf	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c2	77 1d		 ja	 SHORT $LN83@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000c4	8b c2		 mov	 eax, edx
$LN86@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c6	51		 push	 ecx
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000cd	83 c4 08	 add	 esp, 8
$LN76@Tidy:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 1491 :         _Map()     = _Mapptr();

  000d0	5f		 pop	 edi
  000d1	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000d8	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000df	5e		 pop	 esi

; 1492 :     }

  000e0	c3		 ret	 0
$LN83@Tidy:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN100@Tidy:
  000e6	cc		 int	 3
?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
tv483 = -4						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap, COMDAT
; _this$ = ecx

; 1432 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1433 :         static_assert(1 < _Minimum_map_size, "The _Xlen() test should always be performed.");
; 1434 : 
; 1435 :         _Alpty _Almap(_Getal());
; 1436 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	b8 01 00 00 00	 mov	 eax, 1
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00014	85 d2		 test	 edx, edx
  00016	0f 45 c2	 cmovne	 eax, edx
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Growmap:

; 1437 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b f0		 mov	 esi, eax
  00022	2b f2		 sub	 esi, edx
  00024	3b f3		 cmp	 esi, ebx
  00026	72 05		 jb	 SHORT $LN4@Growmap
  00028	83 f8 08	 cmp	 eax, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1438 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1439 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b9 aa aa aa 0a	 mov	 ecx, 178956970		; 0aaaaaaaH
  00032	2b c8		 sub	 ecx, eax
  00034	3b c8		 cmp	 ecx, eax
  00036	0f 82 fb 00 00
	00		 jb	 $LN44@Growmap

; 1441 :             }
; 1442 : 
; 1443 :             _Newsize *= 2;

  0003c	03 c0		 add	 eax, eax

; 1444 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1445 :         _Count = _Newsize - _Mapsize();
; 1446 : 
; 1447 :         size_type _Myboff = _Myoff() / _Block_size;

  00040	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00043	89 5d 08	 mov	 DWORD PTR $T1[ebp], ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00046	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0004b	0f 87 ed 00 00
	00		 ja	 $LN51@Growmap

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00051	c1 e0 02	 shl	 eax, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00054	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00059	72 0d		 jb	 SHORT $LN19@Growmap

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	83 c4 04	 add	 esp, 4
  00064	8b d8		 mov	 ebx, eax
  00066	eb 13		 jmp	 SHORT $LN18@Growmap
$LN19@Growmap:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00068	85 c0		 test	 eax, eax
  0006a	74 0d		 je	 SHORT $LN20@Growmap

; 79   :         return ::operator new(_Bytes);

  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00072	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00075	8b d8		 mov	 ebx, eax
  00077	eb 02		 jmp	 SHORT $LN18@Growmap
$LN20@Growmap:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00079	33 db		 xor	 ebx, ebx
$LN18@Growmap:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 1449 :         _Mapptr _Myptr    = _Newmap + _Myboff;

  0007b	8b 55 08	 mov	 edx, DWORD PTR $T1[ebp]

; 1450 : 
; 1451 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0007e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00081	c1 e2 02	 shl	 edx, 2
  00084	89 55 fc	 mov	 DWORD PTR tv483[ebp], edx
  00087	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  0008a	50		 push	 eax
  0008b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0008e	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00091	50		 push	 eax
  00092	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
  0009b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1452 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000a1	50		 push	 eax
  000a2	39 75 08	 cmp	 DWORD PTR $T1[ebp], esi
  000a5	77 22		 ja	 SHORT $LN6@Growmap

; 1453 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  000a7	8b 45 fc	 mov	 eax, DWORD PTR tv483[ebp]
  000aa	03 c1		 add	 eax, ecx
  000ac	50		 push	 eax
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>

; 1454 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000b3	8b ce		 mov	 ecx, esi
  000b5	2b 4d 08	 sub	 ecx, DWORD PTR $T1[ebp]
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>

; 1455 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new
; 1456 :         } else { // increment not greater than offset of initial block

  000bf	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  000c2	83 c4 14	 add	 esp, 20			; 00000014H
  000c5	8b cb		 mov	 ecx, ebx
  000c7	eb 24		 jmp	 SHORT $LN7@Growmap
$LN6@Growmap:

; 1457 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  000c9	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000cc	50		 push	 eax
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>

; 1458 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  000d3	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d6	8b 45 fc	 mov	 eax, DWORD PTR tv483[ebp]
  000d9	03 c1		 add	 eax, ecx
  000db	53		 push	 ebx
  000dc	50		 push	 eax
  000dd	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>

; 1459 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000e6	8b c8		 mov	 ecx, eax
  000e8	83 c4 18	 add	 esp, 24			; 00000018H
  000eb	8b c6		 mov	 eax, esi
$LN7@Growmap:

; 1460 :         }
; 1461 : 
; 1462 :         _Destroy_range(_Map() + _Myboff, _Map() + _Mapsize());
; 1463 :         if (_Map() != _Mapptr()) {

  000ed	50		 push	 eax
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>
  000f4	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000f7	83 c4 08	 add	 esp, 8
  000fa	85 c0		 test	 eax, eax
  000fc	74 2a		 je	 SHORT $LN29@Growmap
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fe	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00101	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00104	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010a	72 12		 jb	 SHORT $LN39@Growmap

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0010f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00112	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00114	83 c0 fc	 add	 eax, -4			; fffffffcH
  00117	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011a	77 27		 ja	 SHORT $LN36@Growmap

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011c	8b c2		 mov	 eax, edx
$LN39@Growmap:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0011e	51		 push	 ecx
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00125	83 c4 08	 add	 esp, 8
$LN29@Growmap:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 1468 :         _Mapsize() += _Count;

  00128	01 77 08	 add	 DWORD PTR [edi+8], esi
  0012b	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	5b		 pop	 ebx

; 1469 :     }

  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 04 00	 ret	 4
$LN44@Growmap:

; 1440 :                 _Xlen(); // result too long

  00137	8b cf		 mov	 ecx, edi
  00139	e8 00 00 00 00	 call	 ?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
$LN51@Growmap:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN36@Growmap:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00143	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN49@Growmap:
  00148	cc		 int	 3
?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
;	COMDAT ?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT
; _this$ = ecx

; 1425 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ??_GCDirRemover@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDirRemover@@UAEPAXI@Z PROC				; CDirRemover::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 467  : 		{

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDirRemover@@6B@

; 468  : 		}

  0000c	e8 00 00 00 00	 call	 ??1CDir@@UAE@XZ		; CDir::~CDir
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 0e		 je	 SHORT $LN7@scalar
  00017	68 48 01 00 00	 push	 328			; 00000148H
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GCDirRemover@@UAEPAXI@Z ENDP				; CDirRemover::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?OnFile@CDirRemover@@UAE_NPBD0@Z
_TEXT	SEGMENT
_strFullPathName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szPathName$ = 8					; size = 4
_c_szFileName$ = 12					; size = 4
?OnFile@CDirRemover@@UAE_NPBD0@Z PROC			; CDirRemover::OnFile, COMDAT
; _this$ = ecx

; 488  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnFile@CDirRemover@@UAE_NPBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 55 08	 mov	 edx, DWORD PTR _c_szPathName$[ebp]
  0002d	8b 75 0c	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00030	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp], 0

; 4562 :         _My_data._Mysize = 0;

  00037	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0003e	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00045	c6 45 d8 00	 mov	 BYTE PTR _strFullPathName$[ebp], 0

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00049	8b ca		 mov	 ecx, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 489  : 			std::string strFullPathName;

  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00052	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL71@OnFile:
  00055	8a 01		 mov	 al, BYTE PTR [ecx]
  00057	41		 inc	 ecx
  00058	84 c0		 test	 al, al
  0005a	75 f9		 jne	 SHORT $LL71@OnFile
  0005c	2b cf		 sub	 ecx, edi

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005e	51		 push	 ecx
  0005f	52		 push	 edx
  00060	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00063	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00068	8b ce		 mov	 ecx, esi
  0006a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0006d	0f 1f 00	 npad	 3
$LL72@OnFile:
  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	41		 inc	 ecx
  00073	84 c0		 test	 al, al
  00075	75 f9		 jne	 SHORT $LL72@OnFile
  00077	2b ca		 sub	 ecx, edx

; 3141 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00079	51		 push	 ecx
  0007a	56		 push	 esi
  0007b	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  0007e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2286 :         return _BUF_SIZE <= _Myres;

  00083	83 7d ec 10	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 16 ; 00000010H

; 2272 :         const value_type* _Result = _Bx._Buf;

  00087	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 492  : 			_chmod(strFullPathName.c_str(), _S_IWRITE);

  0008a	68 80 00 00 00	 push	 128			; 00000080H
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  0008f	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 492  : 			_chmod(strFullPathName.c_str(), _S_IWRITE);

  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 __chmod
  00099	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  0009c	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]

; 2286 :         return _BUF_SIZE <= _Myres;

  0009f	83 7d ec 10	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 16 ; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  000a3	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 493  : 			DeleteFile(strFullPathName.c_str());

  000a7	50		 push	 eax
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000ae	8b 55 ec	 mov	 edx, DWORD PTR _strFullPathName$[ebp+20]
  000b1	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  000b4	72 28		 jb	 SHORT $LN55@OnFile
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b6	8b 4d d8	 mov	 ecx, DWORD PTR _strFullPathName$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  000b9	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ba	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bc	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000c2	72 10		 jb	 SHORT $LN65@OnFile

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000c4	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000c7	83 c2 23	 add	 edx, 35			; 00000023H
  000ca	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cc	83 c0 fc	 add	 eax, -4			; fffffffcH
  000cf	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d2	77 29		 ja	 SHORT $LN76@OnFile
$LN65@OnFile:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000d4	52		 push	 edx
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000db	83 c4 08	 add	 esp, 8
$LN55@OnFile:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 494  : 			return true;

  000de	b0 01		 mov	 al, 1

; 495  : 		}

  000e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ea	59		 pop	 ecx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN76@OnFile:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN74@OnFile:
  00102	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnFile@CDirRemover@@UAE_NPBD0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?OnFile@CDirRemover@@UAE_NPBD0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnFile@CDirRemover@@UAE_NPBD0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnFile@CDirRemover@@UAE_NPBD0@Z ENDP			; CDirRemover::OnFile
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?OnFolder@CDirRemover@@UAE_NPBD00@Z
_TEXT	SEGMENT
_strWorkingFolder$1$ = -408				; size = 4
__Ptr$1$ = -404						; size = 4
__Result$2$ = -400					; size = 4
_strWorkingFolder$3$ = -396				; size = 4
_c_szFilter$GSCopy$1$ = -396				; size = 4
_remover$ = -392					; size = 328
_strWorkingFolder$ = -64				; size = 24
_strFullPathName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFilter$ = 8					; size = 4
_c_szPathName$ = 12					; size = 4
_c_szFileName$ = 16					; size = 4
?OnFolder@CDirRemover@@UAE_NPBD00@Z PROC		; CDirRemover::OnFolder, COMDAT
; _this$ = ecx

; 471  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnFolder@CDirRemover@@UAE_NPBD00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 08	 mov	 eax, DWORD PTR _c_szFilter$[ebp]
  00030	8b 55 0c	 mov	 edx, DWORD PTR _c_szPathName$[ebp]
  00033	8b 7d 10	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00036	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 471  : 		{

  0003d	89 85 74 fe ff
	ff		 mov	 DWORD PTR _c_szFilter$GSCopy$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00043	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0004a	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00051	c6 45 d8 00	 mov	 BYTE PTR _strFullPathName$[ebp], 0

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00055	8b ca		 mov	 ecx, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 472  : 			std::string strFullPathName;

  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0005e	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL186@OnFolder:
  00061	8a 01		 mov	 al, BYTE PTR [ecx]
  00063	41		 inc	 ecx
  00064	84 c0		 test	 al, al
  00066	75 f9		 jne	 SHORT $LL186@OnFolder
  00068	2b ce		 sub	 ecx, esi

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006a	51		 push	 ecx
  0006b	52		 push	 edx
  0006c	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  0006f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00074	8b cf		 mov	 ecx, edi
  00076	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL187@OnFolder:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL187@OnFolder
  00087	2b ca		 sub	 ecx, edx

; 3141 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00089	51		 push	 ecx
  0008a	57		 push	 edi
  0008b	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  0008e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 463  : 		CDirRemover()

  00093	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  00099	e8 00 00 00 00	 call	 ??0CDir@@QAE@XZ		; CDir::CDir
  0009e	c7 85 78 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$[ebp], OFFSET ??_7CDirRemover@@6B@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  000a8	83 7d ec 10	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 16 ; 00000010H
  000ac	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 477  : 			remover.Create(c_szFilter, strFullPathName.c_str());

  000af	6a 00		 push	 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2273 :         if (_Large_string_engaged()) {

  000b1	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 477  : 			remover.Create(c_szFilter, strFullPathName.c_str());

  000b5	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  000bb	50		 push	 eax
  000bc	ff b5 74 fe ff
	ff		 push	 DWORD PTR _c_szFilter$GSCopy$1$[ebp]
  000c2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c6	e8 00 00 00 00	 call	 ?Create@CDir@@QAE_NPBD0H@Z ; CDir::Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  000cb	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _strWorkingFolder$[ebp], 0

; 4562 :         _My_data._Mysize = 0;

  000d2	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strWorkingFolder$[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  000d9	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strWorkingFolder$[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000e0	c6 45 c0 00	 mov	 BYTE PTR _strWorkingFolder$[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 480  : 			GetWorkingFolder(strWorkingFolder);

  000e4	8d 45 c0	 lea	 eax, DWORD PTR _strWorkingFolder$[ebp]
  000e7	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetWorkingFolder
  000f1	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  000f4	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]

; 2286 :         return _BUF_SIZE <= _Myres;

  000f7	83 7d ec 10	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 16 ; 00000010H

; 3090 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000fb	8d 4d c0	 lea	 ecx, DWORD PTR _strWorkingFolder$[ebp]

; 2273 :         if (_Large_string_engaged()) {

  000fe	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strFullPathName$[ebp]

; 3090 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00102	ff 75 e8	 push	 DWORD PTR _strFullPathName$[ebp+16]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3141 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0010b	6a 01		 push	 1
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  00112	8d 4d c0	 lea	 ecx, DWORD PTR _strWorkingFolder$[ebp]
  00115	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 483  : 			StringPath(strWorkingFolder);

  0011a	8d 45 c0	 lea	 eax, DWORD PTR _strWorkingFolder$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00123	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+16
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 483  : 			StringPath(strWorkingFolder);

  00129	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 1106 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  0012c	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+8
  00132	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00135	3b c8		 cmp	 ecx, eax
  00137	77 18		 ja	 SHORT $LN72@OnFolder

; 1107 :             _Growmap(1);

  00139	6a 01		 push	 1
  0013b	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
  00140	e8 00 00 00 00	 call	 ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
  00145	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+16
  0014b	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+8
$LN72@OnFolder:

; 1108 :         }
; 1109 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00151	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+12
  00156	49		 dec	 ecx
  00157	23 c1		 and	 eax, ecx
  00159	a3 0c 00 00 00	 mov	 DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+12, eax

; 1110 :         size_type _Newoff = _Myoff() + _Mysize();

  0015e	03 c2		 add	 eax, edx

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00160	23 c1		 and	 eax, ecx

; 1112 :         if (_Map()[_Block] == nullptr) {

  00162	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00169	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+4
  0016e	83 3c 07 00	 cmp	 DWORD PTR [edi+eax], 0
  00172	75 18		 jne	 SHORT $LN73@OnFolder
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00174	6a 18		 push	 24			; 00000018H
  00176	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  0017b	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 79   :         return ::operator new(_Bytes);

  00181	83 c4 04	 add	 esp, 4
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 1113 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00184	89 04 0f	 mov	 DWORD PTR [edi+ecx], eax
  00187	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+4
$LN73@OnFolder:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 681  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0018c	8b 3c 07	 mov	 edi, DWORD PTR [edi+eax]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  0018f	8d 75 c0	 lea	 esi, DWORD PTR _strWorkingFolder$[ebp]

; 2286 :         return _BUF_SIZE <= _Myres;

  00192	8b 55 d4	 mov	 edx, DWORD PTR _strWorkingFolder$[ebp+20]
  00195	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  00198	8b 4d c0	 mov	 ecx, DWORD PTR _strWorkingFolder$[ebp]

; 2894 :         const bool _Stay_small = _Right_size < _BUF_SIZE;

  0019b	8b 45 d0	 mov	 eax, DWORD PTR _strWorkingFolder$[ebp+16]

; 2273 :         if (_Large_string_engaged()) {

  0019e	0f 43 f1	 cmovae	 esi, ecx

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  001a1	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2322 :     size_type _Mysize = 0; // current length of string

  001a7	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2323 :     size_type _Myres  = 0; // current storage reserved for string

  001ae	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2286 :         return _BUF_SIZE <= _Myres;

  001b5	89 95 68 fe ff
	ff		 mov	 DWORD PTR _strWorkingFolder$1$[ebp], edx

; 2273 :         if (_Large_string_engaged()) {

  001bb	89 8d 6c fe ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  001c1	89 b5 70 fe ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], esi

; 2894 :         const bool _Stay_small = _Right_size < _BUF_SIZE;

  001c7	89 85 74 fe ff
	ff		 mov	 DWORD PTR _strWorkingFolder$3$[ebp], eax
  001cd	83 f8 10	 cmp	 eax, 16			; 00000010H

; 2895 : #endif // __cpp_lib_constexpr_string
; 2896 : 
; 2897 :         // NOTE: even if _Right is in large mode, we only go into large mode ourselves if the actual size of _Right
; 2898 :         // requires it
; 2899 :         if (_Stay_small) { // stay small, don't allocate

  001d0	73 0d		 jae	 SHORT $LN105@OnFolder

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001d2	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]

; 2902 :             _My_data._Myres  = _BUF_SIZE - 1;

  001d5	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001da	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2903 :             return;

  001dd	eb 64		 jmp	 SHORT $LN104@OnFolder
$LN105@OnFolder:

; 2907 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  001df	8b f0		 mov	 esi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  001e1	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2907 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  001e6	83 ce 0f	 or	 esi, 15			; 0000000fH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  001e9	3b f0		 cmp	 esi, eax
  001eb	0f 47 f0	 cmova	 esi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2908 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  001ee	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001f1	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  001f6	72 0d		 jb	 SHORT $LN119@OnFolder

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001fe	83 c4 04	 add	 esp, 4
  00201	8b c8		 mov	 ecx, eax
  00203	eb 13		 jmp	 SHORT $LN118@OnFolder
$LN119@OnFolder:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00205	85 c0		 test	 eax, eax
  00207	74 0d		 je	 SHORT $LN120@OnFolder

; 79   :         return ::operator new(_Bytes);

  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0020f	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00212	8b c8		 mov	 ecx, eax
  00214	eb 02		 jmp	 SHORT $LN118@OnFolder
$LN120@OnFolder:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00216	33 c9		 xor	 ecx, ecx
$LN118@OnFolder:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2916 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00218	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _strWorkingFolder$3$[ebp]
  0021e	40		 inc	 eax
  0021f	89 0f		 mov	 DWORD PTR [edi], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00221	50		 push	 eax
  00222	ff b5 70 fe ff
	ff		 push	 DWORD PTR __Result$2$[ebp]
  00228	51		 push	 ecx
  00229	e8 00 00 00 00	 call	 _memcpy
  0022e	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
  00234	83 c4 0c	 add	 esp, 12			; 0000000cH
  00237	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _strWorkingFolder$3$[ebp]
  0023d	8b 95 68 fe ff
	ff		 mov	 edx, DWORD PTR _strWorkingFolder$1$[ebp]
$LN104@OnFolder:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 1119 :         ++_Mysize();

  00243	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00246	89 77 14	 mov	 DWORD PTR [edi+20], esi
  00249	ff 05 10 00 00
	00		 inc	 DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+16
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0024f	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00252	72 25		 jb	 SHORT $LN140@OnFolder

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00254	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00255	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00257	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0025d	72 10		 jb	 SHORT $LN150@OnFolder

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0025f	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00262	83 c2 23	 add	 edx, 35			; 00000023H
  00265	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00267	83 c0 fc	 add	 eax, -4			; fffffffcH
  0026a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0026d	77 6e		 ja	 SHORT $LN177@OnFolder
$LN150@OnFolder:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0026f	52		 push	 edx
  00270	51		 push	 ecx
  00271	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00276	83 c4 08	 add	 esp, 8
$LN140@OnFolder:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 468  : 		}

  00279	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  0027f	c7 85 78 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$[ebp], OFFSET ??_7CDirRemover@@6B@
  00289	e8 00 00 00 00	 call	 ??1CDir@@UAE@XZ		; CDir::~CDir
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0028e	8b 55 ec	 mov	 edx, DWORD PTR _strFullPathName$[ebp+20]
  00291	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00294	72 28		 jb	 SHORT $LN170@OnFolder
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00296	8b 4d d8	 mov	 ecx, DWORD PTR _strFullPathName$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00299	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0029a	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0029c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  002a2	72 10		 jb	 SHORT $LN180@OnFolder

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002a4	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  002a7	83 c2 23	 add	 edx, 35			; 00000023H
  002aa	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002ac	83 c0 fc	 add	 eax, -4			; fffffffcH
  002af	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002b2	77 29		 ja	 SHORT $LN177@OnFolder
$LN180@OnFolder:

; 255  :         ::operator delete(_Ptr, _Bytes);

  002b4	52		 push	 edx
  002b5	51		 push	 ecx
  002b6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002bb	83 c4 08	 add	 esp, 8
$LN170@OnFolder:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 485  : 			return true;

  002be	b0 01		 mov	 al, 1

; 486  : 		}

  002c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ca	59		 pop	 ecx
  002cb	5f		 pop	 edi
  002cc	5e		 pop	 esi
  002cd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d0	33 cd		 xor	 ecx, ebp
  002d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d7	8b e5		 mov	 esp, ebp
  002d9	5d		 pop	 ebp
  002da	c2 0c 00	 ret	 12			; 0000000cH
$LN177@OnFolder:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002dd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN189@OnFolder:
  002e2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$1:
  00008	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CDirRemover@@UAE@XZ	; CDirRemover::~CDirRemover
__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$2:
  00013	8d 4d c0	 lea	 ecx, DWORD PTR _strWorkingFolder$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$?OnFolder@CDirRemover@@UAE_NPBD00@Z:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 8a 68 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-408]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnFolder@CDirRemover@@UAE_NPBD00@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnFolder@CDirRemover@@UAE_NPBD00@Z ENDP		; CDirRemover::OnFolder
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ??1CDirRemover@@UAE@XZ
_TEXT	SEGMENT
??1CDirRemover@@UAE@XZ PROC				; CDirRemover::~CDirRemover, COMDAT
; _this$ = ecx

; 467  : 		{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CDirRemover@@6B@

; 468  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1CDir@@UAE@XZ		; CDir::~CDir
??1CDirRemover@@UAE@XZ ENDP				; CDirRemover::~CDirRemover
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ
text$yd	SEGMENT
??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ PROC ; `GetOnlyPathName'::`2'::`dynamic atexit destructor for 'strPathName'', COMDAT

; 2286 :         return _BUF_SIZE <= _Myres;

  00000	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 2f		 jb	 SHORT $LN15@dynamic
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00011	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN25@dynamic

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0001f	83 c2 23	 add	 edx, 35			; 00000023H
  00022	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN25@dynamic:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	52		 push	 edx
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00055	c3		 ret	 0
??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ ENDP ; `GetOnlyPathName'::`2'::`dynamic atexit destructor for 'strPathName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_szPath$ = -268						; size = 261
__$ArrayPad$ = -4					; size = 4
_r_str$ = 8						; size = 4
?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetExcutedFileName, COMDAT

; 577  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _r_str$[ebp]

; 578  : 	char szPath[MAX_PATH+1];
; 579  : 
; 580  : 	GetModuleFileName(NULL, szPath, MAX_PATH);

  00017	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  0001d	68 04 01 00 00	 push	 260			; 00000104H
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0002b	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 581  : 	szPath[MAX_PATH] = '\0';

  00031	c6 45 f8 00	 mov	 BYTE PTR _szPath$[ebp+260], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00035	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL11@GetExcuted:
  00038	8a 08		 mov	 cl, BYTE PTR [eax]
  0003a	40		 inc	 eax
  0003b	84 c9		 test	 cl, cl
  0003d	75 f9		 jne	 SHORT $LL11@GetExcuted
  0003f	2b c2		 sub	 eax, edx

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00041	8b ce		 mov	 ecx, esi
  00043	50		 push	 eax
  00044	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 584  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00055	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 584  : }

  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetExcutedFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
_TEXT	SEGMENT
_c_szCharacter$GSCopy$1$ = -116				; size = 4
__Ptr$1$ = -112						; size = 4
__Ptr$1$ = -108						; size = 4
__Result$2$ = -104					; size = 4
__Result$2$ = -100					; size = 4
__New_size$1$ = -96					; size = 4
__Ptr$1$ = -92						; size = 4
$T2 = -88						; size = 24
_strBack$3 = -64					; size = 24
_strFront$4 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pstrString$ = 8					; size = 4
_c_szCharacter$ = 12					; size = 4
?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; StringExceptCharacter, COMDAT

; 525  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _c_szCharacter$[ebp]
  0002d	8b 75 08	 mov	 esi, DWORD PTR _pstrString$[ebp]

; 529  : 	while((iNextPos = pstrString->find_first_of(c_szCharacter, icurPos)) >= 0)

  00030	8b ce		 mov	 ecx, esi
  00032	6a 00		 push	 0
  00034	50		 push	 eax
  00035	89 45 8c	 mov	 DWORD PTR _c_szCharacter$GSCopy$1$[ebp], eax
  00038	e8 00 00 00 00	 call	 ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
  0003d	8b f8		 mov	 edi, eax
  0003f	85 ff		 test	 edi, edi
  00041	0f 88 87 02 00
	00		 js	 $LN3@StringExce
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@StringExce:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2309 :         return (_STD min)(_Size, _Mysize - _Off);

  00050	39 7e 10	 cmp	 DWORD PTR [esi+16], edi
  00053	8b cf		 mov	 ecx, edi

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00055	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _strFront$4[ebp], 0

; 2272 :         const value_type* _Result = _Bx._Buf;

  0005c	8b c6		 mov	 eax, esi

; 2309 :         return (_STD min)(_Size, _Mysize - _Off);

  0005e	0f 42 4e 10	 cmovb	 ecx, DWORD PTR [esi+16]

; 2273 :         if (_Large_string_engaged()) {

  00062	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 4562 :         _My_data._Mysize = 0;

  00066	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFront$4[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0006d	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFront$4[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00074	c6 45 d8 00	 mov	 BYTE PTR _strFront$4[ebp], 0

; 2273 :         if (_Large_string_engaged()) {

  00078	72 02		 jb	 SHORT $LN259@StringExce

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  0007a	8b 06		 mov	 eax, DWORD PTR [esi]
$LN259@StringExce:

; 3190 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  0007c	51		 push	 ecx
  0007d	50		 push	 eax
  0007e	8d 4d d8	 lea	 ecx, DWORD PTR _strFront$4[ebp]
  00081	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 532  : 		std::string strBack = pstrString->substr(iNextPos+1, pstrString->length() - iNextPos - 1);

  00086	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00089	8b c1		 mov	 eax, ecx
  0008b	2b c7		 sub	 eax, edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0008d	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _strBack$3[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 532  : 		std::string strBack = pstrString->substr(iNextPos+1, pstrString->length() - iNextPos - 1);

  00094	47		 inc	 edi
  00095	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009c	48		 dec	 eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  0009d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strBack$3[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  000a4	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strBack$3[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000ab	c6 45 c0 00	 mov	 BYTE PTR _strBack$3[ebp], 0

; 2291 :         if (_Mysize < _Off) {

  000af	3b cf		 cmp	 ecx, edi
  000b1	0f 82 32 02 00
	00		 jb	 $LN252@StringExce

; 2309 :         return (_STD min)(_Size, _Mysize - _Off);

  000b7	2b cf		 sub	 ecx, edi
  000b9	3b c8		 cmp	 ecx, eax
  000bb	0f 42 c1	 cmovb	 eax, ecx

; 2273 :         if (_Large_string_engaged()) {

  000be	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000c2	8b ce		 mov	 ecx, esi
  000c4	72 02		 jb	 SHORT $LN260@StringExce

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  000c6	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN260@StringExce:

; 3190 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  000c8	50		 push	 eax
  000c9	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  000cc	50		 push	 eax
  000cd	8d 4d c0	 lea	 ecx, DWORD PTR _strBack$3[ebp]
  000d0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 4655 :     if (_Left.max_size() - _Left_size < _Right_size) {

  000d5	8b 4d e8	 mov	 ecx, DWORD PTR _strFront$4[ebp+16]
  000d8	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000dd	8b 55 d0	 mov	 edx, DWORD PTR _strBack$3[ebp+16]
  000e0	2b c1		 sub	 eax, ecx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 532  : 		std::string strBack = pstrString->substr(iNextPos+1, pstrString->length() - iNextPos - 1);

  000e2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4655 :     if (_Left.max_size() - _Left_size < _Right_size) {

  000e6	3b c2		 cmp	 eax, edx
  000e8	0f 82 05 02 00
	00		 jb	 $LN253@StringExce

; 2273 :         if (_Large_string_engaged()) {

  000ee	83 7d ec 10	 cmp	 DWORD PTR _strFront$4[ebp+20], 16 ; 00000010H
  000f2	8d 7d d8	 lea	 edi, DWORD PTR _strFront$4[ebp]
  000f5	8b 45 d8	 mov	 eax, DWORD PTR _strFront$4[ebp]
  000f8	0f 43 f8	 cmovae	 edi, eax
  000fb	89 45 90	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  000fe	83 7d d4 10	 cmp	 DWORD PTR _strBack$3[ebp+20], 16 ; 00000010H
  00102	8b 45 c0	 mov	 eax, DWORD PTR _strBack$3[ebp]
  00105	89 7d 9c	 mov	 DWORD PTR __Result$2$[ebp], edi

; 2272 :         const value_type* _Result = _Bx._Buf;

  00108	8d 7d c0	 lea	 edi, DWORD PTR _strBack$3[ebp]

; 2273 :         if (_Large_string_engaged()) {

  0010b	0f 43 f8	 cmovae	 edi, eax
  0010e	89 45 94	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00111	89 7d 98	 mov	 DWORD PTR __Result$2$[ebp], edi

; 2604 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  00114	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  00117	03 d1		 add	 edx, ecx

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00119	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 2602 :         size_type _New_capacity = _BUF_SIZE - 1;

  00120	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00125	89 55 a0	 mov	 DWORD PTR __New_size$1$[ebp], edx

; 2603 :         auto& _My_data          = _Mypair._Myval2;
; 2604 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  00128	89 45 a4	 mov	 DWORD PTR __Ptr$1$[ebp], eax

; 2605 :         auto&& _Alproxy         = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2606 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data); // throws
; 2607 : 
; 2608 : #ifdef __cpp_lib_constexpr_string
; 2609 :         const bool _Activate_large_mode = _New_capacity < _New_size || _STD is_constant_evaluated();
; 2610 : #else // ^^^ __cpp_lib_constexpr_string / !__cpp_lib_constexpr_string vvv
; 2611 :         const bool _Activate_large_mode = _New_capacity < _New_size;
; 2612 : #endif // __cpp_lib_constexpr_string
; 2613 : 
; 2614 :         if (_Activate_large_mode) {

  0012b	3b d7		 cmp	 edx, edi
  0012d	76 6b		 jbe	 SHORT $LN95@StringExce

; 2615 :             // we should never allocate less than _BUF_SIZE space (_New_size could be small if constant evaluated)
; 2616 :             const size_type _Requested_size = (_STD max)(_New_size, _BUF_SIZE);

  0012f	8b fa		 mov	 edi, edx

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00131	83 cf 0f	 or	 edi, 15			; 0000000fH
  00134	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0013a	76 1b		 jbe	 SHORT $LN108@StringExce

; 4456 :             return _Max;

  0013c	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00141	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0014c	8b 4d e8	 mov	 ecx, DWORD PTR _strFront$4[ebp+16]
  0014f	83 c4 04	 add	 esp, 4
  00152	8b 55 a0	 mov	 edx, DWORD PTR __New_size$1$[ebp]
  00155	eb 3d		 jmp	 SHORT $LN265@StringExce
$LN108@StringExce:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00157	83 ff 16	 cmp	 edi, 22			; 00000016H
  0015a	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0015f	0f 42 f8	 cmovb	 edi, eax

; 2618 :             const pointer _Fancyptr         = _Getal().allocate(_New_capacity + 1); // throws

  00162	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00165	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0016a	72 11		 jb	 SHORT $LN116@StringExce

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00172	8b 4d e8	 mov	 ecx, DWORD PTR _strFront$4[ebp+16]
  00175	83 c4 04	 add	 esp, 4
  00178	8b 55 a0	 mov	 edx, DWORD PTR __New_size$1$[ebp]
  0017b	eb 17		 jmp	 SHORT $LN265@StringExce
$LN116@StringExce:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0017d	85 c0		 test	 eax, eax
  0017f	74 11		 je	 SHORT $LN117@StringExce

; 79   :         return ::operator new(_Bytes);

  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00187	8b 4d e8	 mov	 ecx, DWORD PTR _strFront$4[ebp+16]

; 79   :         return ::operator new(_Bytes);

  0018a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0018d	8b 55 a0	 mov	 edx, DWORD PTR __New_size$1$[ebp]
  00190	eb 02		 jmp	 SHORT $LN265@StringExce
$LN117@StringExce:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00192	33 c0		 xor	 eax, eax
$LN265@StringExce:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2620 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00194	89 45 a4	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00197	89 45 a8	 mov	 DWORD PTR $T2[ebp], eax
$LN95@StringExce:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019a	51		 push	 ecx
  0019b	ff 75 9c	 push	 DWORD PTR __Result$2$[ebp]

; 2629 :         _My_data._Mysize = _New_size;

  0019e	89 55 b8	 mov	 DWORD PTR $T2[ebp+16], edx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a1	50		 push	 eax

; 2630 :         _My_data._Myres  = _New_capacity;

  001a2	89 7d bc	 mov	 DWORD PTR $T2[ebp+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a5	e8 00 00 00 00	 call	 _memcpy
  001aa	ff 75 d0	 push	 DWORD PTR _strBack$3[ebp+16]

; 2632 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  001ad	8b 45 e8	 mov	 eax, DWORD PTR _strFront$4[ebp+16]
  001b0	8b 7d a4	 mov	 edi, DWORD PTR __Ptr$1$[ebp]
  001b3	03 c7		 add	 eax, edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001b5	ff 75 98	 push	 DWORD PTR __Result$2$[ebp]
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 _memcpy

; 2633 :         _Traits::assign(_Ptr[_New_size], _Elem());

  001be	8b 45 a0	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001c1	83 c4 18	 add	 esp, 24			; 00000018H

; 2633 :         _Traits::assign(_Ptr[_New_size], _Elem());

  001c4	c6 04 07 00	 mov	 BYTE PTR [edi+eax], 0

; 2816 :         if (this != _STD addressof(_Right)) {

  001c8	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  001cb	3b f0		 cmp	 esi, eax
  001cd	74 46		 je	 SHORT $LN167@StringExce

; 2286 :         return _BUF_SIZE <= _Myres;

  001cf	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001d2	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001d5	72 2b		 jb	 SHORT $LN139@StringExce

; 4585 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  001d7	8b 06		 mov	 eax, DWORD PTR [esi]

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001d9	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001da	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001e0	72 16		 jb	 SHORT $LN149@StringExce

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001e2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001e5	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001e8	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ea	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ed	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001f0	0f 87 f8 00 00
	00		 ja	 $LN242@StringExce

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001f6	8b c2		 mov	 eax, edx
$LN149@StringExce:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001f8	51		 push	 ecx
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001ff	83 c4 08	 add	 esp, 8
$LN139@StringExce:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00202	0f 10 45 a8	 movups	 xmm0, XMMWORD PTR $T2[ebp]
  00206	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00209	f3 0f 7e 45 b8	 movq	 xmm0, QWORD PTR $T2[ebp+16]
  0020e	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00213	eb 34		 jmp	 SHORT $LN181@StringExce
$LN167@StringExce:
  00215	8b 55 bc	 mov	 edx, DWORD PTR $T2[ebp+20]
  00218	83 fa 10	 cmp	 edx, 16			; 00000010H
  0021b	72 2c		 jb	 SHORT $LN181@StringExce
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0021d	8b 4d a8	 mov	 ecx, DWORD PTR $T2[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00220	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00221	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00223	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00229	72 14		 jb	 SHORT $LN191@StringExce

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0022b	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0022e	83 c2 23	 add	 edx, 35			; 00000023H
  00231	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00233	83 c0 fc	 add	 eax, -4			; fffffffcH
  00236	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00239	0f 87 af 00 00
	00		 ja	 $LN242@StringExce
$LN191@StringExce:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0023f	52		 push	 edx
  00240	51		 push	 ecx
  00241	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00246	83 c4 08	 add	 esp, 8
$LN181@StringExce:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00249	8b 45 d4	 mov	 eax, DWORD PTR _strBack$3[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 534  : 	}

  0024c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00250	83 f8 10	 cmp	 eax, 16			; 00000010H
  00253	72 2a		 jb	 SHORT $LN208@StringExce
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00255	8b 55 94	 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00258	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0025b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0025d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00263	72 10		 jb	 SHORT $LN218@StringExce

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00265	8b 52 fc	 mov	 edx, DWORD PTR [edx-4]
  00268	83 c1 23	 add	 ecx, 35			; 00000023H
  0026b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0026d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00270	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00273	77 79		 ja	 SHORT $LN242@StringExce
$LN218@StringExce:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00275	51		 push	 ecx
  00276	52		 push	 edx
  00277	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0027c	83 c4 08	 add	 esp, 8
$LN208@StringExce:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0027f	8b 45 ec	 mov	 eax, DWORD PTR _strFront$4[ebp+20]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 534  : 	}

  00282	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00289	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0028c	72 2a		 jb	 SHORT $LN235@StringExce
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0028e	8b 55 90	 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00291	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00294	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00296	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0029c	72 10		 jb	 SHORT $LN245@StringExce

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0029e	8b 52 fc	 mov	 edx, DWORD PTR [edx-4]
  002a1	83 c1 23	 add	 ecx, 35			; 00000023H
  002a4	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002a6	83 c0 fc	 add	 eax, -4			; fffffffcH
  002a9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002ac	77 40		 ja	 SHORT $LN242@StringExce
$LN245@StringExce:

; 255  :         ::operator delete(_Ptr, _Bytes);

  002ae	51		 push	 ecx
  002af	52		 push	 edx
  002b0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002b5	83 c4 08	 add	 esp, 8
$LN235@StringExce:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 529  : 	while((iNextPos = pstrString->find_first_of(c_szCharacter, icurPos)) >= 0)

  002b8	6a 00		 push	 0
  002ba	ff 75 8c	 push	 DWORD PTR _c_szCharacter$GSCopy$1$[ebp]
  002bd	8b ce		 mov	 ecx, esi
  002bf	e8 00 00 00 00	 call	 ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
  002c4	8b f8		 mov	 edi, eax
  002c6	85 ff		 test	 edi, edi
  002c8	0f 89 82 fd ff
	ff		 jns	 $LL2@StringExce
$LN3@StringExce:

; 535  : }

  002ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d8	59		 pop	 ecx
  002d9	5f		 pop	 edi
  002da	5e		 pop	 esi
  002db	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002de	33 cd		 xor	 ecx, ebp
  002e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e5	8b e5		 mov	 esp, ebp
  002e7	5d		 pop	 ebp
  002e8	c3		 ret	 0
$LN252@StringExce:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2292 :             _Xran();

  002e9	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN242@StringExce:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002ee	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN253@StringExce:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4656 :         _Xlen_string();

  002f3	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN264@StringExce:
  002f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFront$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR _strBack$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; StringExceptCharacter
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?CommandLineToArgv@@YAPAPADPADPAH@Z
_TEXT	SEGMENT
__argv$1$ = -12						; size = 4
_argv$1$ = -8						; size = 4
_in_QM$1$ = -1						; size = 1
_CmdLine$ = 8						; size = 4
_in_TEXT$1$ = 11					; size = 1
__argc$ = 12						; size = 4
?CommandLineToArgv@@YAPAPADPADPAH@Z PROC		; CommandLineToArgv, COMDAT

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 600  : 	PCHAR* argv;
; 601  : 	PCHAR  _argv;
; 602  : 	ULONG   len;
; 603  : 	ULONG   argc;
; 604  : 	CHAR   a;
; 605  : 	ULONG   i, j;
; 606  : 
; 607  : 	BOOLEAN  in_QM;
; 608  : 	BOOLEAN  in_TEXT;
; 609  : 	BOOLEAN  in_SPACE;
; 610  : 
; 611  : 	len = strlen(CmdLine);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _CmdLine$[ebp]
  0000a	8b cb		 mov	 ecx, ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL24@CommandLin:
  00011	8a 01		 mov	 al, BYTE PTR [ecx]
  00013	41		 inc	 ecx
  00014	84 c0		 test	 al, al
  00016	75 f9		 jne	 SHORT $LL24@CommandLin
  00018	2b ca		 sub	 ecx, edx

; 612  : 	i = ((len+2)/2)*sizeof(PVOID) + sizeof(PVOID);

  0001a	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  0001d	d1 e8		 shr	 eax, 1
  0001f	8d 34 85 04 00
	00 00		 lea	 esi, DWORD PTR [eax*4+4]

; 613  : 
; 614  : 	argv = (PCHAR*)GlobalAlloc(GMEM_FIXED,

  00026	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00029	03 c6		 add	 eax, esi
  0002b	50		 push	 eax
  0002c	6a 00		 push	 0
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalAlloc@8

; 615  : 		i + (len+2)*sizeof(CHAR));
; 616  : 
; 617  : 	_argv = (PCHAR)(((PUCHAR)argv)+i);
; 618  : 
; 619  : 	argc = 0;

  00034	33 ff		 xor	 edi, edi
  00036	89 45 f8	 mov	 DWORD PTR _argv$1$[ebp], eax

; 620  : 	argv[argc] = _argv;
; 621  : 	in_QM = FALSE;
; 622  : 	in_TEXT = FALSE;
; 623  : 	in_SPACE = TRUE;

  00039	b6 01		 mov	 dh, 1
  0003b	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]

; 624  : 	i = 0;
; 625  : 	j = 0;

  0003e	33 f6		 xor	 esi, esi
  00040	89 08		 mov	 DWORD PTR [eax], ecx

; 626  : 
; 627  : 	while( (a = CmdLine[i]) != 0 ) {

  00042	8a 13		 mov	 dl, BYTE PTR [ebx]
  00044	89 4d f4	 mov	 DWORD PTR __argv$1$[ebp], ecx
  00047	32 c9		 xor	 cl, cl
  00049	88 4d ff	 mov	 BYTE PTR _in_QM$1$[ebp], cl
  0004c	88 4d 0b	 mov	 BYTE PTR _in_TEXT$1$[ebp], cl
  0004f	84 d2		 test	 dl, dl
  00051	0f 84 86 00 00
	00		 je	 $LN3@CommandLin

; 600  : 	PCHAR* argv;
; 601  : 	PCHAR  _argv;
; 602  : 	ULONG   len;
; 603  : 	ULONG   argc;
; 604  : 	CHAR   a;
; 605  : 	ULONG   i, j;
; 606  : 
; 607  : 	BOOLEAN  in_QM;
; 608  : 	BOOLEAN  in_TEXT;
; 609  : 	BOOLEAN  in_SPACE;
; 610  : 
; 611  : 	len = strlen(CmdLine);

  00057	8b 45 f4	 mov	 eax, DWORD PTR __argv$1$[ebp]
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL2@CommandLin:

; 628  : 		if(in_QM) {

  00060	84 c9		 test	 cl, cl
  00062	74 12		 je	 SHORT $LN6@CommandLin

; 629  : 			if(a == '\"') {

  00064	80 fa 22	 cmp	 dl, 34			; 00000022H
  00067	75 07		 jne	 SHORT $LN8@CommandLin

; 630  : 				in_QM = FALSE;

  00069	32 c9		 xor	 cl, cl
  0006b	88 4d ff	 mov	 BYTE PTR _in_QM$1$[ebp], cl

; 631  : 			} else {

  0006e	eb 62		 jmp	 SHORT $LN4@CommandLin
$LN8@CommandLin:

; 632  : 				_argv[j] = a;

  00070	88 10		 mov	 BYTE PTR [eax], dl

; 633  : 				j++;

  00072	46		 inc	 esi
  00073	40		 inc	 eax

; 634  : 			}
; 635  : 		} else {

  00074	eb 5c		 jmp	 SHORT $LN4@CommandLin
$LN6@CommandLin:

; 636  : 			switch(a) {

  00076	0f be ca	 movsx	 ecx, dl
  00079	83 c1 f7	 add	 ecx, -9			; fffffff7H
  0007c	83 f9 19	 cmp	 ecx, 25			; 00000019H
  0007f	77 39		 ja	 SHORT $LN17@CommandLin
  00081	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN25@CommandLin[ecx]
  00088	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN26@CommandLin[ecx*4]
$LN10@CommandLin:

; 637  : 				case '\"':
; 638  : 					in_QM = TRUE;

  0008f	b1 01		 mov	 cl, 1
  00091	88 4d ff	 mov	 BYTE PTR _in_QM$1$[ebp], cl

; 639  : 					in_TEXT = TRUE;

  00094	88 4d 0b	 mov	 BYTE PTR _in_TEXT$1$[ebp], cl

; 640  : 					if(in_SPACE) {

  00097	84 f6		 test	 dh, dh
  00099	74 35		 je	 SHORT $LN11@CommandLin

; 641  : 						argv[argc] = _argv+j;

  0009b	8b 55 f8	 mov	 edx, DWORD PTR _argv$1$[ebp]
  0009e	89 04 ba	 mov	 DWORD PTR [edx+edi*4], eax

; 642  : 						argc++;

  000a1	47		 inc	 edi

; 643  : 					}
; 644  : 					in_SPACE = FALSE;
; 645  : 					break;

  000a2	eb 2c		 jmp	 SHORT $LN11@CommandLin
$LN12@CommandLin:

; 646  : 				case ' ':
; 647  : 				case '\t':
; 648  : 				case '\n':
; 649  : 				case '\r':
; 650  : 					if(in_TEXT) {

  000a4	80 7d 0b 00	 cmp	 BYTE PTR _in_TEXT$1$[ebp], 0
  000a8	74 05		 je	 SHORT $LN16@CommandLin

; 651  : 						_argv[j] = '\0';

  000aa	c6 00 00	 mov	 BYTE PTR [eax], 0

; 652  : 						j++;

  000ad	46		 inc	 esi
  000ae	40		 inc	 eax
$LN16@CommandLin:

; 653  : 					}
; 654  : 					in_TEXT = FALSE;
; 655  : 					in_SPACE = TRUE;
; 656  : 					break;

  000af	8a 4d ff	 mov	 cl, BYTE PTR _in_QM$1$[ebp]
  000b2	b6 01		 mov	 dh, 1
  000b4	c6 45 0b 00	 mov	 BYTE PTR _in_TEXT$1$[ebp], 0
  000b8	eb 18		 jmp	 SHORT $LN4@CommandLin
$LN17@CommandLin:

; 657  : 				default:
; 658  : 					in_TEXT = TRUE;

  000ba	c6 45 0b 01	 mov	 BYTE PTR _in_TEXT$1$[ebp], 1

; 659  : 					if(in_SPACE) {

  000be	84 f6		 test	 dh, dh
  000c0	74 07		 je	 SHORT $LN18@CommandLin

; 660  : 						argv[argc] = _argv+j;

  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _argv$1$[ebp]
  000c5	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax

; 661  : 						argc++;

  000c8	47		 inc	 edi
$LN18@CommandLin:

; 662  : 					}
; 663  : 					_argv[j] = a;
; 664  : 					j++;

  000c9	8a 4d ff	 mov	 cl, BYTE PTR _in_QM$1$[ebp]
  000cc	46		 inc	 esi
  000cd	88 10		 mov	 BYTE PTR [eax], dl
  000cf	40		 inc	 eax
$LN11@CommandLin:

; 665  : 					in_SPACE = FALSE;
; 666  : 					break;
; 667  : 			}
; 668  : 		}
; 669  : 		i++;

  000d0	32 f6		 xor	 dh, dh
$LN4@CommandLin:

; 626  : 
; 627  : 	while( (a = CmdLine[i]) != 0 ) {

  000d2	8a 53 01	 mov	 dl, BYTE PTR [ebx+1]

; 665  : 					in_SPACE = FALSE;
; 666  : 					break;
; 667  : 			}
; 668  : 		}
; 669  : 		i++;

  000d5	43		 inc	 ebx
  000d6	84 d2		 test	 dl, dl
  000d8	75 86		 jne	 SHORT $LL2@CommandLin
  000da	8b 45 f8	 mov	 eax, DWORD PTR _argv$1$[ebp]
$LN3@CommandLin:

; 670  : 	}
; 671  : 	_argv[j] = '\0';

  000dd	8b 4d f4	 mov	 ecx, DWORD PTR __argv$1$[ebp]
  000e0	c6 04 0e 00	 mov	 BYTE PTR [esi+ecx], 0

; 672  : 	argv[argc] = NULL;

  000e4	c7 04 b8 00 00
	00 00		 mov	 DWORD PTR [eax+edi*4], 0

; 673  : 
; 674  : 	(*_argc) = argc;

  000eb	8b 45 0c	 mov	 eax, DWORD PTR __argc$[ebp]
  000ee	89 38		 mov	 DWORD PTR [eax], edi

; 675  : 	return argv;

  000f0	8b 45 f8	 mov	 eax, DWORD PTR _argv$1$[ebp]
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5b		 pop	 ebx

; 676  : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
  000fa	66 90		 npad	 2
$LN26@CommandLin:
  000fc	00 00 00 00	 DD	 $LN12@CommandLin
  00100	00 00 00 00	 DD	 $LN10@CommandLin
  00104	00 00 00 00	 DD	 $LN17@CommandLin
$LN25@CommandLin:
  00108	00		 DB	 0
  00109	00		 DB	 0
  0010a	02		 DB	 2
  0010b	02		 DB	 2
  0010c	00		 DB	 0
  0010d	02		 DB	 2
  0010e	02		 DB	 2
  0010f	02		 DB	 2
  00110	02		 DB	 2
  00111	02		 DB	 2
  00112	02		 DB	 2
  00113	02		 DB	 2
  00114	02		 DB	 2
  00115	02		 DB	 2
  00116	02		 DB	 2
  00117	02		 DB	 2
  00118	02		 DB	 2
  00119	02		 DB	 2
  0011a	02		 DB	 2
  0011b	02		 DB	 2
  0011c	02		 DB	 2
  0011d	02		 DB	 2
  0011e	02		 DB	 2
  0011f	00		 DB	 0
  00120	02		 DB	 2
  00121	01		 DB	 1
?CommandLineToArgv@@YAPAPADPADPAH@Z ENDP		; CommandLineToArgv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?_getf@@YAPBDPBDZZ
_TEXT	SEGMENT
_c_szFormat$ = 8					; size = 4
?_getf@@YAPBDPBDZZ PROC					; _getf, COMDAT

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 0c	 lea	 eax, DWORD PTR _c_szFormat$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 08	 push	 DWORD PTR _c_szFormat$[ebp]
  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	68 00 00 00 00	 push	 OFFSET ?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA
  00016	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	ff 70 04	 push	 DWORD PTR [eax+4]
  00020	83 c9 01	 or	 ecx, 1
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00029	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 595  : 	return szBuf;

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET ?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA

; 596  : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?_getf@@YAPBDPBDZZ ENDP					; _getf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
__Result$2$ = -852					; size = 4
__Result$2$ = -852					; size = 4
_c_szDelimeter$GSCopy$1$ = -848				; size = 4
_pkVec_strToken$GSCopy$1$ = -844			; size = 4
_strLine$1$ = -840					; size = 4
$T2 = -833						; size = 1
__Matches$3 = -832					; size = 256
__Matches$4 = -576					; size = 256
__Matches$5 = -320					; size = 256
$T6 = -64						; size = 24
_strLine$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szLine$ = 8						; size = 4
_c_szDelimeter$ = 12					; size = 4
_pkVec_strToken$ = 16					; size = 4
?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; SplitLine, COMDAT

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 48 03 00
	00		 sub	 esp, 840		; 00000348H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szDelimeter$[ebp]
  00030	8b 7d 08	 mov	 edi, DWORD PTR _c_szLine$[ebp]
  00033	89 85 b0 fc ff
	ff		 mov	 DWORD PTR _c_szDelimeter$GSCopy$1$[ebp], eax
  00039	8b 45 10	 mov	 eax, DWORD PTR _pkVec_strToken$[ebp]
  0003c	89 85 b4 fc ff
	ff		 mov	 DWORD PTR _pkVec_strToken$GSCopy$1$[ebp], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1546 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00042	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00045	8b 30		 mov	 esi, DWORD PTR [eax]
  00047	2b ce		 sub	 ecx, esi
  00049	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004e	f7 e9		 imul	 ecx
  00050	c1 fa 02	 sar	 edx, 2
  00053	8b c2		 mov	 eax, edx
  00055	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00058	03 c2		 add	 eax, edx

; 1358 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0005a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0005d	73 17		 jae	 SHORT $LN388@SplitLine

; 1359 :             if (_Newcapacity > max_size()) {
; 1360 :                 _Xlength();
; 1361 :             }
; 1362 : 
; 1363 :             _Reallocate_exactly(_Newcapacity);

  0005f	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
  00065	6a 0a		 push	 10			; 0000000aH
  00067	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate_exactly
  0006c	8b 85 b4 fc ff
	ff		 mov	 eax, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
  00072	8b 30		 mov	 esi, DWORD PTR [eax]
  00074	eb 06		 jmp	 SHORT $LN15@SplitLine
$LN388@SplitLine:

; 735  : #if _HAS_CXX17
; 736  :         return _Result;
; 737  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 738  :         (void) _Result;
; 739  : #endif // _HAS_CXX17
; 740  :     }
; 741  : 
; 742  :     _CONSTEXPR20_CONTAINER void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee
; 743  :         emplace_back(_Val);
; 744  :     }
; 745  : 
; 746  :     _CONSTEXPR20_CONTAINER void push_back(_Ty&& _Val) {
; 747  :         // insert by moving into element at end, provide strong guarantee
; 748  :         emplace_back(_STD move(_Val));
; 749  :     }
; 750  : 
; 751  :     template <class... _Valty>
; 752  :     _CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {
; 753  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 754  :         _Alty& _Al        = _Getal();
; 755  :         auto& _My_data    = _Mypair._Myval2;
; 756  :         pointer& _Myfirst = _My_data._Myfirst;
; 757  :         pointer& _Mylast  = _My_data._Mylast;
; 758  : 
; 759  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 760  : 
; 761  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);
; 762  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 763  : 
; 764  :         if (_Oldsize == max_size()) {
; 765  :             _Xlength();
; 766  :         }
; 767  : 
; 768  :         const size_type _Newsize     = _Oldsize + 1;
; 769  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 770  : 
; 771  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);
; 772  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 773  :         pointer _Constructed_first      = _Constructed_last;
; 774  : 
; 775  :         _TRY_BEGIN
; 776  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);
; 777  :         _Constructed_first = _Newvec + _Whereoff;
; 778  : 
; 779  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee
; 780  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 781  :         } else { // provide basic guarantee
; 782  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 783  :             _Constructed_first = _Newvec;
; 784  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
; 785  :         }
; 786  :         _CATCH_ALL
; 787  :         _Destroy(_Constructed_first, _Constructed_last);
; 788  :         _Al.deallocate(_Newvec, _Newcapacity);
; 789  :         _RERAISE;
; 790  :         _CATCH_END
; 791  : 
; 792  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 793  :         return _Newvec + _Whereoff;
; 794  :     }
; 795  : 
; 796  :     template <class... _Valty>
; 797  :     _CONSTEXPR20_CONTAINER iterator emplace(const_iterator _Where, _Valty&&... _Val) {
; 798  :         // insert by perfectly forwarding _Val at _Where
; 799  :         const pointer _Whereptr = _Where._Ptr;
; 800  :         auto& _My_data          = _Mypair._Myval2;
; 801  :         const pointer _Oldlast  = _My_data._Mylast;
; 802  : #if _ITERATOR_DEBUG_LEVEL == 2
; 803  :         _STL_VERIFY(
; 804  :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Oldlast >= _Whereptr,
; 805  :             "vector emplace iterator outside range");
; 806  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 807  : 
; 808  :         if (_Oldlast != _My_data._Myend) {
; 809  :             if (_Whereptr == _Oldlast) { // at back, provide strong guarantee
; 810  :                 _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 811  :             } else {
; 812  :                 auto& _Al = _Getal();
; 813  :                 _Alloc_temporary2<_Alty> _Obj(_Al, _STD forward<_Valty>(_Val)...); // handle aliasing
; 814  :                 // after constructing _Obj, provide basic guarantee
; 815  :                 _Orphan_range(_Whereptr, _Oldlast);
; 816  :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));
; 817  :                 ++_My_data._Mylast;
; 818  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - 1, _Oldlast);
; 819  :                 *_Whereptr = _STD move(_Obj._Get_value());
; 820  :             }
; 821  : 
; 822  :             return _Make_iterator(_Whereptr);
; 823  :         }
; 824  : 
; 825  :         return _Make_iterator(_Emplace_reallocate(_Whereptr, _STD forward<_Valty>(_Val)...));
; 826  :     }
; 827  : 
; 828  :     _CONSTEXPR20_CONTAINER iterator insert(const_iterator _Where, const _Ty& _Val) { // insert _Val at _Where
; 829  :         return emplace(_Where, _Val);
; 830  :     }
; 831  : 
; 832  :     _CONSTEXPR20_CONTAINER iterator insert(const_iterator _Where, _Ty&& _Val) { // insert by moving _Val at _Where
; 833  :         return emplace(_Where, _STD move(_Val));
; 834  :     }
; 835  : 
; 836  :     _CONSTEXPR20_CONTAINER iterator insert(
; 837  :         const_iterator _Where, _CRT_GUARDOVERFLOW const size_type _Count, const _Ty& _Val) {
; 838  :         // insert _Count * _Val at _Where
; 839  :         const pointer _Whereptr = _Where._Ptr;
; 840  : 
; 841  :         auto& _My_data   = _Mypair._Myval2;
; 842  :         pointer& _Mylast = _My_data._Mylast;
; 843  : 
; 844  :         const pointer _Oldfirst = _My_data._Myfirst;
; 845  :         const pointer _Oldlast  = _Mylast;
; 846  : #if _ITERATOR_DEBUG_LEVEL == 2
; 847  :         _STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _Oldlast >= _Whereptr,
; 848  :             "vector insert iterator outside range");
; 849  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 850  : 
; 851  :         const auto _Whereoff        = static_cast<size_type>(_Whereptr - _Oldfirst);
; 852  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
; 853  :         const bool _One_at_back     = _Count == 1 && _Whereptr == _Oldlast;
; 854  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators
; 855  :         } else if (_Count > _Unused_capacity) { // reallocate
; 856  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);
; 857  : 
; 858  :             if (_Count > max_size() - _Oldsize) {
; 859  :                 _Xlength();
; 860  :             }
; 861  : 
; 862  :             const size_type _Newsize     = _Oldsize + _Count;
; 863  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 864  : 
; 865  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);
; 866  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 867  :             pointer _Constructed_first      = _Constructed_last;
; 868  : 
; 869  :             _TRY_BEGIN
; 870  :             _Ufill(_Newvec + _Whereoff, _Count, _Val);
; 871  :             _Constructed_first = _Newvec + _Whereoff;
; 872  : 
; 873  :             if (_One_at_back) { // provide strong guarantee
; 874  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
; 875  :             } else { // provide basic guarantee
; 876  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);
; 877  :                 _Constructed_first = _Newvec;
; 878  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
; 879  :             }
; 880  :             _CATCH_ALL
; 881  :             _Destroy(_Constructed_first, _Constructed_last);
; 882  :             _Getal().deallocate(_Newvec, _Newcapacity);
; 883  :             _RERAISE;
; 884  :             _CATCH_END
; 885  : 
; 886  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 887  :         } else if (_One_at_back) { // provide strong guarantee
; 888  :             _Emplace_back_with_unused_capacity(_Val);
; 889  :         } else { // provide basic guarantee
; 890  :             const _Alloc_temporary2<_Alty> _Tmp_storage(_Getal(), _Val); // handle aliasing
; 891  :             const auto& _Tmp              = _Tmp_storage._Get_value();
; 892  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
; 893  :             _Orphan_range(_Whereptr, _Oldlast);
; 894  : 
; 895  :             if (_Count > _Affected_elements) { // new stuff spills off end
; 896  :                 _Mylast = _Ufill(_Oldlast, _Count - _Affected_elements, _Tmp);
; 897  :                 _Mylast = _Umove(_Whereptr, _Oldlast, _Mylast);
; 898  :                 _STD fill(_Whereptr, _Oldlast, _Tmp);
; 899  :             } else { // new stuff can all be assigned
; 900  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
; 901  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
; 902  :                 _STD fill(_Whereptr, _Whereptr + _Count, _Tmp);
; 903  :             }
; 904  :         }
; 905  : 
; 906  :         return _Make_iterator_offset(_Whereoff);
; 907  :     }
; 908  : 
; 909  : private:
; 910  :     template <class _Iter>
; 911  :     _CONSTEXPR20_CONTAINER void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, input_iterator_tag) {
; 912  :         // insert input range [_First, _Last) at _Where
; 913  :         if (_First == _Last) {
; 914  :             return; // nothing to do, avoid invalidating iterators
; 915  :         }
; 916  : 
; 917  :         auto& _My_data       = _Mypair._Myval2;
; 918  :         pointer& _Myfirst    = _My_data._Myfirst;
; 919  :         pointer& _Mylast     = _My_data._Mylast;
; 920  :         const auto _Whereoff = static_cast<size_type>(_Where._Ptr - _Myfirst);
; 921  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 922  : 
; 923  :         // For one-at-back, provide strong guarantee.
; 924  :         // Otherwise, provide basic guarantee (despite N4659 26.3.11.5 [vector.modifiers]/1).
; 925  :         // Performance note: except for one-at-back, emplace_back()'s strong guarantee is unnecessary here.
; 926  : 
; 927  :         for (; _First != _Last; ++_First) {
; 928  :             emplace_back(*_First);
; 929  :         }
; 930  : 
; 931  :         _Orphan_range(_Myfirst + _Whereoff, _Myfirst + _Oldsize);
; 932  : 
; 933  :         _STD rotate(_Myfirst + _Whereoff, _Myfirst + _Oldsize, _Mylast);
; 934  :     }
; 935  : 
; 936  :     template <class _Iter>
; 937  :     _CONSTEXPR20_CONTAINER void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag) {
; 938  :         // insert forward range [_First, _Last) at _Where
; 939  :         const pointer _Whereptr = _Where._Ptr;
; 940  :         const auto _Count       = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 941  : 
; 942  :         auto& _My_data   = _Mypair._Myval2;
; 943  :         pointer& _Mylast = _My_data._Mylast;
; 944  : 
; 945  :         const pointer _Oldfirst     = _My_data._Myfirst;
; 946  :         const pointer _Oldlast      = _Mylast;
; 947  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
; 948  : 
; 949  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators
; 950  :         } else if (_Count > _Unused_capacity) { // reallocate
; 951  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);
; 952  : 
; 953  :             if (_Count > max_size() - _Oldsize) {
; 954  :                 _Xlength();
; 955  :             }
; 956  : 
; 957  :             const size_type _Newsize     = _Oldsize + _Count;
; 958  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 959  : 
; 960  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);
; 961  :             const auto _Whereoff            = static_cast<size_type>(_Whereptr - _Oldfirst);
; 962  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 963  :             pointer _Constructed_first      = _Constructed_last;
; 964  : 
; 965  :             _TRY_BEGIN
; 966  :             _Ucopy(_First, _Last, _Newvec + _Whereoff);
; 967  :             _Constructed_first = _Newvec + _Whereoff;
; 968  : 
; 969  :             if (_Count == 1 && _Whereptr == _Oldlast) { // one at back, provide strong guarantee
; 970  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
; 971  :             } else { // provide basic guarantee
; 972  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);
; 973  :                 _Constructed_first = _Newvec;
; 974  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
; 975  :             }
; 976  :             _CATCH_ALL
; 977  :             _Destroy(_Constructed_first, _Constructed_last);
; 978  :             _Getal().deallocate(_Newvec, _Newcapacity);
; 979  :             _RERAISE;
; 980  :             _CATCH_END
; 981  : 
; 982  :             _Change_array(_Newvec, _Newsize, _Newcapacity);
; 983  :         } else { // Attempt to provide the strong guarantee for EmplaceConstructible failure.
; 984  :                  // If we encounter copy/move construction/assignment failure, provide the basic guarantee.
; 985  :                  // (For one-at-back, this provides the strong guarantee.)
; 986  : 
; 987  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
; 988  : 
; 989  :             if (_Count < _Affected_elements) { // some affected elements must be assigned
; 990  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
; 991  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
; 992  :                 _Destroy(_Whereptr, _Whereptr + _Count);
; 993  : 
; 994  :                 _TRY_BEGIN
; 995  :                 _Ucopy(_First, _Last, _Whereptr);
; 996  :                 _CATCH_ALL
; 997  :                 // glue the broken pieces back together
; 998  : 
; 999  :                 _TRY_BEGIN
; 1000 :                 _Umove(_Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr);
; 1001 :                 _CATCH_ALL
; 1002 :                 // vaporize the detached piece
; 1003 :                 _Orphan_range(_Whereptr, _Oldlast);
; 1004 :                 _Destroy(_Whereptr + _Count, _Mylast);
; 1005 :                 _Mylast = _Whereptr;
; 1006 :                 _RERAISE;
; 1007 :                 _CATCH_END
; 1008 : 
; 1009 :                 _Move_unchecked(_Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count);
; 1010 :                 _Destroy(_Oldlast, _Mylast);
; 1011 :                 _Mylast = _Oldlast;
; 1012 :                 _RERAISE;
; 1013 :                 _CATCH_END
; 1014 :             } else { // affected elements don't overlap before/after
; 1015 :                 const pointer _Relocated = _Whereptr + _Count;
; 1016 :                 _Mylast                  = _Umove(_Whereptr, _Oldlast, _Relocated);
; 1017 :                 _Destroy(_Whereptr, _Oldlast);
; 1018 : 
; 1019 :                 _TRY_BEGIN
; 1020 :                 _Ucopy(_First, _Last, _Whereptr);
; 1021 :                 _CATCH_ALL
; 1022 :                 // glue the broken pieces back together
; 1023 : 
; 1024 :                 _TRY_BEGIN
; 1025 :                 _Umove(_Relocated, _Mylast, _Whereptr);
; 1026 :                 _CATCH_ALL
; 1027 :                 // vaporize the detached piece
; 1028 :                 _Orphan_range(_Whereptr, _Oldlast);
; 1029 :                 _Destroy(_Relocated, _Mylast);
; 1030 :                 _Mylast = _Whereptr;
; 1031 :                 _RERAISE;
; 1032 :                 _CATCH_END
; 1033 : 
; 1034 :                 _Destroy(_Relocated, _Mylast);
; 1035 :                 _Mylast = _Oldlast;
; 1036 :                 _RERAISE;
; 1037 :                 _CATCH_END
; 1038 :             }
; 1039 : 
; 1040 :             _Orphan_range(_Whereptr, _Oldlast);
; 1041 :         }
; 1042 :     }
; 1043 : 
; 1044 : public:
; 1045 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 1046 :     _CONSTEXPR20_CONTAINER iterator insert(const_iterator _Where, _Iter _First, _Iter _Last) {
; 1047 :         const pointer _Whereptr = _Where._Ptr;
; 1048 :         auto& _My_data          = _Mypair._Myval2;
; 1049 :         const pointer _Oldfirst = _My_data._Myfirst;
; 1050 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1051 :         _STL_VERIFY(
; 1052 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _My_data._Mylast >= _Whereptr,
; 1053 :             "vector insert iterator outside range");
; 1054 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1055 : 
; 1056 :         _Adl_verify_range(_First, _Last);
; 1057 :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);
; 1058 :         _Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 1059 :         return _Make_iterator_offset(_Whereoff);
; 1060 :     }
; 1061 : 
; 1062 :     _CONSTEXPR20_CONTAINER iterator insert(const_iterator _Where, initializer_list<_Ty> _Ilist) {
; 1063 :         return insert(_Where, _Ilist.begin(), _Ilist.end());
; 1064 :     }
; 1065 : 
; 1066 :     _CONSTEXPR20_CONTAINER void assign(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) {
; 1067 :         // assign _Newsize * _Val
; 1068 :         auto& _My_data    = _Mypair._Myval2;
; 1069 :         pointer& _Myfirst = _My_data._Myfirst;
; 1070 :         pointer& _Mylast  = _My_data._Mylast;
; 1071 : 
; 1072 :         _My_data._Orphan_all();
; 1073 : 
; 1074 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1075 :         if (_Newsize > _Oldsize) {
; 1076 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1077 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1078 :                 _Clear_and_reserve_geometric(_Newsize);
; 1079 :                 _Oldsize = 0;
; 1080 :             } else {
; 1081 :                 _STD fill(_Myfirst, _Mylast, _Val);
; 1082 :             }
; 1083 : 
; 1084 :             _Mylast = _Ufill(_Mylast, _Newsize - _Oldsize, _Val);
; 1085 :         } else {
; 1086 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1087 :             _STD fill(_Myfirst, _Newlast, _Val);
; 1088 :             _Destroy(_Newlast, _Mylast);
; 1089 :             _Mylast = _Newlast;
; 1090 :         }
; 1091 :     }
; 1092 : 
; 1093 : private:
; 1094 :     template <class _Iter>
; 1095 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, input_iterator_tag) {
; 1096 :         // assign input range [_First, _Last)
; 1097 :         auto& _My_data    = _Mypair._Myval2;
; 1098 :         pointer& _Myfirst = _My_data._Myfirst;
; 1099 :         pointer& _Mylast  = _My_data._Mylast;
; 1100 : 
; 1101 :         _My_data._Orphan_all();
; 1102 : 
; 1103 :         pointer _Next = _Myfirst;
; 1104 : 
; 1105 :         for (; _First != _Last && _Next != _Mylast; ++_First, (void) ++_Next) {
; 1106 :             *_Next = *_First;
; 1107 :         }
; 1108 : 
; 1109 :         // Code size optimization: we've exhausted only the source, only the dest, or both.
; 1110 :         // If we've exhausted only the source: we Trim, then Append does nothing.
; 1111 :         // If we've exhausted only the dest: Trim does nothing, then we Append.
; 1112 :         // If we've exhausted both: Trim does nothing, then Append does nothing.
; 1113 : 
; 1114 :         // Trim.
; 1115 :         _Destroy(_Next, _Mylast);
; 1116 :         _Mylast = _Next;
; 1117 : 
; 1118 :         // Append.
; 1119 :         for (; _First != _Last; ++_First) {
; 1120 :             emplace_back(*_First); // performance note: emplace_back()'s strong guarantee is unnecessary here
; 1121 :         }
; 1122 :     }
; 1123 : 
; 1124 :     template <class _Iter>
; 1125 :     _CONSTEXPR20_CONTAINER void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {
; 1126 :         // assign forward range [_First, _Last)
; 1127 :         const auto _Newsize = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 1128 :         auto& _My_data      = _Mypair._Myval2;
; 1129 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1130 :         pointer& _Mylast    = _My_data._Mylast;
; 1131 :         pointer& _Myend     = _My_data._Myend;
; 1132 : 
; 1133 :         _My_data._Orphan_all();
; 1134 : 
; 1135 :         if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<_Iter, _Ty*>::_Trivially_copyable>,
; 1136 :                           _Uses_default_construct<_Alty, _Ty*, decltype(*_First)>,
; 1137 :                           _Uses_default_destroy<_Alty, _Ty*>>) {
; 1138 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1139 :             if (!_STD is_constant_evaluated())
; 1140 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1141 :             {
; 1142 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1143 :                 if (_Newsize > _Oldcapacity) {
; 1144 :                     _Clear_and_reserve_geometric(_Newsize);
; 1145 :                 }
; 1146 : 
; 1147 :                 _Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));
; 1148 :                 return;
; 1149 :             }
; 1150 :         }
; 1151 :         auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1152 : 
; 1153 :         if (_Newsize > _Oldsize) {
; 1154 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1155 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1156 :                 _Clear_and_reserve_geometric(_Newsize);
; 1157 :                 _Oldsize = 0;
; 1158 :             }
; 1159 : 
; 1160 :             // performance note: traversing [_First, _Mid) twice
; 1161 :             const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));
; 1162 :             _Copy_unchecked(_First, _Mid, _Myfirst);
; 1163 :             _Mylast = _Ucopy(_Mid, _Last, _Mylast);
; 1164 :         } else {
; 1165 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1166 :             _Copy_unchecked(_First, _Last, _Myfirst);
; 1167 :             _Destroy(_Newlast, _Mylast);
; 1168 :             _Mylast = _Newlast;
; 1169 :         }
; 1170 :     }
; 1171 : 
; 1172 : public:
; 1173 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 1174 :     _CONSTEXPR20_CONTAINER void assign(_Iter _First, _Iter _Last) {
; 1175 :         _Adl_verify_range(_First, _Last);
; 1176 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 1177 :     }
; 1178 : 
; 1179 :     _CONSTEXPR20_CONTAINER void assign(initializer_list<_Ty> _Ilist) {
; 1180 :         _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
; 1181 :     }
; 1182 : 
; 1183 : private:
; 1184 :     _CONSTEXPR20_CONTAINER void _Copy_assign(const vector& _Right, false_type) {
; 1185 :         _Pocca(_Getal(), _Right._Getal());
; 1186 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1187 :         assign(_Right_data._Myfirst, _Right_data._Mylast);
; 1188 :     }
; 1189 : 
; 1190 :     _CONSTEXPR20_CONTAINER void _Copy_assign(const vector& _Right, true_type) {
; 1191 :         if (_Getal() != _Right._Getal()) {
; 1192 :             _Tidy();
; 1193 :             _Mypair._Myval2._Reload_proxy(
; 1194 :                 _GET_PROXY_ALLOCATOR(_Alty, _Getal()), _GET_PROXY_ALLOCATOR(_Alty, _Right._Getal()));
; 1195 :         }
; 1196 : 
; 1197 :         _Copy_assign(_Right, false_type{});
; 1198 :     }
; 1199 : 
; 1200 : public:
; 1201 :     _CONSTEXPR20_CONTAINER vector& operator=(const vector& _Right) {
; 1202 :         if (this != _STD addressof(_Right)) {
; 1203 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});
; 1204 :         }
; 1205 : 
; 1206 :         return *this;
; 1207 :     }
; 1208 : 
; 1209 :     _CONSTEXPR20_CONTAINER vector& operator=(initializer_list<_Ty> _Ilist) {
; 1210 :         _Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
; 1211 :         return *this;
; 1212 :     }
; 1213 : 
; 1214 : private:
; 1215 :     template <class _Ty2>
; 1216 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {
; 1217 :         if (_Newsize > max_size()) {
; 1218 :             _Xlength();
; 1219 :         }
; 1220 : 
; 1221 :         auto& _My_data    = _Mypair._Myval2;
; 1222 :         pointer& _Myfirst = _My_data._Myfirst;
; 1223 :         pointer& _Mylast  = _My_data._Mylast;
; 1224 : 
; 1225 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);
; 1226 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1227 : 
; 1228 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);
; 1229 :         const pointer _Appended_first = _Newvec + _Oldsize;
; 1230 :         pointer _Appended_last        = _Appended_first;
; 1231 : 
; 1232 :         _TRY_BEGIN
; 1233 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);
; 1234 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1235 :         _CATCH_ALL
; 1236 :         _Destroy(_Appended_first, _Appended_last);
; 1237 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1238 :         _RERAISE;
; 1239 :         _CATCH_END
; 1240 : 
; 1241 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1242 :     }
; 1243 : 
; 1244 :     template <class _Ty2>
; 1245 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {
; 1246 :         // trim or append elements, provide strong guarantee
; 1247 :         auto& _My_data      = _Mypair._Myval2;
; 1248 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1249 :         pointer& _Mylast    = _My_data._Mylast;
; 1250 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1251 :         if (_Newsize < _Oldsize) { // trim
; 1252 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1253 :             _Orphan_range(_Newlast, _Mylast);
; 1254 :             _Destroy(_Newlast, _Mylast);
; 1255 :             _Mylast = _Newlast;
; 1256 :             return;
; 1257 :         }
; 1258 : 
; 1259 :         if (_Newsize > _Oldsize) { // append
; 1260 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1261 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1262 :                 _Resize_reallocate(_Newsize, _Val);
; 1263 :                 return;
; 1264 :             }
; 1265 : 
; 1266 :             const pointer _Oldlast = _Mylast;
; 1267 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);
; 1268 :             _Orphan_range(_Oldlast, _Oldlast);
; 1269 :         }
; 1270 : 
; 1271 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1272 :     }
; 1273 : 
; 1274 : public:
; 1275 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {
; 1276 :         // trim or append value-initialized elements, provide strong guarantee
; 1277 :         _Resize(_Newsize, _Value_init_tag{});
; 1278 :     }
; 1279 : 
; 1280 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Ty& _Val) {
; 1281 :         // trim or append copies of _Val, provide strong guarantee
; 1282 :         _Resize(_Newsize, _Val);
; 1283 :     }
; 1284 : 
; 1285 : private:
; 1286 :     _CONSTEXPR20_CONTAINER void _Reallocate_exactly(const size_type _Newcapacity) {
; 1287 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1288 :         auto& _My_data    = _Mypair._Myval2;
; 1289 :         pointer& _Myfirst = _My_data._Myfirst;
; 1290 :         pointer& _Mylast  = _My_data._Mylast;
; 1291 : 
; 1292 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);
; 1293 : 
; 1294 :         const pointer _Newvec = _Getal().allocate(_Newcapacity);
; 1295 : 
; 1296 :         _TRY_BEGIN
; 1297 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 1298 :         _CATCH_ALL
; 1299 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1300 :         _RERAISE;
; 1301 :         _CATCH_END
; 1302 : 
; 1303 :         _Change_array(_Newvec, _Size, _Newcapacity);
; 1304 :     }
; 1305 : 
; 1306 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1307 :     void _Check_all_orphaned_locked() const noexcept {
; 1308 :         _Lockit _Lock(_LOCK_DEBUG);
; 1309 :         auto& _My_data = _Mypair._Myval2;
; 1310 :         _STL_INTERNAL_CHECK(!_My_data._Myproxy->_Myfirstiter);
; 1311 :     }
; 1312 : 
; 1313 :     _CONSTEXPR20_CONTAINER void _Check_all_orphaned() const noexcept {
; 1314 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1315 :         if (_STD is_constant_evaluated()) {
; 1316 :             auto& _My_data = _Mypair._Myval2;
; 1317 :             _STL_INTERNAL_CHECK(!_My_data._Myproxy->_Myfirstiter);
; 1318 :         } else
; 1319 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1320 :         {
; 1321 :             _Check_all_orphaned_locked();
; 1322 :         }
; 1323 :     }
; 1324 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1325 : 
; 1326 :     _CONSTEXPR20_CONTAINER void _Clear_and_reserve_geometric(const size_type _Newsize) {
; 1327 :         auto& _My_data    = _Mypair._Myval2;
; 1328 :         pointer& _Myfirst = _My_data._Myfirst;
; 1329 :         pointer& _Mylast  = _My_data._Mylast;
; 1330 :         pointer& _Myend   = _My_data._Myend;
; 1331 : 
; 1332 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1333 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1334 :         _Check_all_orphaned();
; 1335 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1336 : 
; 1337 :         if (_Newsize > max_size()) {
; 1338 :             _Xlength();
; 1339 :         }
; 1340 : 
; 1341 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 1342 : 
; 1343 :         if (_Myfirst) { // destroy and deallocate old array
; 1344 :             _Destroy(_Myfirst, _Mylast);
; 1345 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));
; 1346 : 
; 1347 :             _Myfirst = nullptr;
; 1348 :             _Mylast  = nullptr;
; 1349 :             _Myend   = nullptr;
; 1350 :         }
; 1351 : 
; 1352 :         _Buy_raw(_Newcapacity);
; 1353 :     }
; 1354 : 
; 1355 : public:
; 1356 :     _CONSTEXPR20_CONTAINER void reserve(_CRT_GUARDOVERFLOW const size_type _Newcapacity) {
; 1357 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1358 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00076	8b 85 b4 fc ff
	ff		 mov	 eax, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
$LN15@SplitLine:

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  0007c	50		 push	 eax
  0007d	ff 70 04	 push	 DWORD PTR [eax+4]
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1443 :         _Mylast = _Myfirst;

  00086	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]

; 1667 :         _Destroy_range(_First, _Last, _Getal());

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  0008f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _strLine$[ebp], 0

; 4562 :         _My_data._Mysize = 0;

  00096	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strLine$[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0009d	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strLine$[ebp+20], 15 ; 0000000fH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 1443 :         _Mylast = _Myfirst;

  000a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a6	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000a9	8b cf		 mov	 ecx, edi

; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000ab	c6 45 d8 00	 mov	 BYTE PTR _strLine$[ebp], 0

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000af	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL379@SplitLine:
  000b2	8a 01		 mov	 al, BYTE PTR [ecx]
  000b4	41		 inc	 ecx
  000b5	84 c0		 test	 al, al
  000b7	75 f9		 jne	 SHORT $LL379@SplitLine
  000b9	2b ca		 sub	 ecx, edx

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000bb	51		 push	 ecx
  000bc	57		 push	 edi
  000bd	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  000c0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 544  : 	DWORD basePos = 0;

  000c5	8b 4d e8	 mov	 ecx, DWORD PTR _strLine$[ebp+16]
  000c8	33 ff		 xor	 edi, edi
  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d1	89 8d b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], ecx
  000d7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@SplitLine:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000e0	8b b5 b0 fc ff
	ff		 mov	 esi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  000e6	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL380@SplitLine:
  000f0	8a 06		 mov	 al, BYTE PTR [esi]
  000f2	46		 inc	 esi
  000f3	84 c0		 test	 al, al
  000f5	75 f9		 jne	 SHORT $LL380@SplitLine
  000f7	2b f2		 sub	 esi, edx

; 2272 :         const value_type* _Result = _Bx._Buf;

  000f9	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]

; 2273 :         if (_Large_string_engaged()) {

  000fc	83 7d ec 10	 cmp	 DWORD PTR _strLine$[ebp+20], 16 ; 00000010H
  00100	8b 55 d8	 mov	 edx, DWORD PTR _strLine$[ebp]
  00103	0f 43 c2	 cmovae	 eax, edx
  00106	89 85 ac fc ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 851  :     if (_Start_at < _Hay_size) { // room for match, look for it

  0010c	3b f9		 cmp	 edi, ecx
  0010e	73 76		 jae	 SHORT $LN344@SplitLine
  00110	68 00 01 00 00	 push	 256			; 00000100H
  00115	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR __Matches$5[ebp]
  0011b	6a 00		 push	 0
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _memset

; 852  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 853  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00123	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  00129	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012c	8b c8		 mov	 ecx, eax
  0012e	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]

; 692  :         for (; _First != _Last; ++_First) {

  00131	3b c2		 cmp	 eax, edx
  00133	74 1b		 je	 SHORT $LN62@SplitLine
  00135	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL63@SplitLine:

; 693  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00140	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00143	41		 inc	 ecx
  00144	c6 84 05 c0 fe
	ff ff 01	 mov	 BYTE PTR __Matches$5[ebp+eax], 1
  0014c	3b ca		 cmp	 ecx, edx
  0014e	75 f0		 jne	 SHORT $LL63@SplitLine
$LN62@SplitLine:

; 859  :         const auto _End = _Haystack + _Hay_size;

  00150	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR __Result$2$[ebp]
  00156	8b 8d b8 fc ff
	ff		 mov	 ecx, DWORD PTR _strLine$1$[ebp]
  0015c	03 ca		 add	 ecx, edx

; 860  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0015e	8d 34 3a	 lea	 esi, DWORD PTR [edx+edi]
  00161	3b f1		 cmp	 esi, ecx
  00163	73 1e		 jae	 SHORT $LN386@SplitLine
  00165	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL53@SplitLine:

; 700  :         return _Matches[static_cast<unsigned char>(_Ch)];

  00170	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00173	8a 84 05 c0 fe
	ff ff		 mov	 al, BYTE PTR __Matches$5[ebp+eax]

; 861  :             if (!_Matches._Match(*_Match_try)) {

  0017a	84 c0		 test	 al, al
  0017c	74 45		 je	 SHORT $LN339@SplitLine

; 860  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0017e	46		 inc	 esi
  0017f	3b f1		 cmp	 esi, ecx
  00181	72 ed		 jb	 SHORT $LL53@SplitLine
$LN386@SplitLine:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 559  : 			if (endPos < 0)

  00183	8b 55 d8	 mov	 edx, DWORD PTR _strLine$[ebp]
$LN344@SplitLine:
  00186	c6 85 bf fc ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
$LN13@SplitLine:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0018d	8b 45 ec	 mov	 eax, DWORD PTR _strLine$[ebp+20]
  00190	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00193	0f 82 2c 02 00
	00		 jb	 $LN313@SplitLine

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00199	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0019c	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0019e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001a4	0f 82 11 02 00
	00		 jb	 $LN323@SplitLine

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001aa	8b 52 fc	 mov	 edx, DWORD PTR [edx-4]
  001ad	83 c1 23	 add	 ecx, 35			; 00000023H
  001b0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b2	83 c0 fc	 add	 eax, -4			; fffffffcH
  001b5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001b8	0f 87 28 02 00
	00		 ja	 $LN320@SplitLine
  001be	e9 f8 01 00 00	 jmp	 $LN323@SplitLine
$LN339@SplitLine:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 862  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  001c3	2b f2		 sub	 esi, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 549  : 		if (beginPos < 0)

  001c5	8b 55 d8	 mov	 edx, DWORD PTR _strLine$[ebp]
  001c8	78 bc		 js	 SHORT $LN344@SplitLine
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2264 :         if (_Large_string_engaged()) {

  001ca	8b 4d ec	 mov	 ecx, DWORD PTR _strLine$[ebp+20]
  001cd	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]
  001d0	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001d3	0f 43 c2	 cmovae	 eax, edx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 554  : 		if (strLine[beginPos] == '"')

  001d6	80 3c 06 22	 cmp	 BYTE PTR [esi+eax], 34	; 00000022H
  001da	75 6c		 jne	 SHORT $LN6@SplitLine

; 555  : 		{
; 556  : 			++beginPos;

  001dc	46		 inc	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  001dd	8d 7d d8	 lea	 edi, DWORD PTR _strLine$[ebp]

; 2273 :         if (_Large_string_engaged()) {

  001e0	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001e3	0f 43 fa	 cmovae	 edi, edx

; 761  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  001e6	3b b5 b8 fc ff
	ff		 cmp	 esi, DWORD PTR _strLine$1$[ebp]
  001ec	73 98		 jae	 SHORT $LN344@SplitLine
  001ee	68 00 01 00 00	 push	 256			; 00000100H
  001f3	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR __Matches$4[ebp]
  001f9	6a 00		 push	 0
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 _memset

; 764  :                                                                 // fall back to the serial algorithm
; 765  :             return _Traits_find_first_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 766  :         }
; 767  : 
; 768  :         const auto _End = _Haystack + _Hay_size;

  00201	8b 95 b8 fc ff
	ff		 mov	 edx, DWORD PTR _strLine$1$[ebp]

; 769  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00207	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  0020a	03 d7		 add	 edx, edi

; 693  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  0020c	c6 85 e2 fd ff
	ff 01		 mov	 BYTE PTR __Matches$4[ebp+34], 1
  00213	83 c4 0c	 add	 esp, 12			; 0000000cH

; 769  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00216	3b ca		 cmp	 ecx, edx
  00218	0f 83 65 ff ff
	ff		 jae	 $LN386@SplitLine
  0021e	66 90		 npad	 2
$LL122@SplitLine:

; 700  :         return _Matches[static_cast<unsigned char>(_Ch)];

  00220	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00223	8a 84 05 c0 fd
	ff ff		 mov	 al, BYTE PTR __Matches$4[ebp+eax]

; 770  :             if (_Matches._Match(*_Match_try)) {

  0022a	84 c0		 test	 al, al
  0022c	75 0a		 jne	 SHORT $LN341@SplitLine

; 769  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0022e	41		 inc	 ecx
  0022f	3b ca		 cmp	 ecx, edx
  00231	72 ed		 jb	 SHORT $LL122@SplitLine
  00233	e9 4b ff ff ff	 jmp	 $LN386@SplitLine
$LN341@SplitLine:

; 771  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00238	2b cf		 sub	 ecx, edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 559  : 			if (endPos < 0)

  0023a	0f 88 43 ff ff
	ff		 js	 $LN386@SplitLine

; 560  : 				return false;
; 561  : 
; 562  : 			basePos = endPos + 1;

  00240	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]

; 563  : 		}

  00243	e9 98 00 00 00	 jmp	 $LN7@SplitLine
$LN6@SplitLine:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00248	8b bd b0 fc ff
	ff		 mov	 edi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  0024e	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL381@SplitLine:
  00251	8a 07		 mov	 al, BYTE PTR [edi]
  00253	47		 inc	 edi
  00254	84 c0		 test	 al, al
  00256	75 f9		 jne	 SHORT $LL381@SplitLine

; 2273 :         if (_Large_string_engaged()) {

  00258	83 7d ec 10	 cmp	 DWORD PTR _strLine$[ebp+20], 16 ; 00000010H
  0025c	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]
  0025f	0f 43 c2	 cmovae	 eax, edx
  00262	89 85 ac fc ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00268	2b f9		 sub	 edi, ecx

; 761  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  0026a	74 6f		 je	 SHORT $LN183@SplitLine
  0026c	3b b5 b8 fc ff
	ff		 cmp	 esi, DWORD PTR _strLine$1$[ebp]
  00272	73 67		 jae	 SHORT $LN183@SplitLine
  00274	68 00 01 00 00	 push	 256			; 00000100H
  00279	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR __Matches$3[ebp]
  0027f	6a 00		 push	 0
  00281	50		 push	 eax
  00282	e8 00 00 00 00	 call	 _memset

; 762  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 763  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00287	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  0028d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00290	8b c8		 mov	 ecx, eax
  00292	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  00295	8b fe		 mov	 edi, esi

; 692  :         for (; _First != _Last; ++_First) {

  00297	3b c2		 cmp	 eax, edx
  00299	74 15		 je	 SHORT $LN193@SplitLine
  0029b	0f 1f 44 00 00	 npad	 5
$LL194@SplitLine:

; 693  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  002a0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  002a3	41		 inc	 ecx
  002a4	c6 84 05 c0 fc
	ff ff 01	 mov	 BYTE PTR __Matches$3[ebp+eax], 1
  002ac	3b ca		 cmp	 ecx, edx
  002ae	75 f0		 jne	 SHORT $LL194@SplitLine
$LN193@SplitLine:

; 768  :         const auto _End = _Haystack + _Hay_size;

  002b0	8b 8d b8 fc ff
	ff		 mov	 ecx, DWORD PTR _strLine$1$[ebp]
  002b6	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR __Result$2$[ebp]
  002bc	03 ca		 add	 ecx, edx

; 769  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  002be	03 fa		 add	 edi, edx
  002c0	3b f9		 cmp	 edi, ecx
  002c2	73 17		 jae	 SHORT $LN183@SplitLine
$LL184@SplitLine:

; 700  :         return _Matches[static_cast<unsigned char>(_Ch)];

  002c4	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  002c7	8a 84 05 c0 fc
	ff ff		 mov	 al, BYTE PTR __Matches$3[ebp+eax]

; 770  :             if (_Matches._Match(*_Match_try)) {

  002ce	84 c0		 test	 al, al
  002d0	0f 85 83 00 00
	00		 jne	 $LN343@SplitLine

; 769  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  002d6	47		 inc	 edi
  002d7	3b f9		 cmp	 edi, ecx
  002d9	72 e9		 jb	 SHORT $LL184@SplitLine
$LN183@SplitLine:

; 772  :             }
; 773  :         }
; 774  :     }
; 775  : 
; 776  :     return static_cast<size_t>(-1); // no match

  002db	83 cf ff	 or	 edi, -1
$LN181@SplitLine:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 566  : 			endPos = strLine.find_first_of(c_szDelimeter, beginPos);

  002de	8b cf		 mov	 ecx, edi
$LN7@SplitLine:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2291 :         if (_Mysize < _Off) {

  002e0	8b 85 b8 fc ff
	ff		 mov	 eax, DWORD PTR _strLine$1$[ebp]

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  002e6	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0

; 4562 :         _My_data._Mysize = 0;

  002ed	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  002f4	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002fb	c6 45 c0 00	 mov	 BYTE PTR $T6[ebp], 0

; 2291 :         if (_Mysize < _Off) {

  002ff	3b c6		 cmp	 eax, esi
  00301	0f 82 e4 00 00
	00		 jb	 $LN347@SplitLine

; 2309 :         return (_STD min)(_Size, _Mysize - _Off);

  00307	2b c6		 sub	 eax, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 570  : 		pkVec_strToken->push_back(strLine.substr(beginPos, endPos - beginPos));

  00309	2b ce		 sub	 ecx, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2309 :         return (_STD min)(_Size, _Mysize - _Off);

  0030b	3b c1		 cmp	 eax, ecx
  0030d	0f 42 c8	 cmovb	 ecx, eax

; 2273 :         if (_Large_string_engaged()) {

  00310	83 7d ec 10	 cmp	 DWORD PTR _strLine$[ebp+20], 16 ; 00000010H
  00314	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]
  00317	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strLine$[ebp]

; 3190 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  0031b	51		 push	 ecx
  0031c	03 c6		 add	 eax, esi
  0031e	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00327	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 570  : 		pkVec_strToken->push_back(strLine.substr(beginPos, endPos - beginPos));

  0032d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 730  :         if (_Mylast != _My_data._Myend) {

  00331	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00334	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00337	74 24		 je	 SHORT $LN243@SplitLine
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00339	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T6[ebp]

; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  0033d	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00342	c6 45 c0 00	 mov	 BYTE PTR $T6[ebp], 0

; 2835 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00346	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00349	f3 0f 7e 45 d0	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  0034e	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 716  :         ++_Mylast;

  00353	83 41 04 18	 add	 DWORD PTR [ecx+4], 24	; 00000018H

; 731  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00357	eb 11		 jmp	 SHORT $LN242@SplitLine
$LN343@SplitLine:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 771  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00359	2b fa		 sub	 edi, edx
  0035b	eb 81		 jmp	 SHORT $LN181@SplitLine
$LN243@SplitLine:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vector

; 734  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0035d	8d 55 c0	 lea	 edx, DWORD PTR $T6[ebp]
  00360	52		 push	 edx
  00361	50		 push	 eax
  00362	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00367	8b 55 d4	 mov	 edx, DWORD PTR $T6[ebp+20]
$LN242@SplitLine:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 570  : 		pkVec_strToken->push_back(strLine.substr(beginPos, endPos - beginPos));

  0036a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0036e	83 fa 10	 cmp	 edx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00371	72 28		 jb	 SHORT $LN286@SplitLine
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00373	8b 4d c0	 mov	 ecx, DWORD PTR $T6[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00376	42		 inc	 edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00377	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00379	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0037f	72 10		 jb	 SHORT $LN296@SplitLine

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00381	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00384	83 c2 23	 add	 edx, 35			; 00000023H
  00387	2b c1		 sub	 eax, ecx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00389	83 c0 fc	 add	 eax, -4			; fffffffcH
  0038c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0038f	77 55		 ja	 SHORT $LN320@SplitLine
$LN296@SplitLine:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00391	52		 push	 edx
  00392	51		 push	 ecx
  00393	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00398	83 c4 08	 add	 esp, 8
$LN286@SplitLine:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 571  : 	} while (basePos < strLine.length());

  0039b	8b 4d e8	 mov	 ecx, DWORD PTR _strLine$[ebp+16]
  0039e	89 8d b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], ecx
  003a4	3b f9		 cmp	 edi, ecx
  003a6	0f 82 34 fd ff
	ff		 jb	 $LL4@SplitLine

; 573  : 	return true;

  003ac	8b 55 d8	 mov	 edx, DWORD PTR _strLine$[ebp]
  003af	c6 85 bf fc ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  003b6	e9 d2 fd ff ff	 jmp	 $LN13@SplitLine
$LN323@SplitLine:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  003bb	51		 push	 ecx
  003bc	52		 push	 edx
  003bd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003c2	83 c4 08	 add	 esp, 8
$LN313@SplitLine:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 573  : 	return true;

  003c5	8a 85 bf fc ff
	ff		 mov	 al, BYTE PTR $T2[ebp]

; 574  : }

  003cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003d5	59		 pop	 ecx
  003d6	5f		 pop	 edi
  003d7	5e		 pop	 esi
  003d8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003db	33 cd		 xor	 ecx, ebp
  003dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e2	8b e5		 mov	 esp, ebp
  003e4	5d		 pop	 ebp
  003e5	c3		 ret	 0
$LN320@SplitLine:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003e6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN347@SplitLine:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2292 :             _Xran();

  003eb	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN390@SplitLine:
  003f0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a ac fc ff
	ff		 mov	 ecx, DWORD PTR [edx-852]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; SplitLine
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?RemoveAllDirectory@@YAXPBD@Z
_TEXT	SEGMENT
_c_szDirectoryName$GSCopy$1$ = -348			; size = 4
_remover$3 = -344					; size = 328
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szDirectoryName$ = 8					; size = 4
?RemoveAllDirectory@@YAXPBD@Z PROC			; RemoveAllDirectory, COMDAT

; 515  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RemoveAllDirectory@@YAXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 5d 08	 mov	 ebx, DWORD PTR _c_szDirectoryName$[ebp]

; 463  : 		CDirRemover()

  00031	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]

; 515  : {

  00037	89 9d a4 fe ff
	ff		 mov	 DWORD PTR _c_szDirectoryName$GSCopy$1$[ebp], ebx

; 463  : 		CDirRemover()

  0003d	e8 00 00 00 00	 call	 ??0CDir@@QAE@XZ		; CDir::CDir
  00042	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$3[ebp], OFFSET ??_7CDirRemover@@6B@

; 516  : 	{
; 517  : 		CDirRemover remover;
; 518  : 		remover.Create("*.*", c_szDirectoryName);

  0004c	6a 00		 push	 0
  0004e	53		 push	 ebx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_03EMIMMIHL@?$CK?4?$CK@
  00054	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	e8 00 00 00 00	 call	 ?Create@CDir@@QAE_NPBD0H@Z ; CDir::Create
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 253  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  00066	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+12
  0006c	8b f1		 mov	 esi, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1099 :             _Myproxy = _Parent->_Myproxy;

  0006e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A
  00074	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__RemoveDirectoryA@4
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL75@RemoveAllD:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 897  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00080	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+16
  00085	03 c1		 add	 eax, ecx

; 348  :         return this->_Myoff == _Right._Myoff;

  00087	3b f0		 cmp	 esi, eax
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 499  : 			for (std::deque<std::string>::iterator itor = ms_strDirectoryDeque.begin(); itor != ms_strDirectoryDeque.end(); ++itor)

  00089	74 2a		 je	 SHORT $LN9@RemoveAllD
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1107 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0008b	85 ff		 test	 edi, edi
  0008d	74 04		 je	 SHORT $LN54@RemoveAllD
  0008f	8b 07		 mov	 eax, DWORD PTR [edi]
  00091	eb 02		 jmp	 SHORT $LN55@RemoveAllD
$LN54@RemoveAllD:
  00093	33 c0		 xor	 eax, eax
$LN55@RemoveAllD:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00095	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3888 :         return _Mypair._Myval2._Myptr();

  00098	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 559  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0009b	49		 dec	 ecx
  0009c	23 ce		 and	 ecx, esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3888 :         return _Mypair._Myval2._Myptr();

  0009e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 2286 :         return _BUF_SIZE <= _Myres;

  000a1	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  000a5	72 02		 jb	 SHORT $LN61@RemoveAllD

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
$LN61@RemoveAllD:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 502  : 				RemoveDirectory(c_rstrDirectory.c_str());

  000a9	50		 push	 eax
  000aa	ff d3		 call	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\deque

; 281  :         ++_Myoff;

  000ac	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+12
  000b2	46		 inc	 esi
  000b3	eb cb		 jmp	 SHORT $LL75@RemoveAllD
$LN9@RemoveAllD:

; 1332 :         _Tidy();

  000b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
  000ba	e8 00 00 00 00	 call	 ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 468  : 		}

  000bf	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]
  000c5	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$3[ebp], OFFSET ??_7CDirRemover@@6B@
  000cf	e8 00 00 00 00	 call	 ??1CDir@@UAE@XZ		; CDir::~CDir

; 519  : 		CDirRemover::RemoveAllDirectory();
; 520  : 	}
; 521  : 	RemoveDirectory(c_szDirectoryName);

  000d4	ff b5 a4 fe ff
	ff		 push	 DWORD PTR _c_szDirectoryName$GSCopy$1$[ebp]
  000da	ff d3		 call	 ebx

; 522  : }

  000dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e6	59		 pop	 ecx
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RemoveAllDirectory@@YAXPBD@Z$0:
  00000	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CDirRemover@@UAE@XZ	; CDirRemover::~CDirRemover
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?RemoveAllDirectory@@YAXPBD@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RemoveAllDirectory@@YAXPBD@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RemoveAllDirectory@@YAXPBD@Z ENDP			; RemoveAllDirectory
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?MyCreateDirectory@@YAXPBD@Z
_TEXT	SEGMENT
_len$1$ = -4						; size = 4
_p$1$ = 8						; size = 4
_path$ = 8						; size = 4
?MyCreateDirectory@@YAXPBD@Z PROC			; MyCreateDirectory, COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 428  : 	if (!path || !*path)

  00005	8b 75 08	 mov	 esi, DWORD PTR _path$[ebp]
  00008	85 f6		 test	 esi, esi
  0000a	0f 84 99 00 00
	00		 je	 $LN5@MyCreateDi
  00010	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00013	0f 84 90 00 00
	00		 je	 $LN5@MyCreateDi

; 429  : 		return;
; 430  : 
; 431  : 	char * dir;
; 432  : 	const char * p;
; 433  : 
; 434  : 	if (strlen(path) >= 3)

  00019	8b ce		 mov	 ecx, esi
  0001b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0001e	66 90		 npad	 2
$LL16@MyCreateDi:
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	41		 inc	 ecx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL16@MyCreateDi
  00027	2b ca		 sub	 ecx, edx
  00029	83 f9 03	 cmp	 ecx, 3
  0002c	72 09		 jb	 SHORT $LN7@MyCreateDi

; 435  : 	{
; 436  : 		if (*(path + 1) == ':')

  0002e	80 7e 01 3a	 cmp	 BYTE PTR [esi+1], 58	; 0000003aH
  00032	75 03		 jne	 SHORT $LN7@MyCreateDi

; 437  : 			path += 3;

  00034	83 c6 03	 add	 esi, 3
$LN7@MyCreateDi:

; 438  : 	}
; 439  : 
; 440  : 	p = path;
; 441  : 
; 442  : 	int len = strlen(path) + 1;

  00037	8b ce		 mov	 ecx, esi
  00039	89 75 08	 mov	 DWORD PTR _p$1$[ebp], esi
  0003c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0003f	90		 npad	 1
$LL17@MyCreateDi:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL17@MyCreateDi
  00047	2b ca		 sub	 ecx, edx
  00049	57		 push	 edi
  0004a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 443  : 	dir = new char[len];

  0004d	50		 push	 eax
  0004e	89 45 fc	 mov	 DWORD PTR _len$1$[ebp], eax
  00051	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 444  : 
; 445  : 	while (*p)

  00056	8a 0e		 mov	 cl, BYTE PTR [esi]
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	84 c9		 test	 cl, cl
  0005f	74 3e		 je	 SHORT $LN3@MyCreateDi

; 446  : 	{
; 447  : 		if (*p == '/' || *p == '\\')

  00061	53		 push	 ebx
  00062	33 db		 xor	 ebx, ebx
  00064	8b c6		 mov	 eax, esi
$LL2@MyCreateDi:
  00066	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  00069	74 05		 je	 SHORT $LN14@MyCreateDi
  0006b	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  0006e	75 22		 jne	 SHORT $LN8@MyCreateDi
$LN14@MyCreateDi:

; 448  : 		{
; 449  : 			memset(dir, 0, len);

  00070	ff 75 fc	 push	 DWORD PTR _len$1$[ebp]
  00073	6a 00		 push	 0
  00075	57		 push	 edi
  00076	e8 00 00 00 00	 call	 _memset

; 450  : 			strncpy(dir, path, p - path);

  0007b	53		 push	 ebx
  0007c	56		 push	 esi
  0007d	57		 push	 edi
  0007e	e8 00 00 00 00	 call	 _strncpy
  00083	83 c4 18	 add	 esp, 24			; 00000018H

; 451  : 			CreateDirectory(dir, NULL);

  00086	6a 00		 push	 0
  00088	57		 push	 edi
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8
  0008f	8b 45 08	 mov	 eax, DWORD PTR _p$1$[ebp]
$LN8@MyCreateDi:

; 452  : 		}
; 453  : 
; 454  : 		++p;

  00092	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00095	40		 inc	 eax
  00096	43		 inc	 ebx
  00097	89 45 08	 mov	 DWORD PTR _p$1$[ebp], eax
  0009a	84 c9		 test	 cl, cl
  0009c	75 c8		 jne	 SHORT $LL2@MyCreateDi
  0009e	5b		 pop	 ebx
$LN3@MyCreateDi:

; 455  : 	}
; 456  : 
; 457  : 	delete [] dir;

  0009f	57		 push	 edi
  000a0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000a5	83 c4 04	 add	 esp, 4
  000a8	5f		 pop	 edi
$LN5@MyCreateDi:
  000a9	5e		 pop	 esi

; 458  : }

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
?MyCreateDirectory@@YAXPBD@Z ENDP			; MyCreateDirectory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?fMINMAX@@YAMMMM@Z
_TEXT	SEGMENT
tv128 = 8						; size = 4
_min$ = 8						; size = 4
_value$ = 12						; size = 4
_max$ = 16						; size = 4
?fMINMAX@@YAMMMM@Z PROC					; fMINMAX, COMDAT

; 409  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 410  :     register float tv;
; 411  : 
; 412  :     tv = (min > value ? min : value);

  00003	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _min$[ebp]
  00008	f3 0f 5f 4d 0c	 maxss	 xmm1, DWORD PTR _value$[ebp]

; 413  :     return (max < tv) ? max : tv;

  0000d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _max$[ebp]
  00012	f3 0f 5d c1	 minss	 xmm0, xmm1
  00016	f3 0f 11 45 08	 movss	 DWORD PTR tv128[ebp], xmm0
  0001b	d9 45 08	 fld	 DWORD PTR tv128[ebp]

; 414  : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?fMINMAX@@YAMMMM@Z ENDP					; fMINMAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?fMAX@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?fMAX@@YAMMM@Z PROC					; fMAX, COMDAT

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 405  :     return a > b ? a : b;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	f3 0f 5f 45 0c	 maxss	 xmm0, DWORD PTR _b$[ebp]
  0000d	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  00012	d9 45 08	 fld	 DWORD PTR tv65[ebp]

; 406  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?fMAX@@YAMMM@Z ENDP					; fMAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?fMIN@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?fMIN@@YAMMM@Z PROC					; fMIN, COMDAT

; 399  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 400  :     return a < b ? a : b;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	f3 0f 5d 45 0c	 minss	 xmm0, DWORD PTR _b$[ebp]
  0000d	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  00012	d9 45 08	 fld	 DWORD PTR tv65[ebp]

; 401  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?fMIN@@YAMMM@Z ENDP					; fMIN
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?MINMAX@@YAHHHH@Z
_TEXT	SEGMENT
_min$ = 8						; size = 4
_value$ = 12						; size = 4
_max$ = 16						; size = 4
?MINMAX@@YAHHHH@Z PROC					; MINMAX, COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 390  : 	if (max < min)

  00003	8b 55 10	 mov	 edx, DWORD PTR _max$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _min$[ebp]
  00009	3b d1		 cmp	 edx, ecx
  0000b	7d 0e		 jge	 SHORT $LN2@MINMAX

; 391  : 		return MAX(min, value);

  0000d	ff 75 0c	 push	 DWORD PTR _value$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?MAX@@YAHHH@Z		; MAX
  00016	83 c4 08	 add	 esp, 8

; 396  : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN2@MINMAX:

; 392  : 
; 393  :     register int tv;
; 394  :     tv = (min > value ? min : value);

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  0001e	3b c8		 cmp	 ecx, eax
  00020	0f 4f c1	 cmovg	 eax, ecx

; 395  :     return (max < tv) ? max : tv;

  00023	3b d0		 cmp	 edx, eax
  00025	0f 4c c2	 cmovl	 eax, edx

; 396  : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?MINMAX@@YAHHHH@Z ENDP					; MINMAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?MAX@@YAHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?MAX@@YAHHH@Z PROC					; MAX, COMDAT

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 385  :     return a > b ? a : b;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	39 45 08	 cmp	 DWORD PTR _a$[ebp], eax
  00009	0f 4f 45 08	 cmovg	 eax, DWORD PTR _a$[ebp]

; 386  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?MAX@@YAHHH@Z ENDP					; MAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?MIN@@YAHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?MIN@@YAHHH@Z PROC					; MIN, COMDAT

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 380  :     return a < b ? a : b;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	39 45 08	 cmp	 DWORD PTR _a$[ebp], eax
  00009	0f 4c 45 08	 cmovl	 eax, DWORD PTR _a$[ebp]

; 381  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?MIN@@YAHHH@Z ENDP					; MIN
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?IsGlobalFileName@@YA_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?IsGlobalFileName@@YA_NPBD@Z PROC			; IsGlobalFileName, COMDAT

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 423  : 	return strchr(c_szFileName, ':') != NULL;

  00003	6a 3a		 push	 58			; 0000003aH
  00005	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00008	e8 00 00 00 00	 call	 _strchr
  0000d	83 c4 08	 add	 esp, 8
  00010	85 c0		 test	 eax, eax
  00012	0f 95 c0	 setne	 al

; 424  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?IsGlobalFileName@@YA_NPBD@Z ENDP			; IsGlobalFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?IsFile@@YA_NPBD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?IsFile@@YA_NPBD@Z PROC					; IsFile, COMDAT

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 418  : 	return _access(filename, 0) == 0 ? true : false;

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  00008	e8 00 00 00 00	 call	 __access
  0000d	83 c4 08	 add	 esp, 8
  00010	85 c0		 test	 eax, eax
  00012	0f 94 c0	 sete	 al

; 419  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?IsFile@@YA_NPBD@Z ENDP					; IsFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?PrintAsciiData@@YAXPBXH@Z
_TEXT	SEGMENT
_void_data$ = 8						; size = 4
_bytes$ = 12						; size = 4
?PrintAsciiData@@YAXPBXH@Z PROC				; PrintAsciiData, COMDAT

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 332  :     int                 i, j, k;
; 333  :     const unsigned char* p;
; 334  : 	const unsigned char* data;
; 335  : 
; 336  : 	data = (const unsigned char*) void_data;
; 337  : 
; 338  :     fprintf(stdout, "------------------------------------------------------------------\n");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ___acrt_iob_func
  0000f	83 c4 04	 add	 esp, 4
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _fprintf
  00018	8b 45 08	 mov	 eax, DWORD PTR _void_data$[ebp]
  0001b	83 c4 08	 add	 esp, 8
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _bytes$[ebp]

; 339  :     j = bytes;

  00021	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@PrintAscii:

; 340  :     while (1)
; 341  :     {
; 342  :         k = j >= 16 ? 16 : j;

  00030	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00033	8b d9		 mov	 ebx, ecx
  00035	0f 4d da	 cmovge	 ebx, edx
  00038	33 f6		 xor	 esi, esi
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL6@PrintAscii:

; 346  :         {
; 347  :             if (i >= k)

  00040	3b f3		 cmp	 esi, ebx
  00042	7c 1a		 jl	 SHORT $LN10@PrintAscii

; 348  :                 fprintf(stdout, "   ");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_03NDEAONJP@?5?5?5@
  00049	6a 01		 push	 1
  0004b	e8 00 00 00 00	 call	 ___acrt_iob_func
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _fprintf
  00059	83 c4 08	 add	 esp, 8
  0005c	eb 1d		 jmp	 SHORT $LN11@PrintAscii
$LN10@PrintAscii:

; 349  :             else
; 350  :                 fprintf(stdout, "%02x ", *p);

  0005e	0f b6 04 06	 movzx	 eax, BYTE PTR [esi+eax]
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_05CNDJFPDP@?$CF02x?5@
  00068	6a 01		 push	 1
  0006a	e8 00 00 00 00	 call	 ___acrt_iob_func
  0006f	83 c4 04	 add	 esp, 4
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _fprintf
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@PrintAscii:

; 343  : 
; 344  :         p = data;
; 345  :         for (i = 0; i < 16; ++i)

  0007b	8b 45 08	 mov	 eax, DWORD PTR _void_data$[ebp]
  0007e	46		 inc	 esi
  0007f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00082	7c bc		 jl	 SHORT $LL6@PrintAscii

; 351  :             p++;
; 352  :         }
; 353  : 
; 354  :         fprintf(stdout, "| ");

  00084	68 00 00 00 00	 push	 OFFSET ??_C@_02MINBJDHL@?$HM?5@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ___acrt_iob_func
  00090	83 c4 04	 add	 esp, 4
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _fprintf

; 355  : 
; 356  :         p = data;

  00099	8b 75 08	 mov	 esi, DWORD PTR _void_data$[ebp]
  0009c	83 c4 08	 add	 esp, 8
  0009f	33 ff		 xor	 edi, edi

; 357  :         for (i = 0; i < k; ++i)

  000a1	85 db		 test	 ebx, ebx
  000a3	7e 41		 jle	 SHORT $LN8@PrintAscii
$LL9@PrintAscii:

; 358  :         {
; 359  :             if (i >= k)
; 360  :                 fprintf(stdout, " ");
; 361  :             else
; 362  :                 fprintf(stdout, "%c", ishprint(*p) ? *p : '.');

  000a5	8a 0e		 mov	 cl, BYTE PTR [esi]
  000a7	8a c1		 mov	 al, cl
  000a9	24 e0		 and	 al, 224			; 000000e0H
  000ab	3c 90		 cmp	 al, 144			; 00000090H
  000ad	77 15		 ja	 SHORT $LN33@PrintAscii
  000af	0f b6 c1	 movzx	 eax, cl
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _isprint
  000b8	83 c4 04	 add	 esp, 4
  000bb	85 c0		 test	 eax, eax
  000bd	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  000c2	74 03		 je	 SHORT $LN17@PrintAscii
$LN33@PrintAscii:
  000c4	0f b6 06	 movzx	 eax, BYTE PTR [esi]
$LN17@PrintAscii:
  000c7	50		 push	 eax
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  000cd	6a 01		 push	 1
  000cf	e8 00 00 00 00	 call	 ___acrt_iob_func
  000d4	83 c4 04	 add	 esp, 4
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _fprintf
  000dd	47		 inc	 edi
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 363  :             p++;

  000e1	46		 inc	 esi
  000e2	3b fb		 cmp	 edi, ebx
  000e4	7c bf		 jl	 SHORT $LL9@PrintAscii
$LN8@PrintAscii:

; 364  :         }
; 365  : 
; 366  :         fprintf(stdout, "\n");

  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  000eb	6a 01		 push	 1
  000ed	e8 00 00 00 00	 call	 ___acrt_iob_func
  000f2	83 c4 04	 add	 esp, 4
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _fprintf

; 367  : 
; 368  :         j       -= 16;

  000fb	8b 4d 0c	 mov	 ecx, DWORD PTR _bytes$[ebp]
  000fe	83 c4 08	 add	 esp, 8

; 369  :         data    += 16;

  00101	8b 45 08	 mov	 eax, DWORD PTR _void_data$[ebp]
  00104	83 e9 10	 sub	 ecx, 16			; 00000010H
  00107	83 c0 10	 add	 eax, 16			; 00000010H
  0010a	89 4d 0c	 mov	 DWORD PTR _bytes$[ebp], ecx
  0010d	89 45 08	 mov	 DWORD PTR _void_data$[ebp], eax

; 370  : 
; 371  :         if (j <= 0)

  00110	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00115	85 c9		 test	 ecx, ecx
  00117	0f 8f 13 ff ff
	ff		 jg	 $LL2@PrintAscii

; 372  :             break;
; 373  :     }
; 374  : 
; 375  :     fprintf(stdout, "------------------------------------------------------------------\n");

  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
  00122	6a 01		 push	 1
  00124	e8 00 00 00 00	 call	 ___acrt_iob_func
  00129	83 c4 04	 add	 esp, 4
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 _fprintf
  00132	83 c4 08	 add	 esp, 8
  00135	5f		 pop	 edi
  00136	5e		 pop	 esi
  00137	5b		 pop	 ebx

; 376  : }

  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?PrintAsciiData@@YAXPBXH@Z ENDP				; PrintAsciiData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_szSrc$ = 8						; size = 4
tv75 = 12						; size = 4
_rString$ = 12						; size = 4
?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; StringPath, COMDAT

; 315  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00005	8b 75 0c	 mov	 esi, DWORD PTR _rString$[ebp]
  00008	8b ce		 mov	 ecx, esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 315  : {

  0000a	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000b	6a 00		 push	 0
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00012	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 317  : 	rString.resize(strlen(c_szSrc));

  00017	8b 5d 08	 mov	 ebx, DWORD PTR _c_szSrc$[ebp]
  0001a	8b cb		 mov	 ecx, ebx
  0001c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0001f	90		 npad	 1
$LL49@StringPath:
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	41		 inc	 ecx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL49@StringPath
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3920 :         const size_type _Old_size = size();

  00027	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 317  : 	rString.resize(strlen(c_szSrc));

  0002a	2b ca		 sub	 ecx, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3921 :         if (_Newsize <= _Old_size) {

  0002c	3b c8		 cmp	 ecx, eax
  0002e	77 13		 ja	 SHORT $LN15@StringPath

; 4557 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  00030	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 2263 :         value_type* _Result = _Bx._Buf;

  00033	8b c6		 mov	 eax, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  00035	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  00039	72 02		 jb	 SHORT $LN46@StringPath

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 06		 mov	 eax, DWORD PTR [esi]
$LN46@StringPath:

; 4557 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  0003d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 3923 :         } else {

  00041	eb 0c		 jmp	 SHORT $LN16@StringPath
$LN15@StringPath:

; 3924 :             append(_Newsize - _Old_size, _Ch);

  00043	2b c8		 sub	 ecx, eax
  00045	6a 00		 push	 0
  00047	51		 push	 ecx
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN16@StringPath:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 319  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  0004f	8b cb		 mov	 ecx, ebx
  00051	33 ff		 xor	 edi, edi
  00053	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL50@StringPath:
  00056	8a 01		 mov	 al, BYTE PTR [ecx]
  00058	41		 inc	 ecx
  00059	84 c0		 test	 al, al
  0005b	75 f9		 jne	 SHORT $LL50@StringPath
  0005d	2b ca		 sub	 ecx, edx
  0005f	74 44		 je	 SHORT $LN3@StringPath
$LL4@StringPath:

; 320  : 	{
; 321  : 		if (c_szSrc[i] == '\\')

  00061	8a 04 1f	 mov	 al, BYTE PTR [edi+ebx]
  00064	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00067	3c 5c		 cmp	 al, 92			; 0000005cH
  00069	75 0f		 jne	 SHORT $LN5@StringPath
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2263 :         value_type* _Result = _Bx._Buf;

  0006b	8b c6		 mov	 eax, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  0006d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  00070	72 02		 jb	 SHORT $LN48@StringPath

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  00072	8b 06		 mov	 eax, DWORD PTR [esi]
$LN48@StringPath:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 322  : 			rString[i] = '/';

  00074	c6 04 38 2f	 mov	 BYTE PTR [eax+edi], 47	; 0000002fH
  00078	eb 18		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2263 :         value_type* _Result = _Bx._Buf;

  0007a	8b de		 mov	 ebx, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  0007c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  0007f	72 02		 jb	 SHORT $LN47@StringPath

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  00081	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN47@StringPath:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 324  : 			rString[i] = korean_tolower(c_szSrc[i]);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00089	88 04 3b	 mov	 BYTE PTR [ebx+edi], al
  0008c	83 c4 04	 add	 esp, 4
  0008f	8b 5d 08	 mov	 ebx, DWORD PTR _c_szSrc$[ebp]
$LN2@StringPath:

; 319  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  00092	8b c3		 mov	 eax, ebx
  00094	47		 inc	 edi
  00095	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL51@StringPath:
  00098	8a 08		 mov	 cl, BYTE PTR [eax]
  0009a	40		 inc	 eax
  0009b	84 c9		 test	 cl, cl
  0009d	75 f9		 jne	 SHORT $LL51@StringPath
  0009f	2b c2		 sub	 eax, edx
  000a1	3b f8		 cmp	 edi, eax
  000a3	72 bc		 jb	 SHORT $LL4@StringPath
$LN3@StringPath:
  000a5	5f		 pop	 edi

; 325  : 	}
; 326  : }

  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXPBDPAD@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_c_szSrc$ = 8						; size = 4
_szDest$ = 12						; size = 4
?StringPath@@YAXPBDPAD@Z PROC				; StringPath, COMDAT

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 305  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _c_szSrc$[ebp]
  00008	8b cb		 mov	 ecx, ebx
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL12@StringPath:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL12@StringPath
  00017	2b ca		 sub	 ecx, edx
  00019	74 33		 je	 SHORT $LN3@StringPath
  0001b	56		 push	 esi
  0001c	8b 75 0c	 mov	 esi, DWORD PTR _szDest$[ebp]
  0001f	2b de		 sub	 ebx, esi
$LL4@StringPath:

; 306  : 	{
; 307  : 		if (c_szSrc[i] == '\\')

  00021	8a 04 33	 mov	 al, BYTE PTR [ebx+esi]
  00024	3c 5c		 cmp	 al, 92			; 0000005cH
  00026	75 04		 jne	 SHORT $LN5@StringPath

; 308  : 			szDest[i] = '/';

  00028	b0 2f		 mov	 al, 47			; 0000002fH
  0002a	eb 09		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:

; 309  : 		else
; 310  : 			szDest[i] = korean_tolower(c_szSrc[i]);

  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00032	83 c4 04	 add	 esp, 4
$LN2@StringPath:

; 305  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  00035	88 06		 mov	 BYTE PTR [esi], al
  00037	47		 inc	 edi
  00038	8b 45 08	 mov	 eax, DWORD PTR _c_szSrc$[ebp]
  0003b	46		 inc	 esi
  0003c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0003f	90		 npad	 1
$LL13@StringPath:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL13@StringPath
  00047	2b c2		 sub	 eax, edx
  00049	3b f8		 cmp	 edi, eax
  0004b	72 d4		 jb	 SHORT $LL4@StringPath
  0004d	5e		 pop	 esi
$LN3@StringPath:
  0004e	5f		 pop	 edi

; 311  : 	}
; 312  : }

  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?StringPath@@YAXPBDPAD@Z ENDP				; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXPAD@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_pString$ = 8						; size = 4
?StringPath@@YAXPAD@Z PROC				; StringPath, COMDAT

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 294  : 	for (DWORD i = 0; i < strlen(pString); ++i)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _pString$[ebp]
  00009	33 f6		 xor	 esi, esi
  0000b	8b cf		 mov	 ecx, edi
  0000d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL12@StringPath:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL12@StringPath
  00017	2b ca		 sub	 ecx, edx
  00019	74 32		 je	 SHORT $LN3@StringPath
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@StringPath:

; 295  : 	{
; 296  : 		if (pString[i] == '\\')

  00020	8a 04 3e	 mov	 al, BYTE PTR [esi+edi]
  00023	3c 5c		 cmp	 al, 92			; 0000005cH
  00025	75 04		 jne	 SHORT $LN5@StringPath

; 297  : 			pString[i] = '/';

  00027	b0 2f		 mov	 al, 47			; 0000002fH
  00029	eb 09		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:

; 298  : 		else
; 299  : 			pString[i] = korean_tolower(pString[i]);

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00031	83 c4 04	 add	 esp, 4
$LN2@StringPath:

; 294  : 	for (DWORD i = 0; i < strlen(pString); ++i)

  00034	88 04 3e	 mov	 BYTE PTR [esi+edi], al
  00037	8b c7		 mov	 eax, edi
  00039	46		 inc	 esi
  0003a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0003d	0f 1f 00	 npad	 3
$LL13@StringPath:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL13@StringPath
  00047	2b c2		 sub	 eax, edx
  00049	3b f0		 cmp	 esi, eax
  0004b	72 d3		 jb	 SHORT $LL4@StringPath
$LN3@StringPath:
  0004d	5f		 pop	 edi

; 300  : 	}
; 301  : }

  0004e	5e		 pop	 esi
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?StringPath@@YAXPAD@Z ENDP				; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_rString$ = 8						; size = 4
?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; StringPath, COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 283  : 	for (DWORD i = 0; i < rString.length(); ++i)

  00004	8b 75 08	 mov	 esi, DWORD PTR _rString$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	39 7e 10	 cmp	 DWORD PTR [esi+16], edi
  0000d	76 4c		 jbe	 SHORT $LN3@StringPath
  0000f	53		 push	 ebx
$LL4@StringPath:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 2263 :         value_type* _Result = _Bx._Buf;

  00013	8b ce		 mov	 ecx, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  00015	83 f8 10	 cmp	 eax, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  00018	72 02		 jb	 SHORT $LN47@StringPath

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN47@StringPath:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 285  : 		if (rString[i] == '\\')

  0001c	80 3c 39 5c	 cmp	 BYTE PTR [ecx+edi], 92	; 0000005cH
  00020	75 0f		 jne	 SHORT $LN5@StringPath
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2263 :         value_type* _Result = _Bx._Buf;

  00022	8b ce		 mov	 ecx, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  00024	83 f8 10	 cmp	 eax, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  00027	72 02		 jb	 SHORT $LN44@StringPath

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  00029	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN44@StringPath:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 286  : 			rString[i] = '/';

  0002b	c6 04 39 2f	 mov	 BYTE PTR [ecx+edi], 47	; 0000002fH
  0002f	eb 23		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  00031	83 f8 10	 cmp	 eax, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  00034	72 06		 jb	 SHORT $LN45@StringPath

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  00036	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00038	03 cf		 add	 ecx, edi
  0003a	eb 07		 jmp	 SHORT $LN48@StringPath
$LN45@StringPath:

; 3809 :         return _Mypair._Myval2._Myptr()[_Off];

  0003c	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]

; 2263 :         value_type* _Result = _Bx._Buf;

  0003f	8b de		 mov	 ebx, esi

; 2264 :         if (_Large_string_engaged()) {

  00041	72 02		 jb	 SHORT $LN46@StringPath
$LN48@StringPath:

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  00043	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN46@StringPath:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 288  : 			rString[i] = korean_tolower(rString[i]);

  00045	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  0004e	83 c4 04	 add	 esp, 4
  00051	88 04 3b	 mov	 BYTE PTR [ebx+edi], al
$LN2@StringPath:

; 283  : 	for (DWORD i = 0; i < rString.length(); ++i)

  00054	47		 inc	 edi
  00055	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  00058	72 b6		 jb	 SHORT $LL4@StringPath
  0005a	5b		 pop	 ebx
$LN3@StringPath:
  0005b	5f		 pop	 edi

; 289  : 	}
; 290  : }

  0005c	5e		 pop	 esi
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?StringLowers@@YAXPAD@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_String$ = 8						; size = 4
?StringLowers@@YAXPAD@Z PROC				; StringLowers, COMDAT

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 275  : 	for (DWORD i = 0; i < strlen(String); ++i)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _String$[ebp]
  00009	33 f6		 xor	 esi, esi
  0000b	8b cf		 mov	 ecx, edi
  0000d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL10@StringLowe:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL10@StringLowe
  00017	2b ca		 sub	 ecx, edx
  00019	74 28		 je	 SHORT $LN3@StringLowe
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@StringLowe:

; 276  : 	{
; 277  : 		String[i] = korean_tolower(String[i]);

  00020	0f b6 04 3e	 movzx	 eax, BYTE PTR [esi+edi]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  0002a	88 04 3e	 mov	 BYTE PTR [esi+edi], al
  0002d	83 c4 04	 add	 esp, 4
  00030	8b c7		 mov	 eax, edi
  00032	46		 inc	 esi
  00033	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL11@StringLowe:

; 275  : 	for (DWORD i = 0; i < strlen(String); ++i)

  00036	8a 08		 mov	 cl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 c9		 test	 cl, cl
  0003b	75 f9		 jne	 SHORT $LL11@StringLowe
  0003d	2b c2		 sub	 eax, edx
  0003f	3b f0		 cmp	 esi, eax
  00041	72 dd		 jb	 SHORT $LL4@StringLowe
$LN3@StringLowe:
  00043	5f		 pop	 edi

; 278  : 	}
; 279  : }

  00044	5e		 pop	 esi
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?StringLowers@@YAXPAD@Z ENDP				; StringLowers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_buf$ = -136						; size = 129
__$ArrayPad$ = -4					; size = 4
_strFileName$ = 8					; size = 4
?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetWorkingFolder, COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _strFileName$[ebp]

; 267  : 	char buf[128+1];
; 268  : 	_getcwd(buf, 128);

  00017	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0001d	57		 push	 edi
  0001e	68 80 00 00 00	 push	 128			; 00000080H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __getcwd

; 269  : 	strcat(buf, "/");

  00029	8d bd 78 ff ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp]
  0002f	83 c4 08	 add	 esp, 8
  00032	4f		 dec	 edi
$LL9@GetWorking:
  00033	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00036	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00039	84 c0		 test	 al, al
  0003b	75 f6		 jne	 SHORT $LL9@GetWorking
  0003d	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KMDKNFGN@?1@
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00043	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 269  : 	strcat(buf, "/");

  00049	66 89 07	 mov	 WORD PTR [edi], ax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0004c	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  0004f	90		 npad	 1
$LL10@GetWorking:
  00050	8a 02		 mov	 al, BYTE PTR [edx]
  00052	42		 inc	 edx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL10@GetWorking
  00057	2b d1		 sub	 edx, ecx

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00059	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0005f	52		 push	 edx
  00060	50		 push	 eax
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 271  : }

  00068	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006b	5f		 pop	 edi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 271  : }

  0006c	33 cd		 xor	 ecx, ebp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006e	5e		 pop	 esi
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 271  : }

  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetWorkingFolder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_sz_Name$ = 8						; size = 4
_OnlyFileName$ = 12					; size = 4
?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetExceptionPathName, COMDAT

; 205  : 	GetOnlyFileName(sz_Name, OnlyFileName);

  00000	e9 00 00 00 00	 jmp	 ?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyFileName
?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetExceptionPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_pstrLocalFileName$GSCopy$1$ = -100			; size = 4
_c_szFullPathFileName$GSCopy$1$ = -96			; size = 4
$T2 = -89						; size = 1
_strLocalFileName$ = -88				; size = 24
_strGlobalPath$ = -64					; size = 24
_strFullPathFileName$ = -40				; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szGlobalPath$ = 8					; size = 4
_c_szFullPathFileName$ = 12				; size = 4
_pstrLocalFileName$ = 16				; size = 4
?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetLocalFileName, COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 5d 0c	 mov	 ebx, DWORD PTR _c_szFullPathFileName$[ebp]
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _pstrLocalFileName$[ebp]
  00031	8b 45 08	 mov	 eax, DWORD PTR _c_szGlobalPath$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00034	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 242  : {

  0003b	89 5d a0	 mov	 DWORD PTR _c_szFullPathFileName$GSCopy$1$[ebp], ebx
  0003e	89 4d 9c	 mov	 DWORD PTR _pstrLocalFileName$GSCopy$1$[ebp], ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00041	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00048	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004f	c6 45 a8 00	 mov	 BYTE PTR _strLocalFileName$[ebp], 0

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00053	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _strGlobalPath$[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 243  : 	std::string strLocalFileName;

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4562 :         _My_data._Mysize = 0;

  00061	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strGlobalPath$[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00068	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strGlobalPath$[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006f	c6 45 c0 00	 mov	 BYTE PTR _strGlobalPath$[ebp], 0

; 2313 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00073	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _strFullPathFileName$[ebp], 0

; 4562 :         _My_data._Mysize = 0;

  0007a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFullPathFileName$[ebp+16], 0

; 4563 : 
; 4564 : #ifdef __cpp_lib_constexpr_string
; 4565 :         if (_STD is_constant_evaluated()) {
; 4566 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4567 :             auto& _Al              = _Getal();
; 4568 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4569 :             _My_data._Bx._Ptr      = _New_ptr;
; 4570 : 
; 4571 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4572 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4573 :         } else
; 4574 : #endif // __cpp_lib_constexpr_string
; 4575 :         {
; 4576 :             _My_data._Myres = _BUF_SIZE - 1;

  00081	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFullPathFileName$[ebp+20], 15 ; 0000000fH

; 4577 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4578 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00088	c6 45 d8 00	 mov	 BYTE PTR _strFullPathFileName$[ebp], 0
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 247  : 	StringPath(c_szGlobalPath, strGlobalPath);

  0008c	8d 4d c0	 lea	 ecx, DWORD PTR _strGlobalPath$[ebp]
  0008f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00093	51		 push	 ecx
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath

; 248  : 	StringPath(c_szFullPathFileName, strFullPathFileName);

  0009a	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathFileName$[ebp]
  0009d	50		 push	 eax
  0009e	53		 push	 ebx
  0009f	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath

; 249  : 
; 250  : 	if (strGlobalPath.length() >= strFullPathFileName.length())

  000a4	8b 75 d0	 mov	 esi, DWORD PTR _strGlobalPath$[ebp+16]
  000a7	83 c4 10	 add	 esp, 16			; 00000010H
  000aa	8b 7d c0	 mov	 edi, DWORD PTR _strGlobalPath$[ebp]
  000ad	8b 5d d8	 mov	 ebx, DWORD PTR _strFullPathFileName$[ebp]
  000b0	3b 75 e8	 cmp	 esi, DWORD PTR _strFullPathFileName$[ebp+16]
  000b3	73 54		 jae	 SHORT $LN319@GetLocalFi

; 251  : 		return false;
; 252  : 
; 253  : 	DWORD length = min(strGlobalPath.length(), strFullPathFileName.length());
; 254  : 	for (DWORD dwPos = 0; dwPos < length; ++dwPos)

  000b5	33 d2		 xor	 edx, edx
  000b7	85 f6		 test	 esi, esi
  000b9	74 26		 je	 SHORT $LN3@GetLocalFi
  000bb	0f 1f 44 00 00	 npad	 5
$LL4@GetLocalFi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  000c0	83 7d d4 10	 cmp	 DWORD PTR _strGlobalPath$[ebp+20], 16 ; 00000010H

; 2263 :         value_type* _Result = _Bx._Buf;

  000c4	8d 45 c0	 lea	 eax, DWORD PTR _strGlobalPath$[ebp]
  000c7	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathFileName$[ebp]

; 2264 :         if (_Large_string_engaged()) {

  000ca	0f 43 c7	 cmovae	 eax, edi

; 2286 :         return _BUF_SIZE <= _Myres;

  000cd	83 7d ec 10	 cmp	 DWORD PTR _strFullPathFileName$[ebp+20], 16 ; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  000d1	0f 43 cb	 cmovae	 ecx, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 256  : 		if (strGlobalPath[dwPos] != strFullPathFileName[dwPos])

  000d4	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  000d7	3a 04 11	 cmp	 al, BYTE PTR [ecx+edx]
  000da	75 2d		 jne	 SHORT $LN319@GetLocalFi

; 251  : 		return false;
; 252  : 
; 253  : 	DWORD length = min(strGlobalPath.length(), strFullPathFileName.length());
; 254  : 	for (DWORD dwPos = 0; dwPos < length; ++dwPos)

  000dc	42		 inc	 edx
  000dd	3b d6		 cmp	 edx, esi
  000df	72 df		 jb	 SHORT $LL4@GetLocalFi
$LN3@GetLocalFi:

; 257  : 			return false;
; 258  : 	}
; 259  : 
; 260  : 	*pstrLocalFileName = &c_szFullPathFileName[length];

  000e1	03 75 a0	 add	 esi, DWORD PTR _c_szFullPathFileName$GSCopy$1$[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000e4	8b d6		 mov	 edx, esi
  000e6	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL324@GetLocalFi:
  000f0	8a 02		 mov	 al, BYTE PTR [edx]
  000f2	42		 inc	 edx
  000f3	84 c0		 test	 al, al
  000f5	75 f9		 jne	 SHORT $LL324@GetLocalFi
  000f7	2b d1		 sub	 edx, ecx

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000f9	8b 4d 9c	 mov	 ecx, DWORD PTR _pstrLocalFileName$GSCopy$1$[ebp]
  000fc	52		 push	 edx
  000fd	56		 push	 esi
  000fe	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 262  : 	return true;

  00103	c6 45 a7 01	 mov	 BYTE PTR $T2[ebp], 1
  00107	eb 04		 jmp	 SHORT $LN14@GetLocalFi
$LN319@GetLocalFi:
  00109	c6 45 a7 00	 mov	 BYTE PTR $T2[ebp], 0
$LN14@GetLocalFi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0010d	8b 45 ec	 mov	 eax, DWORD PTR _strFullPathFileName$[ebp+20]
  00110	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00113	72 27		 jb	 SHORT $LN249@GetLocalFi

; 4585 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4586 :             auto& _Al          = _Getal();
; 4587 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00115	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00118	8b c3		 mov	 eax, ebx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0011a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00120	72 10		 jb	 SHORT $LN259@GetLocalFi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00122	8b 5b fc	 mov	 ebx, DWORD PTR [ebx-4]
  00125	83 c1 23	 add	 ecx, 35			; 00000023H
  00128	2b c3		 sub	 eax, ebx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00130	77 58		 ja	 SHORT $LN283@GetLocalFi
$LN259@GetLocalFi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00132	51		 push	 ecx
  00133	53		 push	 ebx
  00134	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00139	83 c4 08	 add	 esp, 8
$LN249@GetLocalFi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2286 :         return _BUF_SIZE <= _Myres;

  0013c	8b 45 d4	 mov	 eax, DWORD PTR _strGlobalPath$[ebp+20]
  0013f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00142	72 27		 jb	 SHORT $LN303@GetLocalFi

; 4585 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4586 :             auto& _Al          = _Getal();
; 4587 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00144	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00147	8b c7		 mov	 eax, edi

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00149	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0014f	72 10		 jb	 SHORT $LN286@GetLocalFi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00151	8b 7f fc	 mov	 edi, DWORD PTR [edi-4]
  00154	83 c1 23	 add	 ecx, 35			; 00000023H
  00157	2b c7		 sub	 eax, edi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00159	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0015f	77 29		 ja	 SHORT $LN283@GetLocalFi
$LN286@GetLocalFi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00161	51		 push	 ecx
  00162	57		 push	 edi
  00163	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00168	83 c4 08	 add	 esp, 8
$LN303@GetLocalFi:
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 262  : 	return true;

  0016b	8a 45 a7	 mov	 al, BYTE PTR $T2[ebp]

; 263  : }

  0016e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00171	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00178	59		 pop	 ecx
  00179	5f		 pop	 edi
  0017a	5e		 pop	 esi
  0017b	5b		 pop	 ebx
  0017c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017f	33 cd		 xor	 ecx, ebp
  00181	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00186	8b e5		 mov	 esp, ebp
  00188	5d		 pop	 ebp
  00189	c3		 ret	 0
$LN283@GetLocalFi:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN326@GetLocalFi:
  0018f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR _strLocalFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR _strGlobalPath$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathFileName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetLocalFileName
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetOnlyPathName@@YAPBDPBD@Z
_TEXT	SEGMENT
_c_szName$ = 8						; size = 4
?GetOnlyPathName@@YAPBDPBD@Z PROC			; GetOnlyPathName, COMDAT

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 235  : 	static std::string strPathName;

  00003	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0000f	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
  00017	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0001d	7f 25		 jg	 SHORT $LN25@GetOnlyPat
$LN2@GetOnlyPat:

; 236  : 	GetOnlyPathName(c_szName, strPathName);

  0001f	68 00 00 00 00	 push	 OFFSET ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00024	ff 75 08	 push	 DWORD PTR _c_szName$[ebp]
  00027	e8 00 00 00 00	 call	 ?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyPathName
  0002c	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 2272 :         const value_type* _Result = _Bx._Buf;

  0002f	b8 00 00 00 00	 mov	 eax, OFFSET ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 2286 :         return _BUF_SIZE <= _Myres;

  00034	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  0003b	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 239  : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN25@GetOnlyPat:

; 235  : 	static std::string strPathName;

  00044	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
  00049	e8 00 00 00 00	 call	 __Init_thread_header
  0004e	83 c4 04	 add	 esp, 4
  00051	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA, -1
  00058	75 c5		 jne	 SHORT $LN2@GetOnlyPat
  0005a	68 00 00 00 00	 push	 OFFSET ??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ ; `GetOnlyPathName'::`2'::`dynamic atexit destructor for 'strPathName''
  0005f	e8 00 00 00 00	 call	 _atexit
  00064	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
  00069	e8 00 00 00 00	 call	 __Init_thread_footer
  0006e	83 c4 08	 add	 esp, 8
  00071	eb ac		 jmp	 SHORT $LN2@GetOnlyPat
?GetOnlyPathName@@YAPBDPBD@Z ENDP			; GetOnlyPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv209 = -4						; size = 4
_sz_Name$ = 8						; size = 4
_OnlyPathName$ = 12					; size = 4
?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetOnlyPathName, COMDAT

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 210  : 	int i;
; 211  : 	for (i = strlen(sz_Name) - 1; i >= 0; --i)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _sz_Name$[ebp]
  0000a	8b cf		 mov	 ecx, edi
  0000c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0000f	90		 npad	 1
$LL35@GetOnlyPat:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL35@GetOnlyPat
  00017	2b ca		 sub	 ecx, edx
  00019	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0001c	85 c0		 test	 eax, eax
  0001e	78 15		 js	 SHORT $LN3@GetOnlyPat
$LL4@GetOnlyPat:

; 212  : 	{
; 213  : 		if ('\\' == sz_Name[i] || '/' == sz_Name[i])

  00020	8a 0c 38	 mov	 cl, BYTE PTR [eax+edi]
  00023	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00026	74 0c		 je	 SHORT $LN28@GetOnlyPat
  00028	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  0002b	74 07		 je	 SHORT $LN28@GetOnlyPat

; 210  : 	int i;
; 211  : 	for (i = strlen(sz_Name) - 1; i >= 0; --i)

  0002d	83 e8 01	 sub	 eax, 1
  00030	79 ee		 jns	 SHORT $LL4@GetOnlyPat

; 212  : 	{
; 213  : 		if ('\\' == sz_Name[i] || '/' == sz_Name[i])

  00032	eb 01		 jmp	 SHORT $LN3@GetOnlyPat
$LN28@GetOnlyPat:

; 214  : 		{
; 215  : 			++i;

  00034	40		 inc	 eax
$LN3@GetOnlyPat:

; 223  : 	OnlyPathName.reserve(strlen(sz_Name));

  00035	33 c9		 xor	 ecx, ecx
  00037	83 f8 ff	 cmp	 eax, -1
  0003a	0f 45 c8	 cmovne	 ecx, eax
  0003d	89 4d fc	 mov	 DWORD PTR tv209[ebp], ecx
  00040	8b cf		 mov	 ecx, edi
  00042	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL36@GetOnlyPat:
  00045	8a 01		 mov	 al, BYTE PTR [ecx]
  00047	41		 inc	 ecx
  00048	84 c0		 test	 al, al
  0004a	75 f9		 jne	 SHORT $LL36@GetOnlyPat
  0004c	8b 5d 0c	 mov	 ebx, DWORD PTR _OnlyPathName$[ebp]
  0004f	2b ca		 sub	 ecx, edx
  00051	51		 push	 ecx
  00052	8b cb		 mov	 ecx, ebx
  00054	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00059	6a 00		 push	 0
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00060	8b cb		 mov	 ecx, ebx
  00062	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 223  : 	OnlyPathName.reserve(strlen(sz_Name));

  00067	33 f6		 xor	 esi, esi

; 226  : 	for (int j=0; j<i; ++j)

  00069	39 75 fc	 cmp	 DWORD PTR tv209[ebp], esi
  0006c	7e 14		 jle	 SHORT $LN6@GetOnlyPat
  0006e	66 90		 npad	 2
$LL7@GetOnlyPat:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3085 :         push_back(_Ch);

  00070	0f b6 04 3e	 movzx	 eax, BYTE PTR [esi+edi]
  00074	8b cb		 mov	 ecx, ebx
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 226  : 	for (int j=0; j<i; ++j)

  0007c	46		 inc	 esi
  0007d	3b 75 fc	 cmp	 esi, DWORD PTR tv209[ebp]
  00080	7c ee		 jl	 SHORT $LL7@GetOnlyPat
$LN6@GetOnlyPat:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3141 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00082	6a 00		 push	 0
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  00089	8b cb		 mov	 ecx, ebx
  0008b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 231  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetOnlyPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_sz_Name$ = 8						; size = 4
_strFileName$ = 12					; size = 4
?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetOnlyFileName, COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _strFileName$[ebp]
  00007	8b cb		 mov	 ecx, ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 179  : {

  00009	56		 push	 esi
  0000a	57		 push	 edi
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3230 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000b	6a 00		 push	 0
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00012	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 183  : 	for (i=strlen(sz_Name)-1; i>=0; --i)

  00017	8b 7d 08	 mov	 edi, DWORD PTR _sz_Name$[ebp]
  0001a	8b cf		 mov	 ecx, edi
  0001c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0001f	90		 npad	 1
$LL35@GetOnlyFil:
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	41		 inc	 ecx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL35@GetOnlyFil
  00027	2b ca		 sub	 ecx, edx
  00029	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0002c	85 c0		 test	 eax, eax
  0002e	78 15		 js	 SHORT $LN3@GetOnlyFil
$LL4@GetOnlyFil:

; 184  : 	{
; 185  : 		if ('\\' == sz_Name[i] || '/' == sz_Name[i])

  00030	8a 0c 38	 mov	 cl, BYTE PTR [eax+edi]
  00033	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00036	74 0c		 je	 SHORT $LN28@GetOnlyFil
  00038	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  0003b	74 07		 je	 SHORT $LN28@GetOnlyFil

; 183  : 	for (i=strlen(sz_Name)-1; i>=0; --i)

  0003d	83 e8 01	 sub	 eax, 1
  00040	79 ee		 jns	 SHORT $LL4@GetOnlyFil

; 184  : 	{
; 185  : 		if ('\\' == sz_Name[i] || '/' == sz_Name[i])

  00042	eb 01		 jmp	 SHORT $LN3@GetOnlyFil
$LN28@GetOnlyFil:

; 186  : 		{
; 187  : 			++i;

  00044	40		 inc	 eax
$LN3@GetOnlyFil:

; 195  : 	for (size_t j = i; j < strlen(sz_Name); ++j)

  00045	33 f6		 xor	 esi, esi
  00047	8b cf		 mov	 ecx, edi
  00049	83 f8 ff	 cmp	 eax, -1
  0004c	0f 45 f0	 cmovne	 esi, eax
  0004f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL36@GetOnlyFil:
  00052	8a 01		 mov	 al, BYTE PTR [ecx]
  00054	41		 inc	 ecx
  00055	84 c0		 test	 al, al
  00057	75 f9		 jne	 SHORT $LL36@GetOnlyFil
  00059	2b ca		 sub	 ecx, edx
  0005b	3b f1		 cmp	 esi, ecx
  0005d	73 20		 jae	 SHORT $LN6@GetOnlyFil
  0005f	90		 npad	 1
$LL7@GetOnlyFil:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3085 :         push_back(_Ch);

  00060	0f b6 04 3e	 movzx	 eax, BYTE PTR [esi+edi]
  00064	8b cb		 mov	 ecx, ebx
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 195  : 	for (size_t j = i; j < strlen(sz_Name); ++j)

  0006c	8b c7		 mov	 eax, edi
  0006e	46		 inc	 esi
  0006f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL37@GetOnlyFil:
  00072	8a 08		 mov	 cl, BYTE PTR [eax]
  00074	40		 inc	 eax
  00075	84 c9		 test	 cl, cl
  00077	75 f9		 jne	 SHORT $LL37@GetOnlyFil
  00079	2b c2		 sub	 eax, edx
  0007b	3b f0		 cmp	 esi, eax
  0007d	72 e1		 jb	 SHORT $LL7@GetOnlyFil
$LN6@GetOnlyFil:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3141 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007f	6a 00		 push	 0
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  00086	8b cb		 mov	 ecx, ebx
  00088	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp

; 201  : }

  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetOnlyFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetIndexingName@@YAXPADK@Z
_TEXT	SEGMENT
_szName$ = 8						; size = 4
_Index$ = 12						; size = 4
?GetIndexingName@@YAXPADK@Z PROC			; GetIndexingName, COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 175  : 	sprintf(szName + strlen(szName), "%u", Index);

  00003	8b 55 08	 mov	 edx, DWORD PTR _szName$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL3@GetIndexin:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@GetIndexin
  00017	ff 75 0c	 push	 DWORD PTR _Index$[ebp]
  0001a	2b c6		 sub	 eax, esi
  0001c	03 c2		 add	 eax, edx
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _sprintf
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	5e		 pop	 esi

; 176  : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetIndexingName@@YAXPADK@Z ENDP			; GetIndexingName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetOldIndexingName@@YAXPADH@Z
_TEXT	SEGMENT
_sign$ = -524						; size = 4
_dec$ = -520						; size = 4
_Temp$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_szName$ = 8						; size = 4
_Index$ = 12						; size = 4
?GetOldIndexingName@@YAXPADH@Z PROC			; GetOldIndexingName, COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _Index$[ebp]

; 164  : 	int dec, sign;
; 165  : 	char Temp[512];
; 166  : 
; 167  : 	strcpy(Temp, _ecvt(Index, 256, &dec, &sign));

  00016	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _sign$[ebp]
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8b 7d 08	 mov	 edi, DWORD PTR _szName$[ebp]
  00021	51		 push	 ecx
  00022	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR _dec$[ebp]
  00028	66 0f 6e c0	 movd	 xmm0, eax
  0002c	51		 push	 ecx
  0002d	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00031	68 00 01 00 00	 push	 256			; 00000100H
  00036	83 ec 08	 sub	 esp, 8
  00039	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 __ecvt
  00043	8d 95 fc fd ff
	ff		 lea	 edx, DWORD PTR _Temp$[ebp]
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	2b d0		 sub	 edx, eax
  0004e	66 90		 npad	 2
$LL3@GetOldInde:
  00050	8a 08		 mov	 cl, BYTE PTR [eax]
  00052	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00055	88 4c 02 ff	 mov	 BYTE PTR [edx+eax-1], cl
  00059	84 c9		 test	 cl, cl
  0005b	75 f3		 jne	 SHORT $LL3@GetOldInde

; 168  : 	Temp[dec] = '\0';

  0005d	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR _dec$[ebp]
  00063	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  00068	73 4c		 jae	 SHORT $LN4@GetOldInde

; 169  : 
; 170  : 	strcat(szName, Temp);

  0006a	8d 95 fc fd ff
	ff		 lea	 edx, DWORD PTR _Temp$[ebp]
  00070	88 8c 05 fc fd
	ff ff		 mov	 BYTE PTR _Temp$[ebp+eax], cl
  00077	8b f2		 mov	 esi, edx
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@GetOldInde:
  00080	8a 02		 mov	 al, BYTE PTR [edx]
  00082	42		 inc	 edx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL9@GetOldInde
  00087	2b d6		 sub	 edx, esi
  00089	4f		 dec	 edi
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL10@GetOldInde:
  00090	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00093	47		 inc	 edi
  00094	84 c0		 test	 al, al
  00096	75 f8		 jne	 SHORT $LL10@GetOldInde
  00098	8b ca		 mov	 ecx, edx
  0009a	c1 e9 02	 shr	 ecx, 2
  0009d	f3 a5		 rep movsd
  0009f	8b ca		 mov	 ecx, edx
  000a1	83 e1 03	 and	 ecx, 3
  000a4	f3 a4		 rep movsb

; 171  : }

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	5f		 pop	 edi
  000aa	33 cd		 xor	 ecx, ebp
  000ac	5e		 pop	 esi
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
$LN4@GetOldInde:

; 168  : 	Temp[dec] = '\0';

  000b6	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN11@GetOldInde:
  000bb	cc		 int	 3
?GetOldIndexingName@@YAXPADH@Z ENDP			; GetOldIndexingName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetFileNameParts@@YAXPBDHPAD11@Z
_TEXT	SEGMENT
tv528 = -4						; size = 4
_c_szFile$ = 8						; size = 4
tv524 = 12						; size = 4
_len$ = 12						; size = 4
_pszPath$ = 16						; size = 4
_pszName$ = 20						; size = 4
_pszExt$ = 24						; size = 4
?GetFileNameParts@@YAXPBDHPAD11@Z PROC			; GetFileNameParts, COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 101  : 	assert(pszPath!=NULL);
; 102  : 	assert(pszName!=NULL);
; 103  : 	assert(pszExt!=NULL);
; 104  : 
; 105  : 	int ext=len;

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp]
  00008	8b d3		 mov	 edx, ebx

; 106  : 	int pos=len;

  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi

; 107  : 	while (pos>0)

  0000d	8b 75 08	 mov	 esi, DWORD PTR _c_szFile$[ebp]
  00010	57		 push	 edi
  00011	85 db		 test	 ebx, ebx
  00013	7e 33		 jle	 SHORT $LN51@GetFileNam
$LL2@GetFileNam:

; 108  : 	{
; 109  : 		--pos;
; 110  : 		char c=c_szFile[pos];

  00015	8a 4c 30 ff	 mov	 cl, BYTE PTR [eax+esi-1]
  00019	48		 dec	 eax

; 111  : 		if (ext==len && c=='.')

  0001a	80 f9 2e	 cmp	 cl, 46			; 0000002eH
  0001d	74 10		 je	 SHORT $LN31@GetFileNam

; 114  : 			break;
; 115  : 		}
; 116  : 
; 117  : 		if (c=='/') break;

  0001f	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  00022	74 0d		 je	 SHORT $LN32@GetFileNam

; 118  : 		else if (c=='\\') break;

  00024	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00027	74 08		 je	 SHORT $LN32@GetFileNam

; 107  : 	while (pos>0)

  00029	85 c0		 test	 eax, eax
  0002b	7f e8		 jg	 SHORT $LL2@GetFileNam

; 127  : 		else if (c=='\\') break;

  0002d	eb 19		 jmp	 SHORT $LN51@GetFileNam
$LN31@GetFileNam:

; 112  : 		{
; 113  : 			ext=pos;

  0002f	8b d0		 mov	 edx, eax
$LN32@GetFileNam:

; 119  : 	}
; 120  : 
; 121  : 	while (pos>0)

  00031	85 c0		 test	 eax, eax
  00033	7e 15		 jle	 SHORT $LN52@GetFileNam
$LL4@GetFileNam:

; 122  : 	{
; 123  : 		--pos;
; 124  : 		char c=c_szFile[pos];

  00035	8a 4c 30 ff	 mov	 cl, BYTE PTR [eax+esi-1]
  00039	48		 dec	 eax

; 125  : 
; 126  : 		if (c=='/') break;

  0003a	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  0003d	74 09		 je	 SHORT $LN51@GetFileNam

; 127  : 		else if (c=='\\') break;

  0003f	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00042	74 04		 je	 SHORT $LN51@GetFileNam

; 119  : 	}
; 120  : 
; 121  : 	while (pos>0)

  00044	85 c0		 test	 eax, eax
  00046	7f ed		 jg	 SHORT $LL4@GetFileNam
$LN51@GetFileNam:

; 128  : 	}
; 129  : 
; 130  : 	if (pos)

  00048	85 c0		 test	 eax, eax
$LN52@GetFileNam:
  0004a	74 2f		 je	 SHORT $LN22@GetFileNam

; 131  : 	{
; 132  : 		++pos;

  0004c	40		 inc	 eax

; 133  : 		for (int i = 0; i < pos; ++i)

  0004d	85 c0		 test	 eax, eax
  0004f	7e 23		 jle	 SHORT $LN7@GetFileNam

; 131  : 	{
; 132  : 		++pos;

  00051	8b 7d 10	 mov	 edi, DWORD PTR _pszPath$[ebp]
  00054	8b d8		 mov	 ebx, eax
  00056	2b f7		 sub	 esi, edi
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL39@GetFileNam:

; 134  : 		{
; 135  : 			pszPath[i] = c_szFile[i];

  00060	8a 0c 3e	 mov	 cl, BYTE PTR [esi+edi]
  00063	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00066	88 4f ff	 mov	 BYTE PTR [edi-1], cl
  00069	83 eb 01	 sub	 ebx, 1
  0006c	75 f2		 jne	 SHORT $LL39@GetFileNam
  0006e	8b 75 08	 mov	 esi, DWORD PTR _c_szFile$[ebp]
  00071	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp]
$LN7@GetFileNam:

; 136  : 		}
; 137  : 		pszPath[pos] = '\0';

  00074	8b 4d 10	 mov	 ecx, DWORD PTR _pszPath$[ebp]
  00077	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN22@GetFileNam:

; 138  : 	}
; 139  : 
; 140  : 	if (ext>pos)

  0007b	3b d0		 cmp	 edx, eax
  0007d	7e 26		 jle	 SHORT $LN23@GetFileNam

; 141  : 	{
; 142  : 		int count = 0;
; 143  : 		for (int i = pos; i < ext; ++i)

  0007f	8b 7d 14	 mov	 edi, DWORD PTR _pszName$[ebp]
  00082	8b ca		 mov	 ecx, edx
  00084	2b f8		 sub	 edi, eax
  00086	2b c8		 sub	 ecx, eax
  00088	89 4d 0c	 mov	 DWORD PTR tv524[ebp], ecx
  0008b	0f 1f 44 00 00	 npad	 5
$LL11@GetFileNam:

; 144  : 		{
; 145  : 			pszName[count++] = c_szFile[i];

  00090	8a 0c 30	 mov	 cl, BYTE PTR [eax+esi]
  00093	88 0c 07	 mov	 BYTE PTR [edi+eax], cl
  00096	40		 inc	 eax
  00097	3b c2		 cmp	 eax, edx
  00099	7c f5		 jl	 SHORT $LL11@GetFileNam

; 146  : 		}
; 147  : 		pszName[count] = '\0';

  0009b	8b 45 0c	 mov	 eax, DWORD PTR tv524[ebp]
  0009e	8b 4d 14	 mov	 ecx, DWORD PTR _pszName$[ebp]
  000a1	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN23@GetFileNam:

; 148  : 	}
; 149  : 
; 150  : 	++ext;

  000a5	42		 inc	 edx

; 151  : 	if (len > ext)

  000a6	3b da		 cmp	 ebx, edx
  000a8	7e 1b		 jle	 SHORT $LN24@GetFileNam

; 152  : 	{
; 153  : 		int count = 0;
; 154  : 		for (int i = ext; i < len; ++i)

  000aa	8b 4d 18	 mov	 ecx, DWORD PTR _pszExt$[ebp]
  000ad	8b fb		 mov	 edi, ebx
  000af	2b ca		 sub	 ecx, edx
  000b1	2b fa		 sub	 edi, edx
$LL14@GetFileNam:

; 155  : 		{
; 156  : 			pszExt[count++] = c_szFile[i];

  000b3	8a 04 32	 mov	 al, BYTE PTR [edx+esi]
  000b6	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  000b9	42		 inc	 edx
  000ba	3b d3		 cmp	 edx, ebx
  000bc	7c f5		 jl	 SHORT $LL14@GetFileNam

; 157  : 		}
; 158  : 		pszExt[count] = '\0';

  000be	8b 45 18	 mov	 eax, DWORD PTR _pszExt$[ebp]
  000c1	c6 04 07 00	 mov	 BYTE PTR [edi+eax], 0
$LN24@GetFileNam:

; 159  : 	}
; 160  : }

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
?GetFileNameParts@@YAXPBDHPAD11@Z ENDP			; GetFileNameParts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_szFile$ = 8						; size = 4
_len$ = 12						; size = 4
_pstExt$ = 16						; size = 4
?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetFileExtension, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   : 	int ext = len;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _len$[ebp]

; 79   : 	int pos = len;

  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b f2		 mov	 esi, edx
  0000b	57		 push	 edi

; 80   : 	while (pos > 0)

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _c_szFile$[ebp]
  0000f	85 d2		 test	 edx, edx
  00011	7e 1c		 jle	 SHORT $LN12@GetFileExt
$LL2@GetFileExt:

; 81   : 	{
; 82   : 		--pos;
; 83   : 		char c=c_szFile[pos];

  00013	8a 4c 38 ff	 mov	 cl, BYTE PTR [eax+edi-1]
  00017	48		 dec	 eax

; 84   : 		if (ext==len && c=='.')

  00018	80 f9 2e	 cmp	 cl, 46			; 0000002eH
  0001b	74 10		 je	 SHORT $LN11@GetFileExt

; 87   : 			break;
; 88   : 		}
; 89   : 
; 90   : 		if (c=='/') break;

  0001d	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  00020	74 0d		 je	 SHORT $LN12@GetFileExt

; 91   : 		else if (c=='\\') break;

  00022	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00025	74 08		 je	 SHORT $LN12@GetFileExt

; 80   : 	while (pos > 0)

  00027	85 c0		 test	 eax, eax
  00029	7f e8		 jg	 SHORT $LL2@GetFileExt

; 91   : 		else if (c=='\\') break;

  0002b	eb 02		 jmp	 SHORT $LN12@GetFileExt
$LN11@GetFileExt:

; 85   : 		{
; 86   : 			ext=pos;

  0002d	8b f0		 mov	 esi, eax
$LN12@GetFileExt:

; 92   : 	}
; 93   : 
; 94   : 	++ext;

  0002f	46		 inc	 esi

; 95   : 	if (len>ext)

  00030	3b d6		 cmp	 edx, esi
  00032	7e 0f		 jle	 SHORT $LN8@GetFileExt

; 96   : 		pstExt->append(c_szFile+ext, len-ext);

  00034	8b 4d 10	 mov	 ecx, DWORD PTR _pstExt$[ebp]
  00037	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0003a	2b d6		 sub	 edx, esi
  0003c	52		 push	 edx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN8@GetFileExt:

; 97   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetFileExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z
_TEXT	SEGMENT
_c_szFile$ = 8						; size = 4
_len$ = 12						; size = 4
_pstPath$ = 16						; size = 4
_pstName$ = 20						; size = 4
_pstExt$ = 24						; size = 4
?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z PROC ; GetFilePathNameExtension, COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 	assert(pstPath != NULL);
; 31   : 	assert(pstName != NULL);
; 32   : 	assert(pstExt != NULL);
; 33   : 
; 34   : 	int ext = len;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  00006	53		 push	 ebx
  00007	8b d8		 mov	 ebx, eax
  00009	56		 push	 esi

; 35   : 	int pos = len;

  0000a	8b f0		 mov	 esi, eax
  0000c	57		 push	 edi

; 36   : 
; 37   : 	while (pos > 0)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR _c_szFile$[ebp]
  00010	85 c0		 test	 eax, eax
  00012	7e 2e		 jle	 SHORT $LN24@GetFilePat
$LL2@GetFilePat:

; 38   : 	{
; 39   : 		--pos;
; 40   : 		char c = c_szFile[pos];

  00014	8a 44 3e ff	 mov	 al, BYTE PTR [esi+edi-1]
  00018	4e		 dec	 esi

; 41   : 
; 42   : 		if (ext == len && c == '.')

  00019	3c 2e		 cmp	 al, 46			; 0000002eH
  0001b	74 0e		 je	 SHORT $LN17@GetFilePat

; 45   : 			break;
; 46   : 		}
; 47   : 
; 48   : 		if (c == '/' || c == '\\')

  0001d	3c 2f		 cmp	 al, 47			; 0000002fH
  0001f	74 0c		 je	 SHORT $LN18@GetFilePat
  00021	3c 5c		 cmp	 al, 92			; 0000005cH
  00023	74 08		 je	 SHORT $LN18@GetFilePat

; 36   : 
; 37   : 	while (pos > 0)

  00025	85 f6		 test	 esi, esi
  00027	7f eb		 jg	 SHORT $LL2@GetFilePat

; 56   : 
; 57   : 		if (c == '/' || c == '\\')

  00029	eb 17		 jmp	 SHORT $LN24@GetFilePat
$LN17@GetFilePat:

; 43   : 		{
; 44   : 			ext = pos;

  0002b	8b de		 mov	 ebx, esi
$LN18@GetFilePat:

; 49   : 			break;
; 50   : 	}
; 51   : 
; 52   : 	while (pos > 0)

  0002d	85 f6		 test	 esi, esi
  0002f	7e 13		 jle	 SHORT $LN25@GetFilePat
$LL4@GetFilePat:

; 53   : 	{
; 54   : 		--pos;
; 55   : 		char c = c_szFile[pos];

  00031	8a 44 3e ff	 mov	 al, BYTE PTR [esi+edi-1]
  00035	4e		 dec	 esi

; 56   : 
; 57   : 		if (c == '/' || c == '\\')

  00036	3c 2f		 cmp	 al, 47			; 0000002fH
  00038	74 08		 je	 SHORT $LN24@GetFilePat
  0003a	3c 5c		 cmp	 al, 92			; 0000005cH
  0003c	74 04		 je	 SHORT $LN24@GetFilePat

; 49   : 			break;
; 50   : 	}
; 51   : 
; 52   : 	while (pos > 0)

  0003e	85 f6		 test	 esi, esi
  00040	7f ef		 jg	 SHORT $LL4@GetFilePat
$LN24@GetFilePat:

; 58   : 			break;
; 59   : 	}
; 60   : 
; 61   : 	if (pos)

  00042	85 f6		 test	 esi, esi
$LN25@GetFilePat:
  00044	74 0b		 je	 SHORT $LN11@GetFilePat

; 62   : 	{
; 63   : 		++pos;
; 64   : 		pstPath->append(c_szFile, pos);

  00046	8b 4d 10	 mov	 ecx, DWORD PTR _pstPath$[ebp]
  00049	46		 inc	 esi
  0004a	56		 push	 esi
  0004b	57		 push	 edi
  0004c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN11@GetFilePat:

; 65   : 	}
; 66   : 
; 67   : 	if (ext > pos)

  00051	3b de		 cmp	 ebx, esi
  00053	7e 11		 jle	 SHORT $LN12@GetFilePat

; 68   : 		pstName->append(c_szFile + pos, ext - pos);

  00055	8b 4d 14	 mov	 ecx, DWORD PTR _pstName$[ebp]
  00058	8b c3		 mov	 eax, ebx
  0005a	2b c6		 sub	 eax, esi
  0005c	50		 push	 eax
  0005d	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN12@GetFilePat:

; 69   : 
; 70   : 	++ext;
; 71   : 
; 72   : 	if (len > ext)

  00066	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  00069	43		 inc	 ebx
  0006a	3b c3		 cmp	 eax, ebx
  0006c	7e 0f		 jle	 SHORT $LN13@GetFilePat

; 73   : 		pstExt->append(c_szFile + ext, len - ext);

  0006e	8b 4d 18	 mov	 ecx, DWORD PTR _pstExt$[ebp]
  00071	2b c3		 sub	 eax, ebx
  00073	50		 push	 eax
  00074	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN13@GetFilePat:

; 74   : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z ENDP ; GetFilePathNameExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\ALEXANDER\Desktop\Cliente\COPY_FISH_WON_NEW\Binario\Client\EterBase\Utils.cpp
;	COMDAT ?CreateTempFileName@@YAPBDPBD@Z
_TEXT	SEGMENT
_szTempPath$ = -268					; size = 261
__$ArrayPad$ = -4					; size = 4
_c_pszPrefix$ = 8					; size = 4
?CreateTempFileName@@YAPBDPBD@Z PROC			; CreateTempFileName, COMDAT

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _c_pszPrefix$[ebp]

; 15   : 	char szTempPath[MAX_PATH + 1];
; 16   : 	static char szTempName[MAX_PATH + 1];
; 17   : 
; 18   : 	GetTempPath(MAX_PATH, szTempPath);

  00017	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempPath$[ebp]
  0001d	50		 push	 eax
  0001e	68 04 01 00 00	 push	 260			; 00000104H
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempPathA@8

; 19   : 
; 20   : 	GetTempFileName(szTempPath,									// directory for temp files

  00029	33 c0		 xor	 eax, eax
  0002b	85 f6		 test	 esi, esi
  0002d	68 00 00 00 00	 push	 OFFSET ?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA
  00032	0f 95 c0	 setne	 al
  00035	85 f6		 test	 esi, esi
  00037	50		 push	 eax
  00038	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03NGHAOOHL@etb@
  0003d	0f 45 c6	 cmovne	 eax, esi
  00040	50		 push	 eax
  00041	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempPath$[ebp]
  00047	50		 push	 eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempFileNameA@16

; 21   : 					c_pszPrefix ? c_pszPrefix : "etb",		    // temp file name prefix
; 22   : 					c_pszPrefix ? true : false,					// create unique name
; 23   : 					szTempName);								// buffer for name
; 24   : 
; 25   : 	return (szTempName);
; 26   : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	b8 00 00 00 00	 mov	 eax, OFFSET ?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA
  00056	33 cd		 xor	 ecx, ebp
  00058	5e		 pop	 esi
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?CreateTempFileName@@YAPBDPBD@Z ENDP			; CreateTempFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
_TEXT	SEGMENT
__Hay_size$1$ = -264					; size = 4
__Matches$1 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of, COMDAT
; _this$ = ecx

; 4188 :         _In_z_ const _Elem* const _Ptr, const size_type _Off = 0) const noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00018	57		 push	 edi

; 404  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00019	8b fe		 mov	 edi, esi
  0001b	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  0001e	66 90		 npad	 2
$LL50@find_first:
  00020	8a 07		 mov	 al, BYTE PTR [edi]
  00022	47		 inc	 edi
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL50@find_first
  00027	2b fa		 sub	 edi, edx

; 2272 :         const value_type* _Result = _Bx._Buf;

  00029	8b d9		 mov	 ebx, ecx

; 2286 :         return _BUF_SIZE <= _Myres;

  0002b	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2273 :         if (_Large_string_engaged()) {

  0002f	72 02		 jb	 SHORT $LN6@find_first

; 2274 :             _Result = _Unfancy(_Bx._Ptr);

  00031	8b 19		 mov	 ebx, DWORD PTR [ecx]
$LN6@find_first:

; 4189 :         // look for one of [_Ptr, <null>) at or after _Off
; 4190 :         return static_cast<size_type>(_Traits_find_first_of<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00033	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00036	89 85 f8 fe ff
	ff		 mov	 DWORD PTR __Hay_size$1$[ebp], eax

; 761  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  0003c	85 ff		 test	 edi, edi
  0003e	74 55		 je	 SHORT $LN12@find_first
  00040	39 45 0c	 cmp	 DWORD PTR __Off$[ebp], eax
  00043	73 50		 jae	 SHORT $LN12@find_first
  00045	68 00 01 00 00	 push	 256			; 00000100H
  0004a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR __Matches$1[ebp]
  00050	6a 00		 push	 0
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _memset

; 762  :         _String_bitmap<typename _Traits::char_type> _Matches;
; 763  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00058	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 692  :         for (; _First != _Last; ++_First) {

  0005e	3b f1		 cmp	 esi, ecx
  00060	74 10		 je	 SHORT $LN22@find_first
$LL23@find_first:

; 693  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00062	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00065	46		 inc	 esi
  00066	c6 84 05 fc fe
	ff ff 01	 mov	 BYTE PTR __Matches$1[ebp+eax], 1
  0006e	3b f1		 cmp	 esi, ecx
  00070	75 f0		 jne	 SHORT $LL23@find_first
$LN22@find_first:

; 768  :         const auto _End = _Haystack + _Hay_size;

  00072	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR __Hay_size$1$[ebp]

; 769  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00078	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  0007b	03 d3		 add	 edx, ebx
  0007d	03 cb		 add	 ecx, ebx
  0007f	3b ca		 cmp	 ecx, edx
  00081	73 12		 jae	 SHORT $LN12@find_first
$LL13@find_first:

; 700  :         return _Matches[static_cast<unsigned char>(_Ch)];

  00083	0f b6 01	 movzx	 eax, BYTE PTR [ecx]

; 770  :             if (_Matches._Match(*_Match_try)) {

  00086	80 bc 05 fc fe
	ff ff 00	 cmp	 BYTE PTR __Matches$1[ebp+eax], 0
  0008e	75 1b		 jne	 SHORT $LN40@find_first

; 769  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00090	41		 inc	 ecx
  00091	3b ca		 cmp	 ecx, edx
  00093	72 ee		 jb	 SHORT $LL13@find_first
$LN12@find_first:
  00095	5f		 pop	 edi

; 4191 :             _Off, _Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
; 4192 :     }

  00096	5e		 pop	 esi
  00097	83 c8 ff	 or	 eax, -1
  0009a	5b		 pop	 ebx
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	33 cd		 xor	 ecx, ebp
  000a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@find_first:

; 771  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  000ab	2b cb		 sub	 ecx, ebx

; 4189 :         // look for one of [_Ptr, <null>) at or after _Off
; 4190 :         return static_cast<size_type>(_Traits_find_first_of<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  000ad	8b c1		 mov	 eax, ecx

; 4191 :             _Off, _Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
; 4192 :     }

  000af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	33 cd		 xor	 ecx, ebp
  000b6	5b		 pop	 ebx
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 08 00	 ret	 8
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Old_size$1$ = -8					; size = 4
$T1 = -4						; size = 4
__Old$1$ = 8						; size = 4
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 3954 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcap = 0) { // determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3955 :         if (_Mypair._Myval2._Mysize > _Newcap) { // requested capacity is not large enough for current size, ignore

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newcap$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00010	89 45 f8	 mov	 DWORD PTR __Old_size$1$[ebp], eax
  00013	3b c3		 cmp	 eax, ebx
  00015	0f 87 6a 01 00
	00		 ja	 $LN5@reserve

; 3956 :             return; // nothing to do
; 3957 :         }
; 3958 : 
; 3959 :         if (_Mypair._Myval2._Myres == _Newcap) { // we're already at the requested capacity

  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	89 55 08	 mov	 DWORD PTR __Old$1$[ebp], edx
  00021	3b d3		 cmp	 edx, ebx
  00023	0f 84 5c 01 00
	00		 je	 $LN5@reserve

; 3960 :             return; // nothing to do
; 3961 :         }
; 3962 : 
; 3963 :         if (_Mypair._Myval2._Myres < _Newcap) { // reallocate to grow

  00029	57		 push	 edi
  0002a	0f 83 0d 01 00
	00		 jae	 $LN4@reserve

; 3964 :             const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3965 :             _Reallocate_grow_by(

  00030	8b cb		 mov	 ecx, ebx
  00032	2b c8		 sub	 ecx, eax

; 4509 :         if (max_size() - _Old_size < _Size_increase) {

  00034	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00039	2b 45 f8	 sub	 eax, DWORD PTR __Old_size$1$[ebp]
  0003c	3b c1		 cmp	 eax, ecx
  0003e	0f 82 4e 01 00
	00		 jb	 $LN84@reserve

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00044	8b fb		 mov	 edi, ebx
  00046	83 cf 0f	 or	 edi, 15			; 0000000fH
  00049	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0004f	76 18		 jbe	 SHORT $LN15@reserve

; 4456 :             return _Max;

  00051	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00056	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	8b 55 08	 mov	 edx, DWORD PTR __Old$1$[ebp]
  00064	83 c4 04	 add	 esp, 4
  00067	eb 5b		 jmp	 SHORT $LN82@reserve
$LN15@reserve:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00069	8b ca		 mov	 ecx, edx
  0006b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00070	d1 e9		 shr	 ecx, 1
  00072	2b c1		 sub	 eax, ecx
  00074	3b d0		 cmp	 edx, eax
  00076	76 18		 jbe	 SHORT $LN16@reserve

; 4460 :             return _Max;

  00078	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0007d	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00088	8b 55 08	 mov	 edx, DWORD PTR __Old$1$[ebp]
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 34		 jmp	 SHORT $LN82@reserve
$LN16@reserve:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4517 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0e		 jb	 SHORT $LN23@reserve

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 55 08	 mov	 edx, DWORD PTR __Old$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 14		 jmp	 SHORT $LN82@reserve
$LN23@reserve:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000b0	85 c0		 test	 eax, eax
  000b2	74 0e		 je	 SHORT $LN24@reserve

; 79   :         return ::operator new(_Bytes);

  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	8b 55 08	 mov	 edx, DWORD PTR __Old$1$[ebp]

; 79   :         return ::operator new(_Bytes);

  000bd	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c0	eb 02		 jmp	 SHORT $LN82@reserve
$LN24@reserve:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000c2	33 c0		 xor	 eax, eax
$LN82@reserve:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4525 :         _My_data._Mysize      = _New_size;

  000c4	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4526 :         _My_data._Myres       = _New_capacity;
; 4527 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000c7	8b 5d f8	 mov	 ebx, DWORD PTR __Old_size$1$[ebp]
  000ca	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000cd	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000d0	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]

; 4528 :         if (_BUF_SIZE <= _Old_capacity) {

  000d3	51		 push	 ecx
  000d4	83 fa 10	 cmp	 edx, 16			; 00000010H
  000d7	72 49		 jb	 SHORT $LN9@reserve

; 4529 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000d9	8b 3e		 mov	 edi, DWORD PTR [esi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000db	57		 push	 edi
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _memcpy

; 4531 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e2	8b 4d 08	 mov	 ecx, DWORD PTR __Old$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4531 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e8	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ef	72 16		 jb	 SHORT $LN46@reserve

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f1	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000f4	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f7	2b fa		 sub	 edi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f9	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000fc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ff	0f 87 88 00 00
	00		 ja	 $LN72@reserve

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00105	8b fa		 mov	 edi, edx
$LN46@reserve:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00107	51		 push	 ecx
  00108	57		 push	 edi
  00109	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3970 :             _Mypair._Myval2._Mysize = _Old_size;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00111	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3970 :             _Mypair._Myval2._Mysize = _Old_size;

  00114	89 06		 mov	 DWORD PTR [esi], eax
  00116	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi

; 3975 :             // deallocate everything; switch back to "small" mode
; 3976 :             _Become_small();
; 3977 :             return;
; 3978 :         }
; 3979 : 
; 3980 :         // ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3981 :     }

  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 04 00	 ret	 4
$LN9@reserve:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00122	56		 push	 esi
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 _memcpy

; 3970 :             _Mypair._Myval2._Mysize = _Old_size;

  00129	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0012c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3970 :             _Mypair._Myval2._Mysize = _Old_size;

  0012f	89 06		 mov	 DWORD PTR [esi], eax
  00131	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi

; 3975 :             // deallocate everything; switch back to "small" mode
; 3976 :             _Become_small();
; 3977 :             return;
; 3978 :         }
; 3979 : 
; 3980 :         // ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3981 :     }

  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 04 00	 ret	 4
$LN4@reserve:

; 3971 :             return;
; 3972 :         }
; 3973 : 
; 3974 :         if (_BUF_SIZE > _Newcap && _Mypair._Myval2._Large_string_engaged()) {

  0013d	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00140	73 42		 jae	 SHORT $LN80@reserve

; 2286 :         return _BUF_SIZE <= _Myres;

  00142	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3971 :             return;
; 3972 :         }
; 3973 : 
; 3974 :         if (_BUF_SIZE > _Newcap && _Mypair._Myval2._Large_string_engaged()) {

  00145	72 3d		 jb	 SHORT $LN80@reserve

; 4548 :         const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00147	8b 3e		 mov	 edi, DWORD PTR [esi]

; 4549 :         auto& _Al          = _Getal();
; 4550 :         _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4551 :         _Traits::copy(_Mypair._Myval2._Bx._Buf, _Unfancy(_Ptr), _Mypair._Myval2._Mysize + 1);

  00149	40		 inc	 eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0014a	50		 push	 eax
  0014b	57		 push	 edi
  0014c	56		 push	 esi
  0014d	e8 00 00 00 00	 call	 _memcpy

; 4552 :         _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00152	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00155	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4552 :         _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00158	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00159	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0015f	72 12		 jb	 SHORT $LN75@reserve

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00161	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00164	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00167	2b fa		 sub	 edi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00169	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  0016c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0016f	77 1c		 ja	 SHORT $LN72@reserve

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00171	8b fa		 mov	 edi, edx
$LN75@reserve:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00173	51		 push	 ecx
  00174	57		 push	 edi
  00175	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0017a	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4553 :         _Mypair._Myval2._Myres = _BUF_SIZE - 1;

  0017d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
$LN80@reserve:
  00184	5f		 pop	 edi
$LN5@reserve:
  00185	5e		 pop	 esi

; 3975 :             // deallocate everything; switch back to "small" mode
; 3976 :             _Become_small();
; 3977 :             return;
; 3978 :         }
; 3979 : 
; 3980 :         // ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3981 :     }

  00186	5b		 pop	 ebx
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 04 00	 ret	 4
$LN72@reserve:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN84@reserve:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4510 :             _Xlen_string(); // result too long

  00192	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN81@reserve:
  00197	cc		 int	 3
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
tv504 = -12						; size = 4
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 3827 :     _CONSTEXPR20_CONTAINER void push_back(const _Elem _Ch) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 3828 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3829 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0000a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000d	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00010	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00013	3b d9		 cmp	 ebx, ecx
  00015	73 20		 jae	 SHORT $LN2@push_back

; 3830 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00017	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 2286 :         return _BUF_SIZE <= _Myres;

  0001d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  00020	72 02		 jb	 SHORT $LN5@push_back

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  00022	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@push_back:

; 3831 :             _Elem* const _Ptr       = _Mypair._Myval2._Myptr();
; 3832 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00024	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00027	88 04 1e	 mov	 BYTE PTR [esi+ebx], al

; 3833 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0002a	c6 44 1e 01 00	 mov	 BYTE PTR [esi+ebx+1], 0
  0002f	5e		 pop	 esi

; 3845 :     }

  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN2@push_back:

; 4509 :         if (max_size() - _Old_size < _Size_increase) {

  00037	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  0003c	8b c2		 mov	 eax, edx
  0003e	2b c3		 sub	 eax, ebx
  00040	83 f8 01	 cmp	 eax, 1
  00043	0f 82 fc 00 00
	00		 jb	 $LN63@push_back
  00049	57		 push	 edi

; 4511 :         }
; 4512 : 
; 4513 :         const size_type _New_size     = _Old_size + _Size_increase;

  0004a	8d 7b 01	 lea	 edi, DWORD PTR [ebx+1]

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004d	83 cf 0f	 or	 edi, 15			; 0000000fH
  00050	3b fa		 cmp	 edi, edx

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00052	76 15		 jbe	 SHORT $LN17@push_back

; 4456 :             return _Max;

  00054	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00059	8b fa		 mov	 edi, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00064	83 c4 04	 add	 esp, 4
  00067	eb 55		 jmp	 SHORT $LN60@push_back
$LN17@push_back:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00069	8b c1		 mov	 eax, ecx
  0006b	d1 e8		 shr	 eax, 1
  0006d	2b d0		 sub	 edx, eax
  0006f	3b ca		 cmp	 ecx, edx
  00071	76 18		 jbe	 SHORT $LN18@push_back

; 4460 :             return _Max;

  00073	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00078	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00083	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00086	83 c4 04	 add	 esp, 4
  00089	eb 33		 jmp	 SHORT $LN60@push_back
$LN18@push_back:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008b	03 c1		 add	 eax, ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  0008d	3b f8		 cmp	 edi, eax
  0008f	0f 42 f8	 cmovb	 edi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4517 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00092	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00095	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0009a	72 0e		 jb	 SHORT $LN25@push_back

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a2	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  000a5	83 c4 04	 add	 esp, 4
  000a8	eb 14		 jmp	 SHORT $LN60@push_back
$LN25@push_back:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000aa	85 c0		 test	 eax, eax
  000ac	74 0e		 je	 SHORT $LN26@push_back

; 79   :         return ::operator new(_Bytes);

  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000b4	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]

; 79   :         return ::operator new(_Bytes);

  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN60@push_back
$LN26@push_back:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN60@push_back:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4526 :         _My_data._Myres       = _New_capacity;

  000be	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c1	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  000c4	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 4527 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000c7	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  000ca	89 56 10	 mov	 DWORD PTR [esi+16], edx
  000cd	89 7d f4	 mov	 DWORD PTR tv504[ebp], edi

; 4528 :         if (_BUF_SIZE <= _Old_capacity) {

  000d0	53		 push	 ebx
  000d1	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000d4	72 4e		 jb	 SHORT $LN11@push_back

; 4529 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000d6	8b 3e		 mov	 edi, DWORD PTR [esi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d8	57		 push	 edi
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _memcpy

; 3841 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  000df	8b 4d f4	 mov	 ecx, DWORD PTR tv504[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3841 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  000e5	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  000e8	88 01		 mov	 BYTE PTR [ecx], al

; 3842 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  000ea	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 4531 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000ee	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  000f1	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f8	72 12		 jb	 SHORT $LN48@push_back

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fa	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000fd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00100	2b fa		 sub	 edi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00102	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00105	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00108	77 40		 ja	 SHORT $LN45@push_back

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010a	8b fa		 mov	 edi, edx
$LN48@push_back:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010c	51		 push	 ecx
  0010d	57		 push	 edi
  0010e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4535 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00113	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00116	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4535 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00119	89 06		 mov	 DWORD PTR [esi], eax
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi

; 3845 :     }

  0011d	5b		 pop	 ebx
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 04 00	 ret	 4
$LN11@push_back:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00124	56		 push	 esi
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 _memcpy

; 3841 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  0012b	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3841 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00131	88 07		 mov	 BYTE PTR [edi], al

; 4535 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00133	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 3842 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00136	c6 47 01 00	 mov	 BYTE PTR [edi+1], 0
  0013a	5f		 pop	 edi

; 4535 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0013b	89 06		 mov	 DWORD PTR [esi], eax
  0013d	5e		 pop	 esi

; 3845 :     }

  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 04 00	 ret	 4
$LN63@push_back:

; 4510 :             _Xlen_string(); // result too long

  00145	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN45@push_back:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN59@push_back:
  0014f	cc		 int	 3
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3210 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3211 :         // assign [_Ptr, _Ptr + _Count)
; 3212 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2263 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2286 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3213 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3214 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3215 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3216 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3225 :             },
; 3226 :             _Ptr);
; 3227 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4474 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4456 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4460 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4481 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 79   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4489 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4490 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3224 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4492 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4493 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3220 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3225 :             },
; 3226 :             _Ptr);
; 3227 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4475 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
tv540 = -12						; size = 4
__Old$1$ = -8						; size = 4
tv541 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
tv544 = 8						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
tv546 = 12						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3144 :     _CONSTEXPR20_CONTAINER basic_string& append(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3145 :         // append _Count * _Ch
; 3146 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3147 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 30		 ja	 SHORT $LN2@append

; 3148 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2263 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2286 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 3149 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3150 :             _Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  00031	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00034	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00038	53		 push	 ebx
  00039	50		 push	 eax
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3151 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00043	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3164 :     }

  00047	8b c7		 mov	 eax, edi
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN2@append:

; 4509 :         if (max_size() - _Old_size < _Size_increase) {

  00052	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00057	2b c1		 sub	 eax, ecx
  00059	3b c3		 cmp	 eax, ebx
  0005b	0f 82 2d 01 00
	00		 jb	 $LN68@append

; 4511 :         }
; 4512 : 
; 4513 :         const size_type _New_size     = _Old_size + _Size_increase;

  00061	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00064	83 ce 0f	 or	 esi, 15			; 0000000fH
  00067	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006d	76 18		 jbe	 SHORT $LN19@append

; 4456 :             return _Max;

  0006f	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00074	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00082	83 c4 04	 add	 esp, 4
  00085	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00087	8b c2		 mov	 eax, edx
  00089	d1 e8		 shr	 eax, 1
  0008b	89 45 08	 mov	 DWORD PTR tv544[ebp], eax
  0008e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00093	2b 45 08	 sub	 eax, DWORD PTR tv544[ebp]
  00096	3b d0		 cmp	 edx, eax
  00098	76 18		 jbe	 SHORT $LN20@append

; 4460 :             return _Max;

  0009a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ad	83 c4 04	 add	 esp, 4
  000b0	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b2	8b 45 08	 mov	 eax, DWORD PTR tv544[ebp]
  000b5	03 c2		 add	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000b7	3b f0		 cmp	 esi, eax
  000b9	0f 42 f0	 cmovb	 esi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4517 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000bc	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bf	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c4	72 0e		 jb	 SHORT $LN27@append

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cf	83 c4 04	 add	 esp, 4
  000d2	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000d4	85 c0		 test	 eax, eax
  000d6	74 0e		 je	 SHORT $LN28@append

; 79   :         return ::operator new(_Bytes);

  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000de	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 79   :         return ::operator new(_Bytes);

  000e1	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000e4	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000e6	33 c0		 xor	 eax, eax
$LN66@append:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4528 :         if (_BUF_SIZE <= _Old_capacity) {

  000e8	83 7d f8 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000ec	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ef	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f2	0f be 75 0c	 movsx	 esi, BYTE PTR __Ch$[ebp]
  000f6	89 75 0c	 mov	 DWORD PTR tv546[ebp], esi
  000f9	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000fc	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000ff	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  00102	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
  00105	89 75 fc	 mov	 DWORD PTR tv541[ebp], esi
  00108	89 55 f4	 mov	 DWORD PTR tv540[ebp], edx
  0010b	51		 push	 ecx
  0010c	72 56		 jb	 SHORT $LN13@append

; 4529 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  0010e	8b 37		 mov	 esi, DWORD PTR [edi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00110	56		 push	 esi
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 _memcpy

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00117	53		 push	 ebx
  00118	ff 75 0c	 push	 DWORD PTR tv546[ebp]
  0011b	ff 75 fc	 push	 DWORD PTR tv541[ebp]
  0011e	e8 00 00 00 00	 call	 _memset

; 3161 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00123	8b 45 f4	 mov	 eax, DWORD PTR tv540[ebp]

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00126	83 c4 18	 add	 esp, 24			; 00000018H

; 4531 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00129	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  0012c	41		 inc	 ecx

; 3161 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0012d	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00130	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00136	72 12		 jb	 SHORT $LN52@append

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00138	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0013b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0013e	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00140	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00143	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00146	77 4b		 ja	 SHORT $LN49@append

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00148	8b f2		 mov	 esi, edx
$LN52@append:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0014a	51		 push	 ecx
  0014b	56		 push	 esi
  0014c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3155 :         return _Reallocate_grow_by(

  00151	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00154	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3155 :         return _Reallocate_grow_by(

  00157	89 07		 mov	 DWORD PTR [edi], eax

; 3164 :     }

  00159	8b c7		 mov	 eax, edi
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 08 00	 ret	 8
$LN13@append:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00164	57		 push	 edi
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 _memcpy

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0016b	53		 push	 ebx
  0016c	ff 75 0c	 push	 DWORD PTR tv546[ebp]
  0016f	56		 push	 esi
  00170	e8 00 00 00 00	 call	 _memset

; 3161 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00175	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 438  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00178	83 c4 18	 add	 esp, 24			; 00000018H

; 3161 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0017b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3155 :         return _Reallocate_grow_by(

  0017e	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  00181	89 07		 mov	 DWORD PTR [edi], eax

; 3164 :     }

  00183	8b c7		 mov	 eax, edi
  00185	5f		 pop	 edi
  00186	5e		 pop	 esi
  00187	5b		 pop	 ebx
  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c2 08 00	 ret	 8
$LN68@append:

; 4510 :             _Xlen_string(); // result too long

  0018e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00193	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  00198	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv533 = -12						; size = 4
__Old$1$ = -8						; size = 4
tv534 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv537 = 12						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3118 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3119 :         // append [_Ptr, _Ptr + _Count)
; 3120 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3121 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3122 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2263 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2286 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2264 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2265 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3123 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3124 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 121  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3125 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3138 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4509 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN68@append

; 4511 :         }
; 4512 : 
; 4513 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4454 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4455 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4456 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4459 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv537[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv537[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4460 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4463 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv537[ebp]
  000b3	03 c2		 add	 eax, edx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4517 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 79   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 79   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN66@append:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4528 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv534[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv533[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4529 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv534[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3135 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv533[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4531 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00123	41		 inc	 ecx

; 3135 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3129 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 3129 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3138 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3135 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3135 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3129 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3138 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN68@append:

; 4510 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2968 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2286 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4584 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 797  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4588 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring

; 4599 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4600 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4601 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4602 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 2976 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2304 :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2340 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 315  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 316  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\visual studio 2019\visual studio 2019\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);
; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 842  :         __crt_va_end(_ArgList);
; 843  :         return _Result;
; 844  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
